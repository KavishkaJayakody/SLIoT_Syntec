
Bus_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f62c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800f740  0800f740  00010740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcac  0800fcac  00011344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fcac  0800fcac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcb4  0800fcb4  00011344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcb4  0800fcb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fcb8  0800fcb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800fcbc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  20000344  08010000  00011344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b8  08010000  000117b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d37  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af0  00000000  00000000  000270a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0002ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef4  00000000  00000000  0002bf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baeb  00000000  00000000  0002ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190c5  00000000  00000000  00048917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009174d  00000000  00000000  000619dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  000f316c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f9a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f724 	.word	0x0800f724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800f724 	.word	0x0800f724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	2200      	movs	r2, #0
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	f7ff fc9f 	bl	80009bc <__aeabi_dcmplt>
 800107e:	b928      	cbnz	r0, 800108c <__aeabi_d2lz+0x1c>
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001088:	f000 b80a 	b.w	80010a0 <__aeabi_d2ulz>
 800108c:	4620      	mov	r0, r4
 800108e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001092:	f000 f805 	bl	80010a0 <__aeabi_d2ulz>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	bd38      	pop	{r3, r4, r5, pc}
 800109e:	bf00      	nop

080010a0 <__aeabi_d2ulz>:
 80010a0:	b5d0      	push	{r4, r6, r7, lr}
 80010a2:	2200      	movs	r2, #0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <__aeabi_d2ulz+0x34>)
 80010a6:	4606      	mov	r6, r0
 80010a8:	460f      	mov	r7, r1
 80010aa:	f7ff fa15 	bl	80004d8 <__aeabi_dmul>
 80010ae:	f7ff fceb 	bl	8000a88 <__aeabi_d2uiz>
 80010b2:	4604      	mov	r4, r0
 80010b4:	f7ff f996 	bl	80003e4 <__aeabi_ui2d>
 80010b8:	2200      	movs	r2, #0
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <__aeabi_d2ulz+0x38>)
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f7ff f84e 	bl	8000168 <__aeabi_dsub>
 80010cc:	f7ff fcdc 	bl	8000a88 <__aeabi_d2uiz>
 80010d0:	4621      	mov	r1, r4
 80010d2:	bdd0      	pop	{r4, r6, r7, pc}
 80010d4:	3df00000 	.word	0x3df00000
 80010d8:	41f00000 	.word	0x41f00000

080010dc <nmeaToDecimal>:
char eastwest;
char posStatus;
float decimalLong;
float decimalLat;

float nmeaToDecimal(float coordinate) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    int degree = (int)(coordinate/100);
 80010e4:	4916      	ldr	r1, [pc, #88]	@ (8001140 <nmeaToDecimal+0x64>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff00 	bl	8000eec <__aeabi_fdiv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff98 	bl	8001024 <__aeabi_f2iz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	617b      	str	r3, [r7, #20]
    float minutes = coordinate - degree * 100;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2264      	movs	r2, #100	@ 0x64
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdeb 	bl	8000cdc <__aeabi_i2f>
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fd30 	bl	8000b70 <__aeabi_fsub>
 8001110:	4603      	mov	r3, r0
 8001112:	613b      	str	r3, [r7, #16]
    float decimalDegree = minutes / 60;
 8001114:	490b      	ldr	r1, [pc, #44]	@ (8001144 <nmeaToDecimal+0x68>)
 8001116:	6938      	ldr	r0, [r7, #16]
 8001118:	f7ff fee8 	bl	8000eec <__aeabi_fdiv>
 800111c:	4603      	mov	r3, r0
 800111e:	60fb      	str	r3, [r7, #12]
    float decimal = degree + decimalDegree;
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff fddb 	bl	8000cdc <__aeabi_i2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff fd22 	bl	8000b74 <__addsf3>
 8001130:	4603      	mov	r3, r0
 8001132:	60bb      	str	r3, [r7, #8]
    return decimal;
 8001134:	68bb      	ldr	r3, [r7, #8]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	42c80000 	.word	0x42c80000
 8001144:	42700000 	.word	0x42700000

08001148 <gpsParse>:

void gpsParse(char *strParse){
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
  if(!strncmp(strParse, "$GPGGA", 6)){
 8001150:	2206      	movs	r2, #6
 8001152:	4939      	ldr	r1, [pc, #228]	@ (8001238 <gpsParse+0xf0>)
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f00a fb22 	bl	800b79e <strncmp>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11c      	bne.n	800119a <gpsParse+0x52>
    sscanf(strParse, "$GPGGA,%f,%f,%c,%f,%c",
 8001160:	4b36      	ldr	r3, [pc, #216]	@ (800123c <gpsParse+0xf4>)
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <gpsParse+0xf8>)
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <gpsParse+0xfc>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4b36      	ldr	r3, [pc, #216]	@ (8001248 <gpsParse+0x100>)
 800116e:	4a37      	ldr	r2, [pc, #220]	@ (800124c <gpsParse+0x104>)
 8001170:	4937      	ldr	r1, [pc, #220]	@ (8001250 <gpsParse+0x108>)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f00a fa9a 	bl	800b6ac <siscanf>
      &utcTime, &nmeaLat, &northsouth, &nmeaLong, &eastwest);
    decimalLat = nmeaToDecimal(nmeaLat);
 8001178:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <gpsParse+0x100>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ffad 	bl	80010dc <nmeaToDecimal>
 8001182:	4603      	mov	r3, r0
 8001184:	4a33      	ldr	r2, [pc, #204]	@ (8001254 <gpsParse+0x10c>)
 8001186:	6013      	str	r3, [r2, #0]
    decimalLong = nmeaToDecimal(nmeaLong);
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <gpsParse+0xf8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ffa5 	bl	80010dc <nmeaToDecimal>
 8001192:	4603      	mov	r3, r0
 8001194:	4a30      	ldr	r2, [pc, #192]	@ (8001258 <gpsParse+0x110>)
 8001196:	6013      	str	r3, [r2, #0]
    sscanf(strParse, "$GPRMC,%f,%c,%f,%c,%f,%c",
      &utcTime, &posStatus, &nmeaLat, &northsouth, &nmeaLong, &eastwest);
    decimalLat = nmeaToDecimal(nmeaLat);
    decimalLong = nmeaToDecimal(nmeaLong);
  }
}
 8001198:	e04a      	b.n	8001230 <gpsParse+0xe8>
  else if (!strncmp(strParse, "$GPGLL", 6)){
 800119a:	2206      	movs	r2, #6
 800119c:	492f      	ldr	r1, [pc, #188]	@ (800125c <gpsParse+0x114>)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f00a fafd 	bl	800b79e <strncmp>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d11c      	bne.n	80011e4 <gpsParse+0x9c>
    sscanf(strParse, "$GPGLL,%f,%c,%f,%c,%f",
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <gpsParse+0x104>)
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <gpsParse+0xf4>)
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <gpsParse+0xf8>)
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <gpsParse+0xfc>)
 80011b8:	4a23      	ldr	r2, [pc, #140]	@ (8001248 <gpsParse+0x100>)
 80011ba:	4929      	ldr	r1, [pc, #164]	@ (8001260 <gpsParse+0x118>)
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f00a fa75 	bl	800b6ac <siscanf>
    decimalLat = nmeaToDecimal(nmeaLat);
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <gpsParse+0x100>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff88 	bl	80010dc <nmeaToDecimal>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <gpsParse+0x10c>)
 80011d0:	6013      	str	r3, [r2, #0]
    decimalLong = nmeaToDecimal(nmeaLong);
 80011d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <gpsParse+0xf8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff80 	bl	80010dc <nmeaToDecimal>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <gpsParse+0x110>)
 80011e0:	6013      	str	r3, [r2, #0]
}
 80011e2:	e025      	b.n	8001230 <gpsParse+0xe8>
  else if (!strncmp(strParse, "$GPRMC", 6)){
 80011e4:	2206      	movs	r2, #6
 80011e6:	491f      	ldr	r1, [pc, #124]	@ (8001264 <gpsParse+0x11c>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f00a fad8 	bl	800b79e <strncmp>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d11d      	bne.n	8001230 <gpsParse+0xe8>
    sscanf(strParse, "$GPRMC,%f,%c,%f,%c,%f,%c",
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <gpsParse+0xf4>)
 80011f6:	9303      	str	r3, [sp, #12]
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <gpsParse+0xf8>)
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <gpsParse+0xfc>)
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <gpsParse+0x100>)
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <gpsParse+0x120>)
 8001206:	4a11      	ldr	r2, [pc, #68]	@ (800124c <gpsParse+0x104>)
 8001208:	4918      	ldr	r1, [pc, #96]	@ (800126c <gpsParse+0x124>)
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f00a fa4e 	bl	800b6ac <siscanf>
    decimalLat = nmeaToDecimal(nmeaLat);
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <gpsParse+0x100>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff61 	bl	80010dc <nmeaToDecimal>
 800121a:	4603      	mov	r3, r0
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <gpsParse+0x10c>)
 800121e:	6013      	str	r3, [r2, #0]
    decimalLong = nmeaToDecimal(nmeaLong);
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <gpsParse+0xf8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff59 	bl	80010dc <nmeaToDecimal>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <gpsParse+0x110>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0800f740 	.word	0x0800f740
 800123c:	20000495 	.word	0x20000495
 8001240:	20000488 	.word	0x20000488
 8001244:	20000494 	.word	0x20000494
 8001248:	2000048c 	.word	0x2000048c
 800124c:	20000490 	.word	0x20000490
 8001250:	0800f748 	.word	0x0800f748
 8001254:	2000049c 	.word	0x2000049c
 8001258:	20000498 	.word	0x20000498
 800125c:	0800f760 	.word	0x0800f760
 8001260:	0800f768 	.word	0x0800f768
 8001264:	0800f780 	.word	0x0800f780
 8001268:	20000496 	.word	0x20000496
 800126c:	0800f788 	.word	0x0800f788

08001270 <gpsValidate>:

int gpsValidate(char *nmea){
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    char check[3];
    char calculatedString[3];
    int index;
    int calculatedCheck;

    index=0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
    calculatedCheck=0;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]

    // Ensure that the string starts with a "$"
    if(nmea[index] == '$')
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b24      	cmp	r3, #36	@ 0x24
 800128a:	d103      	bne.n	8001294 <gpsValidate+0x24>
        index++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmea[index] != 0) && (nmea[index] != '*') && (index < 75)){
 8001292:	e00c      	b.n	80012ae <gpsValidate+0x3e>
        return 0;
 8001294:	2300      	movs	r3, #0
 8001296:	e047      	b.n	8001328 <gpsValidate+0xb8>
        calculatedCheck ^= nmea[index];// calculate the checksum
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4053      	eors	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        index++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
    while((nmea[index] != 0) && (nmea[index] != '*') && (index < 75)){
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <gpsValidate+0x5c>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012c4:	d002      	beq.n	80012cc <gpsValidate+0x5c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b4a      	cmp	r3, #74	@ 0x4a
 80012ca:	dde5      	ble.n	8001298 <gpsValidate+0x28>
    }

    if(index >= 75){
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b4a      	cmp	r3, #74	@ 0x4a
 80012d0:	dd01      	ble.n	80012d6 <gpsValidate+0x66>
        return 0;// the string is too long so return an error
 80012d2:	2300      	movs	r3, #0
 80012d4:	e028      	b.n	8001328 <gpsValidate+0xb8>
    }

    if (nmea[index] == '*'){
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b2a      	cmp	r3, #42	@ 0x2a
 80012e0:	d119      	bne.n	8001316 <gpsValidate+0xa6>
        check[0] = nmea[index+1];    //put hex chars in check string
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	733b      	strb	r3, [r7, #12]
        check[1] = nmea[index+2];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3302      	adds	r3, #2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found therefore invalid data

    sprintf(calculatedString,"%02X",calculatedCheck);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	490a      	ldr	r1, [pc, #40]	@ (8001330 <gpsValidate+0xc0>)
 8001306:	4618      	mov	r0, r3
 8001308:	f00a f9ae 	bl	800b668 <siprintf>
    return((calculatedString[0] == check[0])
 800130c:	7a3a      	ldrb	r2, [r7, #8]
 800130e:	7b3b      	ldrb	r3, [r7, #12]
        && (calculatedString[1] == check[1])) ? 1 : 0 ;
 8001310:	429a      	cmp	r2, r3
 8001312:	d108      	bne.n	8001326 <gpsValidate+0xb6>
 8001314:	e001      	b.n	800131a <gpsValidate+0xaa>
        return 0;// no checksum separator found therefore invalid data
 8001316:	2300      	movs	r3, #0
 8001318:	e006      	b.n	8001328 <gpsValidate+0xb8>
        && (calculatedString[1] == check[1])) ? 1 : 0 ;
 800131a:	7a7a      	ldrb	r2, [r7, #9]
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	429a      	cmp	r2, r3
 8001320:	d101      	bne.n	8001326 <gpsValidate+0xb6>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <gpsValidate+0xb8>
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800f7a4 	.word	0x0800f7a4

08001334 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <HAL_UART_RxCpltCallback+0x70>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12a      	bne.n	800139c <HAL_UART_RxCpltCallback+0x68>
  {
    // if the character received is other than 'enter' ascii13, save the data in buffer
    if(rxData!='\n' && rxIndex < sizeof(rxBuffer))
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_UART_RxCpltCallback+0x74>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d010      	beq.n	8001370 <HAL_UART_RxCpltCallback+0x3c>
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_UART_RxCpltCallback+0x78>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0b      	blt.n	8001370 <HAL_UART_RxCpltCallback+0x3c>
    {
      rxBuffer[rxIndex++]=rxData;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_UART_RxCpltCallback+0x78>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	b2d1      	uxtb	r1, r2
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_UART_RxCpltCallback+0x78>)
 8001362:	7011      	strb	r1, [r2, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_UART_RxCpltCallback+0x74>)
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_UART_RxCpltCallback+0x7c>)
 800136c:	5499      	strb	r1, [r3, r2]
 800136e:	e010      	b.n	8001392 <HAL_UART_RxCpltCallback+0x5e>
    }
    else
    {
      if(gpsValidate((char*) rxBuffer)) gpsParse((char*) rxBuffer);
 8001370:	480f      	ldr	r0, [pc, #60]	@ (80013b0 <HAL_UART_RxCpltCallback+0x7c>)
 8001372:	f7ff ff7d 	bl	8001270 <gpsValidate>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_UART_RxCpltCallback+0x4e>
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <HAL_UART_RxCpltCallback+0x7c>)
 800137e:	f7ff fee3 	bl	8001148 <gpsParse>
      rxIndex=0;
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_UART_RxCpltCallback+0x78>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
      memset(rxBuffer,0,sizeof(rxBuffer));
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	2100      	movs	r1, #0
 800138c:	4808      	ldr	r0, [pc, #32]	@ (80013b0 <HAL_UART_RxCpltCallback+0x7c>)
 800138e:	f00a f9fe 	bl	800b78e <memset>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 8001392:	2201      	movs	r2, #1
 8001394:	4904      	ldr	r1, [pc, #16]	@ (80013a8 <HAL_UART_RxCpltCallback+0x74>)
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <HAL_UART_RxCpltCallback+0x80>)
 8001398:	f003 fcea 	bl	8004d70 <HAL_UART_Receive_IT>
  }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40013800 	.word	0x40013800
 80013a8:	20000485 	.word	0x20000485
 80013ac:	20000484 	.word	0x20000484
 80013b0:	20000404 	.word	0x20000404
 80013b4:	200003bc 	.word	0x200003bc

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b095      	sub	sp, #84	@ 0x54
 80013bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013be:	f000 fbef 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c2:	f000 f83d 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c6:	f000 f911 	bl	80015ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013ca:	f000 f8e5 	bl	8001598 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80013ce:	f008 fd53 	bl	8009e78 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80013d2:	f000 f891 	bl	80014f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1);
 80013d6:	2201      	movs	r2, #1
 80013d8:	4913      	ldr	r1, [pc, #76]	@ (8001428 <main+0x70>)
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <main+0x74>)
 80013dc:	f003 fcc8 	bl	8004d70 <HAL_UART_Receive_IT>
  KEYPAD_Init(0, gu8_KeyStatesArr);
 80013e0:	4913      	ldr	r1, [pc, #76]	@ (8001430 <main+0x78>)
 80013e2:	2000      	movs	r0, #0
 80013e4:	f006 fd92 	bl	8007f0c <KEYPAD_Init>
    /* USER CODE BEGIN 3 */
	    char TxBuffer_gps[64];  // Buffer for transmission
	    int TxBufferLen_gps;

	    // Convert floats to a formatted string (e.g., "12.34,56.78\n")
	    TxBufferLen_gps = snprintf(TxBuffer_gps, sizeof(TxBuffer_gps), "%.5d,%.5f\n", SysTicks /*decimalLong*/, decimalLat);
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <main+0x7c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461c      	mov	r4, r3
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <main+0x80>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f818 	bl	8000428 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	1d38      	adds	r0, r7, #4
 80013fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001402:	4623      	mov	r3, r4
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <main+0x84>)
 8001406:	2140      	movs	r1, #64	@ 0x40
 8001408:	f00a f8f8 	bl	800b5fc <sniprintf>
 800140c:	6478      	str	r0, [r7, #68]	@ 0x44

	    // Transmit via USB CDC
	    CDC_Transmit_FS((uint8_t*)TxBuffer_gps, TxBufferLen_gps);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001412:	4618      	mov	r0, r3
 8001414:	f008 fdee 	bl	8009ff4 <CDC_Transmit_FS>

	    //SysTick_CallBack();

	    Display_Handler();
 8001418:	f000 f958 	bl	80016cc <Display_Handler>
	    HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	@ 0x64
 800141e:	f000 fc21 	bl	8001c64 <HAL_Delay>
  {
 8001422:	bf00      	nop
 8001424:	e7e0      	b.n	80013e8 <main+0x30>
 8001426:	bf00      	nop
 8001428:	20000485 	.word	0x20000485
 800142c:	200003bc 	.word	0x200003bc
 8001430:	20000360 	.word	0x20000360
 8001434:	20000370 	.word	0x20000370
 8001438:	2000049c 	.word	0x2000049c
 800143c:	0800f7ac 	.word	0x0800f7ac

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144a:	2228      	movs	r2, #40	@ 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00a f99d 	bl	800b78e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	2301      	movs	r3, #1
 8001480:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800148c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fcdc 	bl	8003e54 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a2:	f000 f9a3 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ff48 	bl	8004358 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ce:	f000 f98d 	bl	80017ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014d2:	2310      	movs	r3, #16
 80014d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 f8c8 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014ea:	f000 f97f 	bl	80017ec <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	@ 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001516:	4a1f      	ldr	r2, [pc, #124]	@ (8001594 <MX_TIM1_Init+0x9c>)
 8001518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_TIM1_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001528:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800152c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_TIM1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001540:	4813      	ldr	r0, [pc, #76]	@ (8001590 <MX_TIM1_Init+0x98>)
 8001542:	f003 f94d 	bl	80047e0 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800154c:	f000 f94e 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <MX_TIM1_Init+0x98>)
 800155e:	f003 f98e 	bl	800487e <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001568:	f000 f940 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_TIM1_Init+0x98>)
 800157a:	f003 fb4b 	bl	8004c14 <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001584:	f000 f932 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000374 	.word	0x20000374
 8001594:	40012c00 	.word	0x40012c00

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <MX_USART1_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_USART1_UART_Init+0x4c>)
 80015d0:	f003 fb7e 	bl	8004cd0 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f000 f907 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200003bc 	.word	0x200003bc
 80015e8:	40013800 	.word	0x40013800

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <MX_GPIO_Init+0xa8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <MX_GPIO_Init+0xa8>)
 8001606:	f043 0320 	orr.w	r3, r3, #32
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <MX_GPIO_Init+0xa8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <MX_GPIO_Init+0xa8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <MX_GPIO_Init+0xa8>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_GPIO_Init+0xa8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_GPIO_Init+0xa8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <MX_GPIO_Init+0xa8>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_GPIO_Init+0xa8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col_3_Pin|Col_2_Pin|Col_1_Pin|Col_0_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f640 4103 	movw	r1, #3075	@ 0xc03
 800164e:	4812      	ldr	r0, [pc, #72]	@ (8001698 <MX_GPIO_Init+0xac>)
 8001650:	f000 fe87 	bl	8002362 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Row_3_Pin Row_2_Pin Row_1_Pin Row_0_Pin */
  GPIO_InitStruct.Pin = Row_3_Pin|Row_2_Pin|Row_1_Pin|Row_0_Pin;
 8001654:	23f0      	movs	r3, #240	@ 0xf0
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_GPIO_Init+0xb0>)
 8001668:	f000 fce0 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : Col_3_Pin Col_2_Pin Col_1_Pin Col_0_Pin */
  GPIO_InitStruct.Pin = Col_3_Pin|Col_2_Pin|Col_1_Pin|Col_0_Pin;
 800166c:	f640 4303 	movw	r3, #3075	@ 0xc03
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_GPIO_Init+0xac>)
 8001686:	f000 fcd1 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800168a:	bf00      	nop
 800168c:	3720      	adds	r7, #32
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	40010c00 	.word	0x40010c00
 800169c:	40010800 	.word	0x40010800

080016a0 <SysTick_CallBack>:

/* USER CODE BEGIN 4 */

void SysTick_CallBack(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    SysTicks++;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <SysTick_CallBack+0x28>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SysTick_CallBack+0x28>)
 80016ae:	701a      	strb	r2, [r3, #0]
    if(SysTicks == 5) // Each 5msec
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <SysTick_CallBack+0x28>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d105      	bne.n	80016c4 <SysTick_CallBack+0x24>
    {
    KEYPAD_Scan(0);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f006 fdcf 	bl	800825c <KEYPAD_Scan>
    SysTicks = 0;
 80016be:	4b02      	ldr	r3, [pc, #8]	@ (80016c8 <SysTick_CallBack+0x28>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    }
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000370 	.word	0x20000370

080016cc <Display_Handler>:

void Display_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
    if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 80016d0:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <Display_Handler+0x11c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d104      	bne.n	80016e2 <Display_Handler+0x16>
    {
    //LCD_Write_Char('1');
    int a;
    while(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED);
 80016d8:	bf00      	nop
 80016da:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <Display_Handler+0x11c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d0fb      	beq.n	80016da <Display_Handler+0xe>
    }
    if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 80016e2:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <Display_Handler+0x11c>)
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d104      	bne.n	80016f4 <Display_Handler+0x28>
    {
    //LCD_Write_Char('2');
    int a;
    while(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED);
 80016ea:	bf00      	nop
 80016ec:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <Display_Handler+0x11c>)
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d0fb      	beq.n	80016ec <Display_Handler+0x20>
    }
    if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED)
 80016f4:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <Display_Handler+0x11c>)
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <Display_Handler+0x3a>
    {
    //LCD_Write_Char('3');
    int a;
    while(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED);
 80016fc:	bf00      	nop
 80016fe:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <Display_Handler+0x11c>)
 8001700:	789b      	ldrb	r3, [r3, #2]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d0fb      	beq.n	80016fe <Display_Handler+0x32>
    }
    if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED)
 8001706:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <Display_Handler+0x11c>)
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d104      	bne.n	8001718 <Display_Handler+0x4c>
    {
    //LCD_Write_Char('4');
    int a;
    while(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED);
 800170e:	bf00      	nop
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <Display_Handler+0x11c>)
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d0fb      	beq.n	8001710 <Display_Handler+0x44>
    }
    if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED)
 8001718:	4b33      	ldr	r3, [pc, #204]	@ (80017e8 <Display_Handler+0x11c>)
 800171a:	795b      	ldrb	r3, [r3, #5]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d104      	bne.n	800172a <Display_Handler+0x5e>
    {
    //LCD_Write_Char('5');
    int a;
    while(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED);
 8001720:	bf00      	nop
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <Display_Handler+0x11c>)
 8001724:	795b      	ldrb	r3, [r3, #5]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d0fb      	beq.n	8001722 <Display_Handler+0x56>
    }
    if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED)
 800172a:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <Display_Handler+0x11c>)
 800172c:	799b      	ldrb	r3, [r3, #6]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d104      	bne.n	800173c <Display_Handler+0x70>
    {
    //LCD_Write_Char('6');
    int a;
    while(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED);
 8001732:	bf00      	nop
 8001734:	4b2c      	ldr	r3, [pc, #176]	@ (80017e8 <Display_Handler+0x11c>)
 8001736:	799b      	ldrb	r3, [r3, #6]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d0fb      	beq.n	8001734 <Display_Handler+0x68>
    }
    if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED)
 800173c:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <Display_Handler+0x11c>)
 800173e:	7a1b      	ldrb	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d104      	bne.n	800174e <Display_Handler+0x82>
    {
    //LCD_Write_Char('7');
    	int a;
    while(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED);
 8001744:	bf00      	nop
 8001746:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <Display_Handler+0x11c>)
 8001748:	7a1b      	ldrb	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d0fb      	beq.n	8001746 <Display_Handler+0x7a>
    }
    if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED)
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <Display_Handler+0x11c>)
 8001750:	7a5b      	ldrb	r3, [r3, #9]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d104      	bne.n	8001760 <Display_Handler+0x94>
    {
    //LCD_Write_Char('8');
    	int a;
    while(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED);
 8001756:	bf00      	nop
 8001758:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <Display_Handler+0x11c>)
 800175a:	7a5b      	ldrb	r3, [r3, #9]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0fb      	beq.n	8001758 <Display_Handler+0x8c>
    }
    if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED)
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <Display_Handler+0x11c>)
 8001762:	7a9b      	ldrb	r3, [r3, #10]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <Display_Handler+0xa6>
    {
    //LCD_Write_Char('9');
    	int a;
    while(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED);
 8001768:	bf00      	nop
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <Display_Handler+0x11c>)
 800176c:	7a9b      	ldrb	r3, [r3, #10]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d0fb      	beq.n	800176a <Display_Handler+0x9e>
    }
    if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED)
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <Display_Handler+0x11c>)
 8001774:	7b5b      	ldrb	r3, [r3, #13]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d104      	bne.n	8001784 <Display_Handler+0xb8>
    {
    //LCD_Write_Char('0');
    	int a;
    while(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED);
 800177a:	bf00      	nop
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <Display_Handler+0x11c>)
 800177e:	7b5b      	ldrb	r3, [r3, #13]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d0fb      	beq.n	800177c <Display_Handler+0xb0>
    }
    if(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED)
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <Display_Handler+0x11c>)
 8001786:	7b1b      	ldrb	r3, [r3, #12]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d104      	bne.n	8001796 <Display_Handler+0xca>
    {
    //LCD_Write_Char('*');
    	int a;
    while(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED);
 800178c:	bf00      	nop
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <Display_Handler+0x11c>)
 8001790:	7b1b      	ldrb	r3, [r3, #12]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d0fb      	beq.n	800178e <Display_Handler+0xc2>
    }
    if(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED)
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <Display_Handler+0x11c>)
 8001798:	7b9b      	ldrb	r3, [r3, #14]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d104      	bne.n	80017a8 <Display_Handler+0xdc>
    {
    //LCD_Write_Char('#');
    	int a;
    while(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED);
 800179e:	bf00      	nop
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <Display_Handler+0x11c>)
 80017a2:	7b9b      	ldrb	r3, [r3, #14]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d0fb      	beq.n	80017a0 <Display_Handler+0xd4>
    }
    if(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED)
 80017a8:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <Display_Handler+0x11c>)
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d104      	bne.n	80017ba <Display_Handler+0xee>
    {
    //LCD_SR();
    	int a;
    while(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED);
 80017b0:	bf00      	nop
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <Display_Handler+0x11c>)
 80017b4:	78db      	ldrb	r3, [r3, #3]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d0fb      	beq.n	80017b2 <Display_Handler+0xe6>
    }
    if(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <Display_Handler+0x11c>)
 80017bc:	79db      	ldrb	r3, [r3, #7]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <Display_Handler+0x100>
    {
    //LCD_SL();
    	int a;
    while(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED);
 80017c2:	bf00      	nop
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <Display_Handler+0x11c>)
 80017c6:	79db      	ldrb	r3, [r3, #7]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d0fb      	beq.n	80017c4 <Display_Handler+0xf8>
    }
    if(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED)
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <Display_Handler+0x11c>)
 80017ce:	7bdb      	ldrb	r3, [r3, #15]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d104      	bne.n	80017de <Display_Handler+0x112>
    {
    //LCD_Clear();
    	int a;
    while(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED);
 80017d4:	bf00      	nop
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <Display_Handler+0x11c>)
 80017d8:	7bdb      	ldrb	r3, [r3, #15]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d0fb      	beq.n	80017d6 <Display_Handler+0x10a>
    }
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000360 	.word	0x20000360

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <HAL_TIM_Base_MspInit+0x34>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_TIM_Base_MspInit+0x38>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_TIM_Base_MspInit+0x38>)
 8001874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001878:	6193      	str	r3, [r2, #24]
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_TIM_Base_MspInit+0x38>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a20      	ldr	r2, [pc, #128]	@ (8001934 <HAL_UART_MspInit+0x9c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d139      	bne.n	800192c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <HAL_UART_MspInit+0xa0>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4619      	mov	r1, r3
 80018fc:	480f      	ldr	r0, [pc, #60]	@ (800193c <HAL_UART_MspInit+0xa4>)
 80018fe:	f000 fb95 	bl	800202c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4809      	ldr	r0, [pc, #36]	@ (800193c <HAL_UART_MspInit+0xa4>)
 8001918:	f000 fb88 	bl	800202c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2025      	movs	r0, #37	@ 0x25
 8001922:	f000 fa9a 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001926:	2025      	movs	r0, #37	@ 0x25
 8001928:	f000 fab3 	bl	8001e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800192c:	bf00      	nop
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000
 800193c:	40010800 	.word	0x40010800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f94c 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 8001994:	f7ff fe84 	bl	80016a0 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019a2:	f000 fe12 	bl	80025ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001174 	.word	0x20001174

080019b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <USART1_IRQHandler+0x10>)
 80019b6:	f003 fa01 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200003bc 	.word	0x200003bc

080019c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_kill>:

int _kill(int pid, int sig)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019dc:	f009 ff3c 	bl	800b858 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2216      	movs	r2, #22
 80019e4:	601a      	str	r2, [r3, #0]
  return -1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_exit>:

void _exit (int status)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fa:	f04f 31ff 	mov.w	r1, #4294967295
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffe7 	bl	80019d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <_exit+0x12>

08001a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e00a      	b.n	8001a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1a:	f3af 8000 	nop.w
 8001a1e:	4601      	mov	r1, r0
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60ba      	str	r2, [r7, #8]
 8001a26:	b2ca      	uxtb	r2, r1
 8001a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbf0      	blt.n	8001a1a <_read+0x12>
  }

  return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e009      	b.n	8001a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	3301      	adds	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbf1      	blt.n	8001a54 <_write+0x12>
  }
  return len;
 8001a70:	687b      	ldr	r3, [r7, #4]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_close>:

int _close(int file)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <_isatty>:

int _isatty(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b085      	sub	sp, #20
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f009 fea4 	bl	800b858 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20005000 	.word	0x20005000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200004a0 	.word	0x200004a0
 8001b44:	200017b8 	.word	0x200017b8

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b54:	f7ff fff8 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	@ (8001b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b5a:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b70:	4c09      	ldr	r4, [pc, #36]	@ (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f009 fe71 	bl	800b864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff fc19 	bl	80013b8 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001b90:	0800fcbc 	.word	0x0800fcbc
  ldr r2, =_sbss
 8001b94:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001b98:	200017b8 	.word	0x200017b8

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f947 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fe1c 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f95f 	bl	8001eae <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f927 	bl	8001e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a03      	ldr	r2, [pc, #12]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	200004a4 	.word	0x200004a4

08001c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b02      	ldr	r3, [pc, #8]	@ (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	200004a4 	.word	0x200004a4

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffe0 	bl	8001c50 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <__NVIC_EnableIRQ+0x34>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f7ff ff90 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff2d 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff42 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff35 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d008      	beq.n	8001ef0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e020      	b.n	8001f32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d005      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2204      	movs	r2, #4
 8001f58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e051      	b.n	8002004 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 020e 	bic.w	r2, r2, #14
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_DMA_Abort_IT+0xd4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d029      	beq.n	8001fde <HAL_DMA_Abort_IT+0xa2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a21      	ldr	r2, [pc, #132]	@ (8002014 <HAL_DMA_Abort_IT+0xd8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d022      	beq.n	8001fda <HAL_DMA_Abort_IT+0x9e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_DMA_Abort_IT+0xdc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01a      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x98>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_DMA_Abort_IT+0xe0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d012      	beq.n	8001fce <HAL_DMA_Abort_IT+0x92>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_DMA_Abort_IT+0xe4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x8c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_DMA_Abort_IT+0xe8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <HAL_DMA_Abort_IT+0x86>
 8001fbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fc0:	e00e      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fc6:	e00b      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fcc:	e008      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd2:	e005      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd8:	e002      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fda:	2310      	movs	r3, #16
 8001fdc:	e000      	b.n	8001fe0 <HAL_DMA_Abort_IT+0xa4>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <HAL_DMA_Abort_IT+0xec>)
 8001fe2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
    } 
  }
  return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40020008 	.word	0x40020008
 8002014:	4002001c 	.word	0x4002001c
 8002018:	40020030 	.word	0x40020030
 800201c:	40020044 	.word	0x40020044
 8002020:	40020058 	.word	0x40020058
 8002024:	4002006c 	.word	0x4002006c
 8002028:	40020000 	.word	0x40020000

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b08b      	sub	sp, #44	@ 0x2c
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e169      	b.n	8002314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002040:	2201      	movs	r2, #1
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8158 	bne.w	800230e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a9a      	ldr	r2, [pc, #616]	@ (80022cc <HAL_GPIO_Init+0x2a0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d05e      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002068:	4a98      	ldr	r2, [pc, #608]	@ (80022cc <HAL_GPIO_Init+0x2a0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d875      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800206e:	4a98      	ldr	r2, [pc, #608]	@ (80022d0 <HAL_GPIO_Init+0x2a4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d058      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002074:	4a96      	ldr	r2, [pc, #600]	@ (80022d0 <HAL_GPIO_Init+0x2a4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d86f      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800207a:	4a96      	ldr	r2, [pc, #600]	@ (80022d4 <HAL_GPIO_Init+0x2a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d052      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002080:	4a94      	ldr	r2, [pc, #592]	@ (80022d4 <HAL_GPIO_Init+0x2a8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d869      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 8002086:	4a94      	ldr	r2, [pc, #592]	@ (80022d8 <HAL_GPIO_Init+0x2ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d04c      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 800208c:	4a92      	ldr	r2, [pc, #584]	@ (80022d8 <HAL_GPIO_Init+0x2ac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d863      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 8002092:	4a92      	ldr	r2, [pc, #584]	@ (80022dc <HAL_GPIO_Init+0x2b0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d046      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002098:	4a90      	ldr	r2, [pc, #576]	@ (80022dc <HAL_GPIO_Init+0x2b0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d85d      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800209e:	2b12      	cmp	r3, #18
 80020a0:	d82a      	bhi.n	80020f8 <HAL_GPIO_Init+0xcc>
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d859      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 80020a6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <HAL_GPIO_Init+0x80>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002101 	.word	0x08002101
 80020b4:	08002113 	.word	0x08002113
 80020b8:	08002155 	.word	0x08002155
 80020bc:	0800215b 	.word	0x0800215b
 80020c0:	0800215b 	.word	0x0800215b
 80020c4:	0800215b 	.word	0x0800215b
 80020c8:	0800215b 	.word	0x0800215b
 80020cc:	0800215b 	.word	0x0800215b
 80020d0:	0800215b 	.word	0x0800215b
 80020d4:	0800215b 	.word	0x0800215b
 80020d8:	0800215b 	.word	0x0800215b
 80020dc:	0800215b 	.word	0x0800215b
 80020e0:	0800215b 	.word	0x0800215b
 80020e4:	0800215b 	.word	0x0800215b
 80020e8:	0800215b 	.word	0x0800215b
 80020ec:	0800215b 	.word	0x0800215b
 80020f0:	08002109 	.word	0x08002109
 80020f4:	0800211d 	.word	0x0800211d
 80020f8:	4a79      	ldr	r2, [pc, #484]	@ (80022e0 <HAL_GPIO_Init+0x2b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020fe:	e02c      	b.n	800215a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e029      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e024      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	3308      	adds	r3, #8
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e01f      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	330c      	adds	r3, #12
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e01a      	b.n	800215c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800212e:	2304      	movs	r3, #4
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e013      	b.n	800215c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800213c:	2308      	movs	r3, #8
 800213e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	611a      	str	r2, [r3, #16]
          break;
 8002146:	e009      	b.n	800215c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	615a      	str	r2, [r3, #20]
          break;
 8002152:	e003      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x130>
          break;
 800215a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	@ 0xff
 8002160:	d801      	bhi.n	8002166 <HAL_GPIO_Init+0x13a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	e001      	b.n	800216a <HAL_GPIO_Init+0x13e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2bff      	cmp	r3, #255	@ 0xff
 8002170:	d802      	bhi.n	8002178 <HAL_GPIO_Init+0x14c>
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x152>
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	3b08      	subs	r3, #8
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	210f      	movs	r1, #15
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80b1 	beq.w	800230e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ac:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b4a      	ldr	r3, [pc, #296]	@ (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c4:	4a48      	ldr	r2, [pc, #288]	@ (80022e8 <HAL_GPIO_Init+0x2bc>)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a40      	ldr	r2, [pc, #256]	@ (80022ec <HAL_GPIO_Init+0x2c0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_GPIO_Init+0x1ec>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3f      	ldr	r2, [pc, #252]	@ (80022f0 <HAL_GPIO_Init+0x2c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00d      	beq.n	8002214 <HAL_GPIO_Init+0x1e8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3e      	ldr	r2, [pc, #248]	@ (80022f4 <HAL_GPIO_Init+0x2c8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <HAL_GPIO_Init+0x1e4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3d      	ldr	r2, [pc, #244]	@ (80022f8 <HAL_GPIO_Init+0x2cc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_GPIO_Init+0x1e0>
 8002208:	2303      	movs	r3, #3
 800220a:	e006      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 800220c:	2304      	movs	r3, #4
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002210:	2302      	movs	r3, #2
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002218:	2300      	movs	r3, #0
 800221a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222a:	492f      	ldr	r1, [pc, #188]	@ (80022e8 <HAL_GPIO_Init+0x2bc>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	492c      	ldr	r1, [pc, #176]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4928      	ldr	r1, [pc, #160]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800226c:	4b23      	ldr	r3, [pc, #140]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4922      	ldr	r1, [pc, #136]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	491e      	ldr	r1, [pc, #120]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4918      	ldr	r1, [pc, #96]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a2:	4b16      	ldr	r3, [pc, #88]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4914      	ldr	r1, [pc, #80]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022bc:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	490e      	ldr	r1, [pc, #56]	@ (80022fc <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e021      	b.n	800230e <HAL_GPIO_Init+0x2e2>
 80022ca:	bf00      	nop
 80022cc:	10320000 	.word	0x10320000
 80022d0:	10310000 	.word	0x10310000
 80022d4:	10220000 	.word	0x10220000
 80022d8:	10210000 	.word	0x10210000
 80022dc:	10120000 	.word	0x10120000
 80022e0:	10110000 	.word	0x10110000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40010800 	.word	0x40010800
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40011400 	.word	0x40011400
 80022fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_GPIO_Init+0x304>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	43db      	mvns	r3, r3
 8002308:	4909      	ldr	r1, [pc, #36]	@ (8002330 <HAL_GPIO_Init+0x304>)
 800230a:	4013      	ands	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	3301      	adds	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	f47f ae8e 	bne.w	8002040 <HAL_GPIO_Init+0x14>
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	372c      	adds	r7, #44	@ 0x2c
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]
 800236e:	4613      	mov	r3, r2
 8002370:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002378:	887a      	ldrh	r2, [r7, #2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800237e:	e003      	b.n	8002388 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	041a      	lsls	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0e8      	b.n	8002576 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f007 ff4f 	bl	800a25c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fa28 	bl	8005826 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e0:	f003 f9fe 	bl	80057e0 <USB_CoreInit>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0bf      	b.n	8002576 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fa2c 	bl	800585a <USB_SetCurrentMode>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b0      	b.n	8002576 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e03e      	b.n	8002498 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3311      	adds	r3, #17
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3310      	adds	r3, #16
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3313      	adds	r3, #19
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3320      	adds	r3, #32
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	3324      	adds	r3, #36	@ 0x24
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	3301      	adds	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3bb      	bcc.n	800241a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e044      	b.n	8002532 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	791b      	ldrb	r3, [r3, #4]
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	429a      	cmp	r2, r3
 800253a:	d3b5      	bcc.n	80024a8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002546:	f003 f994 	bl	8005872 <USB_DevInit>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e00c      	b.n	8002576 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f005 fc13 	bl	8007d9a <USB_DevDisconnect>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_Start+0x16>
 8002590:	2302      	movs	r3, #2
 8002592:	e016      	b.n	80025c2 <HAL_PCD_Start+0x44>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 f92a 	bl	80057fa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025a6:	2101      	movs	r1, #1
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f008 f8ca 	bl	800a742 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f005 fbe7 	bl	8007d86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b088      	sub	sp, #32
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 fbe9 	bl	8007dae <USB_ReadInterrupts>
 80025dc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fb1a 	bl	8002c22 <PCD_EP_ISR_Handler>

    return;
 80025ee:	e119      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d013      	beq.n	8002622 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260c:	b292      	uxth	r2, r2
 800260e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f007 fe9d 	bl	800a352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002618:	2100      	movs	r1, #0
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f905 	bl	800282a <HAL_PCD_SetAddress>

    return;
 8002620:	e100      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002644:	e0ee      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002658:	b29a      	uxth	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002662:	b292      	uxth	r2, r2
 8002664:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002668:	e0dc      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d027      	beq.n	80026c4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0204 	bic.w	r2, r2, #4
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0208 	bic.w	r2, r2, #8
 800269e:	b292      	uxth	r2, r2
 80026a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 fe8d 	bl	800a3c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026bc:	b292      	uxth	r2, r2
 80026be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026c2:	e0af      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8083 	beq.w	80027d6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	e010      	b.n	80026f8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	441a      	add	r2, r3
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	b292      	uxth	r2, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	3320      	adds	r3, #32
 80026ec:	443b      	add	r3, r7
 80026ee:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	3301      	adds	r3, #1
 80026f6:	77fb      	strb	r3, [r7, #31]
 80026f8:	7ffb      	ldrb	r3, [r7, #31]
 80026fa:	2b07      	cmp	r3, #7
 80026fc:	d9eb      	bls.n	80026d6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	b292      	uxth	r2, r2
 8002712:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800271e:	b29a      	uxth	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	b292      	uxth	r2, r2
 800272a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800272e:	bf00      	nop
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002738:	b29b      	uxth	r3, r3
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f6      	beq.n	8002730 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002754:	b292      	uxth	r2, r2
 8002756:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	77fb      	strb	r3, [r7, #31]
 800275e:	e00f      	b.n	8002780 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	4611      	mov	r1, r2
 8002768:	7ffa      	ldrb	r2, [r7, #31]
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	440a      	add	r2, r1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	3320      	adds	r3, #32
 8002772:	443b      	add	r3, r7
 8002774:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002778:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	3301      	adds	r3, #1
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	7ffb      	ldrb	r3, [r7, #31]
 8002782:	2b07      	cmp	r3, #7
 8002784:	d9ec      	bls.n	8002760 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0208 	orr.w	r2, r2, #8
 8002798:	b292      	uxth	r2, r2
 800279a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b0:	b292      	uxth	r2, r2
 80027b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0204 	orr.w	r2, r2, #4
 80027c8:	b292      	uxth	r2, r2
 80027ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f007 fdde 	bl	800a390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027d4:	e026      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00f      	beq.n	8002800 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027f2:	b292      	uxth	r2, r2
 80027f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f007 fd9c 	bl	800a336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027fe:	e011      	b.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800281c:	b292      	uxth	r2, r2
 800281e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002822:	bf00      	nop
  }
}
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_PCD_SetAddress+0x1a>
 8002840:	2302      	movs	r3, #2
 8002842:	e012      	b.n	800286a <HAL_PCD_SetAddress+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fa80 	bl	8007d60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	4608      	mov	r0, r1
 800287c:	4611      	mov	r1, r2
 800287e:	461a      	mov	r2, r3
 8002880:	4603      	mov	r3, r0
 8002882:	70fb      	strb	r3, [r7, #3]
 8002884:	460b      	mov	r3, r1
 8002886:	803b      	strh	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0e      	bge.n	80028b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0207 	and.w	r2, r3, #7
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	3310      	adds	r3, #16
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
 80028b4:	e00e      	b.n	80028d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028e0:	883a      	ldrh	r2, [r7, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	78ba      	ldrb	r2, [r7, #2]
 80028ea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028ec:	78bb      	ldrb	r3, [r7, #2]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d102      	bne.n	80028f8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_PCD_EP_Open+0x94>
 8002902:	2302      	movs	r3, #2
 8002904:	e00e      	b.n	8002924 <HAL_PCD_EP_Open+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	4618      	mov	r0, r3
 8002916:	f002 ffc9 	bl	80058ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002922:	7afb      	ldrb	r3, [r7, #11]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800293c:	2b00      	cmp	r3, #0
 800293e:	da0e      	bge.n	800295e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 0207 	and.w	r2, r3, #7
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	3310      	adds	r3, #16
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	705a      	strb	r2, [r3, #1]
 800295c:	e00e      	b.n	800297c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 0207 	and.w	r2, r3, #7
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_PCD_EP_Close+0x6a>
 8002992:	2302      	movs	r3, #2
 8002994:	e00e      	b.n	80029b4 <HAL_PCD_EP_Close+0x88>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fb41 	bl	800602c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	7afb      	ldrb	r3, [r7, #11]
 80029ce:	f003 0207 	and.w	r2, r3, #7
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6979      	ldr	r1, [r7, #20]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fcf8 	bl	8006404 <USB_EPStartXfer>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 0207 	and.w	r2, r3, #7
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002a40:	681b      	ldr	r3, [r3, #0]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 0207 	and.w	r2, r3, #7
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	3310      	adds	r3, #16
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2201      	movs	r2, #1
 8002a96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6979      	ldr	r1, [r7, #20]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fcaa 	bl	8006404 <USB_EPStartXfer>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	7912      	ldrb	r2, [r2, #4]
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e04c      	b.n	8002b72 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	da0e      	bge.n	8002afe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 0207 	and.w	r2, r3, #7
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	3310      	adds	r3, #16
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	705a      	strb	r2, [r3, #1]
 8002afc:	e00c      	b.n	8002b18 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_EP_SetStall+0x7e>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e01c      	b.n	8002b72 <HAL_PCD_EP_SetStall+0xb8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 f80d 	bl	8007b66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f005 f932 	bl	8007dcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	7912      	ldrb	r2, [r2, #4]
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da0e      	bge.n	8002bbe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0207 	and.w	r2, r3, #7
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	3310      	adds	r3, #16
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	705a      	strb	r2, [r3, #1]
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 0207 	and.w	r2, r3, #7
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_EP_ClrStall+0x82>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e00e      	b.n	8002c1a <HAL_PCD_EP_ClrStall+0xa0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 fffb 	bl	8007c06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b096      	sub	sp, #88	@ 0x58
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c2a:	e3bb      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002c46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8175 	bne.w	8002f3a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d14e      	bne.n	8002cfa <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6c:	81fb      	strh	r3, [r7, #14]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3310      	adds	r3, #16
 8002c84:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	441a      	add	r2, r3
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f007 fb1d 	bl	800a302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7b5b      	ldrb	r3, [r3, #13]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8368 	beq.w	80033a4 <PCD_EP_ISR_Handler+0x782>
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 8363 	bne.w	80033a4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7b5b      	ldrb	r3, [r3, #13]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	735a      	strb	r2, [r3, #13]
 8002cf8:	e354      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d00:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d034      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3306      	adds	r3, #6
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f005 f889 	bl	8007e6e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d68:	4013      	ands	r3, r2
 8002d6a:	823b      	strh	r3, [r7, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	8a3a      	ldrh	r2, [r7, #16]
 8002d72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f007 fa94 	bl	800a2a8 <HAL_PCD_SetupStageCallback>
 8002d80:	e310      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d82:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f280 830c 	bge.w	80033a4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d98:	4013      	ands	r3, r2
 8002d9a:	83fb      	strh	r3, [r7, #30]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	8bfa      	ldrh	r2, [r7, #30]
 8002da2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002da6:	b292      	uxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <PCD_EP_ISR_Handler+0x1f0>
 8002dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dec:	6959      	ldr	r1, [r3, #20]
 8002dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f005 f839 	bl	8007e6e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	441a      	add	r2, r3
 8002e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fa5d 	bl	800a2cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002e1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 82bd 	bne.w	80033a4 <PCD_EP_ISR_Handler+0x782>
 8002e2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e36:	f000 82b5 	beq.w	80033a4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e70:	d91d      	bls.n	8002eae <PCD_EP_ISR_Handler+0x28c>
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <PCD_EP_ISR_Handler+0x26a>
 8002e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	029b      	lsls	r3, r3, #10
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e026      	b.n	8002efc <PCD_EP_ISR_Handler+0x2da>
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <PCD_EP_ISR_Handler+0x2aa>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	801a      	strh	r2, [r3, #0]
 8002eca:	e017      	b.n	8002efc <PCD_EP_ISR_Handler+0x2da>
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <PCD_EP_ISR_Handler+0x2c4>
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	029b      	lsls	r3, r3, #10
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0c:	827b      	strh	r3, [r7, #18]
 8002f0e:	8a7b      	ldrh	r3, [r7, #18]
 8002f10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f14:	827b      	strh	r3, [r7, #18]
 8002f16:	8a7b      	ldrh	r3, [r7, #18]
 8002f18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f1c:	827b      	strh	r3, [r7, #18]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	8a7b      	ldrh	r3, [r7, #18]
 8002f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8013      	strh	r3, [r2, #0]
 8002f38:	e234      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f280 80fc 	bge.w	8003150 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f6e:	4013      	ands	r3, r2
 8002f70:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002f86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f8e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	7b1b      	ldrb	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d125      	bne.n	8002ff8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3306      	adds	r3, #6
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002fd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8092 	beq.w	8003106 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe8:	6959      	ldr	r1, [r3, #20]
 8002fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fec:	88da      	ldrh	r2, [r3, #6]
 8002fee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ff2:	f004 ff3c 	bl	8007e6e <USB_ReadPMA>
 8002ff6:	e086      	b.n	8003106 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d10a      	bne.n	8003016 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003004:	461a      	mov	r2, r3
 8003006:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f9d9 	bl	80033c0 <HAL_PCD_EP_DB_Receive>
 800300e:	4603      	mov	r3, r0
 8003010:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003014:	e077      	b.n	8003106 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800302c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003030:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800304a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800304e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d024      	beq.n	80030be <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	3302      	adds	r3, #2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800309c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80030a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02e      	beq.n	8003106 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ae:	6959      	ldr	r1, [r3, #20]
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	891a      	ldrh	r2, [r3, #8]
 80030b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030b8:	f004 fed9 	bl	8007e6e <USB_ReadPMA>
 80030bc:	e023      	b.n	8003106 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	3306      	adds	r3, #6
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80030ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	6959      	ldr	r1, [r3, #20]
 80030fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fc:	895a      	ldrh	r2, [r3, #10]
 80030fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003102:	f004 feb4 	bl	8007e6e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800310e:	441a      	add	r2, r3
 8003110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003112:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800311c:	441a      	add	r2, r3
 800311e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003120:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <PCD_EP_ISR_Handler+0x514>
 800312a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d206      	bcs.n	8003144 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f007 f8c5 	bl	800a2cc <HAL_PCD_DataOutStageCallback>
 8003142:	e005      	b.n	8003150 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800314a:	4618      	mov	r0, r3
 800314c:	f003 f95a 	bl	8006404 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003150:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8123 	beq.w	80033a4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800315e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	3310      	adds	r3, #16
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80031a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80031ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b0:	78db      	ldrb	r3, [r3, #3]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 80a2 	bne.w	80032fc <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80031b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c0:	7b1b      	ldrb	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8093 	beq.w	80032ee <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d046      	beq.n	8003262 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d126      	bne.n	800322a <PCD_EP_ISR_Handler+0x608>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	4413      	add	r3, r2
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	011a      	lsls	r2, r3, #4
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	b29a      	uxth	r2, r3
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800321e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003222:	b29a      	uxth	r2, r3
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	e061      	b.n	80032ee <PCD_EP_ISR_Handler+0x6cc>
 800322a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d15d      	bne.n	80032ee <PCD_EP_ISR_Handler+0x6cc>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003246:	4413      	add	r3, r2
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	011a      	lsls	r2, r3, #4
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	4413      	add	r3, r2
 8003254:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	2200      	movs	r2, #0
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	e045      	b.n	80032ee <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d126      	bne.n	80032be <PCD_EP_ISR_Handler+0x69c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	637b      	str	r3, [r7, #52]	@ 0x34
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003284:	4413      	add	r3, r2
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
 8003288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	011a      	lsls	r2, r3, #4
 800328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003290:	4413      	add	r3, r2
 8003292:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	e017      	b.n	80032ee <PCD_EP_ISR_Handler+0x6cc>
 80032be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d113      	bne.n	80032ee <PCD_EP_ISR_Handler+0x6cc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d4:	4413      	add	r3, r2
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	011a      	lsls	r2, r3, #4
 80032de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	2200      	movs	r2, #0
 80032ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f007 f804 	bl	800a302 <HAL_PCD_DataInStageCallback>
 80032fa:	e053      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d146      	bne.n	8003396 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	3302      	adds	r3, #2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003330:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800333c:	429a      	cmp	r2, r3
 800333e:	d907      	bls.n	8003350 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003348:	1ad2      	subs	r2, r2, r3
 800334a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	e002      	b.n	8003356 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f006 ffcc 	bl	800a302 <HAL_PCD_DataInStageCallback>
 800336a:	e01b      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800336c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003374:	441a      	add	r2, r3
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003382:	441a      	add	r2, r3
 8003384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003386:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800338e:	4618      	mov	r0, r3
 8003390:	f003 f838 	bl	8006404 <USB_EPStartXfer>
 8003394:	e006      	b.n	80033a4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003396:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800339a:	461a      	mov	r2, r3
 800339c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f91b 	bl	80035da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f6ff ac3b 	blt.w	8002c2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3758      	adds	r7, #88	@ 0x58
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d07e      	beq.n	80034d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	3302      	adds	r3, #2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003400:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	8b7b      	ldrh	r3, [r7, #26]
 8003408:	429a      	cmp	r2, r3
 800340a:	d306      	bcc.n	800341a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	8b7b      	ldrh	r3, [r7, #26]
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e002      	b.n	8003420 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d123      	bne.n	8003470 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800343e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003442:	833b      	strh	r3, [r7, #24]
 8003444:	8b3b      	ldrh	r3, [r7, #24]
 8003446:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800344a:	833b      	strh	r3, [r7, #24]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	8b3b      	ldrh	r3, [r7, #24]
 800345c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346c:	b29b      	uxth	r3, r3
 800346e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01f      	beq.n	80034ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003494:	82fb      	strh	r3, [r7, #22]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034ba:	8b7b      	ldrh	r3, [r7, #26]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8087 	beq.w	80035d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6959      	ldr	r1, [r3, #20]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	891a      	ldrh	r2, [r3, #8]
 80034ce:	8b7b      	ldrh	r3, [r7, #26]
 80034d0:	f004 fccd 	bl	8007e6e <USB_ReadPMA>
 80034d4:	e07c      	b.n	80035d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	3306      	adds	r3, #6
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	8b7b      	ldrh	r3, [r7, #26]
 8003506:	429a      	cmp	r2, r3
 8003508:	d306      	bcc.n	8003518 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	8b7b      	ldrh	r3, [r7, #26]
 8003510:	1ad2      	subs	r2, r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	619a      	str	r2, [r3, #24]
 8003516:	e002      	b.n	800351e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d123      	bne.n	800356e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003540:	83fb      	strh	r3, [r7, #30]
 8003542:	8bfb      	ldrh	r3, [r7, #30]
 8003544:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003548:	83fb      	strh	r3, [r7, #30]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	8bfb      	ldrh	r3, [r7, #30]
 800355a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800355e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356a:	b29b      	uxth	r3, r3
 800356c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11f      	bne.n	80035b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	83bb      	strh	r3, [r7, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	8bbb      	ldrh	r3, [r7, #28]
 80035a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035b8:	8b7b      	ldrh	r3, [r7, #26]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6959      	ldr	r1, [r3, #20]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	895a      	ldrh	r2, [r3, #10]
 80035ca:	8b7b      	ldrh	r3, [r7, #26]
 80035cc:	f004 fc4f 	bl	8007e6e <USB_ReadPMA>
    }
  }

  return count;
 80035d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b0a4      	sub	sp, #144	@ 0x90
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 81dd 	beq.w	80039ae <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	3302      	adds	r3, #2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003628:	429a      	cmp	r2, r3
 800362a:	d907      	bls.n	800363c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e002      	b.n	8003642 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 80b9 	bne.w	80037be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d126      	bne.n	80036a2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	4413      	add	r3, r2
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	011a      	lsls	r2, r3, #4
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	4413      	add	r3, r2
 8003676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800367a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003686:	b29a      	uxth	r2, r3
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369a:	b29a      	uxth	r2, r3
 800369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	e01a      	b.n	80036d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d116      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036be:	4413      	add	r3, r2
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	011a      	lsls	r2, r3, #4
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	4413      	add	r3, r2
 80036cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d126      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x15a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	011a      	lsls	r2, r3, #4
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003718:	b29a      	uxth	r2, r3
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800372c:	b29a      	uxth	r2, r3
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e017      	b.n	8003764 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d113      	bne.n	8003764 <HAL_PCD_EP_DB_Transmit+0x18a>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003744:	b29b      	uxth	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	4413      	add	r3, r2
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	011a      	lsls	r2, r3, #4
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	4413      	add	r3, r2
 8003758:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f006 fdc9 	bl	800a302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 82fc 	beq.w	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003796:	82fb      	strh	r3, [r7, #22]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	8013      	strh	r3, [r2, #0]
 80037bc:	e2da      	b.n	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d021      	beq.n	800380c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	441a      	add	r2, r3
 80037f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80037f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003808:	b29b      	uxth	r3, r3
 800380a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 82ae 	bne.w	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003820:	441a      	add	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800382e:	441a      	add	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	429a      	cmp	r2, r3
 800383e:	d30b      	bcc.n	8003858 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	621a      	str	r2, [r3, #32]
 8003856:	e017      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003860:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003870:	e00a      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d165      	bne.n	800395c <HAL_PCD_EP_DB_Transmit+0x382>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a4:	4413      	add	r3, r2
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	011a      	lsls	r2, r3, #4
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80038ce:	d91d      	bls.n	800390c <HAL_PCD_EP_DB_Transmit+0x332>
 80038d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_PCD_EP_DB_Transmit+0x310>
 80038e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e6:	3b01      	subs	r3, #1
 80038e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	029b      	lsls	r3, r3, #10
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003904:	b29a      	uxth	r2, r3
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	e044      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800390c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_PCD_EP_DB_Transmit+0x350>
 8003914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003922:	b29a      	uxth	r2, r3
 8003924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	e035      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800392a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_PCD_EP_DB_Transmit+0x36a>
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	3301      	adds	r3, #1
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29a      	uxth	r2, r3
 800394a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800394c:	b29b      	uxth	r3, r3
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	b29b      	uxth	r3, r3
 8003952:	4313      	orrs	r3, r2
 8003954:	b29a      	uxth	r2, r3
 8003956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e01c      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d118      	bne.n	8003996 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	647b      	str	r3, [r7, #68]	@ 0x44
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003972:	b29b      	uxth	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003978:	4413      	add	r3, r2
 800397a:	647b      	str	r3, [r7, #68]	@ 0x44
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	011a      	lsls	r2, r3, #4
 8003982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003984:	4413      	add	r3, r2
 8003986:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800398a:	643b      	str	r3, [r7, #64]	@ 0x40
 800398c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003990:	b29a      	uxth	r2, r3
 8003992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003994:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6959      	ldr	r1, [r3, #20]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	891a      	ldrh	r2, [r3, #8]
 80039a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f004 fa1b 	bl	8007de2 <USB_WritePMA>
 80039ac:	e1e2      	b.n	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	3306      	adds	r3, #6
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d307      	bcc.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	619a      	str	r2, [r3, #24]
 80039f4:	e002      	b.n	80039fc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f040 80c0 	bne.w	8003b86 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d126      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x482>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a22:	4413      	add	r3, r2
 8003a24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	011a      	lsls	r2, r3, #4
 8003a2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a2e:	4413      	add	r3, r2
 8003a30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a58:	801a      	strh	r2, [r3, #0]
 8003a5a:	e01a      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d116      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a78:	4413      	add	r3, r2
 8003a7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	011a      	lsls	r2, r3, #4
 8003a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a8e:	2200      	movs	r2, #0
 8003a90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d12b      	bne.n	8003af8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab4:	4413      	add	r3, r2
 8003ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	011a      	lsls	r2, r3, #4
 8003abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ac6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	e017      	b.n	8003b28 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d113      	bne.n	8003b28 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0e:	4413      	add	r3, r2
 8003b10:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	011a      	lsls	r2, r3, #4
 8003b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b20:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b24:	2200      	movs	r2, #0
 8003b26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f006 fbe7 	bl	800a302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 811a 	bne.w	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	8013      	strh	r3, [r2, #0]
 8003b84:	e0f6      	b.n	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d121      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	441a      	add	r2, r3
 8003bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	f040 80ca 	bne.w	8003d74 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003be8:	441a      	add	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d30b      	bcc.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	621a      	str	r2, [r3, #32]
 8003c1e:	e017      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003c28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c38:	e00a      	b.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2200      	movs	r2, #0
 8003c46:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d165      	bne.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x750>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c72:	4413      	add	r3, r2
 8003c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	011a      	lsls	r2, r3, #4
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7e:	4413      	add	r3, r2
 8003c80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c9c:	d91d      	bls.n	8003cda <HAL_PCD_EP_DB_Transmit+0x700>
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003cb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	029b      	lsls	r3, r3, #10
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e041      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x784>
 8003cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf4:	801a      	strh	r2, [r3, #0]
 8003cf6:	e032      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x784>
 8003cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_PCD_EP_DB_Transmit+0x738>
 8003d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d0e:	3301      	adds	r3, #1
 8003d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	e019      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x784>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d115      	bne.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x784>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	4413      	add	r3, r2
 8003d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6959      	ldr	r1, [r3, #20]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	895a      	ldrh	r2, [r3, #10]
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f004 f837 	bl	8007de2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d8e:	82bb      	strh	r3, [r7, #20]
 8003d90:	8abb      	ldrh	r3, [r7, #20]
 8003d92:	f083 0310 	eor.w	r3, r3, #16
 8003d96:	82bb      	strh	r3, [r7, #20]
 8003d98:	8abb      	ldrh	r3, [r7, #20]
 8003d9a:	f083 0320 	eor.w	r3, r3, #32
 8003d9e:	82bb      	strh	r3, [r7, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	441a      	add	r2, r3
 8003dae:	8abb      	ldrh	r3, [r7, #20]
 8003db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3790      	adds	r7, #144	@ 0x90
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b087      	sub	sp, #28
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	817b      	strh	r3, [r7, #10]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e009      	b.n	8003e18 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e04:	897a      	ldrh	r2, [r7, #10]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e18:	893b      	ldrh	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	80da      	strh	r2, [r3, #6]
 8003e2c:	e00b      	b.n	8003e46 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2201      	movs	r2, #1
 8003e32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e272      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8087 	beq.w	8003f82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e74:	4b92      	ldr	r3, [pc, #584]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d00c      	beq.n	8003e9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e80:	4b8f      	ldr	r3, [pc, #572]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d112      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x5e>
 8003e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9a:	4b89      	ldr	r3, [pc, #548]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d06c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x12c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d168      	bne.n	8003f80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e24c      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x76>
 8003ebc:	4b80      	ldr	r3, [pc, #512]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7f      	ldr	r2, [pc, #508]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e02e      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x98>
 8003ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7a      	ldr	r2, [pc, #488]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b78      	ldr	r3, [pc, #480]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a77      	ldr	r2, [pc, #476]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e01d      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0xbc>
 8003ef6:	4b72      	ldr	r3, [pc, #456]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a71      	ldr	r2, [pc, #452]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b6f      	ldr	r3, [pc, #444]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6e      	ldr	r2, [pc, #440]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0xd4>
 8003f10:	4b6b      	ldr	r3, [pc, #428]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6a      	ldr	r2, [pc, #424]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b68      	ldr	r3, [pc, #416]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a67      	ldr	r2, [pc, #412]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fe8e 	bl	8001c50 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fe8a 	bl	8001c50 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e200      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xe4>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd fe7a 	bl	8001c50 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd fe76 	bl	8001c50 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1ec      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	4b53      	ldr	r3, [pc, #332]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x10c>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d063      	beq.n	8004056 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f9a:	4b49      	ldr	r3, [pc, #292]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x18c>
 8003fa6:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d116      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb2:	4b43      	ldr	r3, [pc, #268]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_RCC_OscConfig+0x176>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e1c0      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fca:	4b3d      	ldr	r3, [pc, #244]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4939      	ldr	r1, [pc, #228]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	e03a      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d020      	beq.n	800402a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe8:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fd fe2f 	bl	8001c50 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff6:	f7fd fe2b 	bl	8001c50 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e1a1      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004008:	4b2d      	ldr	r3, [pc, #180]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4927      	ldr	r1, [pc, #156]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402a:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <HAL_RCC_OscConfig+0x270>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fd fe0e 	bl	8001c50 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004038:	f7fd fe0a 	bl	8001c50 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e180      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03a      	beq.n	80040d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800406a:	4b17      	ldr	r3, [pc, #92]	@ (80040c8 <HAL_RCC_OscConfig+0x274>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fd fdee 	bl	8001c50 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fd fdea 	bl	8001c50 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e160      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <HAL_RCC_OscConfig+0x26c>)
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004096:	2001      	movs	r0, #1
 8004098:	f000 face 	bl	8004638 <RCC_Delay>
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_RCC_OscConfig+0x274>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a4:	f7fd fdd4 	bl	8001c50 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040aa:	e00f      	b.n	80040cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ac:	f7fd fdd0 	bl	8001c50 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d908      	bls.n	80040cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e146      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
 80040be:	bf00      	nop
 80040c0:	40021000 	.word	0x40021000
 80040c4:	42420000 	.word	0x42420000
 80040c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	4b92      	ldr	r3, [pc, #584]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e9      	bne.n	80040ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a6 	beq.w	8004232 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	4b88      	ldr	r3, [pc, #544]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4a87      	ldr	r2, [pc, #540]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004100:	61d3      	str	r3, [r2, #28]
 8004102:	4b85      	ldr	r3, [pc, #532]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004112:	4b82      	ldr	r3, [pc, #520]	@ (800431c <HAL_RCC_OscConfig+0x4c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d118      	bne.n	8004150 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411e:	4b7f      	ldr	r3, [pc, #508]	@ (800431c <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7e      	ldr	r2, [pc, #504]	@ (800431c <HAL_RCC_OscConfig+0x4c8>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412a:	f7fd fd91 	bl	8001c50 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004132:	f7fd fd8d 	bl	8001c50 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b64      	cmp	r3, #100	@ 0x64
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e103      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004144:	4b75      	ldr	r3, [pc, #468]	@ (800431c <HAL_RCC_OscConfig+0x4c8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <HAL_RCC_OscConfig+0x312>
 8004158:	4b6f      	ldr	r3, [pc, #444]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4a6e      	ldr	r2, [pc, #440]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6213      	str	r3, [r2, #32]
 8004164:	e02d      	b.n	80041c2 <HAL_RCC_OscConfig+0x36e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x334>
 800416e:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a69      	ldr	r2, [pc, #420]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6213      	str	r3, [r2, #32]
 800417a:	4b67      	ldr	r3, [pc, #412]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a66      	ldr	r2, [pc, #408]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0304 	bic.w	r3, r3, #4
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	e01c      	b.n	80041c2 <HAL_RCC_OscConfig+0x36e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b05      	cmp	r3, #5
 800418e:	d10c      	bne.n	80041aa <HAL_RCC_OscConfig+0x356>
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4a60      	ldr	r2, [pc, #384]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6213      	str	r3, [r2, #32]
 800419c:	4b5e      	ldr	r3, [pc, #376]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	e00b      	b.n	80041c2 <HAL_RCC_OscConfig+0x36e>
 80041aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	6213      	str	r3, [r2, #32]
 80041b6:	4b58      	ldr	r3, [pc, #352]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a57      	ldr	r2, [pc, #348]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d015      	beq.n	80041f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ca:	f7fd fd41 	bl	8001c50 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fd fd3d 	bl	8001c50 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0b1      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ee      	beq.n	80041d2 <HAL_RCC_OscConfig+0x37e>
 80041f4:	e014      	b.n	8004220 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f6:	f7fd fd2b 	bl	8001c50 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd fd27 	bl	8001c50 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e09b      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004214:	4b40      	ldr	r3, [pc, #256]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ee      	bne.n	80041fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004220:	7dfb      	ldrb	r3, [r7, #23]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4b3c      	ldr	r3, [pc, #240]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4a3b      	ldr	r2, [pc, #236]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004230:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8087 	beq.w	800434a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800423c:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b08      	cmp	r3, #8
 8004246:	d061      	beq.n	800430c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d146      	bne.n	80042de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004250:	4b33      	ldr	r3, [pc, #204]	@ (8004320 <HAL_RCC_OscConfig+0x4cc>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fd fcfb 	bl	8001c50 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fd fcf7 	bl	8001c50 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e06d      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004270:	4b29      	ldr	r3, [pc, #164]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004284:	d108      	bne.n	8004298 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4921      	ldr	r1, [pc, #132]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004298:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a19      	ldr	r1, [r3, #32]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	430b      	orrs	r3, r1
 80042aa:	491b      	ldr	r1, [pc, #108]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <HAL_RCC_OscConfig+0x4cc>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fd fccb 	bl	8001c50 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042be:	f7fd fcc7 	bl	8001c50 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e03d      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x46a>
 80042dc:	e035      	b.n	800434a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <HAL_RCC_OscConfig+0x4cc>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fd fcb4 	bl	8001c50 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fcb0 	bl	8001c50 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e026      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fe:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x498>
 800430a:	e01e      	b.n	800434a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e019      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
 8004320:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_OscConfig+0x500>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	429a      	cmp	r2, r3
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000

08004358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0d0      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b6a      	ldr	r3, [pc, #424]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b67      	ldr	r3, [pc, #412]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0207 	bic.w	r2, r3, #7
 8004382:	4965      	ldr	r1, [pc, #404]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b63      	ldr	r3, [pc, #396]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b8      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b4:	4b59      	ldr	r3, [pc, #356]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a58      	ldr	r2, [pc, #352]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043cc:	4b53      	ldr	r3, [pc, #332]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a52      	ldr	r2, [pc, #328]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80043d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b50      	ldr	r3, [pc, #320]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	494d      	ldr	r1, [pc, #308]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d040      	beq.n	8004478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d115      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e073      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	4b3d      	ldr	r3, [pc, #244]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e06b      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b39      	ldr	r3, [pc, #228]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4936      	ldr	r1, [pc, #216]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004448:	f7fd fc02 	bl	8001c50 <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fd fbfe 	bl	8001c50 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e053      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b2d      	ldr	r3, [pc, #180]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004478:	4b27      	ldr	r3, [pc, #156]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d210      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 0207 	bic.w	r2, r3, #7
 800448e:	4922      	ldr	r1, [pc, #136]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b20      	ldr	r3, [pc, #128]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e032      	b.n	800450e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4916      	ldr	r1, [pc, #88]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044d2:	4b12      	ldr	r3, [pc, #72]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490e      	ldr	r1, [pc, #56]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044e6:	f000 f821 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	490a      	ldr	r1, [pc, #40]	@ (8004520 <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	4a09      	ldr	r2, [pc, #36]	@ (8004524 <HAL_RCC_ClockConfig+0x1cc>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004502:	4b09      	ldr	r3, [pc, #36]	@ (8004528 <HAL_RCC_ClockConfig+0x1d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fb60 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40022000 	.word	0x40022000
 800451c:	40021000 	.word	0x40021000
 8004520:	0800f80c 	.word	0x0800f80c
 8004524:	20000000 	.word	0x20000000
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004546:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b04      	cmp	r3, #4
 8004554:	d002      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x30>
 8004556:	2b08      	cmp	r3, #8
 8004558:	d003      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x36>
 800455a:	e027      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800455c:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800455e:	613b      	str	r3, [r7, #16]
      break;
 8004560:	e027      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	0c9b      	lsrs	r3, r3, #18
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	4a17      	ldr	r2, [pc, #92]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800456c:	5cd3      	ldrb	r3, [r2, r3]
 800456e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d010      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	0c5b      	lsrs	r3, r3, #17
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	4a11      	ldr	r2, [pc, #68]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004586:	5cd3      	ldrb	r3, [r2, r3]
 8004588:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0d      	ldr	r2, [pc, #52]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800458e:	fb03 f202 	mul.w	r2, r3, r2
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e004      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0c      	ldr	r2, [pc, #48]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	613b      	str	r3, [r7, #16]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ae:	613b      	str	r3, [r7, #16]
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	693b      	ldr	r3, [r7, #16]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	007a1200 	.word	0x007a1200
 80045c8:	0800f824 	.word	0x0800f824
 80045cc:	0800f834 	.word	0x0800f834
 80045d0:	003d0900 	.word	0x003d0900

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b02      	ldr	r3, [pc, #8]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff2 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	0800f81c 	.word	0x0800f81c

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffde 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	0adb      	lsrs	r3, r3, #11
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800f81c 	.word	0x0800f81c

08004638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <RCC_Delay+0x34>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0a      	ldr	r2, [pc, #40]	@ (8004670 <RCC_Delay+0x38>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	0a5b      	lsrs	r3, r3, #9
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004654:	bf00      	nop
  }
  while (Delay --);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	60fa      	str	r2, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <RCC_Delay+0x1c>
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	20000000 	.word	0x20000000
 8004670:	10624dd3 	.word	0x10624dd3

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d07d      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004694:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4a4b      	ldr	r2, [pc, #300]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	61d3      	str	r3, [r2, #28]
 80046ac:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b46      	ldr	r3, [pc, #280]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d118      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c8:	4b43      	ldr	r3, [pc, #268]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a42      	ldr	r2, [pc, #264]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7fd fabc 	bl	8001c50 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fd fab8 	bl	8001c50 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e06d      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b3a      	ldr	r3, [pc, #232]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046fa:	4b36      	ldr	r3, [pc, #216]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02e      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d027      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004718:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004722:	4b2e      	ldr	r3, [pc, #184]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004728:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800472e:	4a29      	ldr	r2, [pc, #164]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d014      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473e:	f7fd fa87 	bl	8001c50 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd fa83 	bl	8001c50 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e036      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ee      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004768:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4917      	ldr	r1, [pc, #92]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	4313      	orrs	r3, r2
 8004778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b14      	ldr	r3, [pc, #80]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800478a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004798:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	490b      	ldr	r1, [pc, #44]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b6:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40007000 	.word	0x40007000
 80047dc:	42420440 	.word	0x42420440

080047e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd f828 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 f8f4 	bl	8004a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_TIM_ConfigClockSource+0x1c>
 8004896:	2302      	movs	r3, #2
 8004898:	e0b4      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x186>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d2:	d03e      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xd4>
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d8:	f200 8087 	bhi.w	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e0:	f000 8086 	beq.w	80049f0 <HAL_TIM_ConfigClockSource+0x172>
 80048e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e8:	d87f      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 80048ea:	2b70      	cmp	r3, #112	@ 0x70
 80048ec:	d01a      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0xa6>
 80048ee:	2b70      	cmp	r3, #112	@ 0x70
 80048f0:	d87b      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 80048f2:	2b60      	cmp	r3, #96	@ 0x60
 80048f4:	d050      	beq.n	8004998 <HAL_TIM_ConfigClockSource+0x11a>
 80048f6:	2b60      	cmp	r3, #96	@ 0x60
 80048f8:	d877      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 80048fa:	2b50      	cmp	r3, #80	@ 0x50
 80048fc:	d03c      	beq.n	8004978 <HAL_TIM_ConfigClockSource+0xfa>
 80048fe:	2b50      	cmp	r3, #80	@ 0x50
 8004900:	d873      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 8004902:	2b40      	cmp	r3, #64	@ 0x40
 8004904:	d058      	beq.n	80049b8 <HAL_TIM_ConfigClockSource+0x13a>
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d86f      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 800490a:	2b30      	cmp	r3, #48	@ 0x30
 800490c:	d064      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x15a>
 800490e:	2b30      	cmp	r3, #48	@ 0x30
 8004910:	d86b      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 8004912:	2b20      	cmp	r3, #32
 8004914:	d060      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x15a>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d867      	bhi.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05c      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x15a>
 800491e:	2b10      	cmp	r3, #16
 8004920:	d05a      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x15a>
 8004922:	e062      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	f000 f94f 	bl	8004bd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004946:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	609a      	str	r2, [r3, #8]
      break;
 8004950:	e04f      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004962:	f000 f938 	bl	8004bd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004974:	609a      	str	r2, [r3, #8]
      break;
 8004976:	e03c      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004984:	461a      	mov	r2, r3
 8004986:	f000 f8af 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2150      	movs	r1, #80	@ 0x50
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f906 	bl	8004ba2 <TIM_ITRx_SetConfig>
      break;
 8004996:	e02c      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a4:	461a      	mov	r2, r3
 80049a6:	f000 f8cd 	bl	8004b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2160      	movs	r1, #96	@ 0x60
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f8f6 	bl	8004ba2 <TIM_ITRx_SetConfig>
      break;
 80049b6:	e01c      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c4:	461a      	mov	r2, r3
 80049c6:	f000 f88f 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2140      	movs	r1, #64	@ 0x40
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f8e6 	bl	8004ba2 <TIM_ITRx_SetConfig>
      break;
 80049d6:	e00c      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f000 f8dd 	bl	8004ba2 <TIM_ITRx_SetConfig>
      break;
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      break;
 80049ee:	e000      	b.n	80049f2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004adc <TIM_Base_SetConfig+0xd0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0x30>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x30>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae0 <TIM_Base_SetConfig+0xd4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x30>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <TIM_Base_SetConfig+0xd8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d108      	bne.n	8004a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <TIM_Base_SetConfig+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_Base_SetConfig+0x62>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d007      	beq.n	8004a6e <TIM_Base_SetConfig+0x62>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae0 <TIM_Base_SetConfig+0xd4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_Base_SetConfig+0x62>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ae4 <TIM_Base_SetConfig+0xd8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d108      	bne.n	8004a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8004adc <TIM_Base_SetConfig+0xd0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d103      	bne.n	8004ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f023 0201 	bic.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800

08004ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 030a 	bic.w	r3, r3, #10
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0210 	bic.w	r2, r3, #16
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	031b      	lsls	r3, r3, #12
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	621a      	str	r2, [r3, #32]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f043 0307 	orr.w	r3, r3, #7
 8004bc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b087      	sub	sp, #28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	021a      	lsls	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e046      	b.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c78:	d009      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a10      	ldr	r2, [pc, #64]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800

08004cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e042      	b.n	8004d68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fdce 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	@ 0x24
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fcd5 	bl	80056c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d112      	bne.n	8004db0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Receive_IT+0x26>
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00b      	b.n	8004db2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fab7 	bl	800531a <UART_Start_Receive_IT>
 8004dac:	4603      	mov	r3, r0
 8004dae:	e000      	b.n	8004db2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb93 	bl	8005546 <UART_Receive_IT>
      return;
 8004e20:	e25b      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80de 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80d1 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
 8004e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f043 0208 	orr.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 81f2 	beq.w	80052d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fb1e 	bl	8005546 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_UART_IRQHandler+0x17a>
 8004f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04f      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa28 	bl	800538c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d041      	beq.n	8004fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <HAL_UART_IRQHandler+0x3e0>)
 8004fa4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fc ffc6 	bl	8001f3c <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e00e      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f993 	bl	80052f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	e00a      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f98f 	bl	80052f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e006      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f98b 	bl	80052f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fe2:	e175      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	bf00      	nop
    return;
 8004fe6:	e173      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 814f 	bne.w	8005290 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8148 	beq.w	8005290 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8141 	beq.w	8005290 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80b6 	beq.w	80051a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8145 	beq.w	80052d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 813e 	bcs.w	80052d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b20      	cmp	r3, #32
 8005068:	f000 8088 	beq.w	800517c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005082:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005098:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1d9      	bne.n	800506c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e1      	bne.n	80050b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005118:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800511a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800511e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e3      	bne.n	80050f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800514a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800515e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005160:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800516c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005176:	4618      	mov	r0, r3
 8005178:	f7fc fea5 	bl	8001ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800518a:	b29b      	uxth	r3, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	b29b      	uxth	r3, r3
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8b6 	bl	8005304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005198:	e09c      	b.n	80052d4 <HAL_UART_IRQHandler+0x518>
 800519a:	bf00      	nop
 800519c:	08005451 	.word	0x08005451
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 808e 	beq.w	80052d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8089 	beq.w	80052d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	623b      	str	r3, [r7, #32]
   return(result);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3314      	adds	r3, #20
 800521e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005222:	633a      	str	r2, [r7, #48]	@ 0x30
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e3      	bne.n	80051fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60fb      	str	r3, [r7, #12]
   return(result);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0310 	bic.w	r3, r3, #16
 800525a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	617b      	str	r3, [r7, #20]
   return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e3      	bne.n	8005244 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f83b 	bl	8005304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800528e:	e023      	b.n	80052d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <HAL_UART_IRQHandler+0x4f4>
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8e5 	bl	8005478 <UART_Transmit_IT>
    return;
 80052ae:	e014      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <HAL_UART_IRQHandler+0x51e>
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f924 	bl	8005516 <UART_EndTransmit_IT>
    return;
 80052ce:	e004      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
    return;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
      return;
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
      return;
 80052d8:	bf00      	nop
  }
}
 80052da:	37e8      	adds	r7, #232	@ 0xe8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	4613      	mov	r3, r2
 8005326:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2222      	movs	r2, #34	@ 0x22
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800535e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0220 	orr.w	r2, r2, #32
 800537e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538c:	b480      	push	{r7}
 800538e:	b095      	sub	sp, #84	@ 0x54
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80053b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e5      	bne.n	80053c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	d119      	bne.n	8005438 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	60bb      	str	r3, [r7, #8]
   return(result);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0310 	bic.w	r3, r3, #16
 800541a:	647b      	str	r3, [r7, #68]	@ 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005424:	61ba      	str	r2, [r7, #24]
 8005426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6979      	ldr	r1, [r7, #20]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	613b      	str	r3, [r7, #16]
   return(result);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005446:	bf00      	nop
 8005448:	3754      	adds	r7, #84	@ 0x54
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr

08005450 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff41 	bl	80052f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b21      	cmp	r3, #33	@ 0x21
 800548a:	d13e      	bne.n	800550a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005494:	d114      	bne.n	80054c0 <UART_Transmit_IT+0x48>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d110      	bne.n	80054c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	1c9a      	adds	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]
 80054be:	e008      	b.n	80054d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6211      	str	r1, [r2, #32]
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4619      	mov	r1, r3
 80054e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005504:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fed2 	bl	80052e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b08c      	sub	sp, #48	@ 0x30
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b22      	cmp	r3, #34	@ 0x22
 8005558:	f040 80ae 	bne.w	80056b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005564:	d117      	bne.n	8005596 <UART_Receive_IT+0x50>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d113      	bne.n	8005596 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	b29a      	uxth	r2, r3
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558e:	1c9a      	adds	r2, r3, #2
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	629a      	str	r2, [r3, #40]	@ 0x28
 8005594:	e026      	b.n	80055e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a8:	d007      	beq.n	80055ba <UART_Receive_IT+0x74>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <UART_Receive_IT+0x82>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e008      	b.n	80055da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4619      	mov	r1, r3
 80055f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d15d      	bne.n	80056b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0220 	bic.w	r2, r2, #32
 8005606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005616:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	2b01      	cmp	r3, #1
 800563c:	d135      	bne.n	80056aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	613b      	str	r3, [r7, #16]
   return(result);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	627b      	str	r3, [r7, #36]	@ 0x24
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005664:	623a      	str	r2, [r7, #32]
 8005666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	61bb      	str	r3, [r7, #24]
   return(result);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b10      	cmp	r3, #16
 8005684:	d10a      	bne.n	800569c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fe2e 	bl	8005304 <HAL_UARTEx_RxEventCallback>
 80056a8:	e002      	b.n	80056b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fb fe42 	bl	8001334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e002      	b.n	80056ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3730      	adds	r7, #48	@ 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80056fe:	f023 030c 	bic.w	r3, r3, #12
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	430b      	orrs	r3, r1
 800570a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2c      	ldr	r2, [pc, #176]	@ (80057d8 <UART_SetConfig+0x114>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fe ff70 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	e002      	b.n	800573a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005734:	f7fe ff58 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009a      	lsls	r2, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	4a22      	ldr	r2, [pc, #136]	@ (80057dc <UART_SetConfig+0x118>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	0119      	lsls	r1, r3, #4
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009a      	lsls	r2, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005770:	4b1a      	ldr	r3, [pc, #104]	@ (80057dc <UART_SetConfig+0x118>)
 8005772:	fba3 0302 	umull	r0, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2064      	movs	r0, #100	@ 0x64
 800577a:	fb00 f303 	mul.w	r3, r0, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	3332      	adds	r3, #50	@ 0x32
 8005784:	4a15      	ldr	r2, [pc, #84]	@ (80057dc <UART_SetConfig+0x118>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005790:	4419      	add	r1, r3
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a8:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <UART_SetConfig+0x118>)
 80057aa:	fba3 0302 	umull	r0, r3, r3, r2
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2064      	movs	r0, #100	@ 0x64
 80057b2:	fb00 f303 	mul.w	r3, r0, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	3332      	adds	r3, #50	@ 0x32
 80057bc:	4a07      	ldr	r2, [pc, #28]	@ (80057dc <UART_SetConfig+0x118>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	440a      	add	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40013800 	.word	0x40013800
 80057dc:	51eb851f 	.word	0x51eb851f

080057e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	4638      	mov	r0, r7
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800580a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800580e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800582e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005832:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	b29b      	uxth	r3, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	4013      	ands	r3, r2
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	4638      	mov	r0, r7
 800587c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b09d      	sub	sp, #116	@ 0x74
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80058ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d81f      	bhi.n	800591e <USB_ActivateEndpoint+0x72>
 80058de:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <USB_ActivateEndpoint+0x38>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005927 	.word	0x08005927
 80058f0:	08005903 	.word	0x08005903
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005900:	e012      	b.n	8005928 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005902:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005906:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800590a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800590e:	e00b      	b.n	8005928 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005910:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005914:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005918:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800591c:	e004      	b.n	8005928 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005924:	e000      	b.n	8005928 <USB_ActivateEndpoint+0x7c>
      break;
 8005926:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005960:	b29b      	uxth	r3, r3
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	7b1b      	ldrb	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 8178 	bne.w	8005c88 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8084 	beq.w	8005aaa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4413      	add	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	88db      	ldrh	r3, [r3, #6]
 80059ca:	085b      	lsrs	r3, r3, #1
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	827b      	strh	r3, [r7, #18]
 80059e4:	8a7b      	ldrh	r3, [r7, #18]
 80059e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01b      	beq.n	8005a26 <USB_ActivateEndpoint+0x17a>
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a04:	823b      	strh	r3, [r7, #16]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	8a3b      	ldrh	r3, [r7, #16]
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	78db      	ldrb	r3, [r3, #3]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d020      	beq.n	8005a70 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a44:	81bb      	strh	r3, [r7, #12]
 8005a46:	89bb      	ldrh	r3, [r7, #12]
 8005a48:	f083 0320 	eor.w	r3, r3, #32
 8005a4c:	81bb      	strh	r3, [r7, #12]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	89bb      	ldrh	r3, [r7, #12]
 8005a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8013      	strh	r3, [r2, #0]
 8005a6e:	e2d5      	b.n	800601c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a86:	81fb      	strh	r3, [r7, #14]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	89fb      	ldrh	r3, [r7, #14]
 8005a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	8013      	strh	r3, [r2, #0]
 8005aa8:	e2b8      	b.n	800601c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	4413      	add	r3, r2
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	011a      	lsls	r2, r3, #4
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	88db      	ldrh	r3, [r3, #6]
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	4413      	add	r3, r2
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	011a      	lsls	r2, r3, #4
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b18:	d91d      	bls.n	8005b56 <USB_ActivateEndpoint+0x2aa>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <USB_ActivateEndpoint+0x288>
 8005b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b30:	3b01      	subs	r3, #1
 8005b32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e026      	b.n	8005ba4 <USB_ActivateEndpoint+0x2f8>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <USB_ActivateEndpoint+0x2c8>
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e017      	b.n	8005ba4 <USB_ActivateEndpoint+0x2f8>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <USB_ActivateEndpoint+0x2e2>
 8005b88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	029b      	lsls	r3, r3, #10
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005bb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <USB_ActivateEndpoint+0x348>
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	843b      	strh	r3, [r7, #32]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8c3b      	ldrh	r3, [r7, #32]
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d124      	bne.n	8005c46 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	83bb      	strh	r3, [r7, #28]
 8005c14:	8bbb      	ldrh	r3, [r7, #28]
 8005c16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c1a:	83bb      	strh	r3, [r7, #28]
 8005c1c:	8bbb      	ldrh	r3, [r7, #28]
 8005c1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c22:	83bb      	strh	r3, [r7, #28]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	8bbb      	ldrh	r3, [r7, #28]
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]
 8005c44:	e1ea      	b.n	800601c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5c:	83fb      	strh	r3, [r7, #30]
 8005c5e:	8bfb      	ldrh	r3, [r7, #30]
 8005c60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c64:	83fb      	strh	r3, [r7, #30]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8bfb      	ldrh	r3, [r7, #30]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
 8005c86:	e1c9      	b.n	800601c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d11e      	bne.n	8005cce <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
 8005ccc:	e01d      	b.n	8005d0a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d1a:	4413      	add	r3, r2
 8005d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	891b      	ldrh	r3, [r3, #8]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4e:	4413      	add	r3, r2
 8005d50:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	895b      	ldrh	r3, [r3, #10]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d70:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 8093 	bne.w	8005ea2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005d8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <USB_ActivateEndpoint+0x524>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005dde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <USB_ActivateEndpoint+0x574>
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e3e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e46:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
 8005ea0:	e0bc      	b.n	800601c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005eb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01d      	beq.n	8005efa <USB_ActivateEndpoint+0x64e>
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01d      	beq.n	8005f52 <USB_ActivateEndpoint+0x6a6>
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	78db      	ldrb	r3, [r3, #3]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d024      	beq.n	8005fa4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005f78:	f083 0320 	eor.w	r3, r3, #32
 8005f7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]
 8005fa2:	e01d      	b.n	8005fe0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	441a      	add	r2, r3
 8005fc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006018:	b29b      	uxth	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800601c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006020:	4618      	mov	r0, r3
 8006022:	3774      	adds	r7, #116	@ 0x74
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop

0800602c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b08d      	sub	sp, #52	@ 0x34
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	7b1b      	ldrb	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 808e 	bne.w	800615c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d044      	beq.n	80060d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	81bb      	strh	r3, [r7, #12]
 8006056:	89bb      	ldrh	r3, [r7, #12]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01b      	beq.n	8006098 <USB_DeactivateEndpoint+0x6c>
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	817b      	strh	r3, [r7, #10]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	897b      	ldrh	r3, [r7, #10]
 8006084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006090:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006094:	b29b      	uxth	r3, r3
 8006096:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ae:	813b      	strh	r3, [r7, #8]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
 80060d0:	e192      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	827b      	strh	r3, [r7, #18]
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <USB_DeactivateEndpoint+0xf6>
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006100:	823b      	strh	r3, [r7, #16]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	8a3b      	ldrh	r3, [r7, #16]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006116:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800611a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006138:	81fb      	strh	r3, [r7, #14]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
 800615a:	e14d      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 80a5 	bne.w	80062b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	843b      	strh	r3, [r7, #32]
 8006174:	8c3b      	ldrh	r3, [r7, #32]
 8006176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <USB_DeactivateEndpoint+0x18a>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006194:	83fb      	strh	r3, [r7, #30]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8bfb      	ldrh	r3, [r7, #30]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	83bb      	strh	r3, [r7, #28]
 80061c4:	8bbb      	ldrh	r3, [r7, #28]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01b      	beq.n	8006206 <USB_DeactivateEndpoint+0x1da>
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e4:	837b      	strh	r3, [r7, #26]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	8b7b      	ldrh	r3, [r7, #26]
 80061f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006202:	b29b      	uxth	r3, r3
 8006204:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29b      	uxth	r3, r3
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621c:	833b      	strh	r3, [r7, #24]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	441a      	add	r2, r3
 8006228:	8b3b      	ldrh	r3, [r7, #24]
 800622a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006254:	82fb      	strh	r3, [r7, #22]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8afb      	ldrh	r3, [r7, #22]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800628c:	82bb      	strh	r3, [r7, #20]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	441a      	add	r2, r3
 8006298:	8abb      	ldrh	r3, [r7, #20]
 800629a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	8013      	strh	r3, [r2, #0]
 80062ae:	e0a3      	b.n	80063f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80062be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <USB_DeactivateEndpoint+0x2d4>
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800630e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <USB_DeactivateEndpoint+0x324>
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006348:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006366:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006384:	b29b      	uxth	r3, r3
 8006386:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800639e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3734      	adds	r7, #52	@ 0x34
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b0c2      	sub	sp, #264	@ 0x108
 8006408:	af00      	add	r7, sp, #0
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006412:	6018      	str	r0, [r3, #0]
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b01      	cmp	r3, #1
 800642c:	f040 86b7 	bne.w	800719e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	429a      	cmp	r2, r3
 800644a:	d908      	bls.n	800645e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800645c:	e007      	b.n	800646e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800645e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	7b1b      	ldrb	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d13a      	bne.n	80064f4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6959      	ldr	r1, [r3, #20]
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	88da      	ldrh	r2, [r3, #6]
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	b29b      	uxth	r3, r3
 800649c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064a4:	6800      	ldr	r0, [r0, #0]
 80064a6:	f001 fc9c 	bl	8007de2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	011a      	lsls	r2, r3, #4
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	801a      	strh	r2, [r3, #0]
 80064f0:	f000 be1f 	b.w	8007132 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	78db      	ldrb	r3, [r3, #3]
 8006500:	2b02      	cmp	r3, #2
 8006502:	f040 8462 	bne.w	8006dca <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	f240 83df 	bls.w	8006ce2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	441a      	add	r2, r3
 8006568:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006574:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 81c7 	beq.w	8006954 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d177      	bne.n	80066d2 <USB_EPStartXfer+0x2ce>
 80065e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	4413      	add	r3, r2
 8006604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	011a      	lsls	r2, r3, #4
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	4413      	add	r3, r2
 8006618:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800661c:	627b      	str	r3, [r7, #36]	@ 0x24
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006628:	b29a      	uxth	r2, r3
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	2b3e      	cmp	r3, #62	@ 0x3e
 8006634:	d921      	bls.n	800667a <USB_EPStartXfer+0x276>
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <USB_EPStartXfer+0x252>
 800664c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006650:	3b01      	subs	r3, #1
 8006652:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006660:	b29b      	uxth	r3, r3
 8006662:	029b      	lsls	r3, r3, #10
 8006664:	b29b      	uxth	r3, r3
 8006666:	4313      	orrs	r3, r2
 8006668:	b29b      	uxth	r3, r3
 800666a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006672:	b29a      	uxth	r2, r3
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e050      	b.n	800671c <USB_EPStartXfer+0x318>
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <USB_EPStartXfer+0x294>
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800668c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006690:	b29a      	uxth	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	801a      	strh	r2, [r3, #0]
 8006696:	e041      	b.n	800671c <USB_EPStartXfer+0x318>
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <USB_EPStartXfer+0x2b4>
 80066ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80066b2:	3301      	adds	r3, #1
 80066b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	801a      	strh	r2, [r3, #0]
 80066d0:	e024      	b.n	800671c <USB_EPStartXfer+0x318>
 80066d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d11c      	bne.n	800671c <USB_EPStartXfer+0x318>
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	4413      	add	r3, r2
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	011a      	lsls	r2, r3, #4
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	4413      	add	r3, r2
 800670c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	b29a      	uxth	r2, r3
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	895b      	ldrh	r3, [r3, #10]
 8006728:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6959      	ldr	r1, [r3, #20]
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	b29b      	uxth	r3, r3
 800673e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006742:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006746:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	f001 fb49 	bl	8007de2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	441a      	add	r2, r3
 8006762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800676e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	429a      	cmp	r2, r3
 8006788:	d90f      	bls.n	80067aa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	621a      	str	r2, [r3, #32]
 80067a8:	e00e      	b.n	80067c8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80067ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2200      	movs	r2, #0
 80067c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d177      	bne.n	80068c8 <USB_EPStartXfer+0x4c4>
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	4413      	add	r3, r2
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	4413      	add	r3, r2
 800680e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681e:	b29a      	uxth	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	2b3e      	cmp	r3, #62	@ 0x3e
 800682a:	d921      	bls.n	8006870 <USB_EPStartXfer+0x46c>
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <USB_EPStartXfer+0x448>
 8006842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006846:	3b01      	subs	r3, #1
 8006848:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29a      	uxth	r2, r3
 8006852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006856:	b29b      	uxth	r3, r3
 8006858:	029b      	lsls	r3, r3, #10
 800685a:	b29b      	uxth	r3, r3
 800685c:	4313      	orrs	r3, r2
 800685e:	b29b      	uxth	r3, r3
 8006860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006868:	b29a      	uxth	r2, r3
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e056      	b.n	800691e <USB_EPStartXfer+0x51a>
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <USB_EPStartXfer+0x48a>
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006886:	b29a      	uxth	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e047      	b.n	800691e <USB_EPStartXfer+0x51a>
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <USB_EPStartXfer+0x4aa>
 80068a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	029b      	lsls	r3, r3, #10
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e02a      	b.n	800691e <USB_EPStartXfer+0x51a>
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d122      	bne.n	800691e <USB_EPStartXfer+0x51a>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	623b      	str	r3, [r7, #32]
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	4413      	add	r3, r2
 80068fa:	623b      	str	r3, [r7, #32]
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	4413      	add	r3, r2
 800690e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	b29a      	uxth	r2, r3
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	891b      	ldrh	r3, [r3, #8]
 800692a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6959      	ldr	r1, [r3, #20]
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	b29b      	uxth	r3, r3
 8006940:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006944:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006948:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f001 fa48 	bl	8007de2 <USB_WritePMA>
 8006952:	e3ee      	b.n	8007132 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d177      	bne.n	8006a54 <USB_EPStartXfer+0x650>
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006984:	4413      	add	r3, r2
 8006986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	011a      	lsls	r2, r3, #4
 8006996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006998:	4413      	add	r3, r2
 800699a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800699e:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b6:	d921      	bls.n	80069fc <USB_EPStartXfer+0x5f8>
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <USB_EPStartXfer+0x5d4>
 80069ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4313      	orrs	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e056      	b.n	8006aaa <USB_EPStartXfer+0x6a6>
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <USB_EPStartXfer+0x616>
 8006a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e047      	b.n	8006aaa <USB_EPStartXfer+0x6a6>
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <USB_EPStartXfer+0x636>
 8006a30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a34:	3301      	adds	r3, #1
 8006a36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e02a      	b.n	8006aaa <USB_EPStartXfer+0x6a6>
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d122      	bne.n	8006aaa <USB_EPStartXfer+0x6a6>
 8006a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a84:	4413      	add	r3, r2
 8006a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	011a      	lsls	r2, r3, #4
 8006a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	891b      	ldrh	r3, [r3, #8]
 8006ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6959      	ldr	r1, [r3, #20]
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ad0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ad4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ad8:	6800      	ldr	r0, [r0, #0]
 8006ada:	f001 f982 	bl	8007de2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	441a      	add	r2, r3
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d90f      	bls.n	8006b38 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	621a      	str	r2, [r3, #32]
 8006b36:	e00e      	b.n	8006b56 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d177      	bne.n	8006c62 <USB_EPStartXfer+0x85e>
 8006b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	4413      	add	r3, r2
 8006b94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	011a      	lsls	r2, r3, #4
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bc4:	d921      	bls.n	8006c0a <USB_EPStartXfer+0x806>
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d104      	bne.n	8006be6 <USB_EPStartXfer+0x7e2>
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	029b      	lsls	r3, r3, #10
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e050      	b.n	8006cac <USB_EPStartXfer+0x8a8>
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <USB_EPStartXfer+0x824>
 8006c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	e041      	b.n	8006cac <USB_EPStartXfer+0x8a8>
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USB_EPStartXfer+0x844>
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c42:	3301      	adds	r3, #1
 8006c44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e024      	b.n	8006cac <USB_EPStartXfer+0x8a8>
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d11c      	bne.n	8006cac <USB_EPStartXfer+0x8a8>
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c86:	4413      	add	r3, r2
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	011a      	lsls	r2, r3, #4
 8006c98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006caa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	895b      	ldrh	r3, [r3, #10]
 8006cb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6959      	ldr	r1, [r3, #20]
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cd2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cd6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cda:	6800      	ldr	r0, [r0, #0]
 8006cdc:	f001 f881 	bl	8007de2 <USB_WritePMA>
 8006ce0:	e227      	b.n	8007132 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d18:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d6e:	4413      	add	r3, r2
 8006d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	011a      	lsls	r2, r3, #4
 8006d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	891b      	ldrh	r3, [r3, #8]
 8006da0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6959      	ldr	r1, [r3, #20]
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006dba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006dbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	f001 f80d 	bl	8007de2 <USB_WritePMA>
 8006dc8:	e1b3      	b.n	8007132 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 80c6 	beq.w	8006f9c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d177      	bne.n	8006f1c <USB_EPStartXfer+0xb18>
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e4c:	4413      	add	r3, r2
 8006e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	011a      	lsls	r2, r3, #4
 8006e5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e60:	4413      	add	r3, r2
 8006e62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e66:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e6a:	881b      	ldrh	r3, [r3, #0]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e7e:	d921      	bls.n	8006ec4 <USB_EPStartXfer+0xac0>
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <USB_EPStartXfer+0xa9c>
 8006e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e050      	b.n	8006f66 <USB_EPStartXfer+0xb62>
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <USB_EPStartXfer+0xade>
 8006ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e041      	b.n	8006f66 <USB_EPStartXfer+0xb62>
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <USB_EPStartXfer+0xafe>
 8006ef8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006efc:	3301      	adds	r3, #1
 8006efe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	029b      	lsls	r3, r3, #10
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	4313      	orrs	r3, r2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	e024      	b.n	8006f66 <USB_EPStartXfer+0xb62>
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d11c      	bne.n	8006f66 <USB_EPStartXfer+0xb62>
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f40:	4413      	add	r3, r2
 8006f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	011a      	lsls	r2, r3, #4
 8006f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f54:	4413      	add	r3, r2
 8006f56:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	895b      	ldrh	r3, [r3, #10]
 8006f72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6959      	ldr	r1, [r3, #20]
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f94:	6800      	ldr	r0, [r0, #0]
 8006f96:	f000 ff24 	bl	8007de2 <USB_WritePMA>
 8006f9a:	e0ca      	b.n	8007132 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d177      	bne.n	800709c <USB_EPStartXfer+0xc98>
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006fcc:	4413      	add	r3, r2
 8006fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	011a      	lsls	r2, r3, #4
 8006fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ffe:	d921      	bls.n	8007044 <USB_EPStartXfer+0xc40>
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <USB_EPStartXfer+0xc1c>
 8007016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800701a:	3b01      	subs	r3, #1
 800701c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800702a:	b29b      	uxth	r3, r3
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b29b      	uxth	r3, r3
 8007030:	4313      	orrs	r3, r2
 8007032:	b29b      	uxth	r3, r3
 8007034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703c:	b29a      	uxth	r2, r3
 800703e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	e05c      	b.n	80070fe <USB_EPStartXfer+0xcfa>
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <USB_EPStartXfer+0xc5e>
 800704c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705a:	b29a      	uxth	r2, r3
 800705c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e04d      	b.n	80070fe <USB_EPStartXfer+0xcfa>
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <USB_EPStartXfer+0xc7e>
 8007078:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007082:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29a      	uxth	r2, r3
 8007088:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800708c:	b29b      	uxth	r3, r3
 800708e:	029b      	lsls	r3, r3, #10
 8007090:	b29b      	uxth	r3, r3
 8007092:	4313      	orrs	r3, r2
 8007094:	b29a      	uxth	r2, r3
 8007096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e030      	b.n	80070fe <USB_EPStartXfer+0xcfa>
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d128      	bne.n	80070fe <USB_EPStartXfer+0xcfa>
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070d0:	4413      	add	r3, r2
 80070d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	011a      	lsls	r2, r3, #4
 80070e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	891b      	ldrh	r3, [r3, #8]
 800710a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6959      	ldr	r1, [r3, #20]
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711e:	b29b      	uxth	r3, r3
 8007120:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007124:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007128:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	f000 fe58 	bl	8007de2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007136:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007158:	817b      	strh	r3, [r7, #10]
 800715a:	897b      	ldrh	r3, [r7, #10]
 800715c:	f083 0310 	eor.w	r3, r3, #16
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	897b      	ldrh	r3, [r7, #10]
 8007164:	f083 0320 	eor.w	r3, r3, #32
 8007168:	817b      	strh	r3, [r7, #10]
 800716a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	897b      	ldrh	r3, [r7, #10]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
 800719a:	f000 bcde 	b.w	8007b5a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	7b1b      	ldrb	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f040 80bb 	bne.w	8007326 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d917      	bls.n	80071fc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	619a      	str	r2, [r3, #24]
 80071fa:	e00e      	b.n	800721a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80071fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2200      	movs	r2, #0
 8007218:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800721a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007236:	b29b      	uxth	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800723e:	4413      	add	r3, r2
 8007240:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	011a      	lsls	r2, r3, #4
 8007252:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007256:	4413      	add	r3, r2
 8007258:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800725c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007260:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800726c:	b29a      	uxth	r2, r3
 800726e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	2b3e      	cmp	r3, #62	@ 0x3e
 800727a:	d924      	bls.n	80072c6 <USB_EPStartXfer+0xec2>
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <USB_EPStartXfer+0xe98>
 8007292:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007296:	3b01      	subs	r3, #1
 8007298:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800729c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	029b      	lsls	r3, r3, #10
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072c0:	801a      	strh	r2, [r3, #0]
 80072c2:	f000 bc10 	b.w	8007ae6 <USB_EPStartXfer+0x16e2>
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10c      	bne.n	80072e8 <USB_EPStartXfer+0xee4>
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e3fe      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <USB_EPStartXfer+0xf04>
 80072fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007302:	3301      	adds	r3, #1
 8007304:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29b      	uxth	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e3df      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	2b02      	cmp	r3, #2
 8007334:	f040 8218 	bne.w	8007768 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 809d 	bne.w	8007484 <USB_EPStartXfer+0x1080>
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007366:	b29b      	uxth	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800736e:	4413      	add	r3, r2
 8007370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	011a      	lsls	r2, r3, #4
 8007382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007386:	4413      	add	r3, r2
 8007388:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800738c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073b2:	d92b      	bls.n	800740c <USB_EPStartXfer+0x1008>
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USB_EPStartXfer+0xfe0>
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073de:	3b01      	subs	r3, #1
 80073e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	e070      	b.n	80074ee <USB_EPStartXfer+0x10ea>
 800740c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <USB_EPStartXfer+0x1032>
 800741c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742c:	b29a      	uxth	r2, r3
 800742e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e05b      	b.n	80074ee <USB_EPStartXfer+0x10ea>
 8007436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <USB_EPStartXfer+0x1062>
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007460:	3301      	adds	r3, #1
 8007462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29a      	uxth	r2, r3
 800746e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29b      	uxth	r3, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e034      	b.n	80074ee <USB_EPStartXfer+0x10ea>
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d12c      	bne.n	80074ee <USB_EPStartXfer+0x10ea>
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074b8:	4413      	add	r3, r2
 80074ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	011a      	lsls	r2, r3, #4
 80074cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074d0:	4413      	add	r3, r2
 80074d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80074ec:	801a      	strh	r2, [r3, #0]
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f040 809d 	bne.w	8007648 <USB_EPStartXfer+0x1244>
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007532:	4413      	add	r3, r2
 8007534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	011a      	lsls	r2, r3, #4
 8007546:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800754a:	4413      	add	r3, r2
 800754c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007560:	b29a      	uxth	r2, r3
 8007562:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b3e      	cmp	r3, #62	@ 0x3e
 8007576:	d92b      	bls.n	80075d0 <USB_EPStartXfer+0x11cc>
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 031f 	and.w	r3, r3, #31
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <USB_EPStartXfer+0x11a4>
 800759e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a2:	3b01      	subs	r3, #1
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	029b      	lsls	r3, r3, #10
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	4313      	orrs	r3, r2
 80075bc:	b29b      	uxth	r3, r3
 80075be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075cc:	801a      	strh	r2, [r3, #0]
 80075ce:	e069      	b.n	80076a4 <USB_EPStartXfer+0x12a0>
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10c      	bne.n	80075fa <USB_EPStartXfer+0x11f6>
 80075e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	e054      	b.n	80076a4 <USB_EPStartXfer+0x12a0>
 80075fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d004      	beq.n	800762a <USB_EPStartXfer+0x1226>
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007624:	3301      	adds	r3, #1
 8007626:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800762a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29a      	uxth	r2, r3
 8007632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007636:	b29b      	uxth	r3, r3
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	b29b      	uxth	r3, r3
 800763c:	4313      	orrs	r3, r2
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007644:	801a      	strh	r2, [r3, #0]
 8007646:	e02d      	b.n	80076a4 <USB_EPStartXfer+0x12a0>
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d125      	bne.n	80076a4 <USB_EPStartXfer+0x12a0>
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007666:	b29b      	uxth	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800766e:	4413      	add	r3, r2
 8007670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	011a      	lsls	r2, r3, #4
 8007682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007686:	4413      	add	r3, r2
 8007688:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800768c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076a2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8218 	beq.w	8007ae6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <USB_EPStartXfer+0x12ea>
 80076e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10d      	bne.n	800770a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 81f5 	bne.w	8007ae6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 81ee 	bne.w	8007ae6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007730:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800775e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007762:	b29b      	uxth	r3, r3
 8007764:	8013      	strh	r3, [r2, #0]
 8007766:	e1be      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	78db      	ldrb	r3, [r3, #3]
 8007774:	2b01      	cmp	r3, #1
 8007776:	f040 81b4 	bne.w	8007ae2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800777a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d917      	bls.n	80077c6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	619a      	str	r2, [r3, #24]
 80077c4:	e00e      	b.n	80077e4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80077c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80077d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2200      	movs	r2, #0
 80077e2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8085 	bne.w	8007900 <USB_EPStartXfer+0x14fc>
 80077f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007812:	b29b      	uxth	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800781a:	4413      	add	r3, r2
 800781c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	011a      	lsls	r2, r3, #4
 800782e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007832:	4413      	add	r3, r2
 8007834:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007838:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800783c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007848:	b29a      	uxth	r2, r3
 800784a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	2b3e      	cmp	r3, #62	@ 0x3e
 8007856:	d923      	bls.n	80078a0 <USB_EPStartXfer+0x149c>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007866:	f003 031f 	and.w	r3, r3, #31
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <USB_EPStartXfer+0x1474>
 800786e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007872:	3b01      	subs	r3, #1
 8007874:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007884:	b29b      	uxth	r3, r3
 8007886:	029b      	lsls	r3, r3, #10
 8007888:	b29b      	uxth	r3, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	b29b      	uxth	r3, r3
 800788e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007896:	b29a      	uxth	r2, r3
 8007898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	e060      	b.n	8007962 <USB_EPStartXfer+0x155e>
 80078a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10c      	bne.n	80078c2 <USB_EPStartXfer+0x14be>
 80078a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e04f      	b.n	8007962 <USB_EPStartXfer+0x155e>
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c6:	085b      	lsrs	r3, r3, #1
 80078c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <USB_EPStartXfer+0x14de>
 80078d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078fc:	801a      	strh	r2, [r3, #0]
 80078fe:	e030      	b.n	8007962 <USB_EPStartXfer+0x155e>
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	785b      	ldrb	r3, [r3, #1]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d128      	bne.n	8007962 <USB_EPStartXfer+0x155e>
 8007910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800792c:	b29b      	uxth	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007934:	4413      	add	r3, r2
 8007936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	011a      	lsls	r2, r3, #4
 8007948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800794c:	4413      	add	r3, r2
 800794e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007952:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	b29a      	uxth	r2, r3
 800795c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007960:	801a      	strh	r2, [r3, #0]
 8007962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 8085 	bne.w	8007a8c <USB_EPStartXfer+0x1688>
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800799e:	b29b      	uxth	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80079a6:	4413      	add	r3, r2
 80079a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	011a      	lsls	r2, r3, #4
 80079ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80079be:	4413      	add	r3, r2
 80079c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80079e2:	d923      	bls.n	8007a2c <USB_EPStartXfer+0x1628>
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <USB_EPStartXfer+0x1600>
 80079fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079fe:	3b01      	subs	r3, #1
 8007a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	029b      	lsls	r3, r3, #10
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a28:	801a      	strh	r2, [r3, #0]
 8007a2a:	e05c      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10c      	bne.n	8007a4e <USB_EPStartXfer+0x164a>
 8007a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	e04b      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <USB_EPStartXfer+0x166a>
 8007a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4313      	orrs	r3, r2
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a88:	801a      	strh	r2, [r3, #0]
 8007a8a:	e02c      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d124      	bne.n	8007ae6 <USB_EPStartXfer+0x16e2>
 8007a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	011a      	lsls	r2, r3, #4
 8007ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	e001      	b.n	8007ae6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e03a      	b.n	8007b5c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d020      	beq.n	8007bba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8e:	81bb      	strh	r3, [r7, #12]
 8007b90:	89bb      	ldrh	r3, [r7, #12]
 8007b92:	f083 0310 	eor.w	r3, r3, #16
 8007b96:	81bb      	strh	r3, [r7, #12]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	89bb      	ldrh	r3, [r7, #12]
 8007ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	8013      	strh	r3, [r2, #0]
 8007bb8:	e01f      	b.n	8007bfa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd0:	81fb      	strh	r3, [r7, #14]
 8007bd2:	89fb      	ldrh	r3, [r7, #14]
 8007bd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bd8:	81fb      	strh	r3, [r7, #14]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	7b1b      	ldrb	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 809d 	bne.w	8007d54 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d04c      	beq.n	8007cbc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	823b      	strh	r3, [r7, #16]
 8007c30:	8a3b      	ldrh	r3, [r7, #16]
 8007c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01b      	beq.n	8007c72 <USB_EPClearStall+0x6c>
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c50:	81fb      	strh	r3, [r7, #14]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	89fb      	ldrh	r3, [r7, #14]
 8007c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d06c      	beq.n	8007d54 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c90:	81bb      	strh	r3, [r7, #12]
 8007c92:	89bb      	ldrh	r3, [r7, #12]
 8007c94:	f083 0320 	eor.w	r3, r3, #32
 8007c98:	81bb      	strh	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	441a      	add	r2, r3
 8007ca4:	89bb      	ldrh	r3, [r7, #12]
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]
 8007cba:	e04b      	b.n	8007d54 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	82fb      	strh	r3, [r7, #22]
 8007cca:	8afb      	ldrh	r3, [r7, #22]
 8007ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01b      	beq.n	8007d0c <USB_EPClearStall+0x106>
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	82bb      	strh	r3, [r7, #20]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	441a      	add	r2, r3
 8007cf6:	8abb      	ldrh	r3, [r7, #20]
 8007cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d22:	827b      	strh	r3, [r7, #18]
 8007d24:	8a7b      	ldrh	r3, [r7, #18]
 8007d26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d2a:	827b      	strh	r3, [r7, #18]
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
 8007d2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d32:	827b      	strh	r3, [r7, #18]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	441a      	add	r2, r3
 8007d3e:	8a7b      	ldrh	r3, [r7, #18]
 8007d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2280      	movs	r2, #128	@ 0x80
 8007d76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b08b      	sub	sp, #44	@ 0x2c
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	4611      	mov	r1, r2
 8007dee:	461a      	mov	r2, r3
 8007df0:	460b      	mov	r3, r1
 8007df2:	80fb      	strh	r3, [r7, #6]
 8007df4:	4613      	mov	r3, r2
 8007df6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007df8:	88bb      	ldrh	r3, [r7, #4]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	005a      	lsls	r2, r3, #1
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1a:	e01f      	b.n	8007e5c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3301      	adds	r3, #1
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b21b      	sxth	r3, r3
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	b21a      	sxth	r2, r3
 8007e2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b21b      	sxth	r3, r3
 8007e36:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	8a7a      	ldrh	r2, [r7, #18]
 8007e3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	3302      	adds	r3, #2
 8007e42:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	3302      	adds	r3, #2
 8007e48:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1dc      	bne.n	8007e1c <USB_WritePMA+0x3a>
  }
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	372c      	adds	r7, #44	@ 0x2c
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr

08007e6e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b08b      	sub	sp, #44	@ 0x2c
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	80fb      	strh	r3, [r7, #6]
 8007e80:	4613      	mov	r3, r2
 8007e82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e84:	88bb      	ldrh	r3, [r7, #4]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	005a      	lsls	r2, r3, #1
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea6:	e01b      	b.n	8007ee0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	3b01      	subs	r3, #1
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e0      	bne.n	8007ea8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007ee6:	88bb      	ldrh	r3, [r7, #4]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	701a      	strb	r2, [r3, #0]
  }
}
 8007f02:	bf00      	nop
 8007f04:	372c      	adds	r7, #44	@ 0x2c
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr

08007f0c <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b092      	sub	sp, #72	@ 0x48
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	605a      	str	r2, [r3, #4]
 8007f28:	609a      	str	r2, [r3, #8]
 8007f2a:	60da      	str	r2, [r3, #12]

	if(au8_KeyStates != NULL)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 8189 	beq.w	8008246 <KEYPAD_Init+0x33a>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	4997      	ldr	r1, [pc, #604]	@ (8008194 <KEYPAD_Init+0x288>)
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007f44:	e0ac      	b.n	80080a0 <KEYPAD_Init+0x194>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007f4c:	4892      	ldr	r0, [pc, #584]	@ (8008198 <KEYPAD_Init+0x28c>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007f5c:	4a8f      	ldr	r2, [pc, #572]	@ (800819c <KEYPAD_Init+0x290>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d10c      	bne.n	8007f7c <KEYPAD_Init+0x70>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f62:	4b8f      	ldr	r3, [pc, #572]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	4a8e      	ldr	r2, [pc, #568]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007f68:	f043 0304 	orr.w	r3, r3, #4
 8007f6c:	6193      	str	r3, [r2, #24]
 8007f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	e06a      	b.n	8008052 <KEYPAD_Init+0x146>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007f82:	4885      	ldr	r0, [pc, #532]	@ (8008198 <KEYPAD_Init+0x28c>)
 8007f84:	4613      	mov	r3, r2
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007f92:	4a84      	ldr	r2, [pc, #528]	@ (80081a4 <KEYPAD_Init+0x298>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d10c      	bne.n	8007fb2 <KEYPAD_Init+0xa6>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8007f98:	4b81      	ldr	r3, [pc, #516]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	4a80      	ldr	r2, [pc, #512]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007f9e:	f043 0308 	orr.w	r3, r3, #8
 8007fa2:	6193      	str	r3, [r2, #24]
 8007fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb0:	e04f      	b.n	8008052 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8007fb2:	88fa      	ldrh	r2, [r7, #6]
 8007fb4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007fb8:	4877      	ldr	r0, [pc, #476]	@ (8008198 <KEYPAD_Init+0x28c>)
 8007fba:	4613      	mov	r3, r2
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007fc8:	4a77      	ldr	r2, [pc, #476]	@ (80081a8 <KEYPAD_Init+0x29c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d10c      	bne.n	8007fe8 <KEYPAD_Init+0xdc>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8007fce:	4b74      	ldr	r3, [pc, #464]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	4a73      	ldr	r2, [pc, #460]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007fd4:	f043 0310 	orr.w	r3, r3, #16
 8007fd8:	6193      	str	r3, [r2, #24]
 8007fda:	4b71      	ldr	r3, [pc, #452]	@ (80081a0 <KEYPAD_Init+0x294>)
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe6:	e034      	b.n	8008052 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007fee:	486a      	ldr	r0, [pc, #424]	@ (8008198 <KEYPAD_Init+0x28c>)
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80081ac <KEYPAD_Init+0x2a0>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d10c      	bne.n	800801e <KEYPAD_Init+0x112>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8008004:	4b66      	ldr	r3, [pc, #408]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	4a65      	ldr	r2, [pc, #404]	@ (80081a0 <KEYPAD_Init+0x294>)
 800800a:	f043 0320 	orr.w	r3, r3, #32
 800800e:	6193      	str	r3, [r2, #24]
 8008010:	4b63      	ldr	r3, [pc, #396]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	e019      	b.n	8008052 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008024:	485c      	ldr	r0, [pc, #368]	@ (8008198 <KEYPAD_Init+0x28c>)
 8008026:	4613      	mov	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008034:	4a5e      	ldr	r2, [pc, #376]	@ (80081b0 <KEYPAD_Init+0x2a4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10b      	bne.n	8008052 <KEYPAD_Init+0x146>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 800803a:	4b59      	ldr	r3, [pc, #356]	@ (80081a0 <KEYPAD_Init+0x294>)
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	4a58      	ldr	r2, [pc, #352]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008044:	6193      	str	r3, [r2, #24]
 8008046:	4b56      	ldr	r3, [pc, #344]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	6a3b      	ldr	r3, [r7, #32]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008058:	484f      	ldr	r0, [pc, #316]	@ (8008198 <KEYPAD_Init+0x28c>)
 800805a:	4613      	mov	r3, r2
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	4413      	add	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	440b      	add	r3, r1
 8008064:	3308      	adds	r3, #8
 8008066:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800806a:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800806c:	2300      	movs	r3, #0
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008070:	2302      	movs	r3, #2
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800807a:	4847      	ldr	r0, [pc, #284]	@ (8008198 <KEYPAD_Init+0x28c>)
 800807c:	4613      	mov	r3, r2
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800808a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7f9 ffcb 	bl	800202c <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8008096:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800809a:	3301      	adds	r3, #1
 800809c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	f67f af4e 	bls.w	8007f46 <KEYPAD_Init+0x3a>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80080b0:	e0c3      	b.n	800823a <KEYPAD_Init+0x32e>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80080b8:	4837      	ldr	r0, [pc, #220]	@ (8008198 <KEYPAD_Init+0x28c>)
 80080ba:	4613      	mov	r3, r2
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	440b      	add	r3, r1
 80080c4:	3306      	adds	r3, #6
 80080c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80080ca:	4a34      	ldr	r2, [pc, #208]	@ (800819c <KEYPAD_Init+0x290>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10c      	bne.n	80080ea <KEYPAD_Init+0x1de>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80080d0:	4b33      	ldr	r3, [pc, #204]	@ (80081a0 <KEYPAD_Init+0x294>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	4a32      	ldr	r2, [pc, #200]	@ (80081a0 <KEYPAD_Init+0x294>)
 80080d6:	f043 0304 	orr.w	r3, r3, #4
 80080da:	6193      	str	r3, [r2, #24]
 80080dc:	4b30      	ldr	r3, [pc, #192]	@ (80081a0 <KEYPAD_Init+0x294>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	e07f      	b.n	80081ea <KEYPAD_Init+0x2de>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80080f0:	4829      	ldr	r0, [pc, #164]	@ (8008198 <KEYPAD_Init+0x28c>)
 80080f2:	4613      	mov	r3, r2
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	3306      	adds	r3, #6
 80080fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008102:	4a28      	ldr	r2, [pc, #160]	@ (80081a4 <KEYPAD_Init+0x298>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <KEYPAD_Init+0x216>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8008108:	4b25      	ldr	r3, [pc, #148]	@ (80081a0 <KEYPAD_Init+0x294>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	4a24      	ldr	r2, [pc, #144]	@ (80081a0 <KEYPAD_Init+0x294>)
 800810e:	f043 0308 	orr.w	r3, r3, #8
 8008112:	6193      	str	r3, [r2, #24]
 8008114:	4b22      	ldr	r3, [pc, #136]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	61bb      	str	r3, [r7, #24]
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	e063      	b.n	80081ea <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 8008122:	88fa      	ldrh	r2, [r7, #6]
 8008124:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008128:	481b      	ldr	r0, [pc, #108]	@ (8008198 <KEYPAD_Init+0x28c>)
 800812a:	4613      	mov	r3, r2
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	3306      	adds	r3, #6
 8008136:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800813a:	4a1b      	ldr	r2, [pc, #108]	@ (80081a8 <KEYPAD_Init+0x29c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10c      	bne.n	800815a <KEYPAD_Init+0x24e>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8008140:	4b17      	ldr	r3, [pc, #92]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	4a16      	ldr	r2, [pc, #88]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008146:	f043 0310 	orr.w	r3, r3, #16
 800814a:	6193      	str	r3, [r2, #24]
 800814c:	4b14      	ldr	r3, [pc, #80]	@ (80081a0 <KEYPAD_Init+0x294>)
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	e047      	b.n	80081ea <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008160:	480d      	ldr	r0, [pc, #52]	@ (8008198 <KEYPAD_Init+0x28c>)
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	3306      	adds	r3, #6
 800816e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008172:	4a0e      	ldr	r2, [pc, #56]	@ (80081ac <KEYPAD_Init+0x2a0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d11d      	bne.n	80081b4 <KEYPAD_Init+0x2a8>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <KEYPAD_Init+0x294>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <KEYPAD_Init+0x294>)
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6193      	str	r3, [r2, #24]
 8008184:	4b06      	ldr	r3, [pc, #24]	@ (80081a0 <KEYPAD_Init+0x294>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	e02b      	b.n	80081ea <KEYPAD_Init+0x2de>
 8008192:	bf00      	nop
 8008194:	200004a8 	.word	0x200004a8
 8008198:	0800f838 	.word	0x0800f838
 800819c:	40010800 	.word	0x40010800
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40010c00 	.word	0x40010c00
 80081a8:	40011000 	.word	0x40011000
 80081ac:	40011400 	.word	0x40011400
 80081b0:	40011800 	.word	0x40011800
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80081ba:	4825      	ldr	r0, [pc, #148]	@ (8008250 <KEYPAD_Init+0x344>)
 80081bc:	4613      	mov	r3, r2
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	3306      	adds	r3, #6
 80081c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80081cc:	4a21      	ldr	r2, [pc, #132]	@ (8008254 <KEYPAD_Init+0x348>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10b      	bne.n	80081ea <KEYPAD_Init+0x2de>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80081d2:	4b21      	ldr	r3, [pc, #132]	@ (8008258 <KEYPAD_Init+0x34c>)
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	4a20      	ldr	r2, [pc, #128]	@ (8008258 <KEYPAD_Init+0x34c>)
 80081d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081dc:	6193      	str	r3, [r2, #24]
 80081de:	4b1e      	ldr	r3, [pc, #120]	@ (8008258 <KEYPAD_Init+0x34c>)
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80081f0:	4817      	ldr	r0, [pc, #92]	@ (8008250 <KEYPAD_Init+0x344>)
 80081f2:	4613      	mov	r3, r2
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	4413      	add	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	440b      	add	r3, r1
 80081fc:	3314      	adds	r3, #20
 80081fe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008204:	2301      	movs	r3, #1
 8008206:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008208:	2301      	movs	r3, #1
 800820a:	643b      	str	r3, [r7, #64]	@ 0x40
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 800820c:	88fa      	ldrh	r2, [r7, #6]
 800820e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8008212:	480f      	ldr	r0, [pc, #60]	@ (8008250 <KEYPAD_Init+0x344>)
 8008214:	4613      	mov	r3, r2
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	3306      	adds	r3, #6
 8008220:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008224:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7f9 fefe 	bl	800202c <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 8008230:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008234:	3301      	adds	r3, #1
 8008236:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800823a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800823e:	2b03      	cmp	r3, #3
 8008240:	f67f af37 	bls.w	80080b2 <KEYPAD_Init+0x1a6>
 8008244:	e000      	b.n	8008248 <KEYPAD_Init+0x33c>
		return;
 8008246:	bf00      	nop
	}
}
 8008248:	3748      	adds	r7, #72	@ 0x48
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	0800f838 	.word	0x0800f838
 8008254:	40011800 	.word	0x40011800
 8008258:	40021000 	.word	0x40021000

0800825c <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
 8008272:	e01c      	b.n	80082ae <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	7bf9      	ldrb	r1, [r7, #15]
 8008278:	48a7      	ldr	r0, [pc, #668]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3306      	adds	r3, #6
 8008286:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	7bf9      	ldrb	r1, [r7, #15]
 800828e:	4ca2      	ldr	r4, [pc, #648]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008290:	4613      	mov	r3, r2
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	4413      	add	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	440b      	add	r3, r1
 800829a:	3314      	adds	r3, #20
 800829c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80082a0:	2201      	movs	r2, #1
 80082a2:	4619      	mov	r1, r3
 80082a4:	f7fa f85d 	bl	8002362 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	3301      	adds	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d9df      	bls.n	8008274 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
 80082b8:	e022      	b.n	8008300 <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	7bf9      	ldrb	r1, [r7, #15]
 80082be:	4896      	ldr	r0, [pc, #600]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	7bf9      	ldrb	r1, [r7, #15]
 80082d2:	4c91      	ldr	r4, [pc, #580]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80082d4:	4613      	mov	r3, r2
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	4413      	add	r3, r2
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	440b      	add	r3, r1
 80082de:	3308      	adds	r3, #8
 80082e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80082e4:	7bfc      	ldrb	r4, [r7, #15]
 80082e6:	4619      	mov	r1, r3
 80082e8:	f7fa f824 	bl	8002334 <HAL_GPIO_ReadPin>
 80082ec:	4603      	mov	r3, r0
 80082ee:	461a      	mov	r2, r3
 80082f0:	f104 0310 	add.w	r3, r4, #16
 80082f4:	443b      	add	r3, r7
 80082f6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	3301      	adds	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	2b03      	cmp	r3, #3
 8008304:	d9d9      	bls.n	80082ba <KEYPAD_Scan+0x5e>
	}
//	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
//	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
//	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8008306:	7a3a      	ldrb	r2, [r7, #8]
 8008308:	7a7b      	ldrb	r3, [r7, #9]
 800830a:	4313      	orrs	r3, r2
 800830c:	b2da      	uxtb	r2, r3
 800830e:	7abb      	ldrb	r3, [r7, #10]
 8008310:	4313      	orrs	r3, r2
 8008312:	b2da      	uxtb	r2, r3
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	4313      	orrs	r3, r2
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 821c 	beq.w	8008758 <KEYPAD_Scan+0x4fc>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 8008320:	7a3b      	ldrb	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 81fc 	beq.w	8008720 <KEYPAD_Scan+0x4c4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	497b      	ldr	r1, [pc, #492]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	011b      	lsls	r3, r3, #4
 8008334:	440b      	add	r3, r1
 8008336:	3318      	adds	r3, #24
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	4976      	ldr	r1, [pc, #472]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 800833e:	4613      	mov	r3, r2
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	4413      	add	r3, r2
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	440b      	add	r3, r1
 8008348:	3328      	adds	r3, #40	@ 0x28
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	4619      	mov	r1, r3
 8008350:	f7fa f807 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	4970      	ldr	r1, [pc, #448]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008358:	4613      	mov	r3, r2
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	4413      	add	r3, r2
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	440b      	add	r3, r1
 8008362:	331c      	adds	r3, #28
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	496b      	ldr	r1, [pc, #428]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 800836a:	4613      	mov	r3, r2
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	4413      	add	r3, r2
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	440b      	add	r3, r1
 8008374:	332a      	adds	r3, #42	@ 0x2a
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	2200      	movs	r2, #0
 800837a:	4619      	mov	r1, r3
 800837c:	f7f9 fff1 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	4965      	ldr	r1, [pc, #404]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008384:	4613      	mov	r3, r2
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	4413      	add	r3, r2
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	440b      	add	r3, r1
 800838e:	3320      	adds	r3, #32
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	4960      	ldr	r1, [pc, #384]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008396:	4613      	mov	r3, r2
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4413      	add	r3, r2
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	440b      	add	r3, r1
 80083a0:	332c      	adds	r3, #44	@ 0x2c
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	4619      	mov	r1, r3
 80083a8:	f7f9 ffdb 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	495a      	ldr	r1, [pc, #360]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	011b      	lsls	r3, r3, #4
 80083b8:	440b      	add	r3, r1
 80083ba:	3324      	adds	r3, #36	@ 0x24
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	4955      	ldr	r1, [pc, #340]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80083c2:	4613      	mov	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	440b      	add	r3, r1
 80083cc:	332e      	adds	r3, #46	@ 0x2e
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	4619      	mov	r1, r3
 80083d4:	f7f9 ffc5 	bl	8002362 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80083d8:	88fa      	ldrh	r2, [r7, #6]
 80083da:	494f      	ldr	r1, [pc, #316]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80083dc:	4613      	mov	r3, r2
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	4413      	add	r3, r2
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	440b      	add	r3, r1
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	88fa      	ldrh	r2, [r7, #6]
 80083ea:	494b      	ldr	r1, [pc, #300]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80083ec:	4613      	mov	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	4413      	add	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	440b      	add	r3, r1
 80083f6:	3310      	adds	r3, #16
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7f9 ff9a 	bl	8002334 <HAL_GPIO_ReadPin>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d006      	beq.n	8008418 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	4a43      	ldr	r2, [pc, #268]	@ (800851c <KEYPAD_Scan+0x2c0>)
 800840e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008412:	2201      	movs	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	e005      	b.n	8008424 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	4a40      	ldr	r2, [pc, #256]	@ (800851c <KEYPAD_Scan+0x2c0>)
 800841c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	493c      	ldr	r1, [pc, #240]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	440b      	add	r3, r1
 8008432:	3318      	adds	r3, #24
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	4937      	ldr	r1, [pc, #220]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 800843a:	4613      	mov	r3, r2
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4413      	add	r3, r2
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	440b      	add	r3, r1
 8008444:	3328      	adds	r3, #40	@ 0x28
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	2200      	movs	r2, #0
 800844a:	4619      	mov	r1, r3
 800844c:	f7f9 ff89 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	4931      	ldr	r1, [pc, #196]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	440b      	add	r3, r1
 800845e:	331c      	adds	r3, #28
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	492c      	ldr	r1, [pc, #176]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008466:	4613      	mov	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4413      	add	r3, r2
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	440b      	add	r3, r1
 8008470:	332a      	adds	r3, #42	@ 0x2a
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	2201      	movs	r2, #1
 8008476:	4619      	mov	r1, r3
 8008478:	f7f9 ff73 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	4926      	ldr	r1, [pc, #152]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008480:	4613      	mov	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	4413      	add	r3, r2
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	440b      	add	r3, r1
 800848a:	3320      	adds	r3, #32
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	4921      	ldr	r1, [pc, #132]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 8008492:	4613      	mov	r3, r2
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	4413      	add	r3, r2
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	440b      	add	r3, r1
 800849c:	332c      	adds	r3, #44	@ 0x2c
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2200      	movs	r2, #0
 80084a2:	4619      	mov	r1, r3
 80084a4:	f7f9 ff5d 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80084a8:	88fa      	ldrh	r2, [r7, #6]
 80084aa:	491b      	ldr	r1, [pc, #108]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80084ac:	4613      	mov	r3, r2
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	4413      	add	r3, r2
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	440b      	add	r3, r1
 80084b6:	3324      	adds	r3, #36	@ 0x24
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	88fa      	ldrh	r2, [r7, #6]
 80084bc:	4916      	ldr	r1, [pc, #88]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80084be:	4613      	mov	r3, r2
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	4413      	add	r3, r2
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	440b      	add	r3, r1
 80084c8:	332e      	adds	r3, #46	@ 0x2e
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	2200      	movs	r2, #0
 80084ce:	4619      	mov	r1, r3
 80084d0:	f7f9 ff47 	bl	8002362 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80084d4:	88fa      	ldrh	r2, [r7, #6]
 80084d6:	4910      	ldr	r1, [pc, #64]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80084d8:	4613      	mov	r3, r2
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	4413      	add	r3, r2
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	440b      	add	r3, r1
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	88fa      	ldrh	r2, [r7, #6]
 80084e6:	490c      	ldr	r1, [pc, #48]	@ (8008518 <KEYPAD_Scan+0x2bc>)
 80084e8:	4613      	mov	r3, r2
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	4413      	add	r3, r2
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	440b      	add	r3, r1
 80084f2:	3310      	adds	r3, #16
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	f7f9 ff1c 	bl	8002334 <HAL_GPIO_ReadPin>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008500:	7bbb      	ldrb	r3, [r7, #14]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	4a04      	ldr	r2, [pc, #16]	@ (800851c <KEYPAD_Scan+0x2c0>)
 800850a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850e:	3301      	adds	r3, #1
 8008510:	2201      	movs	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e00b      	b.n	800852e <KEYPAD_Scan+0x2d2>
 8008516:	bf00      	nop
 8008518:	0800f838 	.word	0x0800f838
 800851c:	200004a8 	.word	0x200004a8
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	4a9d      	ldr	r2, [pc, #628]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008528:	3301      	adds	r3, #1
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	499a      	ldr	r1, [pc, #616]	@ (800879c <KEYPAD_Scan+0x540>)
 8008532:	4613      	mov	r3, r2
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4413      	add	r3, r2
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	440b      	add	r3, r1
 800853c:	3318      	adds	r3, #24
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	88fa      	ldrh	r2, [r7, #6]
 8008542:	4996      	ldr	r1, [pc, #600]	@ (800879c <KEYPAD_Scan+0x540>)
 8008544:	4613      	mov	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4413      	add	r3, r2
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	440b      	add	r3, r1
 800854e:	3328      	adds	r3, #40	@ 0x28
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	4619      	mov	r1, r3
 8008556:	f7f9 ff04 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800855a:	88fa      	ldrh	r2, [r7, #6]
 800855c:	498f      	ldr	r1, [pc, #572]	@ (800879c <KEYPAD_Scan+0x540>)
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	440b      	add	r3, r1
 8008568:	331c      	adds	r3, #28
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	498b      	ldr	r1, [pc, #556]	@ (800879c <KEYPAD_Scan+0x540>)
 8008570:	4613      	mov	r3, r2
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	4413      	add	r3, r2
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	440b      	add	r3, r1
 800857a:	332a      	adds	r3, #42	@ 0x2a
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2200      	movs	r2, #0
 8008580:	4619      	mov	r1, r3
 8008582:	f7f9 feee 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	4984      	ldr	r1, [pc, #528]	@ (800879c <KEYPAD_Scan+0x540>)
 800858a:	4613      	mov	r3, r2
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	4413      	add	r3, r2
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	440b      	add	r3, r1
 8008594:	3320      	adds	r3, #32
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	88fa      	ldrh	r2, [r7, #6]
 800859a:	4980      	ldr	r1, [pc, #512]	@ (800879c <KEYPAD_Scan+0x540>)
 800859c:	4613      	mov	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	440b      	add	r3, r1
 80085a6:	332c      	adds	r3, #44	@ 0x2c
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	2201      	movs	r2, #1
 80085ac:	4619      	mov	r1, r3
 80085ae:	f7f9 fed8 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	4979      	ldr	r1, [pc, #484]	@ (800879c <KEYPAD_Scan+0x540>)
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	440b      	add	r3, r1
 80085c0:	3324      	adds	r3, #36	@ 0x24
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	88fa      	ldrh	r2, [r7, #6]
 80085c6:	4975      	ldr	r1, [pc, #468]	@ (800879c <KEYPAD_Scan+0x540>)
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	440b      	add	r3, r1
 80085d2:	332e      	adds	r3, #46	@ 0x2e
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	4619      	mov	r1, r3
 80085da:	f7f9 fec2 	bl	8002362 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80085de:	88fa      	ldrh	r2, [r7, #6]
 80085e0:	496e      	ldr	r1, [pc, #440]	@ (800879c <KEYPAD_Scan+0x540>)
 80085e2:	4613      	mov	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	011b      	lsls	r3, r3, #4
 80085ea:	440b      	add	r3, r1
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	88fa      	ldrh	r2, [r7, #6]
 80085f0:	496a      	ldr	r1, [pc, #424]	@ (800879c <KEYPAD_Scan+0x540>)
 80085f2:	4613      	mov	r3, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4413      	add	r3, r2
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	440b      	add	r3, r1
 80085fc:	3310      	adds	r3, #16
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	f7f9 fe97 	bl	8002334 <HAL_GPIO_ReadPin>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	4a61      	ldr	r2, [pc, #388]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008618:	3302      	adds	r3, #2
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e006      	b.n	800862e <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	4a5d      	ldr	r2, [pc, #372]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008628:	3302      	adds	r3, #2
 800862a:	2200      	movs	r2, #0
 800862c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	495a      	ldr	r1, [pc, #360]	@ (800879c <KEYPAD_Scan+0x540>)
 8008632:	4613      	mov	r3, r2
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	4413      	add	r3, r2
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	440b      	add	r3, r1
 800863c:	3318      	adds	r3, #24
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	88fa      	ldrh	r2, [r7, #6]
 8008642:	4956      	ldr	r1, [pc, #344]	@ (800879c <KEYPAD_Scan+0x540>)
 8008644:	4613      	mov	r3, r2
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	4413      	add	r3, r2
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	440b      	add	r3, r1
 800864e:	3328      	adds	r3, #40	@ 0x28
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	4619      	mov	r1, r3
 8008656:	f7f9 fe84 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800865a:	88fa      	ldrh	r2, [r7, #6]
 800865c:	494f      	ldr	r1, [pc, #316]	@ (800879c <KEYPAD_Scan+0x540>)
 800865e:	4613      	mov	r3, r2
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	4413      	add	r3, r2
 8008664:	011b      	lsls	r3, r3, #4
 8008666:	440b      	add	r3, r1
 8008668:	331c      	adds	r3, #28
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	494b      	ldr	r1, [pc, #300]	@ (800879c <KEYPAD_Scan+0x540>)
 8008670:	4613      	mov	r3, r2
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	4413      	add	r3, r2
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	440b      	add	r3, r1
 800867a:	332a      	adds	r3, #42	@ 0x2a
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	4619      	mov	r1, r3
 8008682:	f7f9 fe6e 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	4944      	ldr	r1, [pc, #272]	@ (800879c <KEYPAD_Scan+0x540>)
 800868a:	4613      	mov	r3, r2
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	4413      	add	r3, r2
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	440b      	add	r3, r1
 8008694:	3320      	adds	r3, #32
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	4940      	ldr	r1, [pc, #256]	@ (800879c <KEYPAD_Scan+0x540>)
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	440b      	add	r3, r1
 80086a6:	332c      	adds	r3, #44	@ 0x2c
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	4619      	mov	r1, r3
 80086ae:	f7f9 fe58 	bl	8002362 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80086b2:	88fa      	ldrh	r2, [r7, #6]
 80086b4:	4939      	ldr	r1, [pc, #228]	@ (800879c <KEYPAD_Scan+0x540>)
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	440b      	add	r3, r1
 80086c0:	3324      	adds	r3, #36	@ 0x24
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	88fa      	ldrh	r2, [r7, #6]
 80086c6:	4935      	ldr	r1, [pc, #212]	@ (800879c <KEYPAD_Scan+0x540>)
 80086c8:	4613      	mov	r3, r2
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	4413      	add	r3, r2
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	440b      	add	r3, r1
 80086d2:	332e      	adds	r3, #46	@ 0x2e
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	f7f9 fe42 	bl	8002362 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80086de:	88fa      	ldrh	r2, [r7, #6]
 80086e0:	492e      	ldr	r1, [pc, #184]	@ (800879c <KEYPAD_Scan+0x540>)
 80086e2:	4613      	mov	r3, r2
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	4413      	add	r3, r2
 80086e8:	011b      	lsls	r3, r3, #4
 80086ea:	440b      	add	r3, r1
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	492a      	ldr	r1, [pc, #168]	@ (800879c <KEYPAD_Scan+0x540>)
 80086f2:	4613      	mov	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4413      	add	r3, r2
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	440b      	add	r3, r1
 80086fc:	3310      	adds	r3, #16
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	4619      	mov	r1, r3
 8008702:	f7f9 fe17 	bl	8002334 <HAL_GPIO_ReadPin>
 8008706:	4603      	mov	r3, r0
 8008708:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d034      	beq.n	800877a <KEYPAD_Scan+0x51e>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	4a21      	ldr	r2, [pc, #132]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008718:	3303      	adds	r3, #3
 800871a:	2201      	movs	r2, #1
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	e02c      	b.n	800877a <KEYPAD_Scan+0x51e>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	4a1d      	ldr	r2, [pc, #116]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008728:	2200      	movs	r2, #0
 800872a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 800872c:	88fb      	ldrh	r3, [r7, #6]
 800872e:	4a1a      	ldr	r2, [pc, #104]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008734:	3301      	adds	r3, #1
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	4a16      	ldr	r2, [pc, #88]	@ (8008798 <KEYPAD_Scan+0x53c>)
 800873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008742:	3302      	adds	r3, #2
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	4a13      	ldr	r2, [pc, #76]	@ (8008798 <KEYPAD_Scan+0x53c>)
 800874c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008750:	3303      	adds	r3, #3
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e010      	b.n	800877a <KEYPAD_Scan+0x51e>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 8008758:	2300      	movs	r3, #0
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	e00a      	b.n	8008774 <KEYPAD_Scan+0x518>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	4a0d      	ldr	r2, [pc, #52]	@ (8008798 <KEYPAD_Scan+0x53c>)
 8008762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	4413      	add	r3, r2
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	3301      	adds	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b0f      	cmp	r3, #15
 8008778:	d9f1      	bls.n	800875e <KEYPAD_Scan+0x502>
		}
	}

	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e002      	b.n	8008786 <KEYPAD_Scan+0x52a>
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	3301      	adds	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d9f9      	bls.n	8008780 <KEYPAD_Scan+0x524>
	{
		//HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
	}
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	bd90      	pop	{r4, r7, pc}
 8008796:	bf00      	nop
 8008798:	200004a8 	.word	0x200004a8
 800879c:	0800f838 	.word	0x0800f838

080087a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7c1b      	ldrb	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d115      	bne.n	80087e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087bc:	2202      	movs	r2, #2
 80087be:	2181      	movs	r1, #129	@ 0x81
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fe82 	bl	800a4ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087d0:	2202      	movs	r2, #2
 80087d2:	2101      	movs	r1, #1
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fe78 	bl	800a4ca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80087e2:	e012      	b.n	800880a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087e4:	2340      	movs	r3, #64	@ 0x40
 80087e6:	2202      	movs	r2, #2
 80087e8:	2181      	movs	r1, #129	@ 0x81
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fe6d 	bl	800a4ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087f6:	2340      	movs	r3, #64	@ 0x40
 80087f8:	2202      	movs	r2, #2
 80087fa:	2101      	movs	r1, #1
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 fe64 	bl	800a4ca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800880a:	2308      	movs	r3, #8
 800880c:	2203      	movs	r2, #3
 800880e:	2182      	movs	r1, #130	@ 0x82
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fe5a 	bl	800a4ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800881c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008820:	f001 ff7a 	bl	800a718 <USBD_static_malloc>
 8008824:	4602      	mov	r2, r0
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	e026      	b.n	800888a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008842:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7c1b      	ldrb	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800886c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 ff19 	bl	800a6aa <USBD_LL_PrepareReceive>
 8008878:	e007      	b.n	800888a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008880:	2340      	movs	r3, #64	@ 0x40
 8008882:	2101      	movs	r1, #1
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 ff10 	bl	800a6aa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088a4:	2181      	movs	r1, #129	@ 0x81
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fe35 	bl	800a516 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088b2:	2101      	movs	r1, #1
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fe2e 	bl	800a516 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088c2:	2182      	movs	r1, #130	@ 0x82
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 fe26 	bl	800a516 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00e      	beq.n	80088f8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 ff20 	bl	800a730 <USBD_static_free>
    pdev->pClassData = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008912:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008928:	2b00      	cmp	r3, #0
 800892a:	d039      	beq.n	80089a0 <USBD_CDC_Setup+0x9e>
 800892c:	2b20      	cmp	r3, #32
 800892e:	d17f      	bne.n	8008a30 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d029      	beq.n	800898c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b25b      	sxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	da11      	bge.n	8008966 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800894e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	88d2      	ldrh	r2, [r2, #6]
 8008954:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008956:	6939      	ldr	r1, [r7, #16]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	88db      	ldrh	r3, [r3, #6]
 800895c:	461a      	mov	r2, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fa06 	bl	8009d70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008964:	e06b      	b.n	8008a3e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785a      	ldrb	r2, [r3, #1]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	88db      	ldrh	r3, [r3, #6]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800897c:	6939      	ldr	r1, [r7, #16]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	88db      	ldrh	r3, [r3, #6]
 8008982:	461a      	mov	r2, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fa21 	bl	8009dcc <USBD_CtlPrepareRx>
      break;
 800898a:	e058      	b.n	8008a3e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	7850      	ldrb	r0, [r2, #1]
 8008998:	2200      	movs	r2, #0
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	4798      	blx	r3
      break;
 800899e:	e04e      	b.n	8008a3e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	2b0b      	cmp	r3, #11
 80089a6:	d02e      	beq.n	8008a06 <USBD_CDC_Setup+0x104>
 80089a8:	2b0b      	cmp	r3, #11
 80089aa:	dc38      	bgt.n	8008a1e <USBD_CDC_Setup+0x11c>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <USBD_CDC_Setup+0xb4>
 80089b0:	2b0a      	cmp	r3, #10
 80089b2:	d014      	beq.n	80089de <USBD_CDC_Setup+0xdc>
 80089b4:	e033      	b.n	8008a1e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d107      	bne.n	80089d0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089c0:	f107 030c 	add.w	r3, r7, #12
 80089c4:	2202      	movs	r2, #2
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f9d1 	bl	8009d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089ce:	e02e      	b.n	8008a2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 f962 	bl	8009c9c <USBD_CtlError>
            ret = USBD_FAIL;
 80089d8:	2302      	movs	r3, #2
 80089da:	75fb      	strb	r3, [r7, #23]
          break;
 80089dc:	e027      	b.n	8008a2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d107      	bne.n	80089f8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80089e8:	f107 030f 	add.w	r3, r7, #15
 80089ec:	2201      	movs	r2, #1
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f9bd 	bl	8009d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089f6:	e01a      	b.n	8008a2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f94e 	bl	8009c9c <USBD_CtlError>
            ret = USBD_FAIL;
 8008a00:	2302      	movs	r3, #2
 8008a02:	75fb      	strb	r3, [r7, #23]
          break;
 8008a04:	e013      	b.n	8008a2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d00d      	beq.n	8008a2c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 f942 	bl	8009c9c <USBD_CtlError>
            ret = USBD_FAIL;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a1c:	e006      	b.n	8008a2c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f93b 	bl	8009c9c <USBD_CtlError>
          ret = USBD_FAIL;
 8008a26:	2302      	movs	r3, #2
 8008a28:	75fb      	strb	r3, [r7, #23]
          break;
 8008a2a:	e000      	b.n	8008a2e <USBD_CDC_Setup+0x12c>
          break;
 8008a2c:	bf00      	nop
      }
      break;
 8008a2e:	e006      	b.n	8008a3e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 f932 	bl	8009c9c <USBD_CtlError>
      ret = USBD_FAIL;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3c:	bf00      	nop
  }

  return ret;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a62:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d03a      	beq.n	8008ae4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	331c      	adds	r3, #28
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d029      	beq.n	8008ad8 <USBD_CDC_DataIn+0x90>
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	331c      	adds	r3, #28
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	78f9      	ldrb	r1, [r7, #3]
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	4403      	add	r3, r0
 8008aa4:	3320      	adds	r3, #32
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008aac:	fb01 f303 	mul.w	r3, r1, r3
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d110      	bne.n	8008ad8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	440b      	add	r3, r1
 8008ac4:	331c      	adds	r3, #28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008aca:	78f9      	ldrb	r1, [r7, #3]
 8008acc:	2300      	movs	r3, #0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 fdc7 	bl	800a664 <USBD_LL_Transmit>
 8008ad6:	e003      	b.n	8008ae0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e000      	b.n	8008ae6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ae4:	2302      	movs	r3, #2
  }
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fdf2 	bl	800a6f0 <USBD_LL_GetRxDataSize>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00d      	beq.n	8008b3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b32:	4611      	mov	r1, r2
 8008b34:	4798      	blx	r3

    return USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e000      	b.n	8008b3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b3a:	2302      	movs	r3, #2
  }
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d014      	beq.n	8008b88 <USBD_CDC_EP0_RxReady+0x44>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008b64:	2bff      	cmp	r3, #255	@ 0xff
 8008b66:	d00f      	beq.n	8008b88 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008b76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008b7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2243      	movs	r2, #67	@ 0x43
 8008ba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ba2:	4b03      	ldr	r3, [pc, #12]	@ (8008bb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000094 	.word	0x20000094

08008bb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2243      	movs	r2, #67	@ 0x43
 8008bc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008bc2:	4b03      	ldr	r3, [pc, #12]	@ (8008bd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	20000050 	.word	0x20000050

08008bd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2243      	movs	r2, #67	@ 0x43
 8008be0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008be2:	4b03      	ldr	r3, [pc, #12]	@ (8008bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200000d8 	.word	0x200000d8

08008bf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	220a      	movs	r2, #10
 8008c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c02:	4b03      	ldr	r3, [pc, #12]	@ (8008c10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	2000000c 	.word	0x2000000c

08008c14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr

08008c98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d01c      	beq.n	8008cec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d115      	bne.n	8008ce8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2181      	movs	r1, #129	@ 0x81
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fcc0 	bl	800a664 <USBD_LL_Transmit>

      return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e002      	b.n	8008cee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d017      	beq.n	8008d40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7c1b      	ldrb	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d109      	bne.n	8008d2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d22:	2101      	movs	r1, #1
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fcc0 	bl	800a6aa <USBD_LL_PrepareReceive>
 8008d2a:	e007      	b.n	8008d3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d32:	2340      	movs	r3, #64	@ 0x40
 8008d34:	2101      	movs	r1, #1
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 fcb7 	bl	800a6aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	e000      	b.n	8008d42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	60b9      	str	r1, [r7, #8]
 8008d54:	4613      	mov	r3, r2
 8008d56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e01a      	b.n	8008d98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	79fa      	ldrb	r2, [r7, #7]
 8008d8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f001 fb25 	bl	800a3e0 <USBD_LL_Init>

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d006      	beq.n	8008dc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr

08008dd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 fb5a 	bl	800a494 <USBD_LL_Start>

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00c      	beq.n	8008e32 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	4611      	mov	r1, r2
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	4798      	blx	r3
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	4798      	blx	r3

  return USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fed8 	bl	8009c2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008e96:	f003 031f 	and.w	r3, r3, #31
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d016      	beq.n	8008ecc <USBD_LL_SetupStage+0x6a>
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d81c      	bhi.n	8008edc <USBD_LL_SetupStage+0x7a>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <USBD_LL_SetupStage+0x4a>
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d008      	beq.n	8008ebc <USBD_LL_SetupStage+0x5a>
 8008eaa:	e017      	b.n	8008edc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f9cb 	bl	8009250 <USBD_StdDevReq>
      break;
 8008eba:	e01a      	b.n	8008ef2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fa2d 	bl	8009324 <USBD_StdItfReq>
      break;
 8008eca:	e012      	b.n	8008ef2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fa6d 	bl	80093b4 <USBD_StdEPReq>
      break;
 8008eda:	e00a      	b.n	8008ef2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008ee2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fb32 	bl	800a554 <USBD_LL_StallEP>
      break;
 8008ef0:	bf00      	nop
  }

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	460b      	mov	r3, r1
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d14b      	bne.n	8008fa8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f16:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d134      	bne.n	8008f8c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d919      	bls.n	8008f62 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	68da      	ldr	r2, [r3, #12]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d203      	bcs.n	8008f50 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	e002      	b.n	8008f56 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	461a      	mov	r2, r3
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 ff54 	bl	8009e08 <USBD_CtlContinueRx>
 8008f60:	e038      	b.n	8008fd4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d105      	bne.n	8008f84 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 ff51 	bl	8009e2c <USBD_CtlSendStatus>
 8008f8a:	e023      	b.n	8008fd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f92:	2b05      	cmp	r3, #5
 8008f94:	d11e      	bne.n	8008fd4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f001 fad7 	bl	800a554 <USBD_LL_StallEP>
 8008fa6:	e015      	b.n	8008fd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00d      	beq.n	8008fd0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d108      	bne.n	8008fd0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	7afa      	ldrb	r2, [r7, #11]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	4798      	blx	r3
 8008fce:	e001      	b.n	8008fd4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e000      	b.n	8008fd6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	607a      	str	r2, [r7, #4]
 8008fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d17f      	bne.n	80090f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3314      	adds	r3, #20
 8008ff6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d15c      	bne.n	80090bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	429a      	cmp	r2, r3
 800900c:	d915      	bls.n	800903a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	1ad2      	subs	r2, r2, r3
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	b29b      	uxth	r3, r3
 8009022:	461a      	mov	r2, r3
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 febe 	bl	8009da8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f001 fb39 	bl	800a6aa <USBD_LL_PrepareReceive>
 8009038:	e04e      	b.n	80090d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	6912      	ldr	r2, [r2, #16]
 8009042:	fbb3 f1f2 	udiv	r1, r3, r2
 8009046:	fb01 f202 	mul.w	r2, r1, r2
 800904a:	1a9b      	subs	r3, r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d11c      	bne.n	800908a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009058:	429a      	cmp	r2, r3
 800905a:	d316      	bcc.n	800908a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009066:	429a      	cmp	r2, r3
 8009068:	d20f      	bcs.n	800908a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f000 fe9a 	bl	8009da8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800907c:	2300      	movs	r3, #0
 800907e:	2200      	movs	r2, #0
 8009080:	2100      	movs	r1, #0
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 fb11 	bl	800a6aa <USBD_LL_PrepareReceive>
 8009088:	e026      	b.n	80090d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800909c:	2b03      	cmp	r3, #3
 800909e:	d105      	bne.n	80090ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80090ac:	2180      	movs	r1, #128	@ 0x80
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f001 fa50 	bl	800a554 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 fecc 	bl	8009e52 <USBD_CtlReceiveStatus>
 80090ba:	e00d      	b.n	80090d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d004      	beq.n	80090d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80090d0:	2180      	movs	r1, #128	@ 0x80
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f001 fa3e 	bl	800a554 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d11d      	bne.n	800911e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fe81 	bl	8008dea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090f0:	e015      	b.n	800911e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009104:	2b03      	cmp	r3, #3
 8009106:	d108      	bne.n	800911a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	7afa      	ldrb	r2, [r7, #11]
 8009112:	4611      	mov	r1, r2
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	4798      	blx	r3
 8009118:	e001      	b.n	800911e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	e000      	b.n	8009120 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 f9c7 	bl	800a4ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2240      	movs	r2, #64	@ 0x40
 8009148:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800914c:	2340      	movs	r3, #64	@ 0x40
 800914e:	2200      	movs	r2, #0
 8009150:	2180      	movs	r1, #128	@ 0x80
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 f9b9 	bl	800a4ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2240      	movs	r2, #64	@ 0x40
 8009162:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009188:	2b00      	cmp	r3, #0
 800918a:	d009      	beq.n	80091a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6852      	ldr	r2, [r2, #4]
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	4611      	mov	r1, r2
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
  }

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr

080091f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d105      	bne.n	800920e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr

0800921a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009228:	2b03      	cmp	r3, #3
 800922a:	d10b      	bne.n	8009244 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009266:	2b40      	cmp	r3, #64	@ 0x40
 8009268:	d005      	beq.n	8009276 <USBD_StdDevReq+0x26>
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d84f      	bhi.n	800930e <USBD_StdDevReq+0xbe>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <USBD_StdDevReq+0x36>
 8009272:	2b20      	cmp	r3, #32
 8009274:	d14b      	bne.n	800930e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
      break;
 8009284:	e048      	b.n	8009318 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	2b09      	cmp	r3, #9
 800928c:	d839      	bhi.n	8009302 <USBD_StdDevReq+0xb2>
 800928e:	a201      	add	r2, pc, #4	@ (adr r2, 8009294 <USBD_StdDevReq+0x44>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092e5 	.word	0x080092e5
 8009298:	080092f9 	.word	0x080092f9
 800929c:	08009303 	.word	0x08009303
 80092a0:	080092ef 	.word	0x080092ef
 80092a4:	08009303 	.word	0x08009303
 80092a8:	080092c7 	.word	0x080092c7
 80092ac:	080092bd 	.word	0x080092bd
 80092b0:	08009303 	.word	0x08009303
 80092b4:	080092db 	.word	0x080092db
 80092b8:	080092d1 	.word	0x080092d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9dc 	bl	800967c <USBD_GetDescriptor>
          break;
 80092c4:	e022      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fb3f 	bl	800994c <USBD_SetAddress>
          break;
 80092ce:	e01d      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fb7e 	bl	80099d4 <USBD_SetConfig>
          break;
 80092d8:	e018      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fc07 	bl	8009af0 <USBD_GetConfig>
          break;
 80092e2:	e013      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fc37 	bl	8009b5a <USBD_GetStatus>
          break;
 80092ec:	e00e      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc65 	bl	8009bc0 <USBD_SetFeature>
          break;
 80092f6:	e009      	b.n	800930c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fc74 	bl	8009be8 <USBD_ClrFeature>
          break;
 8009300:	e004      	b.n	800930c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fcc9 	bl	8009c9c <USBD_CtlError>
          break;
 800930a:	bf00      	nop
      }
      break;
 800930c:	e004      	b.n	8009318 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fcc3 	bl	8009c9c <USBD_CtlError>
      break;
 8009316:	bf00      	nop
  }

  return ret;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop

08009324 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800933a:	2b40      	cmp	r3, #64	@ 0x40
 800933c:	d005      	beq.n	800934a <USBD_StdItfReq+0x26>
 800933e:	2b40      	cmp	r3, #64	@ 0x40
 8009340:	d82e      	bhi.n	80093a0 <USBD_StdItfReq+0x7c>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <USBD_StdItfReq+0x26>
 8009346:	2b20      	cmp	r3, #32
 8009348:	d12a      	bne.n	80093a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009350:	3b01      	subs	r3, #1
 8009352:	2b02      	cmp	r3, #2
 8009354:	d81d      	bhi.n	8009392 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	889b      	ldrh	r3, [r3, #4]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	d813      	bhi.n	8009388 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	88db      	ldrh	r3, [r3, #6]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d110      	bne.n	800939c <USBD_StdItfReq+0x78>
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10d      	bne.n	800939c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fd53 	bl	8009e2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009386:	e009      	b.n	800939c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fc86 	bl	8009c9c <USBD_CtlError>
          break;
 8009390:	e004      	b.n	800939c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc81 	bl	8009c9c <USBD_CtlError>
          break;
 800939a:	e000      	b.n	800939e <USBD_StdItfReq+0x7a>
          break;
 800939c:	bf00      	nop
      }
      break;
 800939e:	e004      	b.n	80093aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc7a 	bl	8009c9c <USBD_CtlError>
      break;
 80093a8:	bf00      	nop
  }

  return USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	889b      	ldrh	r3, [r3, #4]
 80093c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093d0:	2b40      	cmp	r3, #64	@ 0x40
 80093d2:	d007      	beq.n	80093e4 <USBD_StdEPReq+0x30>
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	f200 8146 	bhi.w	8009666 <USBD_StdEPReq+0x2b2>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <USBD_StdEPReq+0x40>
 80093de:	2b20      	cmp	r3, #32
 80093e0:	f040 8141 	bne.w	8009666 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
      break;
 80093f2:	e13d      	b.n	8009670 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d10a      	bne.n	8009416 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	e12d      	b.n	8009672 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b03      	cmp	r3, #3
 800941c:	d007      	beq.n	800942e <USBD_StdEPReq+0x7a>
 800941e:	2b03      	cmp	r3, #3
 8009420:	f300 811b 	bgt.w	800965a <USBD_StdEPReq+0x2a6>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d072      	beq.n	800950e <USBD_StdEPReq+0x15a>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d03a      	beq.n	80094a2 <USBD_StdEPReq+0xee>
 800942c:	e115      	b.n	800965a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009434:	2b02      	cmp	r3, #2
 8009436:	d002      	beq.n	800943e <USBD_StdEPReq+0x8a>
 8009438:	2b03      	cmp	r3, #3
 800943a:	d015      	beq.n	8009468 <USBD_StdEPReq+0xb4>
 800943c:	e02b      	b.n	8009496 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00c      	beq.n	800945e <USBD_StdEPReq+0xaa>
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b80      	cmp	r3, #128	@ 0x80
 8009448:	d009      	beq.n	800945e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f001 f880 	bl	800a554 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009454:	2180      	movs	r1, #128	@ 0x80
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 f87c 	bl	800a554 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800945c:	e020      	b.n	80094a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fc1b 	bl	8009c9c <USBD_CtlError>
              break;
 8009466:	e01b      	b.n	80094a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	885b      	ldrh	r3, [r3, #2]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10e      	bne.n	800948e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009470:	7bbb      	ldrb	r3, [r7, #14]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00b      	beq.n	800948e <USBD_StdEPReq+0xda>
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	2b80      	cmp	r3, #128	@ 0x80
 800947a:	d008      	beq.n	800948e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	88db      	ldrh	r3, [r3, #6]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f863 	bl	800a554 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fccc 	bl	8009e2c <USBD_CtlSendStatus>

              break;
 8009494:	e004      	b.n	80094a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fbff 	bl	8009c9c <USBD_CtlError>
              break;
 800949e:	bf00      	nop
          }
          break;
 80094a0:	e0e0      	b.n	8009664 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d002      	beq.n	80094b2 <USBD_StdEPReq+0xfe>
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d015      	beq.n	80094dc <USBD_StdEPReq+0x128>
 80094b0:	e026      	b.n	8009500 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00c      	beq.n	80094d2 <USBD_StdEPReq+0x11e>
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b80      	cmp	r3, #128	@ 0x80
 80094bc:	d009      	beq.n	80094d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f846 	bl	800a554 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094c8:	2180      	movs	r1, #128	@ 0x80
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 f842 	bl	800a554 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094d0:	e01c      	b.n	800950c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fbe1 	bl	8009c9c <USBD_CtlError>
              break;
 80094da:	e017      	b.n	800950c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	885b      	ldrh	r3, [r3, #2]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d112      	bne.n	800950a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f84d 	bl	800a592 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc97 	bl	8009e2c <USBD_CtlSendStatus>
              }
              break;
 80094fe:	e004      	b.n	800950a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fbca 	bl	8009c9c <USBD_CtlError>
              break;
 8009508:	e000      	b.n	800950c <USBD_StdEPReq+0x158>
              break;
 800950a:	bf00      	nop
          }
          break;
 800950c:	e0aa      	b.n	8009664 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009514:	2b02      	cmp	r3, #2
 8009516:	d002      	beq.n	800951e <USBD_StdEPReq+0x16a>
 8009518:	2b03      	cmp	r3, #3
 800951a:	d032      	beq.n	8009582 <USBD_StdEPReq+0x1ce>
 800951c:	e097      	b.n	800964e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800951e:	7bbb      	ldrb	r3, [r7, #14]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d007      	beq.n	8009534 <USBD_StdEPReq+0x180>
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b80      	cmp	r3, #128	@ 0x80
 8009528:	d004      	beq.n	8009534 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fbb5 	bl	8009c9c <USBD_CtlError>
                break;
 8009532:	e091      	b.n	8009658 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	da0b      	bge.n	8009554 <USBD_StdEPReq+0x1a0>
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009542:	4613      	mov	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	3310      	adds	r3, #16
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	e00b      	b.n	800956c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	3304      	adds	r3, #4
 800956c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2202      	movs	r2, #2
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fbf8 	bl	8009d70 <USBD_CtlSendData>
              break;
 8009580:	e06a      	b.n	8009658 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009586:	2b00      	cmp	r3, #0
 8009588:	da11      	bge.n	80095ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	440b      	add	r3, r1
 800959c:	3318      	adds	r3, #24
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d117      	bne.n	80095d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fb78 	bl	8009c9c <USBD_CtlError>
                  break;
 80095ac:	e054      	b.n	8009658 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fb65 	bl	8009c9c <USBD_CtlError>
                  break;
 80095d2:	e041      	b.n	8009658 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0b      	bge.n	80095f4 <USBD_StdEPReq+0x240>
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	3310      	adds	r3, #16
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	4413      	add	r3, r2
 80095f0:	3304      	adds	r3, #4
 80095f2:	e00b      	b.n	800960c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4413      	add	r3, r2
 800960a:	3304      	adds	r3, #4
 800960c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <USBD_StdEPReq+0x266>
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b80      	cmp	r3, #128	@ 0x80
 8009618:	d103      	bne.n	8009622 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e00e      	b.n	8009640 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 ffd2 	bl	800a5d0 <USBD_LL_IsStallEP>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2201      	movs	r2, #1
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	e002      	b.n	8009640 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2202      	movs	r2, #2
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fb92 	bl	8009d70 <USBD_CtlSendData>
              break;
 800964c:	e004      	b.n	8009658 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fb23 	bl	8009c9c <USBD_CtlError>
              break;
 8009656:	bf00      	nop
          }
          break;
 8009658:	e004      	b.n	8009664 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fb1d 	bl	8009c9c <USBD_CtlError>
          break;
 8009662:	bf00      	nop
      }
      break;
 8009664:	e004      	b.n	8009670 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb17 	bl	8009c9c <USBD_CtlError>
      break;
 800966e:	bf00      	nop
  }

  return ret;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	b29b      	uxth	r3, r3
 800969a:	3b01      	subs	r3, #1
 800969c:	2b06      	cmp	r3, #6
 800969e:	f200 8128 	bhi.w	80098f2 <USBD_GetDescriptor+0x276>
 80096a2:	a201      	add	r2, pc, #4	@ (adr r2, 80096a8 <USBD_GetDescriptor+0x2c>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096dd 	.word	0x080096dd
 80096b0:	0800971d 	.word	0x0800971d
 80096b4:	080098f3 	.word	0x080098f3
 80096b8:	080098f3 	.word	0x080098f3
 80096bc:	08009893 	.word	0x08009893
 80096c0:	080098bf 	.word	0x080098bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	7c12      	ldrb	r2, [r2, #16]
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	4610      	mov	r0, r2
 80096d6:	4798      	blx	r3
 80096d8:	60f8      	str	r0, [r7, #12]
      break;
 80096da:	e112      	b.n	8009902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7c1b      	ldrb	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10d      	bne.n	8009700 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	f107 0208 	add.w	r2, r7, #8
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
 80096f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	2202      	movs	r2, #2
 80096fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096fe:	e100      	b.n	8009902 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009708:	f107 0208 	add.w	r2, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	2202      	movs	r2, #2
 8009718:	701a      	strb	r2, [r3, #0]
      break;
 800971a:	e0f2      	b.n	8009902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	885b      	ldrh	r3, [r3, #2]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b05      	cmp	r3, #5
 8009724:	f200 80ac 	bhi.w	8009880 <USBD_GetDescriptor+0x204>
 8009728:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <USBD_GetDescriptor+0xb4>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009749 	.word	0x08009749
 8009734:	0800977d 	.word	0x0800977d
 8009738:	080097b1 	.word	0x080097b1
 800973c:	080097e5 	.word	0x080097e5
 8009740:	08009819 	.word	0x08009819
 8009744:	0800984d 	.word	0x0800984d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00b      	beq.n	800976c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7c12      	ldrb	r2, [r2, #16]
 8009760:	f107 0108 	add.w	r1, r7, #8
 8009764:	4610      	mov	r0, r2
 8009766:	4798      	blx	r3
 8009768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976a:	e091      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa94 	bl	8009c9c <USBD_CtlError>
            err++;
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	3301      	adds	r3, #1
 8009778:	72fb      	strb	r3, [r7, #11]
          break;
 800977a:	e089      	b.n	8009890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	7c12      	ldrb	r2, [r2, #16]
 8009794:	f107 0108 	add.w	r1, r7, #8
 8009798:	4610      	mov	r0, r2
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800979e:	e077      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa7a 	bl	8009c9c <USBD_CtlError>
            err++;
 80097a8:	7afb      	ldrb	r3, [r7, #11]
 80097aa:	3301      	adds	r3, #1
 80097ac:	72fb      	strb	r3, [r7, #11]
          break;
 80097ae:	e06f      	b.n	8009890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	7c12      	ldrb	r2, [r2, #16]
 80097c8:	f107 0108 	add.w	r1, r7, #8
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
 80097d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d2:	e05d      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa60 	bl	8009c9c <USBD_CtlError>
            err++;
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	3301      	adds	r3, #1
 80097e0:	72fb      	strb	r3, [r7, #11]
          break;
 80097e2:	e055      	b.n	8009890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	7c12      	ldrb	r2, [r2, #16]
 80097fc:	f107 0108 	add.w	r1, r7, #8
 8009800:	4610      	mov	r0, r2
 8009802:	4798      	blx	r3
 8009804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009806:	e043      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa46 	bl	8009c9c <USBD_CtlError>
            err++;
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	3301      	adds	r3, #1
 8009814:	72fb      	strb	r3, [r7, #11]
          break;
 8009816:	e03b      	b.n	8009890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	7c12      	ldrb	r2, [r2, #16]
 8009830:	f107 0108 	add.w	r1, r7, #8
 8009834:	4610      	mov	r0, r2
 8009836:	4798      	blx	r3
 8009838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983a:	e029      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa2c 	bl	8009c9c <USBD_CtlError>
            err++;
 8009844:	7afb      	ldrb	r3, [r7, #11]
 8009846:	3301      	adds	r3, #1
 8009848:	72fb      	strb	r3, [r7, #11]
          break;
 800984a:	e021      	b.n	8009890 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	7c12      	ldrb	r2, [r2, #16]
 8009864:	f107 0108 	add.w	r1, r7, #8
 8009868:	4610      	mov	r0, r2
 800986a:	4798      	blx	r3
 800986c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800986e:	e00f      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa12 	bl	8009c9c <USBD_CtlError>
            err++;
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	3301      	adds	r3, #1
 800987c:	72fb      	strb	r3, [r7, #11]
          break;
 800987e:	e007      	b.n	8009890 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa0a 	bl	8009c9c <USBD_CtlError>
          err++;
 8009888:	7afb      	ldrb	r3, [r7, #11]
 800988a:	3301      	adds	r3, #1
 800988c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800988e:	e038      	b.n	8009902 <USBD_GetDescriptor+0x286>
 8009890:	e037      	b.n	8009902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	7c1b      	ldrb	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d109      	bne.n	80098ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a2:	f107 0208 	add.w	r2, r7, #8
 80098a6:	4610      	mov	r0, r2
 80098a8:	4798      	blx	r3
 80098aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098ac:	e029      	b.n	8009902 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f9f3 	bl	8009c9c <USBD_CtlError>
        err++;
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	3301      	adds	r3, #1
 80098ba:	72fb      	strb	r3, [r7, #11]
      break;
 80098bc:	e021      	b.n	8009902 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7c1b      	ldrb	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10d      	bne.n	80098e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ce:	f107 0208 	add.w	r2, r7, #8
 80098d2:	4610      	mov	r0, r2
 80098d4:	4798      	blx	r3
 80098d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	2207      	movs	r2, #7
 80098de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098e0:	e00f      	b.n	8009902 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f9d9 	bl	8009c9c <USBD_CtlError>
        err++;
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	3301      	adds	r3, #1
 80098ee:	72fb      	strb	r3, [r7, #11]
      break;
 80098f0:	e007      	b.n	8009902 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f9d1 	bl	8009c9c <USBD_CtlError>
      err++;
 80098fa:	7afb      	ldrb	r3, [r7, #11]
 80098fc:	3301      	adds	r3, #1
 80098fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009900:	bf00      	nop
  }

  if (err != 0U)
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d11c      	bne.n	8009942 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009908:	893b      	ldrh	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d011      	beq.n	8009932 <USBD_GetDescriptor+0x2b6>
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	88db      	ldrh	r3, [r3, #6]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	88da      	ldrh	r2, [r3, #6]
 800991a:	893b      	ldrh	r3, [r7, #8]
 800991c:	4293      	cmp	r3, r2
 800991e:	bf28      	it	cs
 8009920:	4613      	movcs	r3, r2
 8009922:	b29b      	uxth	r3, r3
 8009924:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009926:	893b      	ldrh	r3, [r7, #8]
 8009928:	461a      	mov	r2, r3
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa1f 	bl	8009d70 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d104      	bne.n	8009944 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa76 	bl	8009e2c <USBD_CtlSendStatus>
 8009940:	e000      	b.n	8009944 <USBD_GetDescriptor+0x2c8>
    return;
 8009942:	bf00      	nop
    }
  }
}
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop

0800994c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	889b      	ldrh	r3, [r3, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d130      	bne.n	80099c0 <USBD_SetAddress+0x74>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	88db      	ldrh	r3, [r3, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d12c      	bne.n	80099c0 <USBD_SetAddress+0x74>
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	885b      	ldrh	r3, [r3, #2]
 800996a:	2b7f      	cmp	r3, #127	@ 0x7f
 800996c:	d828      	bhi.n	80099c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	885b      	ldrh	r3, [r3, #2]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009978:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	2b03      	cmp	r3, #3
 8009982:	d104      	bne.n	800998e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f988 	bl	8009c9c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998c:	e01d      	b.n	80099ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7bfa      	ldrb	r2, [r7, #15]
 8009992:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fe43 	bl	800a626 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fa43 	bl	8009e2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d004      	beq.n	80099b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b4:	e009      	b.n	80099ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099be:	e004      	b.n	80099ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f96a 	bl	8009c9c <USBD_CtlError>
  }
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	4b41      	ldr	r3, [pc, #260]	@ (8009aec <USBD_SetConfig+0x118>)
 80099e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099e8:	4b40      	ldr	r3, [pc, #256]	@ (8009aec <USBD_SetConfig+0x118>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d904      	bls.n	80099fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f952 	bl	8009c9c <USBD_CtlError>
 80099f8:	e075      	b.n	8009ae6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d002      	beq.n	8009a0a <USBD_SetConfig+0x36>
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d023      	beq.n	8009a50 <USBD_SetConfig+0x7c>
 8009a08:	e062      	b.n	8009ad0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a0a:	4b38      	ldr	r3, [pc, #224]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d01a      	beq.n	8009a48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a12:	4b36      	ldr	r3, [pc, #216]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2203      	movs	r2, #3
 8009a20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a24:	4b31      	ldr	r3, [pc, #196]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff f9e7 	bl	8008dfe <USBD_SetClassConfig>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d104      	bne.n	8009a40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f92f 	bl	8009c9c <USBD_CtlError>
            return;
 8009a3e:	e052      	b.n	8009ae6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f9f3 	bl	8009e2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a46:	e04e      	b.n	8009ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f9ef 	bl	8009e2c <USBD_CtlSendStatus>
        break;
 8009a4e:	e04a      	b.n	8009ae6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009a50:	4b26      	ldr	r3, [pc, #152]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d112      	bne.n	8009a7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009a60:	4b22      	ldr	r3, [pc, #136]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a6a:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff f9e3 	bl	8008e3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f9d8 	bl	8009e2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a7c:	e033      	b.n	8009ae6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d01d      	beq.n	8009ac8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff f9d1 	bl	8008e3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a9a:	4b14      	ldr	r3, [pc, #80]	@ (8009aec <USBD_SetConfig+0x118>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009aa4:	4b11      	ldr	r3, [pc, #68]	@ (8009aec <USBD_SetConfig+0x118>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff f9a7 	bl	8008dfe <USBD_SetClassConfig>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d104      	bne.n	8009ac0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f8ef 	bl	8009c9c <USBD_CtlError>
            return;
 8009abe:	e012      	b.n	8009ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f9b3 	bl	8009e2c <USBD_CtlSendStatus>
        break;
 8009ac6:	e00e      	b.n	8009ae6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f9af 	bl	8009e2c <USBD_CtlSendStatus>
        break;
 8009ace:	e00a      	b.n	8009ae6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f8e2 	bl	8009c9c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ad8:	4b04      	ldr	r3, [pc, #16]	@ (8009aec <USBD_SetConfig+0x118>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff f9ac 	bl	8008e3c <USBD_ClrClassConfig>
        break;
 8009ae4:	bf00      	nop
    }
  }
}
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	200004ac 	.word	0x200004ac

08009af0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	88db      	ldrh	r3, [r3, #6]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d004      	beq.n	8009b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f8c9 	bl	8009c9c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b0a:	e022      	b.n	8009b52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	dc02      	bgt.n	8009b1c <USBD_GetConfig+0x2c>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dc03      	bgt.n	8009b22 <USBD_GetConfig+0x32>
 8009b1a:	e015      	b.n	8009b48 <USBD_GetConfig+0x58>
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d00b      	beq.n	8009b38 <USBD_GetConfig+0x48>
 8009b20:	e012      	b.n	8009b48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f91d 	bl	8009d70 <USBD_CtlSendData>
        break;
 8009b36:	e00c      	b.n	8009b52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f915 	bl	8009d70 <USBD_CtlSendData>
        break;
 8009b46:	e004      	b.n	8009b52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f8a6 	bl	8009c9c <USBD_CtlError>
        break;
 8009b50:	bf00      	nop
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d81e      	bhi.n	8009bae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	88db      	ldrh	r3, [r3, #6]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d004      	beq.n	8009b82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f88e 	bl	8009c9c <USBD_CtlError>
        break;
 8009b80:	e01a      	b.n	8009bb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f043 0202 	orr.w	r2, r3, #2
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f8e2 	bl	8009d70 <USBD_CtlSendData>
      break;
 8009bac:	e004      	b.n	8009bb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f873 	bl	8009c9c <USBD_CtlError>
      break;
 8009bb6:	bf00      	nop
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	885b      	ldrh	r3, [r3, #2]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d106      	bne.n	8009be0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f926 	bl	8009e2c <USBD_CtlSendStatus>
  }
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d80b      	bhi.n	8009c16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10c      	bne.n	8009c20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f90c 	bl	8009e2c <USBD_CtlSendStatus>
      }
      break;
 8009c14:	e004      	b.n	8009c20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f83f 	bl	8009c9c <USBD_CtlError>
      break;
 8009c1e:	e000      	b.n	8009c22 <USBD_ClrFeature+0x3a>
      break;
 8009c20:	bf00      	nop
  }
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781a      	ldrb	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	785a      	ldrb	r2, [r3, #1]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3302      	adds	r3, #2
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	3303      	adds	r3, #3
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4413      	add	r3, r2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	3304      	adds	r3, #4
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3305      	adds	r3, #5
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	021b      	lsls	r3, r3, #8
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	4413      	add	r3, r2
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	3306      	adds	r3, #6
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3307      	adds	r3, #7
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	80da      	strh	r2, [r3, #6]

}
 8009c92:	bf00      	nop
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bc80      	pop	{r7}
 8009c9a:	4770      	bx	lr

08009c9c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ca6:	2180      	movs	r1, #128	@ 0x80
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc53 	bl	800a554 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009cae:	2100      	movs	r1, #0
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc4f 	bl	800a554 <USBD_LL_StallEP>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d032      	beq.n	8009d3a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f834 	bl	8009d42 <USBD_GetLen>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	3301      	adds	r3, #1
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	75fa      	strb	r2, [r7, #23]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	7812      	ldrb	r2, [r2, #0]
 8009cf8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	75fa      	strb	r2, [r7, #23]
 8009d00:	461a      	mov	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	2203      	movs	r2, #3
 8009d08:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d0a:	e012      	b.n	8009d32 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	1c5a      	adds	r2, r3, #1
 8009d10:	60fa      	str	r2, [r7, #12]
 8009d12:	7dfa      	ldrb	r2, [r7, #23]
 8009d14:	1c51      	adds	r1, r2, #1
 8009d16:	75f9      	strb	r1, [r7, #23]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	75fa      	strb	r2, [r7, #23]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	2200      	movs	r2, #0
 8009d30:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e8      	bne.n	8009d0c <USBD_GetString+0x4e>
    }
  }
}
 8009d3a:	bf00      	nop
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009d4e:	e005      	b.n	8009d5c <USBD_GetLen+0x1a>
  {
    len++;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	3301      	adds	r3, #1
 8009d54:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1f5      	bne.n	8009d50 <USBD_GetLen+0xe>
  }

  return len;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bc80      	pop	{r7}
 8009d6e:	4770      	bx	lr

08009d70 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2202      	movs	r2, #2
 8009d82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009d86:	88fa      	ldrh	r2, [r7, #6]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009d8c:	88fa      	ldrh	r2, [r7, #6]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	2100      	movs	r1, #0
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 fc63 	bl	800a664 <USBD_LL_Transmit>

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4613      	mov	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	2100      	movs	r1, #0
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 fc51 	bl	800a664 <USBD_LL_Transmit>

  return USBD_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009de2:	88fa      	ldrh	r2, [r7, #6]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009dea:	88fa      	ldrh	r2, [r7, #6]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df2:	88fb      	ldrh	r3, [r7, #6]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fc56 	bl	800a6aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fc44 	bl	800a6aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2204      	movs	r2, #4
 8009e38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fc0e 	bl	800a664 <USBD_LL_Transmit>

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e62:	2300      	movs	r3, #0
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fc1e 	bl	800a6aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	4912      	ldr	r1, [pc, #72]	@ (8009ec8 <MX_USB_DEVICE_Init+0x50>)
 8009e80:	4812      	ldr	r0, [pc, #72]	@ (8009ecc <MX_USB_DEVICE_Init+0x54>)
 8009e82:	f7fe ff62 	bl	8008d4a <USBD_Init>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e8c:	f7f7 fcae 	bl	80017ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e90:	490f      	ldr	r1, [pc, #60]	@ (8009ed0 <MX_USB_DEVICE_Init+0x58>)
 8009e92:	480e      	ldr	r0, [pc, #56]	@ (8009ecc <MX_USB_DEVICE_Init+0x54>)
 8009e94:	f7fe ff84 	bl	8008da0 <USBD_RegisterClass>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e9e:	f7f7 fca5 	bl	80017ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009ea2:	490c      	ldr	r1, [pc, #48]	@ (8009ed4 <MX_USB_DEVICE_Init+0x5c>)
 8009ea4:	4809      	ldr	r0, [pc, #36]	@ (8009ecc <MX_USB_DEVICE_Init+0x54>)
 8009ea6:	f7fe feb5 	bl	8008c14 <USBD_CDC_RegisterInterface>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009eb0:	f7f7 fc9c 	bl	80017ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009eb4:	4805      	ldr	r0, [pc, #20]	@ (8009ecc <MX_USB_DEVICE_Init+0x54>)
 8009eb6:	f7fe ff8c 	bl	8008dd2 <USBD_Start>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ec0:	f7f7 fc94 	bl	80017ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ec4:	bf00      	nop
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000012c 	.word	0x2000012c
 8009ecc:	200004b0 	.word	0x200004b0
 8009ed0:	20000018 	.word	0x20000018
 8009ed4:	2000011c 	.word	0x2000011c

08009ed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009edc:	2200      	movs	r2, #0
 8009ede:	4905      	ldr	r1, [pc, #20]	@ (8009ef4 <CDC_Init_FS+0x1c>)
 8009ee0:	4805      	ldr	r0, [pc, #20]	@ (8009ef8 <CDC_Init_FS+0x20>)
 8009ee2:	f7fe fead 	bl	8008c40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ee6:	4905      	ldr	r1, [pc, #20]	@ (8009efc <CDC_Init_FS+0x24>)
 8009ee8:	4803      	ldr	r0, [pc, #12]	@ (8009ef8 <CDC_Init_FS+0x20>)
 8009eea:	f7fe fec2 	bl	8008c72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000b74 	.word	0x20000b74
 8009ef8:	200004b0 	.word	0x200004b0
 8009efc:	20000774 	.word	0x20000774

08009f00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr
	...

08009f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	71fb      	strb	r3, [r7, #7]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b23      	cmp	r3, #35	@ 0x23
 8009f24:	d84a      	bhi.n	8009fbc <CDC_Control_FS+0xac>
 8009f26:	a201      	add	r2, pc, #4	@ (adr r2, 8009f2c <CDC_Control_FS+0x1c>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009fbd 	.word	0x08009fbd
 8009f30:	08009fbd 	.word	0x08009fbd
 8009f34:	08009fbd 	.word	0x08009fbd
 8009f38:	08009fbd 	.word	0x08009fbd
 8009f3c:	08009fbd 	.word	0x08009fbd
 8009f40:	08009fbd 	.word	0x08009fbd
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fbd 	.word	0x08009fbd
 8009f4c:	08009fbd 	.word	0x08009fbd
 8009f50:	08009fbd 	.word	0x08009fbd
 8009f54:	08009fbd 	.word	0x08009fbd
 8009f58:	08009fbd 	.word	0x08009fbd
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	08009fbd 	.word	0x08009fbd
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	08009fbd 	.word	0x08009fbd
 8009f70:	08009fbd 	.word	0x08009fbd
 8009f74:	08009fbd 	.word	0x08009fbd
 8009f78:	08009fbd 	.word	0x08009fbd
 8009f7c:	08009fbd 	.word	0x08009fbd
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fbd 	.word	0x08009fbd
 8009f88:	08009fbd 	.word	0x08009fbd
 8009f8c:	08009fbd 	.word	0x08009fbd
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fbd 	.word	0x08009fbd
 8009fa0:	08009fbd 	.word	0x08009fbd
 8009fa4:	08009fbd 	.word	0x08009fbd
 8009fa8:	08009fbd 	.word	0x08009fbd
 8009fac:	08009fbd 	.word	0x08009fbd
 8009fb0:	08009fbd 	.word	0x08009fbd
 8009fb4:	08009fbd 	.word	0x08009fbd
 8009fb8:	08009fbd 	.word	0x08009fbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fbc:	bf00      	nop
  }

  return (USBD_OK);
 8009fbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc80      	pop	{r7}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop

08009fcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	4805      	ldr	r0, [pc, #20]	@ (8009ff0 <CDC_Receive_FS+0x24>)
 8009fda:	f7fe fe4a 	bl	8008c72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fde:	4804      	ldr	r0, [pc, #16]	@ (8009ff0 <CDC_Receive_FS+0x24>)
 8009fe0:	f7fe fe89 	bl	8008cf6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	200004b0 	.word	0x200004b0

08009ff4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a004:	4b0d      	ldr	r3, [pc, #52]	@ (800a03c <CDC_Transmit_FS+0x48>)
 800a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a016:	2301      	movs	r3, #1
 800a018:	e00b      	b.n	800a032 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a01a:	887b      	ldrh	r3, [r7, #2]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4806      	ldr	r0, [pc, #24]	@ (800a03c <CDC_Transmit_FS+0x48>)
 800a022:	f7fe fe0d 	bl	8008c40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a026:	4805      	ldr	r0, [pc, #20]	@ (800a03c <CDC_Transmit_FS+0x48>)
 800a028:	f7fe fe36 	bl	8008c98 <USBD_CDC_TransmitPacket>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a030:	7bfb      	ldrb	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200004b0 	.word	0x200004b0

0800a040 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2212      	movs	r2, #18
 800a050:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a052:	4b03      	ldr	r3, [pc, #12]	@ (800a060 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20000148 	.word	0x20000148

0800a064 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2204      	movs	r2, #4
 800a074:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a076:	4b03      	ldr	r3, [pc, #12]	@ (800a084 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	2000015c 	.word	0x2000015c

0800a088 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	4907      	ldr	r1, [pc, #28]	@ (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a09e:	4808      	ldr	r0, [pc, #32]	@ (800a0c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0a0:	f7ff fe0d 	bl	8009cbe <USBD_GetString>
 800a0a4:	e004      	b.n	800a0b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	4904      	ldr	r1, [pc, #16]	@ (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a0aa:	4805      	ldr	r0, [pc, #20]	@ (800a0c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0ac:	f7ff fe07 	bl	8009cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0b0:	4b02      	ldr	r3, [pc, #8]	@ (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000f74 	.word	0x20000f74
 800a0c0:	0800f7b8 	.word	0x0800f7b8

0800a0c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	4904      	ldr	r1, [pc, #16]	@ (800a0e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0d4:	4804      	ldr	r0, [pc, #16]	@ (800a0e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0d6:	f7ff fdf2 	bl	8009cbe <USBD_GetString>
  return USBD_StrDesc;
 800a0da:	4b02      	ldr	r3, [pc, #8]	@ (800a0e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000f74 	.word	0x20000f74
 800a0e8:	0800f7d0 	.word	0x0800f7d0

0800a0ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	221a      	movs	r2, #26
 800a0fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0fe:	f000 f843 	bl	800a188 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a102:	4b02      	ldr	r3, [pc, #8]	@ (800a10c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000160 	.word	0x20000160

0800a110 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d105      	bne.n	800a12e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	4907      	ldr	r1, [pc, #28]	@ (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a126:	4808      	ldr	r0, [pc, #32]	@ (800a148 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a128:	f7ff fdc9 	bl	8009cbe <USBD_GetString>
 800a12c:	e004      	b.n	800a138 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	4904      	ldr	r1, [pc, #16]	@ (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a132:	4805      	ldr	r0, [pc, #20]	@ (800a148 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a134:	f7ff fdc3 	bl	8009cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000f74 	.word	0x20000f74
 800a148:	0800f7e4 	.word	0x0800f7e4

0800a14c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	6039      	str	r1, [r7, #0]
 800a156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	4907      	ldr	r1, [pc, #28]	@ (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a162:	4808      	ldr	r0, [pc, #32]	@ (800a184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a164:	f7ff fdab 	bl	8009cbe <USBD_GetString>
 800a168:	e004      	b.n	800a174 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4904      	ldr	r1, [pc, #16]	@ (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a16e:	4805      	ldr	r0, [pc, #20]	@ (800a184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a170:	f7ff fda5 	bl	8009cbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800a174:	4b02      	ldr	r3, [pc, #8]	@ (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	20000f74 	.word	0x20000f74
 800a184:	0800f7f0 	.word	0x0800f7f0

0800a188 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <Get_SerialNum+0x44>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a194:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d0 <Get_SerialNum+0x48>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a19a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d4 <Get_SerialNum+0x4c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	4909      	ldr	r1, [pc, #36]	@ (800a1d8 <Get_SerialNum+0x50>)
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f814 	bl	800a1e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	4908      	ldr	r1, [pc, #32]	@ (800a1dc <Get_SerialNum+0x54>)
 800a1bc:	68b8      	ldr	r0, [r7, #8]
 800a1be:	f000 f80f 	bl	800a1e0 <IntToUnicode>
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	1ffff7e8 	.word	0x1ffff7e8
 800a1d0:	1ffff7ec 	.word	0x1ffff7ec
 800a1d4:	1ffff7f0 	.word	0x1ffff7f0
 800a1d8:	20000162 	.word	0x20000162
 800a1dc:	20000172 	.word	0x20000172

0800a1e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	e027      	b.n	800a248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	0f1b      	lsrs	r3, r3, #28
 800a1fc:	2b09      	cmp	r3, #9
 800a1fe:	d80b      	bhi.n	800a218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	0f1b      	lsrs	r3, r3, #28
 800a204:	b2da      	uxtb	r2, r3
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4619      	mov	r1, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	440b      	add	r3, r1
 800a210:	3230      	adds	r2, #48	@ 0x30
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	e00a      	b.n	800a22e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	0f1b      	lsrs	r3, r3, #28
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4619      	mov	r1, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	440b      	add	r3, r1
 800a228:	3237      	adds	r2, #55	@ 0x37
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	3301      	adds	r3, #1
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	3301      	adds	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]
 800a248:	7dfa      	ldrb	r2, [r7, #23]
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d3d3      	bcc.n	800a1f8 <IntToUnicode+0x18>
  }
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	bc80      	pop	{r7}
 800a25a:	4770      	bx	lr

0800a25c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a0d      	ldr	r2, [pc, #52]	@ (800a2a0 <HAL_PCD_MspInit+0x44>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d113      	bne.n	800a296 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a26e:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a4 <HAL_PCD_MspInit+0x48>)
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a4 <HAL_PCD_MspInit+0x48>)
 800a274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a278:	61d3      	str	r3, [r2, #28]
 800a27a:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a4 <HAL_PCD_MspInit+0x48>)
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a286:	2200      	movs	r2, #0
 800a288:	2100      	movs	r1, #0
 800a28a:	2014      	movs	r0, #20
 800a28c:	f7f7 fde5 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a290:	2014      	movs	r0, #20
 800a292:	f7f7 fdfe 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	40005c00 	.word	0x40005c00
 800a2a4:	40021000 	.word	0x40021000

0800a2a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fdcf 	bl	8008e62 <USBD_LL_SetupStage>
}
 800a2c4:	bf00      	nop
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a2de:	78fa      	ldrb	r2, [r7, #3]
 800a2e0:	6879      	ldr	r1, [r7, #4]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	440b      	add	r3, r1
 800a2ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f7fe fe01 	bl	8008efc <USBD_LL_DataOutStage>
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	440b      	add	r3, r1
 800a322:	3324      	adds	r3, #36	@ 0x24
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	78fb      	ldrb	r3, [r7, #3]
 800a328:	4619      	mov	r1, r3
 800a32a:	f7fe fe58 	bl	8008fde <USBD_LL_DataInStage>
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe ff68 	bl	800921a <USBD_LL_SOF>
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a35a:	2301      	movs	r3, #1
 800a35c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	799b      	ldrb	r3, [r3, #6]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d001      	beq.n	800a36a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a366:	f7f7 fa41 	bl	80017ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a370:	7bfa      	ldrb	r2, [r7, #15]
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f7fe ff18 	bl	80091aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe fed1 	bl	8009128 <USBD_LL_Reset>
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
	...

0800a390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe ff12 	bl	80091c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	7a9b      	ldrb	r3, [r3, #10]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3ac:	4b04      	ldr	r3, [pc, #16]	@ (800a3c0 <HAL_PCD_SuspendCallback+0x30>)
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	4a03      	ldr	r2, [pc, #12]	@ (800a3c0 <HAL_PCD_SuspendCallback+0x30>)
 800a3b2:	f043 0306 	orr.w	r3, r3, #6
 800a3b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	e000ed00 	.word	0xe000ed00

0800a3c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe ff0c 	bl	80091f0 <USBD_LL_Resume>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a3e8:	4a28      	ldr	r2, [pc, #160]	@ (800a48c <USBD_LL_Init+0xac>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a26      	ldr	r2, [pc, #152]	@ (800a48c <USBD_LL_Init+0xac>)
 800a3f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3f8:	4b24      	ldr	r3, [pc, #144]	@ (800a48c <USBD_LL_Init+0xac>)
 800a3fa:	4a25      	ldr	r2, [pc, #148]	@ (800a490 <USBD_LL_Init+0xb0>)
 800a3fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3fe:	4b23      	ldr	r3, [pc, #140]	@ (800a48c <USBD_LL_Init+0xac>)
 800a400:	2208      	movs	r2, #8
 800a402:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a404:	4b21      	ldr	r3, [pc, #132]	@ (800a48c <USBD_LL_Init+0xac>)
 800a406:	2202      	movs	r2, #2
 800a408:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a40a:	4b20      	ldr	r3, [pc, #128]	@ (800a48c <USBD_LL_Init+0xac>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a410:	4b1e      	ldr	r3, [pc, #120]	@ (800a48c <USBD_LL_Init+0xac>)
 800a412:	2200      	movs	r2, #0
 800a414:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a416:	4b1d      	ldr	r3, [pc, #116]	@ (800a48c <USBD_LL_Init+0xac>)
 800a418:	2200      	movs	r2, #0
 800a41a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a41c:	481b      	ldr	r0, [pc, #108]	@ (800a48c <USBD_LL_Init+0xac>)
 800a41e:	f7f7 ffb8 	bl	8002392 <HAL_PCD_Init>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a428:	f7f7 f9e0 	bl	80017ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a432:	2318      	movs	r3, #24
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	f7f9 fcc9 	bl	8003dce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a442:	2358      	movs	r3, #88	@ 0x58
 800a444:	2200      	movs	r2, #0
 800a446:	2180      	movs	r1, #128	@ 0x80
 800a448:	f7f9 fcc1 	bl	8003dce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a452:	23c0      	movs	r3, #192	@ 0xc0
 800a454:	2200      	movs	r2, #0
 800a456:	2181      	movs	r1, #129	@ 0x81
 800a458:	f7f9 fcb9 	bl	8003dce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a462:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a466:	2200      	movs	r2, #0
 800a468:	2101      	movs	r1, #1
 800a46a:	f7f9 fcb0 	bl	8003dce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a478:	2200      	movs	r2, #0
 800a47a:	2182      	movs	r1, #130	@ 0x82
 800a47c:	f7f9 fca7 	bl	8003dce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20001174 	.word	0x20001174
 800a490:	40005c00 	.word	0x40005c00

0800a494 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f8 f867 	bl	800257e <HAL_PCD_Start>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 f94e 	bl	800a758 <USBD_Get_USB_Status>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	4608      	mov	r0, r1
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	70fb      	strb	r3, [r7, #3]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70bb      	strb	r3, [r7, #2]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4f2:	78bb      	ldrb	r3, [r7, #2]
 800a4f4:	883a      	ldrh	r2, [r7, #0]
 800a4f6:	78f9      	ldrb	r1, [r7, #3]
 800a4f8:	f7f8 f9bb 	bl	8002872 <HAL_PCD_EP_Open>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f928 	bl	800a758 <USBD_Get_USB_Status>
 800a508:	4603      	mov	r3, r0
 800a50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a530:	78fa      	ldrb	r2, [r7, #3]
 800a532:	4611      	mov	r1, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f7f8 f9f9 	bl	800292c <HAL_PCD_EP_Close>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f909 	bl	800a758 <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a56e:	78fa      	ldrb	r2, [r7, #3]
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f7f8 faa1 	bl	8002aba <HAL_PCD_EP_SetStall>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a57c:	7bfb      	ldrb	r3, [r7, #15]
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 f8ea 	bl	800a758 <USBD_Get_USB_Status>
 800a584:	4603      	mov	r3, r0
 800a586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a588:	7bbb      	ldrb	r3, [r7, #14]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	460b      	mov	r3, r1
 800a59c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5ac:	78fa      	ldrb	r2, [r7, #3]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7f8 fae2 	bl	8002b7a <HAL_PCD_EP_ClrStall>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 f8cb 	bl	800a758 <USBD_Get_USB_Status>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	da0b      	bge.n	800a604 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5ec:	78fb      	ldrb	r3, [r7, #3]
 800a5ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	440b      	add	r3, r1
 800a5fe:	3312      	adds	r3, #18
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	e00b      	b.n	800a61c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a61a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	bc80      	pop	{r7}
 800a624:	4770      	bx	lr

0800a626 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b084      	sub	sp, #16
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a640:	78fa      	ldrb	r2, [r7, #3]
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7f8 f8f0 	bl	800282a <HAL_PCD_SetAddress>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	4618      	mov	r0, r3
 800a652:	f000 f881 	bl	800a758 <USBD_Get_USB_Status>
 800a656:	4603      	mov	r3, r0
 800a658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	461a      	mov	r2, r3
 800a670:	460b      	mov	r3, r1
 800a672:	72fb      	strb	r3, [r7, #11]
 800a674:	4613      	mov	r3, r2
 800a676:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a686:	893b      	ldrh	r3, [r7, #8]
 800a688:	7af9      	ldrb	r1, [r7, #11]
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	f7f8 f9de 	bl	8002a4c <HAL_PCD_EP_Transmit>
 800a690:	4603      	mov	r3, r0
 800a692:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a694:	7dfb      	ldrb	r3, [r7, #23]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f85e 	bl	800a758 <USBD_Get_USB_Status>
 800a69c:	4603      	mov	r3, r0
 800a69e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	72fb      	strb	r3, [r7, #11]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6cc:	893b      	ldrh	r3, [r7, #8]
 800a6ce:	7af9      	ldrb	r1, [r7, #11]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	f7f8 f973 	bl	80029bc <HAL_PCD_EP_Receive>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 f83b 	bl	800a758 <USBD_Get_USB_Status>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a702:	78fa      	ldrb	r2, [r7, #3]
 800a704:	4611      	mov	r1, r2
 800a706:	4618      	mov	r0, r3
 800a708:	f7f8 f989 	bl	8002a1e <HAL_PCD_EP_GetRxCount>
 800a70c:	4603      	mov	r3, r0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a720:	4b02      	ldr	r3, [pc, #8]	@ (800a72c <USBD_static_malloc+0x14>)
}
 800a722:	4618      	mov	r0, r3
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	bc80      	pop	{r7}
 800a72a:	4770      	bx	lr
 800a72c:	2000144c 	.word	0x2000144c

0800a730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]

}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bc80      	pop	{r7}
 800a740:	4770      	bx	lr

0800a742 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	460b      	mov	r3, r1
 800a74c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	4603      	mov	r3, r0
 800a760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a766:	79fb      	ldrb	r3, [r7, #7]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d817      	bhi.n	800a79c <USBD_Get_USB_Status+0x44>
 800a76c:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <USBD_Get_USB_Status+0x1c>)
 800a76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a772:	bf00      	nop
 800a774:	0800a785 	.word	0x0800a785
 800a778:	0800a78b 	.word	0x0800a78b
 800a77c:	0800a791 	.word	0x0800a791
 800a780:	0800a797 	.word	0x0800a797
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
    break;
 800a788:	e00b      	b.n	800a7a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a78a:	2302      	movs	r3, #2
 800a78c:	73fb      	strb	r3, [r7, #15]
    break;
 800a78e:	e008      	b.n	800a7a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a790:	2301      	movs	r3, #1
 800a792:	73fb      	strb	r3, [r7, #15]
    break;
 800a794:	e005      	b.n	800a7a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a796:	2302      	movs	r3, #2
 800a798:	73fb      	strb	r3, [r7, #15]
    break;
 800a79a:	e002      	b.n	800a7a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a79c:	2302      	movs	r3, #2
 800a79e:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a0:	bf00      	nop
  }
  return usb_status;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <__cvt>:
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b6:	461d      	mov	r5, r3
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a7be:	461d      	movlt	r5, r3
 800a7c0:	2300      	movge	r3, #0
 800a7c2:	232d      	movlt	r3, #45	@ 0x2d
 800a7c4:	b088      	sub	sp, #32
 800a7c6:	4614      	mov	r4, r2
 800a7c8:	bfb8      	it	lt
 800a7ca:	4614      	movlt	r4, r2
 800a7cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a7d0:	7013      	strb	r3, [r2, #0]
 800a7d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a7d8:	f023 0820 	bic.w	r8, r3, #32
 800a7dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7e0:	d005      	beq.n	800a7ee <__cvt+0x3e>
 800a7e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a7e6:	d100      	bne.n	800a7ea <__cvt+0x3a>
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	e000      	b.n	800a7f0 <__cvt+0x40>
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	aa07      	add	r2, sp, #28
 800a7f2:	9204      	str	r2, [sp, #16]
 800a7f4:	aa06      	add	r2, sp, #24
 800a7f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a7fa:	e9cd 3600 	strd	r3, r6, [sp]
 800a7fe:	4622      	mov	r2, r4
 800a800:	462b      	mov	r3, r5
 800a802:	f001 f8f1 	bl	800b9e8 <_dtoa_r>
 800a806:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a80a:	4607      	mov	r7, r0
 800a80c:	d119      	bne.n	800a842 <__cvt+0x92>
 800a80e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a810:	07db      	lsls	r3, r3, #31
 800a812:	d50e      	bpl.n	800a832 <__cvt+0x82>
 800a814:	eb00 0906 	add.w	r9, r0, r6
 800a818:	2200      	movs	r2, #0
 800a81a:	2300      	movs	r3, #0
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f7f6 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 800a824:	b108      	cbz	r0, 800a82a <__cvt+0x7a>
 800a826:	f8cd 901c 	str.w	r9, [sp, #28]
 800a82a:	2230      	movs	r2, #48	@ 0x30
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	454b      	cmp	r3, r9
 800a830:	d31e      	bcc.n	800a870 <__cvt+0xc0>
 800a832:	4638      	mov	r0, r7
 800a834:	9b07      	ldr	r3, [sp, #28]
 800a836:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a838:	1bdb      	subs	r3, r3, r7
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	b008      	add	sp, #32
 800a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a842:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a846:	eb00 0906 	add.w	r9, r0, r6
 800a84a:	d1e5      	bne.n	800a818 <__cvt+0x68>
 800a84c:	7803      	ldrb	r3, [r0, #0]
 800a84e:	2b30      	cmp	r3, #48	@ 0x30
 800a850:	d10a      	bne.n	800a868 <__cvt+0xb8>
 800a852:	2200      	movs	r2, #0
 800a854:	2300      	movs	r3, #0
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800a85e:	b918      	cbnz	r0, 800a868 <__cvt+0xb8>
 800a860:	f1c6 0601 	rsb	r6, r6, #1
 800a864:	f8ca 6000 	str.w	r6, [sl]
 800a868:	f8da 3000 	ldr.w	r3, [sl]
 800a86c:	4499      	add	r9, r3
 800a86e:	e7d3      	b.n	800a818 <__cvt+0x68>
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	9107      	str	r1, [sp, #28]
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	e7d9      	b.n	800a82c <__cvt+0x7c>

0800a878 <__exponent>:
 800a878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a87a:	2900      	cmp	r1, #0
 800a87c:	bfb6      	itet	lt
 800a87e:	232d      	movlt	r3, #45	@ 0x2d
 800a880:	232b      	movge	r3, #43	@ 0x2b
 800a882:	4249      	neglt	r1, r1
 800a884:	2909      	cmp	r1, #9
 800a886:	7002      	strb	r2, [r0, #0]
 800a888:	7043      	strb	r3, [r0, #1]
 800a88a:	dd29      	ble.n	800a8e0 <__exponent+0x68>
 800a88c:	f10d 0307 	add.w	r3, sp, #7
 800a890:	461d      	mov	r5, r3
 800a892:	270a      	movs	r7, #10
 800a894:	fbb1 f6f7 	udiv	r6, r1, r7
 800a898:	461a      	mov	r2, r3
 800a89a:	fb07 1416 	mls	r4, r7, r6, r1
 800a89e:	3430      	adds	r4, #48	@ 0x30
 800a8a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	2c63      	cmp	r4, #99	@ 0x63
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8ae:	dcf1      	bgt.n	800a894 <__exponent+0x1c>
 800a8b0:	3130      	adds	r1, #48	@ 0x30
 800a8b2:	1e94      	subs	r4, r2, #2
 800a8b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	1c41      	adds	r1, r0, #1
 800a8bc:	42ab      	cmp	r3, r5
 800a8be:	d30a      	bcc.n	800a8d6 <__exponent+0x5e>
 800a8c0:	f10d 0309 	add.w	r3, sp, #9
 800a8c4:	1a9b      	subs	r3, r3, r2
 800a8c6:	42ac      	cmp	r4, r5
 800a8c8:	bf88      	it	hi
 800a8ca:	2300      	movhi	r3, #0
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	4403      	add	r3, r0
 800a8d0:	1a18      	subs	r0, r3, r0
 800a8d2:	b003      	add	sp, #12
 800a8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a8da:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a8de:	e7ed      	b.n	800a8bc <__exponent+0x44>
 800a8e0:	2330      	movs	r3, #48	@ 0x30
 800a8e2:	3130      	adds	r1, #48	@ 0x30
 800a8e4:	7083      	strb	r3, [r0, #2]
 800a8e6:	70c1      	strb	r1, [r0, #3]
 800a8e8:	1d03      	adds	r3, r0, #4
 800a8ea:	e7f1      	b.n	800a8d0 <__exponent+0x58>

0800a8ec <_printf_float>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	b091      	sub	sp, #68	@ 0x44
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	f000 ff61 	bl	800b7c4 <_localeconv_r>
 800a902:	6803      	ldr	r3, [r0, #0]
 800a904:	4618      	mov	r0, r3
 800a906:	9308      	str	r3, [sp, #32]
 800a908:	f7f5 fc22 	bl	8000150 <strlen>
 800a90c:	2300      	movs	r3, #0
 800a90e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a910:	f8d8 3000 	ldr.w	r3, [r8]
 800a914:	9009      	str	r0, [sp, #36]	@ 0x24
 800a916:	3307      	adds	r3, #7
 800a918:	f023 0307 	bic.w	r3, r3, #7
 800a91c:	f103 0208 	add.w	r2, r3, #8
 800a920:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a924:	f8d4 b000 	ldr.w	fp, [r4]
 800a928:	f8c8 2000 	str.w	r2, [r8]
 800a92c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a934:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a936:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a93a:	f04f 32ff 	mov.w	r2, #4294967295
 800a93e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a946:	4b9c      	ldr	r3, [pc, #624]	@ (800abb8 <_printf_float+0x2cc>)
 800a948:	f7f6 f860 	bl	8000a0c <__aeabi_dcmpun>
 800a94c:	bb70      	cbnz	r0, 800a9ac <_printf_float+0xc0>
 800a94e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a952:	f04f 32ff 	mov.w	r2, #4294967295
 800a956:	4b98      	ldr	r3, [pc, #608]	@ (800abb8 <_printf_float+0x2cc>)
 800a958:	f7f6 f83a 	bl	80009d0 <__aeabi_dcmple>
 800a95c:	bb30      	cbnz	r0, 800a9ac <_printf_float+0xc0>
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4640      	mov	r0, r8
 800a964:	4649      	mov	r1, r9
 800a966:	f7f6 f829 	bl	80009bc <__aeabi_dcmplt>
 800a96a:	b110      	cbz	r0, 800a972 <_printf_float+0x86>
 800a96c:	232d      	movs	r3, #45	@ 0x2d
 800a96e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a972:	4a92      	ldr	r2, [pc, #584]	@ (800abbc <_printf_float+0x2d0>)
 800a974:	4b92      	ldr	r3, [pc, #584]	@ (800abc0 <_printf_float+0x2d4>)
 800a976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a97a:	bf8c      	ite	hi
 800a97c:	4690      	movhi	r8, r2
 800a97e:	4698      	movls	r8, r3
 800a980:	2303      	movs	r3, #3
 800a982:	f04f 0900 	mov.w	r9, #0
 800a986:	6123      	str	r3, [r4, #16]
 800a988:	f02b 0304 	bic.w	r3, fp, #4
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	4633      	mov	r3, r6
 800a990:	4621      	mov	r1, r4
 800a992:	4628      	mov	r0, r5
 800a994:	9700      	str	r7, [sp, #0]
 800a996:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a998:	f000 f9d4 	bl	800ad44 <_printf_common>
 800a99c:	3001      	adds	r0, #1
 800a99e:	f040 8090 	bne.w	800aac2 <_printf_float+0x1d6>
 800a9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a6:	b011      	add	sp, #68	@ 0x44
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	4642      	mov	r2, r8
 800a9ae:	464b      	mov	r3, r9
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	f7f6 f82a 	bl	8000a0c <__aeabi_dcmpun>
 800a9b8:	b148      	cbz	r0, 800a9ce <_printf_float+0xe2>
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfb8      	it	lt
 800a9c0:	232d      	movlt	r3, #45	@ 0x2d
 800a9c2:	4a80      	ldr	r2, [pc, #512]	@ (800abc4 <_printf_float+0x2d8>)
 800a9c4:	bfb8      	it	lt
 800a9c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a9ca:	4b7f      	ldr	r3, [pc, #508]	@ (800abc8 <_printf_float+0x2dc>)
 800a9cc:	e7d3      	b.n	800a976 <_printf_float+0x8a>
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a9d4:	1c5a      	adds	r2, r3, #1
 800a9d6:	d13f      	bne.n	800aa58 <_printf_float+0x16c>
 800a9d8:	2306      	movs	r3, #6
 800a9da:	6063      	str	r3, [r4, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	9206      	str	r2, [sp, #24]
 800a9e6:	aa0e      	add	r2, sp, #56	@ 0x38
 800a9e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a9ec:	aa0d      	add	r2, sp, #52	@ 0x34
 800a9ee:	9203      	str	r2, [sp, #12]
 800a9f0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a9f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a9f8:	6863      	ldr	r3, [r4, #4]
 800a9fa:	4642      	mov	r2, r8
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	4628      	mov	r0, r5
 800aa00:	464b      	mov	r3, r9
 800aa02:	910a      	str	r1, [sp, #40]	@ 0x28
 800aa04:	f7ff fed4 	bl	800a7b0 <__cvt>
 800aa08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	2947      	cmp	r1, #71	@ 0x47
 800aa0e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa10:	d128      	bne.n	800aa64 <_printf_float+0x178>
 800aa12:	1cc8      	adds	r0, r1, #3
 800aa14:	db02      	blt.n	800aa1c <_printf_float+0x130>
 800aa16:	6863      	ldr	r3, [r4, #4]
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	dd40      	ble.n	800aa9e <_printf_float+0x1b2>
 800aa1c:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa20:	fa5f fa8a 	uxtb.w	sl, sl
 800aa24:	4652      	mov	r2, sl
 800aa26:	3901      	subs	r1, #1
 800aa28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800aa2c:	910d      	str	r1, [sp, #52]	@ 0x34
 800aa2e:	f7ff ff23 	bl	800a878 <__exponent>
 800aa32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa34:	4681      	mov	r9, r0
 800aa36:	1813      	adds	r3, r2, r0
 800aa38:	2a01      	cmp	r2, #1
 800aa3a:	6123      	str	r3, [r4, #16]
 800aa3c:	dc02      	bgt.n	800aa44 <_printf_float+0x158>
 800aa3e:	6822      	ldr	r2, [r4, #0]
 800aa40:	07d2      	lsls	r2, r2, #31
 800aa42:	d501      	bpl.n	800aa48 <_printf_float+0x15c>
 800aa44:	3301      	adds	r3, #1
 800aa46:	6123      	str	r3, [r4, #16]
 800aa48:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d09e      	beq.n	800a98e <_printf_float+0xa2>
 800aa50:	232d      	movs	r3, #45	@ 0x2d
 800aa52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa56:	e79a      	b.n	800a98e <_printf_float+0xa2>
 800aa58:	2947      	cmp	r1, #71	@ 0x47
 800aa5a:	d1bf      	bne.n	800a9dc <_printf_float+0xf0>
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1bd      	bne.n	800a9dc <_printf_float+0xf0>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7ba      	b.n	800a9da <_printf_float+0xee>
 800aa64:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa68:	d9dc      	bls.n	800aa24 <_printf_float+0x138>
 800aa6a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aa6e:	d118      	bne.n	800aaa2 <_printf_float+0x1b6>
 800aa70:	2900      	cmp	r1, #0
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	dd0b      	ble.n	800aa8e <_printf_float+0x1a2>
 800aa76:	6121      	str	r1, [r4, #16]
 800aa78:	b913      	cbnz	r3, 800aa80 <_printf_float+0x194>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	07d0      	lsls	r0, r2, #31
 800aa7e:	d502      	bpl.n	800aa86 <_printf_float+0x19a>
 800aa80:	3301      	adds	r3, #1
 800aa82:	440b      	add	r3, r1
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	f04f 0900 	mov.w	r9, #0
 800aa8a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa8c:	e7dc      	b.n	800aa48 <_printf_float+0x15c>
 800aa8e:	b913      	cbnz	r3, 800aa96 <_printf_float+0x1aa>
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	07d2      	lsls	r2, r2, #31
 800aa94:	d501      	bpl.n	800aa9a <_printf_float+0x1ae>
 800aa96:	3302      	adds	r3, #2
 800aa98:	e7f4      	b.n	800aa84 <_printf_float+0x198>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e7f2      	b.n	800aa84 <_printf_float+0x198>
 800aa9e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aaa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	db05      	blt.n	800aab4 <_printf_float+0x1c8>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	6121      	str	r1, [r4, #16]
 800aaac:	07d8      	lsls	r0, r3, #31
 800aaae:	d5ea      	bpl.n	800aa86 <_printf_float+0x19a>
 800aab0:	1c4b      	adds	r3, r1, #1
 800aab2:	e7e7      	b.n	800aa84 <_printf_float+0x198>
 800aab4:	2900      	cmp	r1, #0
 800aab6:	bfcc      	ite	gt
 800aab8:	2201      	movgt	r2, #1
 800aaba:	f1c1 0202 	rsble	r2, r1, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	e7e0      	b.n	800aa84 <_printf_float+0x198>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	055a      	lsls	r2, r3, #21
 800aac6:	d407      	bmi.n	800aad8 <_printf_float+0x1ec>
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	4642      	mov	r2, r8
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	d12b      	bne.n	800ab2e <_printf_float+0x242>
 800aad6:	e764      	b.n	800a9a2 <_printf_float+0xb6>
 800aad8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aadc:	f240 80dc 	bls.w	800ac98 <_printf_float+0x3ac>
 800aae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	f7f5 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d033      	beq.n	800ab58 <_printf_float+0x26c>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	4a35      	ldr	r2, [pc, #212]	@ (800abcc <_printf_float+0x2e0>)
 800aaf8:	47b8      	blx	r7
 800aafa:	3001      	adds	r0, #1
 800aafc:	f43f af51 	beq.w	800a9a2 <_printf_float+0xb6>
 800ab00:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ab04:	4543      	cmp	r3, r8
 800ab06:	db02      	blt.n	800ab0e <_printf_float+0x222>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	07d8      	lsls	r0, r3, #31
 800ab0c:	d50f      	bpl.n	800ab2e <_printf_float+0x242>
 800ab0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f af42 	beq.w	800a9a2 <_printf_float+0xb6>
 800ab1e:	f04f 0900 	mov.w	r9, #0
 800ab22:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab26:	f104 0a1a 	add.w	sl, r4, #26
 800ab2a:	45c8      	cmp	r8, r9
 800ab2c:	dc09      	bgt.n	800ab42 <_printf_float+0x256>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	079b      	lsls	r3, r3, #30
 800ab32:	f100 8102 	bmi.w	800ad3a <_printf_float+0x44e>
 800ab36:	68e0      	ldr	r0, [r4, #12]
 800ab38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab3a:	4298      	cmp	r0, r3
 800ab3c:	bfb8      	it	lt
 800ab3e:	4618      	movlt	r0, r3
 800ab40:	e731      	b.n	800a9a6 <_printf_float+0xba>
 800ab42:	2301      	movs	r3, #1
 800ab44:	4652      	mov	r2, sl
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f43f af28 	beq.w	800a9a2 <_printf_float+0xb6>
 800ab52:	f109 0901 	add.w	r9, r9, #1
 800ab56:	e7e8      	b.n	800ab2a <_printf_float+0x23e>
 800ab58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	dc38      	bgt.n	800abd0 <_printf_float+0x2e4>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	4a19      	ldr	r2, [pc, #100]	@ (800abcc <_printf_float+0x2e0>)
 800ab66:	47b8      	blx	r7
 800ab68:	3001      	adds	r0, #1
 800ab6a:	f43f af1a 	beq.w	800a9a2 <_printf_float+0xb6>
 800ab6e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ab72:	ea59 0303 	orrs.w	r3, r9, r3
 800ab76:	d102      	bne.n	800ab7e <_printf_float+0x292>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07d9      	lsls	r1, r3, #31
 800ab7c:	d5d7      	bpl.n	800ab2e <_printf_float+0x242>
 800ab7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f43f af0a 	beq.w	800a9a2 <_printf_float+0xb6>
 800ab8e:	f04f 0a00 	mov.w	sl, #0
 800ab92:	f104 0b1a 	add.w	fp, r4, #26
 800ab96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab98:	425b      	negs	r3, r3
 800ab9a:	4553      	cmp	r3, sl
 800ab9c:	dc01      	bgt.n	800aba2 <_printf_float+0x2b6>
 800ab9e:	464b      	mov	r3, r9
 800aba0:	e793      	b.n	800aaca <_printf_float+0x1de>
 800aba2:	2301      	movs	r3, #1
 800aba4:	465a      	mov	r2, fp
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b8      	blx	r7
 800abac:	3001      	adds	r0, #1
 800abae:	f43f aef8 	beq.w	800a9a2 <_printf_float+0xb6>
 800abb2:	f10a 0a01 	add.w	sl, sl, #1
 800abb6:	e7ee      	b.n	800ab96 <_printf_float+0x2aa>
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	0800f86c 	.word	0x0800f86c
 800abc0:	0800f868 	.word	0x0800f868
 800abc4:	0800f874 	.word	0x0800f874
 800abc8:	0800f870 	.word	0x0800f870
 800abcc:	0800f9ae 	.word	0x0800f9ae
 800abd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abd2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800abd6:	4553      	cmp	r3, sl
 800abd8:	bfa8      	it	ge
 800abda:	4653      	movge	r3, sl
 800abdc:	2b00      	cmp	r3, #0
 800abde:	4699      	mov	r9, r3
 800abe0:	dc36      	bgt.n	800ac50 <_printf_float+0x364>
 800abe2:	f04f 0b00 	mov.w	fp, #0
 800abe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abea:	f104 021a 	add.w	r2, r4, #26
 800abee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800abf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abf2:	eba3 0309 	sub.w	r3, r3, r9
 800abf6:	455b      	cmp	r3, fp
 800abf8:	dc31      	bgt.n	800ac5e <_printf_float+0x372>
 800abfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abfc:	459a      	cmp	sl, r3
 800abfe:	dc3a      	bgt.n	800ac76 <_printf_float+0x38a>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	07da      	lsls	r2, r3, #31
 800ac04:	d437      	bmi.n	800ac76 <_printf_float+0x38a>
 800ac06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac08:	ebaa 0903 	sub.w	r9, sl, r3
 800ac0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac0e:	ebaa 0303 	sub.w	r3, sl, r3
 800ac12:	4599      	cmp	r9, r3
 800ac14:	bfa8      	it	ge
 800ac16:	4699      	movge	r9, r3
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	dc33      	bgt.n	800ac86 <_printf_float+0x39a>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac26:	f104 0b1a 	add.w	fp, r4, #26
 800ac2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac2c:	ebaa 0303 	sub.w	r3, sl, r3
 800ac30:	eba3 0309 	sub.w	r3, r3, r9
 800ac34:	4543      	cmp	r3, r8
 800ac36:	f77f af7a 	ble.w	800ab2e <_printf_float+0x242>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	465a      	mov	r2, fp
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	f43f aeac 	beq.w	800a9a2 <_printf_float+0xb6>
 800ac4a:	f108 0801 	add.w	r8, r8, #1
 800ac4e:	e7ec      	b.n	800ac2a <_printf_float+0x33e>
 800ac50:	4642      	mov	r2, r8
 800ac52:	4631      	mov	r1, r6
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b8      	blx	r7
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d1c2      	bne.n	800abe2 <_printf_float+0x2f6>
 800ac5c:	e6a1      	b.n	800a9a2 <_printf_float+0xb6>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4631      	mov	r1, r6
 800ac62:	4628      	mov	r0, r5
 800ac64:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac66:	47b8      	blx	r7
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f43f ae9a 	beq.w	800a9a2 <_printf_float+0xb6>
 800ac6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac70:	f10b 0b01 	add.w	fp, fp, #1
 800ac74:	e7bb      	b.n	800abee <_printf_float+0x302>
 800ac76:	4631      	mov	r1, r6
 800ac78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b8      	blx	r7
 800ac80:	3001      	adds	r0, #1
 800ac82:	d1c0      	bne.n	800ac06 <_printf_float+0x31a>
 800ac84:	e68d      	b.n	800a9a2 <_printf_float+0xb6>
 800ac86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac88:	464b      	mov	r3, r9
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	4442      	add	r2, r8
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	d1c3      	bne.n	800ac1e <_printf_float+0x332>
 800ac96:	e684      	b.n	800a9a2 <_printf_float+0xb6>
 800ac98:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ac9c:	f1ba 0f01 	cmp.w	sl, #1
 800aca0:	dc01      	bgt.n	800aca6 <_printf_float+0x3ba>
 800aca2:	07db      	lsls	r3, r3, #31
 800aca4:	d536      	bpl.n	800ad14 <_printf_float+0x428>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4642      	mov	r2, r8
 800acaa:	4631      	mov	r1, r6
 800acac:	4628      	mov	r0, r5
 800acae:	47b8      	blx	r7
 800acb0:	3001      	adds	r0, #1
 800acb2:	f43f ae76 	beq.w	800a9a2 <_printf_float+0xb6>
 800acb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acba:	4631      	mov	r1, r6
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b8      	blx	r7
 800acc0:	3001      	adds	r0, #1
 800acc2:	f43f ae6e 	beq.w	800a9a2 <_printf_float+0xb6>
 800acc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acca:	2200      	movs	r2, #0
 800accc:	2300      	movs	r3, #0
 800acce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acd2:	f7f5 fe69 	bl	80009a8 <__aeabi_dcmpeq>
 800acd6:	b9c0      	cbnz	r0, 800ad0a <_printf_float+0x41e>
 800acd8:	4653      	mov	r3, sl
 800acda:	f108 0201 	add.w	r2, r8, #1
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b8      	blx	r7
 800ace4:	3001      	adds	r0, #1
 800ace6:	d10c      	bne.n	800ad02 <_printf_float+0x416>
 800ace8:	e65b      	b.n	800a9a2 <_printf_float+0xb6>
 800acea:	2301      	movs	r3, #1
 800acec:	465a      	mov	r2, fp
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	f43f ae54 	beq.w	800a9a2 <_printf_float+0xb6>
 800acfa:	f108 0801 	add.w	r8, r8, #1
 800acfe:	45d0      	cmp	r8, sl
 800ad00:	dbf3      	blt.n	800acea <_printf_float+0x3fe>
 800ad02:	464b      	mov	r3, r9
 800ad04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ad08:	e6e0      	b.n	800aacc <_printf_float+0x1e0>
 800ad0a:	f04f 0800 	mov.w	r8, #0
 800ad0e:	f104 0b1a 	add.w	fp, r4, #26
 800ad12:	e7f4      	b.n	800acfe <_printf_float+0x412>
 800ad14:	2301      	movs	r3, #1
 800ad16:	4642      	mov	r2, r8
 800ad18:	e7e1      	b.n	800acde <_printf_float+0x3f2>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	464a      	mov	r2, r9
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f ae3c 	beq.w	800a9a2 <_printf_float+0xb6>
 800ad2a:	f108 0801 	add.w	r8, r8, #1
 800ad2e:	68e3      	ldr	r3, [r4, #12]
 800ad30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad32:	1a5b      	subs	r3, r3, r1
 800ad34:	4543      	cmp	r3, r8
 800ad36:	dcf0      	bgt.n	800ad1a <_printf_float+0x42e>
 800ad38:	e6fd      	b.n	800ab36 <_printf_float+0x24a>
 800ad3a:	f04f 0800 	mov.w	r8, #0
 800ad3e:	f104 0919 	add.w	r9, r4, #25
 800ad42:	e7f4      	b.n	800ad2e <_printf_float+0x442>

0800ad44 <_printf_common>:
 800ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad48:	4616      	mov	r6, r2
 800ad4a:	4698      	mov	r8, r3
 800ad4c:	688a      	ldr	r2, [r1, #8]
 800ad4e:	690b      	ldr	r3, [r1, #16]
 800ad50:	4607      	mov	r7, r0
 800ad52:	4293      	cmp	r3, r2
 800ad54:	bfb8      	it	lt
 800ad56:	4613      	movlt	r3, r2
 800ad58:	6033      	str	r3, [r6, #0]
 800ad5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad64:	b10a      	cbz	r2, 800ad6a <_printf_common+0x26>
 800ad66:	3301      	adds	r3, #1
 800ad68:	6033      	str	r3, [r6, #0]
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	0699      	lsls	r1, r3, #26
 800ad6e:	bf42      	ittt	mi
 800ad70:	6833      	ldrmi	r3, [r6, #0]
 800ad72:	3302      	addmi	r3, #2
 800ad74:	6033      	strmi	r3, [r6, #0]
 800ad76:	6825      	ldr	r5, [r4, #0]
 800ad78:	f015 0506 	ands.w	r5, r5, #6
 800ad7c:	d106      	bne.n	800ad8c <_printf_common+0x48>
 800ad7e:	f104 0a19 	add.w	sl, r4, #25
 800ad82:	68e3      	ldr	r3, [r4, #12]
 800ad84:	6832      	ldr	r2, [r6, #0]
 800ad86:	1a9b      	subs	r3, r3, r2
 800ad88:	42ab      	cmp	r3, r5
 800ad8a:	dc2b      	bgt.n	800ade4 <_printf_common+0xa0>
 800ad8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad90:	6822      	ldr	r2, [r4, #0]
 800ad92:	3b00      	subs	r3, #0
 800ad94:	bf18      	it	ne
 800ad96:	2301      	movne	r3, #1
 800ad98:	0692      	lsls	r2, r2, #26
 800ad9a:	d430      	bmi.n	800adfe <_printf_common+0xba>
 800ad9c:	4641      	mov	r1, r8
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ada4:	47c8      	blx	r9
 800ada6:	3001      	adds	r0, #1
 800ada8:	d023      	beq.n	800adf2 <_printf_common+0xae>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	6922      	ldr	r2, [r4, #16]
 800adae:	f003 0306 	and.w	r3, r3, #6
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	bf14      	ite	ne
 800adb6:	2500      	movne	r5, #0
 800adb8:	6833      	ldreq	r3, [r6, #0]
 800adba:	f04f 0600 	mov.w	r6, #0
 800adbe:	bf08      	it	eq
 800adc0:	68e5      	ldreq	r5, [r4, #12]
 800adc2:	f104 041a 	add.w	r4, r4, #26
 800adc6:	bf08      	it	eq
 800adc8:	1aed      	subeq	r5, r5, r3
 800adca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800adce:	bf08      	it	eq
 800add0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800add4:	4293      	cmp	r3, r2
 800add6:	bfc4      	itt	gt
 800add8:	1a9b      	subgt	r3, r3, r2
 800adda:	18ed      	addgt	r5, r5, r3
 800addc:	42b5      	cmp	r5, r6
 800adde:	d11a      	bne.n	800ae16 <_printf_common+0xd2>
 800ade0:	2000      	movs	r0, #0
 800ade2:	e008      	b.n	800adf6 <_printf_common+0xb2>
 800ade4:	2301      	movs	r3, #1
 800ade6:	4652      	mov	r2, sl
 800ade8:	4641      	mov	r1, r8
 800adea:	4638      	mov	r0, r7
 800adec:	47c8      	blx	r9
 800adee:	3001      	adds	r0, #1
 800adf0:	d103      	bne.n	800adfa <_printf_common+0xb6>
 800adf2:	f04f 30ff 	mov.w	r0, #4294967295
 800adf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adfa:	3501      	adds	r5, #1
 800adfc:	e7c1      	b.n	800ad82 <_printf_common+0x3e>
 800adfe:	2030      	movs	r0, #48	@ 0x30
 800ae00:	18e1      	adds	r1, r4, r3
 800ae02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae0c:	4422      	add	r2, r4
 800ae0e:	3302      	adds	r3, #2
 800ae10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae14:	e7c2      	b.n	800ad9c <_printf_common+0x58>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4622      	mov	r2, r4
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	47c8      	blx	r9
 800ae20:	3001      	adds	r0, #1
 800ae22:	d0e6      	beq.n	800adf2 <_printf_common+0xae>
 800ae24:	3601      	adds	r6, #1
 800ae26:	e7d9      	b.n	800addc <_printf_common+0x98>

0800ae28 <_printf_i>:
 800ae28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	7e0f      	ldrb	r7, [r1, #24]
 800ae2e:	4691      	mov	r9, r2
 800ae30:	2f78      	cmp	r7, #120	@ 0x78
 800ae32:	4680      	mov	r8, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	469a      	mov	sl, r3
 800ae38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae3e:	d807      	bhi.n	800ae50 <_printf_i+0x28>
 800ae40:	2f62      	cmp	r7, #98	@ 0x62
 800ae42:	d80a      	bhi.n	800ae5a <_printf_i+0x32>
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	f000 80d1 	beq.w	800afec <_printf_i+0x1c4>
 800ae4a:	2f58      	cmp	r7, #88	@ 0x58
 800ae4c:	f000 80b8 	beq.w	800afc0 <_printf_i+0x198>
 800ae50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae58:	e03a      	b.n	800aed0 <_printf_i+0xa8>
 800ae5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae5e:	2b15      	cmp	r3, #21
 800ae60:	d8f6      	bhi.n	800ae50 <_printf_i+0x28>
 800ae62:	a101      	add	r1, pc, #4	@ (adr r1, 800ae68 <_printf_i+0x40>)
 800ae64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800aed5 	.word	0x0800aed5
 800ae70:	0800ae51 	.word	0x0800ae51
 800ae74:	0800ae51 	.word	0x0800ae51
 800ae78:	0800ae51 	.word	0x0800ae51
 800ae7c:	0800ae51 	.word	0x0800ae51
 800ae80:	0800aed5 	.word	0x0800aed5
 800ae84:	0800ae51 	.word	0x0800ae51
 800ae88:	0800ae51 	.word	0x0800ae51
 800ae8c:	0800ae51 	.word	0x0800ae51
 800ae90:	0800ae51 	.word	0x0800ae51
 800ae94:	0800afd3 	.word	0x0800afd3
 800ae98:	0800aeff 	.word	0x0800aeff
 800ae9c:	0800af8d 	.word	0x0800af8d
 800aea0:	0800ae51 	.word	0x0800ae51
 800aea4:	0800ae51 	.word	0x0800ae51
 800aea8:	0800aff5 	.word	0x0800aff5
 800aeac:	0800ae51 	.word	0x0800ae51
 800aeb0:	0800aeff 	.word	0x0800aeff
 800aeb4:	0800ae51 	.word	0x0800ae51
 800aeb8:	0800ae51 	.word	0x0800ae51
 800aebc:	0800af95 	.word	0x0800af95
 800aec0:	6833      	ldr	r3, [r6, #0]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6032      	str	r2, [r6, #0]
 800aec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aecc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aed0:	2301      	movs	r3, #1
 800aed2:	e09c      	b.n	800b00e <_printf_i+0x1e6>
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	6820      	ldr	r0, [r4, #0]
 800aed8:	1d19      	adds	r1, r3, #4
 800aeda:	6031      	str	r1, [r6, #0]
 800aedc:	0606      	lsls	r6, r0, #24
 800aede:	d501      	bpl.n	800aee4 <_printf_i+0xbc>
 800aee0:	681d      	ldr	r5, [r3, #0]
 800aee2:	e003      	b.n	800aeec <_printf_i+0xc4>
 800aee4:	0645      	lsls	r5, r0, #25
 800aee6:	d5fb      	bpl.n	800aee0 <_printf_i+0xb8>
 800aee8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aeec:	2d00      	cmp	r5, #0
 800aeee:	da03      	bge.n	800aef8 <_printf_i+0xd0>
 800aef0:	232d      	movs	r3, #45	@ 0x2d
 800aef2:	426d      	negs	r5, r5
 800aef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aef8:	230a      	movs	r3, #10
 800aefa:	4858      	ldr	r0, [pc, #352]	@ (800b05c <_printf_i+0x234>)
 800aefc:	e011      	b.n	800af22 <_printf_i+0xfa>
 800aefe:	6821      	ldr	r1, [r4, #0]
 800af00:	6833      	ldr	r3, [r6, #0]
 800af02:	0608      	lsls	r0, r1, #24
 800af04:	f853 5b04 	ldr.w	r5, [r3], #4
 800af08:	d402      	bmi.n	800af10 <_printf_i+0xe8>
 800af0a:	0649      	lsls	r1, r1, #25
 800af0c:	bf48      	it	mi
 800af0e:	b2ad      	uxthmi	r5, r5
 800af10:	2f6f      	cmp	r7, #111	@ 0x6f
 800af12:	6033      	str	r3, [r6, #0]
 800af14:	bf14      	ite	ne
 800af16:	230a      	movne	r3, #10
 800af18:	2308      	moveq	r3, #8
 800af1a:	4850      	ldr	r0, [pc, #320]	@ (800b05c <_printf_i+0x234>)
 800af1c:	2100      	movs	r1, #0
 800af1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af22:	6866      	ldr	r6, [r4, #4]
 800af24:	2e00      	cmp	r6, #0
 800af26:	60a6      	str	r6, [r4, #8]
 800af28:	db05      	blt.n	800af36 <_printf_i+0x10e>
 800af2a:	6821      	ldr	r1, [r4, #0]
 800af2c:	432e      	orrs	r6, r5
 800af2e:	f021 0104 	bic.w	r1, r1, #4
 800af32:	6021      	str	r1, [r4, #0]
 800af34:	d04b      	beq.n	800afce <_printf_i+0x1a6>
 800af36:	4616      	mov	r6, r2
 800af38:	fbb5 f1f3 	udiv	r1, r5, r3
 800af3c:	fb03 5711 	mls	r7, r3, r1, r5
 800af40:	5dc7      	ldrb	r7, [r0, r7]
 800af42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af46:	462f      	mov	r7, r5
 800af48:	42bb      	cmp	r3, r7
 800af4a:	460d      	mov	r5, r1
 800af4c:	d9f4      	bls.n	800af38 <_printf_i+0x110>
 800af4e:	2b08      	cmp	r3, #8
 800af50:	d10b      	bne.n	800af6a <_printf_i+0x142>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	07df      	lsls	r7, r3, #31
 800af56:	d508      	bpl.n	800af6a <_printf_i+0x142>
 800af58:	6923      	ldr	r3, [r4, #16]
 800af5a:	6861      	ldr	r1, [r4, #4]
 800af5c:	4299      	cmp	r1, r3
 800af5e:	bfde      	ittt	le
 800af60:	2330      	movle	r3, #48	@ 0x30
 800af62:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af66:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af6a:	1b92      	subs	r2, r2, r6
 800af6c:	6122      	str	r2, [r4, #16]
 800af6e:	464b      	mov	r3, r9
 800af70:	4621      	mov	r1, r4
 800af72:	4640      	mov	r0, r8
 800af74:	f8cd a000 	str.w	sl, [sp]
 800af78:	aa03      	add	r2, sp, #12
 800af7a:	f7ff fee3 	bl	800ad44 <_printf_common>
 800af7e:	3001      	adds	r0, #1
 800af80:	d14a      	bne.n	800b018 <_printf_i+0x1f0>
 800af82:	f04f 30ff 	mov.w	r0, #4294967295
 800af86:	b004      	add	sp, #16
 800af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	f043 0320 	orr.w	r3, r3, #32
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	2778      	movs	r7, #120	@ 0x78
 800af96:	4832      	ldr	r0, [pc, #200]	@ (800b060 <_printf_i+0x238>)
 800af98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	6831      	ldr	r1, [r6, #0]
 800afa0:	061f      	lsls	r7, r3, #24
 800afa2:	f851 5b04 	ldr.w	r5, [r1], #4
 800afa6:	d402      	bmi.n	800afae <_printf_i+0x186>
 800afa8:	065f      	lsls	r7, r3, #25
 800afaa:	bf48      	it	mi
 800afac:	b2ad      	uxthmi	r5, r5
 800afae:	6031      	str	r1, [r6, #0]
 800afb0:	07d9      	lsls	r1, r3, #31
 800afb2:	bf44      	itt	mi
 800afb4:	f043 0320 	orrmi.w	r3, r3, #32
 800afb8:	6023      	strmi	r3, [r4, #0]
 800afba:	b11d      	cbz	r5, 800afc4 <_printf_i+0x19c>
 800afbc:	2310      	movs	r3, #16
 800afbe:	e7ad      	b.n	800af1c <_printf_i+0xf4>
 800afc0:	4826      	ldr	r0, [pc, #152]	@ (800b05c <_printf_i+0x234>)
 800afc2:	e7e9      	b.n	800af98 <_printf_i+0x170>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	f023 0320 	bic.w	r3, r3, #32
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	e7f6      	b.n	800afbc <_printf_i+0x194>
 800afce:	4616      	mov	r6, r2
 800afd0:	e7bd      	b.n	800af4e <_printf_i+0x126>
 800afd2:	6833      	ldr	r3, [r6, #0]
 800afd4:	6825      	ldr	r5, [r4, #0]
 800afd6:	1d18      	adds	r0, r3, #4
 800afd8:	6961      	ldr	r1, [r4, #20]
 800afda:	6030      	str	r0, [r6, #0]
 800afdc:	062e      	lsls	r6, r5, #24
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	d501      	bpl.n	800afe6 <_printf_i+0x1be>
 800afe2:	6019      	str	r1, [r3, #0]
 800afe4:	e002      	b.n	800afec <_printf_i+0x1c4>
 800afe6:	0668      	lsls	r0, r5, #25
 800afe8:	d5fb      	bpl.n	800afe2 <_printf_i+0x1ba>
 800afea:	8019      	strh	r1, [r3, #0]
 800afec:	2300      	movs	r3, #0
 800afee:	4616      	mov	r6, r2
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	e7bc      	b.n	800af6e <_printf_i+0x146>
 800aff4:	6833      	ldr	r3, [r6, #0]
 800aff6:	2100      	movs	r1, #0
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	6032      	str	r2, [r6, #0]
 800affc:	681e      	ldr	r6, [r3, #0]
 800affe:	6862      	ldr	r2, [r4, #4]
 800b000:	4630      	mov	r0, r6
 800b002:	f000 fc56 	bl	800b8b2 <memchr>
 800b006:	b108      	cbz	r0, 800b00c <_printf_i+0x1e4>
 800b008:	1b80      	subs	r0, r0, r6
 800b00a:	6060      	str	r0, [r4, #4]
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	6123      	str	r3, [r4, #16]
 800b010:	2300      	movs	r3, #0
 800b012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b016:	e7aa      	b.n	800af6e <_printf_i+0x146>
 800b018:	4632      	mov	r2, r6
 800b01a:	4649      	mov	r1, r9
 800b01c:	4640      	mov	r0, r8
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	47d0      	blx	sl
 800b022:	3001      	adds	r0, #1
 800b024:	d0ad      	beq.n	800af82 <_printf_i+0x15a>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	079b      	lsls	r3, r3, #30
 800b02a:	d413      	bmi.n	800b054 <_printf_i+0x22c>
 800b02c:	68e0      	ldr	r0, [r4, #12]
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	4298      	cmp	r0, r3
 800b032:	bfb8      	it	lt
 800b034:	4618      	movlt	r0, r3
 800b036:	e7a6      	b.n	800af86 <_printf_i+0x15e>
 800b038:	2301      	movs	r3, #1
 800b03a:	4632      	mov	r2, r6
 800b03c:	4649      	mov	r1, r9
 800b03e:	4640      	mov	r0, r8
 800b040:	47d0      	blx	sl
 800b042:	3001      	adds	r0, #1
 800b044:	d09d      	beq.n	800af82 <_printf_i+0x15a>
 800b046:	3501      	adds	r5, #1
 800b048:	68e3      	ldr	r3, [r4, #12]
 800b04a:	9903      	ldr	r1, [sp, #12]
 800b04c:	1a5b      	subs	r3, r3, r1
 800b04e:	42ab      	cmp	r3, r5
 800b050:	dcf2      	bgt.n	800b038 <_printf_i+0x210>
 800b052:	e7eb      	b.n	800b02c <_printf_i+0x204>
 800b054:	2500      	movs	r5, #0
 800b056:	f104 0619 	add.w	r6, r4, #25
 800b05a:	e7f5      	b.n	800b048 <_printf_i+0x220>
 800b05c:	0800f878 	.word	0x0800f878
 800b060:	0800f889 	.word	0x0800f889

0800b064 <_scanf_float>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	b087      	sub	sp, #28
 800b06a:	9303      	str	r3, [sp, #12]
 800b06c:	688b      	ldr	r3, [r1, #8]
 800b06e:	4691      	mov	r9, r2
 800b070:	1e5a      	subs	r2, r3, #1
 800b072:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b076:	bf82      	ittt	hi
 800b078:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b07c:	eb03 0b05 	addhi.w	fp, r3, r5
 800b080:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b084:	460a      	mov	r2, r1
 800b086:	f04f 0500 	mov.w	r5, #0
 800b08a:	bf88      	it	hi
 800b08c:	608b      	strhi	r3, [r1, #8]
 800b08e:	680b      	ldr	r3, [r1, #0]
 800b090:	4680      	mov	r8, r0
 800b092:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b096:	f842 3b1c 	str.w	r3, [r2], #28
 800b09a:	460c      	mov	r4, r1
 800b09c:	bf98      	it	ls
 800b09e:	f04f 0b00 	movls.w	fp, #0
 800b0a2:	4616      	mov	r6, r2
 800b0a4:	46aa      	mov	sl, r5
 800b0a6:	462f      	mov	r7, r5
 800b0a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9502      	str	r5, [sp, #8]
 800b0b0:	68a2      	ldr	r2, [r4, #8]
 800b0b2:	b15a      	cbz	r2, 800b0cc <_scanf_float+0x68>
 800b0b4:	f8d9 3000 	ldr.w	r3, [r9]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b4e      	cmp	r3, #78	@ 0x4e
 800b0bc:	d862      	bhi.n	800b184 <_scanf_float+0x120>
 800b0be:	2b40      	cmp	r3, #64	@ 0x40
 800b0c0:	d83a      	bhi.n	800b138 <_scanf_float+0xd4>
 800b0c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b0c6:	b2c8      	uxtb	r0, r1
 800b0c8:	280e      	cmp	r0, #14
 800b0ca:	d938      	bls.n	800b13e <_scanf_float+0xda>
 800b0cc:	b11f      	cbz	r7, 800b0d6 <_scanf_float+0x72>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0da:	f1ba 0f01 	cmp.w	sl, #1
 800b0de:	f200 8114 	bhi.w	800b30a <_scanf_float+0x2a6>
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	429e      	cmp	r6, r3
 800b0e6:	f200 8105 	bhi.w	800b2f4 <_scanf_float+0x290>
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	b007      	add	sp, #28
 800b0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b0f6:	2a0d      	cmp	r2, #13
 800b0f8:	d8e8      	bhi.n	800b0cc <_scanf_float+0x68>
 800b0fa:	a101      	add	r1, pc, #4	@ (adr r1, 800b100 <_scanf_float+0x9c>)
 800b0fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b100:	0800b249 	.word	0x0800b249
 800b104:	0800b0cd 	.word	0x0800b0cd
 800b108:	0800b0cd 	.word	0x0800b0cd
 800b10c:	0800b0cd 	.word	0x0800b0cd
 800b110:	0800b2a5 	.word	0x0800b2a5
 800b114:	0800b27f 	.word	0x0800b27f
 800b118:	0800b0cd 	.word	0x0800b0cd
 800b11c:	0800b0cd 	.word	0x0800b0cd
 800b120:	0800b257 	.word	0x0800b257
 800b124:	0800b0cd 	.word	0x0800b0cd
 800b128:	0800b0cd 	.word	0x0800b0cd
 800b12c:	0800b0cd 	.word	0x0800b0cd
 800b130:	0800b0cd 	.word	0x0800b0cd
 800b134:	0800b213 	.word	0x0800b213
 800b138:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b13c:	e7db      	b.n	800b0f6 <_scanf_float+0x92>
 800b13e:	290e      	cmp	r1, #14
 800b140:	d8c4      	bhi.n	800b0cc <_scanf_float+0x68>
 800b142:	a001      	add	r0, pc, #4	@ (adr r0, 800b148 <_scanf_float+0xe4>)
 800b144:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b148:	0800b203 	.word	0x0800b203
 800b14c:	0800b0cd 	.word	0x0800b0cd
 800b150:	0800b203 	.word	0x0800b203
 800b154:	0800b293 	.word	0x0800b293
 800b158:	0800b0cd 	.word	0x0800b0cd
 800b15c:	0800b1a5 	.word	0x0800b1a5
 800b160:	0800b1e9 	.word	0x0800b1e9
 800b164:	0800b1e9 	.word	0x0800b1e9
 800b168:	0800b1e9 	.word	0x0800b1e9
 800b16c:	0800b1e9 	.word	0x0800b1e9
 800b170:	0800b1e9 	.word	0x0800b1e9
 800b174:	0800b1e9 	.word	0x0800b1e9
 800b178:	0800b1e9 	.word	0x0800b1e9
 800b17c:	0800b1e9 	.word	0x0800b1e9
 800b180:	0800b1e9 	.word	0x0800b1e9
 800b184:	2b6e      	cmp	r3, #110	@ 0x6e
 800b186:	d809      	bhi.n	800b19c <_scanf_float+0x138>
 800b188:	2b60      	cmp	r3, #96	@ 0x60
 800b18a:	d8b2      	bhi.n	800b0f2 <_scanf_float+0x8e>
 800b18c:	2b54      	cmp	r3, #84	@ 0x54
 800b18e:	d07b      	beq.n	800b288 <_scanf_float+0x224>
 800b190:	2b59      	cmp	r3, #89	@ 0x59
 800b192:	d19b      	bne.n	800b0cc <_scanf_float+0x68>
 800b194:	2d07      	cmp	r5, #7
 800b196:	d199      	bne.n	800b0cc <_scanf_float+0x68>
 800b198:	2508      	movs	r5, #8
 800b19a:	e02f      	b.n	800b1fc <_scanf_float+0x198>
 800b19c:	2b74      	cmp	r3, #116	@ 0x74
 800b19e:	d073      	beq.n	800b288 <_scanf_float+0x224>
 800b1a0:	2b79      	cmp	r3, #121	@ 0x79
 800b1a2:	e7f6      	b.n	800b192 <_scanf_float+0x12e>
 800b1a4:	6821      	ldr	r1, [r4, #0]
 800b1a6:	05c8      	lsls	r0, r1, #23
 800b1a8:	d51e      	bpl.n	800b1e8 <_scanf_float+0x184>
 800b1aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b1ae:	6021      	str	r1, [r4, #0]
 800b1b0:	3701      	adds	r7, #1
 800b1b2:	f1bb 0f00 	cmp.w	fp, #0
 800b1b6:	d003      	beq.n	800b1c0 <_scanf_float+0x15c>
 800b1b8:	3201      	adds	r2, #1
 800b1ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	60a3      	str	r3, [r4, #8]
 800b1c6:	6923      	ldr	r3, [r4, #16]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f8c9 3004 	str.w	r3, [r9, #4]
 800b1d8:	f340 8083 	ble.w	800b2e2 <_scanf_float+0x27e>
 800b1dc:	f8d9 3000 	ldr.w	r3, [r9]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	f8c9 3000 	str.w	r3, [r9]
 800b1e6:	e763      	b.n	800b0b0 <_scanf_float+0x4c>
 800b1e8:	eb1a 0105 	adds.w	r1, sl, r5
 800b1ec:	f47f af6e 	bne.w	800b0cc <_scanf_float+0x68>
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	468a      	mov	sl, r1
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	f806 3b01 	strb.w	r3, [r6], #1
 800b200:	e7de      	b.n	800b1c0 <_scanf_float+0x15c>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	0610      	lsls	r0, r2, #24
 800b206:	f57f af61 	bpl.w	800b0cc <_scanf_float+0x68>
 800b20a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	e7f4      	b.n	800b1fc <_scanf_float+0x198>
 800b212:	f1ba 0f00 	cmp.w	sl, #0
 800b216:	d10c      	bne.n	800b232 <_scanf_float+0x1ce>
 800b218:	b977      	cbnz	r7, 800b238 <_scanf_float+0x1d4>
 800b21a:	6822      	ldr	r2, [r4, #0]
 800b21c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b220:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b224:	d108      	bne.n	800b238 <_scanf_float+0x1d4>
 800b226:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b22a:	f04f 0a01 	mov.w	sl, #1
 800b22e:	6022      	str	r2, [r4, #0]
 800b230:	e7e4      	b.n	800b1fc <_scanf_float+0x198>
 800b232:	f1ba 0f02 	cmp.w	sl, #2
 800b236:	d051      	beq.n	800b2dc <_scanf_float+0x278>
 800b238:	2d01      	cmp	r5, #1
 800b23a:	d002      	beq.n	800b242 <_scanf_float+0x1de>
 800b23c:	2d04      	cmp	r5, #4
 800b23e:	f47f af45 	bne.w	800b0cc <_scanf_float+0x68>
 800b242:	3501      	adds	r5, #1
 800b244:	b2ed      	uxtb	r5, r5
 800b246:	e7d9      	b.n	800b1fc <_scanf_float+0x198>
 800b248:	f1ba 0f01 	cmp.w	sl, #1
 800b24c:	f47f af3e 	bne.w	800b0cc <_scanf_float+0x68>
 800b250:	f04f 0a02 	mov.w	sl, #2
 800b254:	e7d2      	b.n	800b1fc <_scanf_float+0x198>
 800b256:	b975      	cbnz	r5, 800b276 <_scanf_float+0x212>
 800b258:	2f00      	cmp	r7, #0
 800b25a:	f47f af38 	bne.w	800b0ce <_scanf_float+0x6a>
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b264:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b268:	f040 80ff 	bne.w	800b46a <_scanf_float+0x406>
 800b26c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b270:	2501      	movs	r5, #1
 800b272:	6022      	str	r2, [r4, #0]
 800b274:	e7c2      	b.n	800b1fc <_scanf_float+0x198>
 800b276:	2d03      	cmp	r5, #3
 800b278:	d0e3      	beq.n	800b242 <_scanf_float+0x1de>
 800b27a:	2d05      	cmp	r5, #5
 800b27c:	e7df      	b.n	800b23e <_scanf_float+0x1da>
 800b27e:	2d02      	cmp	r5, #2
 800b280:	f47f af24 	bne.w	800b0cc <_scanf_float+0x68>
 800b284:	2503      	movs	r5, #3
 800b286:	e7b9      	b.n	800b1fc <_scanf_float+0x198>
 800b288:	2d06      	cmp	r5, #6
 800b28a:	f47f af1f 	bne.w	800b0cc <_scanf_float+0x68>
 800b28e:	2507      	movs	r5, #7
 800b290:	e7b4      	b.n	800b1fc <_scanf_float+0x198>
 800b292:	6822      	ldr	r2, [r4, #0]
 800b294:	0591      	lsls	r1, r2, #22
 800b296:	f57f af19 	bpl.w	800b0cc <_scanf_float+0x68>
 800b29a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	9702      	str	r7, [sp, #8]
 800b2a2:	e7ab      	b.n	800b1fc <_scanf_float+0x198>
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b2aa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b2ae:	d005      	beq.n	800b2bc <_scanf_float+0x258>
 800b2b0:	0550      	lsls	r0, r2, #21
 800b2b2:	f57f af0b 	bpl.w	800b0cc <_scanf_float+0x68>
 800b2b6:	2f00      	cmp	r7, #0
 800b2b8:	f000 80d7 	beq.w	800b46a <_scanf_float+0x406>
 800b2bc:	0591      	lsls	r1, r2, #22
 800b2be:	bf58      	it	pl
 800b2c0:	9902      	ldrpl	r1, [sp, #8]
 800b2c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b2c6:	bf58      	it	pl
 800b2c8:	1a79      	subpl	r1, r7, r1
 800b2ca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b2ce:	f04f 0700 	mov.w	r7, #0
 800b2d2:	bf58      	it	pl
 800b2d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b2d8:	6022      	str	r2, [r4, #0]
 800b2da:	e78f      	b.n	800b1fc <_scanf_float+0x198>
 800b2dc:	f04f 0a03 	mov.w	sl, #3
 800b2e0:	e78c      	b.n	800b1fc <_scanf_float+0x198>
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b2ea:	4798      	blx	r3
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	f43f aedf 	beq.w	800b0b0 <_scanf_float+0x4c>
 800b2f2:	e6eb      	b.n	800b0cc <_scanf_float+0x68>
 800b2f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2f8:	464a      	mov	r2, r9
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b300:	4798      	blx	r3
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	3b01      	subs	r3, #1
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	e6eb      	b.n	800b0e2 <_scanf_float+0x7e>
 800b30a:	1e6b      	subs	r3, r5, #1
 800b30c:	2b06      	cmp	r3, #6
 800b30e:	d824      	bhi.n	800b35a <_scanf_float+0x2f6>
 800b310:	2d02      	cmp	r5, #2
 800b312:	d836      	bhi.n	800b382 <_scanf_float+0x31e>
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	429e      	cmp	r6, r3
 800b318:	f67f aee7 	bls.w	800b0ea <_scanf_float+0x86>
 800b31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b320:	464a      	mov	r2, r9
 800b322:	4640      	mov	r0, r8
 800b324:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b328:	4798      	blx	r3
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	e7f0      	b.n	800b314 <_scanf_float+0x2b0>
 800b332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b336:	464a      	mov	r2, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b33e:	4798      	blx	r3
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	3b01      	subs	r3, #1
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b34a:	fa5f fa8a 	uxtb.w	sl, sl
 800b34e:	f1ba 0f02 	cmp.w	sl, #2
 800b352:	d1ee      	bne.n	800b332 <_scanf_float+0x2ce>
 800b354:	3d03      	subs	r5, #3
 800b356:	b2ed      	uxtb	r5, r5
 800b358:	1b76      	subs	r6, r6, r5
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	05da      	lsls	r2, r3, #23
 800b35e:	d530      	bpl.n	800b3c2 <_scanf_float+0x35e>
 800b360:	055b      	lsls	r3, r3, #21
 800b362:	d511      	bpl.n	800b388 <_scanf_float+0x324>
 800b364:	9b01      	ldr	r3, [sp, #4]
 800b366:	429e      	cmp	r6, r3
 800b368:	f67f aebf 	bls.w	800b0ea <_scanf_float+0x86>
 800b36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b370:	464a      	mov	r2, r9
 800b372:	4640      	mov	r0, r8
 800b374:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b378:	4798      	blx	r3
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	6123      	str	r3, [r4, #16]
 800b380:	e7f0      	b.n	800b364 <_scanf_float+0x300>
 800b382:	46aa      	mov	sl, r5
 800b384:	46b3      	mov	fp, r6
 800b386:	e7de      	b.n	800b346 <_scanf_float+0x2e2>
 800b388:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	2965      	cmp	r1, #101	@ 0x65
 800b390:	f103 33ff 	add.w	r3, r3, #4294967295
 800b394:	f106 35ff 	add.w	r5, r6, #4294967295
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	d00c      	beq.n	800b3b6 <_scanf_float+0x352>
 800b39c:	2945      	cmp	r1, #69	@ 0x45
 800b39e:	d00a      	beq.n	800b3b6 <_scanf_float+0x352>
 800b3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3a4:	464a      	mov	r2, r9
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4798      	blx	r3
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	1eb5      	subs	r5, r6, #2
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	464a      	mov	r2, r9
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b3be:	4798      	blx	r3
 800b3c0:	462e      	mov	r6, r5
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	f012 0210 	ands.w	r2, r2, #16
 800b3c8:	d001      	beq.n	800b3ce <_scanf_float+0x36a>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e68e      	b.n	800b0ec <_scanf_float+0x88>
 800b3ce:	7032      	strb	r2, [r6, #0]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b3d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3da:	d125      	bne.n	800b428 <_scanf_float+0x3c4>
 800b3dc:	9b02      	ldr	r3, [sp, #8]
 800b3de:	429f      	cmp	r7, r3
 800b3e0:	d00a      	beq.n	800b3f8 <_scanf_float+0x394>
 800b3e2:	1bda      	subs	r2, r3, r7
 800b3e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b3e8:	429e      	cmp	r6, r3
 800b3ea:	bf28      	it	cs
 800b3ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	491f      	ldr	r1, [pc, #124]	@ (800b470 <_scanf_float+0x40c>)
 800b3f4:	f000 f938 	bl	800b668 <siprintf>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	9901      	ldr	r1, [sp, #4]
 800b3fe:	f002 fc5f 	bl	800dcc0 <_strtod_r>
 800b402:	9b03      	ldr	r3, [sp, #12]
 800b404:	6825      	ldr	r5, [r4, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f015 0f02 	tst.w	r5, #2
 800b40c:	4606      	mov	r6, r0
 800b40e:	460f      	mov	r7, r1
 800b410:	f103 0204 	add.w	r2, r3, #4
 800b414:	d015      	beq.n	800b442 <_scanf_float+0x3de>
 800b416:	9903      	ldr	r1, [sp, #12]
 800b418:	600a      	str	r2, [r1, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	e9c3 6700 	strd	r6, r7, [r3]
 800b420:	68e3      	ldr	r3, [r4, #12]
 800b422:	3301      	adds	r3, #1
 800b424:	60e3      	str	r3, [r4, #12]
 800b426:	e7d0      	b.n	800b3ca <_scanf_float+0x366>
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0e4      	beq.n	800b3f8 <_scanf_float+0x394>
 800b42e:	9905      	ldr	r1, [sp, #20]
 800b430:	230a      	movs	r3, #10
 800b432:	4640      	mov	r0, r8
 800b434:	3101      	adds	r1, #1
 800b436:	f002 fcc3 	bl	800ddc0 <_strtol_r>
 800b43a:	9b04      	ldr	r3, [sp, #16]
 800b43c:	9e05      	ldr	r6, [sp, #20]
 800b43e:	1ac2      	subs	r2, r0, r3
 800b440:	e7d0      	b.n	800b3e4 <_scanf_float+0x380>
 800b442:	076d      	lsls	r5, r5, #29
 800b444:	d4e7      	bmi.n	800b416 <_scanf_float+0x3b2>
 800b446:	9d03      	ldr	r5, [sp, #12]
 800b448:	602a      	str	r2, [r5, #0]
 800b44a:	681d      	ldr	r5, [r3, #0]
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	f7f5 fadc 	bl	8000a0c <__aeabi_dcmpun>
 800b454:	b120      	cbz	r0, 800b460 <_scanf_float+0x3fc>
 800b456:	4807      	ldr	r0, [pc, #28]	@ (800b474 <_scanf_float+0x410>)
 800b458:	f000 fa3a 	bl	800b8d0 <nanf>
 800b45c:	6028      	str	r0, [r5, #0]
 800b45e:	e7df      	b.n	800b420 <_scanf_float+0x3bc>
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	f7f5 fb30 	bl	8000ac8 <__aeabi_d2f>
 800b468:	e7f8      	b.n	800b45c <_scanf_float+0x3f8>
 800b46a:	2700      	movs	r7, #0
 800b46c:	e633      	b.n	800b0d6 <_scanf_float+0x72>
 800b46e:	bf00      	nop
 800b470:	0800f89a 	.word	0x0800f89a
 800b474:	0800f9f6 	.word	0x0800f9f6

0800b478 <std>:
 800b478:	2300      	movs	r3, #0
 800b47a:	b510      	push	{r4, lr}
 800b47c:	4604      	mov	r4, r0
 800b47e:	e9c0 3300 	strd	r3, r3, [r0]
 800b482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b486:	6083      	str	r3, [r0, #8]
 800b488:	8181      	strh	r1, [r0, #12]
 800b48a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b48c:	81c2      	strh	r2, [r0, #14]
 800b48e:	6183      	str	r3, [r0, #24]
 800b490:	4619      	mov	r1, r3
 800b492:	2208      	movs	r2, #8
 800b494:	305c      	adds	r0, #92	@ 0x5c
 800b496:	f000 f97a 	bl	800b78e <memset>
 800b49a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d0 <std+0x58>)
 800b49c:	6224      	str	r4, [r4, #32]
 800b49e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d4 <std+0x5c>)
 800b4a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <std+0x60>)
 800b4a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b4dc <std+0x64>)
 800b4aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e0 <std+0x68>)
 800b4ae:	429c      	cmp	r4, r3
 800b4b0:	d006      	beq.n	800b4c0 <std+0x48>
 800b4b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b4b6:	4294      	cmp	r4, r2
 800b4b8:	d002      	beq.n	800b4c0 <std+0x48>
 800b4ba:	33d0      	adds	r3, #208	@ 0xd0
 800b4bc:	429c      	cmp	r4, r3
 800b4be:	d105      	bne.n	800b4cc <std+0x54>
 800b4c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c8:	f000 b9f0 	b.w	800b8ac <__retarget_lock_init_recursive>
 800b4cc:	bd10      	pop	{r4, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0800b705 	.word	0x0800b705
 800b4d4:	0800b72b 	.word	0x0800b72b
 800b4d8:	0800b763 	.word	0x0800b763
 800b4dc:	0800b787 	.word	0x0800b787
 800b4e0:	2000166c 	.word	0x2000166c

0800b4e4 <stdio_exit_handler>:
 800b4e4:	4a02      	ldr	r2, [pc, #8]	@ (800b4f0 <stdio_exit_handler+0xc>)
 800b4e6:	4903      	ldr	r1, [pc, #12]	@ (800b4f4 <stdio_exit_handler+0x10>)
 800b4e8:	4803      	ldr	r0, [pc, #12]	@ (800b4f8 <stdio_exit_handler+0x14>)
 800b4ea:	f000 b869 	b.w	800b5c0 <_fwalk_sglue>
 800b4ee:	bf00      	nop
 800b4f0:	2000017c 	.word	0x2000017c
 800b4f4:	0800e7a9 	.word	0x0800e7a9
 800b4f8:	2000018c 	.word	0x2000018c

0800b4fc <cleanup_stdio>:
 800b4fc:	6841      	ldr	r1, [r0, #4]
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b530 <cleanup_stdio+0x34>)
 800b500:	b510      	push	{r4, lr}
 800b502:	4299      	cmp	r1, r3
 800b504:	4604      	mov	r4, r0
 800b506:	d001      	beq.n	800b50c <cleanup_stdio+0x10>
 800b508:	f003 f94e 	bl	800e7a8 <_fflush_r>
 800b50c:	68a1      	ldr	r1, [r4, #8]
 800b50e:	4b09      	ldr	r3, [pc, #36]	@ (800b534 <cleanup_stdio+0x38>)
 800b510:	4299      	cmp	r1, r3
 800b512:	d002      	beq.n	800b51a <cleanup_stdio+0x1e>
 800b514:	4620      	mov	r0, r4
 800b516:	f003 f947 	bl	800e7a8 <_fflush_r>
 800b51a:	68e1      	ldr	r1, [r4, #12]
 800b51c:	4b06      	ldr	r3, [pc, #24]	@ (800b538 <cleanup_stdio+0x3c>)
 800b51e:	4299      	cmp	r1, r3
 800b520:	d004      	beq.n	800b52c <cleanup_stdio+0x30>
 800b522:	4620      	mov	r0, r4
 800b524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b528:	f003 b93e 	b.w	800e7a8 <_fflush_r>
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	bf00      	nop
 800b530:	2000166c 	.word	0x2000166c
 800b534:	200016d4 	.word	0x200016d4
 800b538:	2000173c 	.word	0x2000173c

0800b53c <global_stdio_init.part.0>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	4b0b      	ldr	r3, [pc, #44]	@ (800b56c <global_stdio_init.part.0+0x30>)
 800b540:	4c0b      	ldr	r4, [pc, #44]	@ (800b570 <global_stdio_init.part.0+0x34>)
 800b542:	4a0c      	ldr	r2, [pc, #48]	@ (800b574 <global_stdio_init.part.0+0x38>)
 800b544:	4620      	mov	r0, r4
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	2104      	movs	r1, #4
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7ff ff94 	bl	800b478 <std>
 800b550:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b554:	2201      	movs	r2, #1
 800b556:	2109      	movs	r1, #9
 800b558:	f7ff ff8e 	bl	800b478 <std>
 800b55c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b560:	2202      	movs	r2, #2
 800b562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b566:	2112      	movs	r1, #18
 800b568:	f7ff bf86 	b.w	800b478 <std>
 800b56c:	200017a4 	.word	0x200017a4
 800b570:	2000166c 	.word	0x2000166c
 800b574:	0800b4e5 	.word	0x0800b4e5

0800b578 <__sfp_lock_acquire>:
 800b578:	4801      	ldr	r0, [pc, #4]	@ (800b580 <__sfp_lock_acquire+0x8>)
 800b57a:	f000 b998 	b.w	800b8ae <__retarget_lock_acquire_recursive>
 800b57e:	bf00      	nop
 800b580:	200017ad 	.word	0x200017ad

0800b584 <__sfp_lock_release>:
 800b584:	4801      	ldr	r0, [pc, #4]	@ (800b58c <__sfp_lock_release+0x8>)
 800b586:	f000 b993 	b.w	800b8b0 <__retarget_lock_release_recursive>
 800b58a:	bf00      	nop
 800b58c:	200017ad 	.word	0x200017ad

0800b590 <__sinit>:
 800b590:	b510      	push	{r4, lr}
 800b592:	4604      	mov	r4, r0
 800b594:	f7ff fff0 	bl	800b578 <__sfp_lock_acquire>
 800b598:	6a23      	ldr	r3, [r4, #32]
 800b59a:	b11b      	cbz	r3, 800b5a4 <__sinit+0x14>
 800b59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a0:	f7ff bff0 	b.w	800b584 <__sfp_lock_release>
 800b5a4:	4b04      	ldr	r3, [pc, #16]	@ (800b5b8 <__sinit+0x28>)
 800b5a6:	6223      	str	r3, [r4, #32]
 800b5a8:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <__sinit+0x2c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1f5      	bne.n	800b59c <__sinit+0xc>
 800b5b0:	f7ff ffc4 	bl	800b53c <global_stdio_init.part.0>
 800b5b4:	e7f2      	b.n	800b59c <__sinit+0xc>
 800b5b6:	bf00      	nop
 800b5b8:	0800b4fd 	.word	0x0800b4fd
 800b5bc:	200017a4 	.word	0x200017a4

0800b5c0 <_fwalk_sglue>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	4688      	mov	r8, r1
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	2600      	movs	r6, #0
 800b5cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b5d4:	d505      	bpl.n	800b5e2 <_fwalk_sglue+0x22>
 800b5d6:	6824      	ldr	r4, [r4, #0]
 800b5d8:	2c00      	cmp	r4, #0
 800b5da:	d1f7      	bne.n	800b5cc <_fwalk_sglue+0xc>
 800b5dc:	4630      	mov	r0, r6
 800b5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d907      	bls.n	800b5f8 <_fwalk_sglue+0x38>
 800b5e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	d003      	beq.n	800b5f8 <_fwalk_sglue+0x38>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	47c0      	blx	r8
 800b5f6:	4306      	orrs	r6, r0
 800b5f8:	3568      	adds	r5, #104	@ 0x68
 800b5fa:	e7e9      	b.n	800b5d0 <_fwalk_sglue+0x10>

0800b5fc <sniprintf>:
 800b5fc:	b40c      	push	{r2, r3}
 800b5fe:	b530      	push	{r4, r5, lr}
 800b600:	4b18      	ldr	r3, [pc, #96]	@ (800b664 <sniprintf+0x68>)
 800b602:	1e0c      	subs	r4, r1, #0
 800b604:	681d      	ldr	r5, [r3, #0]
 800b606:	b09d      	sub	sp, #116	@ 0x74
 800b608:	da08      	bge.n	800b61c <sniprintf+0x20>
 800b60a:	238b      	movs	r3, #139	@ 0x8b
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	b01d      	add	sp, #116	@ 0x74
 800b614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b618:	b002      	add	sp, #8
 800b61a:	4770      	bx	lr
 800b61c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b620:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b624:	f04f 0300 	mov.w	r3, #0
 800b628:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b62a:	bf0c      	ite	eq
 800b62c:	4623      	moveq	r3, r4
 800b62e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	9307      	str	r3, [sp, #28]
 800b636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b63a:	9002      	str	r0, [sp, #8]
 800b63c:	9006      	str	r0, [sp, #24]
 800b63e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b642:	4628      	mov	r0, r5
 800b644:	ab21      	add	r3, sp, #132	@ 0x84
 800b646:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b648:	a902      	add	r1, sp, #8
 800b64a:	9301      	str	r3, [sp, #4]
 800b64c:	f002 fc16 	bl	800de7c <_svfiprintf_r>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	bfbc      	itt	lt
 800b654:	238b      	movlt	r3, #139	@ 0x8b
 800b656:	602b      	strlt	r3, [r5, #0]
 800b658:	2c00      	cmp	r4, #0
 800b65a:	d0da      	beq.n	800b612 <sniprintf+0x16>
 800b65c:	2200      	movs	r2, #0
 800b65e:	9b02      	ldr	r3, [sp, #8]
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e7d6      	b.n	800b612 <sniprintf+0x16>
 800b664:	20000188 	.word	0x20000188

0800b668 <siprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b66e:	b510      	push	{r4, lr}
 800b670:	2400      	movs	r4, #0
 800b672:	b09d      	sub	sp, #116	@ 0x74
 800b674:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b676:	9002      	str	r0, [sp, #8]
 800b678:	9006      	str	r0, [sp, #24]
 800b67a:	9107      	str	r1, [sp, #28]
 800b67c:	9104      	str	r1, [sp, #16]
 800b67e:	4809      	ldr	r0, [pc, #36]	@ (800b6a4 <siprintf+0x3c>)
 800b680:	4909      	ldr	r1, [pc, #36]	@ (800b6a8 <siprintf+0x40>)
 800b682:	f853 2b04 	ldr.w	r2, [r3], #4
 800b686:	9105      	str	r1, [sp, #20]
 800b688:	6800      	ldr	r0, [r0, #0]
 800b68a:	a902      	add	r1, sp, #8
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b690:	f002 fbf4 	bl	800de7c <_svfiprintf_r>
 800b694:	9b02      	ldr	r3, [sp, #8]
 800b696:	701c      	strb	r4, [r3, #0]
 800b698:	b01d      	add	sp, #116	@ 0x74
 800b69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b69e:	b003      	add	sp, #12
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	20000188 	.word	0x20000188
 800b6a8:	ffff0208 	.word	0xffff0208

0800b6ac <siscanf>:
 800b6ac:	b40e      	push	{r1, r2, r3}
 800b6ae:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b6b2:	b570      	push	{r4, r5, r6, lr}
 800b6b4:	2500      	movs	r5, #0
 800b6b6:	b09d      	sub	sp, #116	@ 0x74
 800b6b8:	ac21      	add	r4, sp, #132	@ 0x84
 800b6ba:	f854 6b04 	ldr.w	r6, [r4], #4
 800b6be:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b6c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b6c4:	9002      	str	r0, [sp, #8]
 800b6c6:	9006      	str	r0, [sp, #24]
 800b6c8:	f7f4 fd42 	bl	8000150 <strlen>
 800b6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b6fc <siscanf+0x50>)
 800b6ce:	9003      	str	r0, [sp, #12]
 800b6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6d6:	9007      	str	r0, [sp, #28]
 800b6d8:	4809      	ldr	r0, [pc, #36]	@ (800b700 <siscanf+0x54>)
 800b6da:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6de:	4632      	mov	r2, r6
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	a902      	add	r1, sp, #8
 800b6e4:	6800      	ldr	r0, [r0, #0]
 800b6e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b6e8:	9514      	str	r5, [sp, #80]	@ 0x50
 800b6ea:	9401      	str	r4, [sp, #4]
 800b6ec:	f002 fd1c 	bl	800e128 <__ssvfiscanf_r>
 800b6f0:	b01d      	add	sp, #116	@ 0x74
 800b6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6f6:	b003      	add	sp, #12
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	0800b727 	.word	0x0800b727
 800b700:	20000188 	.word	0x20000188

0800b704 <__sread>:
 800b704:	b510      	push	{r4, lr}
 800b706:	460c      	mov	r4, r1
 800b708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70c:	f000 f880 	bl	800b810 <_read_r>
 800b710:	2800      	cmp	r0, #0
 800b712:	bfab      	itete	ge
 800b714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b716:	89a3      	ldrhlt	r3, [r4, #12]
 800b718:	181b      	addge	r3, r3, r0
 800b71a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b71e:	bfac      	ite	ge
 800b720:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b722:	81a3      	strhlt	r3, [r4, #12]
 800b724:	bd10      	pop	{r4, pc}

0800b726 <__seofread>:
 800b726:	2000      	movs	r0, #0
 800b728:	4770      	bx	lr

0800b72a <__swrite>:
 800b72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72e:	461f      	mov	r7, r3
 800b730:	898b      	ldrh	r3, [r1, #12]
 800b732:	4605      	mov	r5, r0
 800b734:	05db      	lsls	r3, r3, #23
 800b736:	460c      	mov	r4, r1
 800b738:	4616      	mov	r6, r2
 800b73a:	d505      	bpl.n	800b748 <__swrite+0x1e>
 800b73c:	2302      	movs	r3, #2
 800b73e:	2200      	movs	r2, #0
 800b740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b744:	f000 f852 	bl	800b7ec <_lseek_r>
 800b748:	89a3      	ldrh	r3, [r4, #12]
 800b74a:	4632      	mov	r2, r6
 800b74c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	4628      	mov	r0, r5
 800b754:	463b      	mov	r3, r7
 800b756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	f000 b869 	b.w	800b834 <_write_r>

0800b762 <__sseek>:
 800b762:	b510      	push	{r4, lr}
 800b764:	460c      	mov	r4, r1
 800b766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b76a:	f000 f83f 	bl	800b7ec <_lseek_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	bf15      	itete	ne
 800b774:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b77a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b77e:	81a3      	strheq	r3, [r4, #12]
 800b780:	bf18      	it	ne
 800b782:	81a3      	strhne	r3, [r4, #12]
 800b784:	bd10      	pop	{r4, pc}

0800b786 <__sclose>:
 800b786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78a:	f000 b81f 	b.w	800b7cc <_close_r>

0800b78e <memset>:
 800b78e:	4603      	mov	r3, r0
 800b790:	4402      	add	r2, r0
 800b792:	4293      	cmp	r3, r2
 800b794:	d100      	bne.n	800b798 <memset+0xa>
 800b796:	4770      	bx	lr
 800b798:	f803 1b01 	strb.w	r1, [r3], #1
 800b79c:	e7f9      	b.n	800b792 <memset+0x4>

0800b79e <strncmp>:
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	b16a      	cbz	r2, 800b7be <strncmp+0x20>
 800b7a2:	3901      	subs	r1, #1
 800b7a4:	1884      	adds	r4, r0, r2
 800b7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d103      	bne.n	800b7ba <strncmp+0x1c>
 800b7b2:	42a0      	cmp	r0, r4
 800b7b4:	d001      	beq.n	800b7ba <strncmp+0x1c>
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	d1f5      	bne.n	800b7a6 <strncmp+0x8>
 800b7ba:	1ad0      	subs	r0, r2, r3
 800b7bc:	bd10      	pop	{r4, pc}
 800b7be:	4610      	mov	r0, r2
 800b7c0:	e7fc      	b.n	800b7bc <strncmp+0x1e>
	...

0800b7c4 <_localeconv_r>:
 800b7c4:	4800      	ldr	r0, [pc, #0]	@ (800b7c8 <_localeconv_r+0x4>)
 800b7c6:	4770      	bx	lr
 800b7c8:	200002c8 	.word	0x200002c8

0800b7cc <_close_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4d05      	ldr	r5, [pc, #20]	@ (800b7e8 <_close_r+0x1c>)
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	4608      	mov	r0, r1
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	f7f6 f94f 	bl	8001a7a <_close>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_close_r+0x1a>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_close_r+0x1a>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	200017a8 	.word	0x200017a8

0800b7ec <_lseek_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4d05      	ldr	r5, [pc, #20]	@ (800b80c <_lseek_r+0x20>)
 800b7f8:	602a      	str	r2, [r5, #0]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f7f6 f961 	bl	8001ac2 <_lseek>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_lseek_r+0x1e>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_lseek_r+0x1e>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	200017a8 	.word	0x200017a8

0800b810 <_read_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	2200      	movs	r2, #0
 800b81a:	4d05      	ldr	r5, [pc, #20]	@ (800b830 <_read_r+0x20>)
 800b81c:	602a      	str	r2, [r5, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	f7f6 f8f2 	bl	8001a08 <_read>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d102      	bne.n	800b82e <_read_r+0x1e>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	b103      	cbz	r3, 800b82e <_read_r+0x1e>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	200017a8 	.word	0x200017a8

0800b834 <_write_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	2200      	movs	r2, #0
 800b83e:	4d05      	ldr	r5, [pc, #20]	@ (800b854 <_write_r+0x20>)
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f7f6 f8fd 	bl	8001a42 <_write>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_write_r+0x1e>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_write_r+0x1e>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	200017a8 	.word	0x200017a8

0800b858 <__errno>:
 800b858:	4b01      	ldr	r3, [pc, #4]	@ (800b860 <__errno+0x8>)
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	20000188 	.word	0x20000188

0800b864 <__libc_init_array>:
 800b864:	b570      	push	{r4, r5, r6, lr}
 800b866:	2600      	movs	r6, #0
 800b868:	4d0c      	ldr	r5, [pc, #48]	@ (800b89c <__libc_init_array+0x38>)
 800b86a:	4c0d      	ldr	r4, [pc, #52]	@ (800b8a0 <__libc_init_array+0x3c>)
 800b86c:	1b64      	subs	r4, r4, r5
 800b86e:	10a4      	asrs	r4, r4, #2
 800b870:	42a6      	cmp	r6, r4
 800b872:	d109      	bne.n	800b888 <__libc_init_array+0x24>
 800b874:	f003 ff56 	bl	800f724 <_init>
 800b878:	2600      	movs	r6, #0
 800b87a:	4d0a      	ldr	r5, [pc, #40]	@ (800b8a4 <__libc_init_array+0x40>)
 800b87c:	4c0a      	ldr	r4, [pc, #40]	@ (800b8a8 <__libc_init_array+0x44>)
 800b87e:	1b64      	subs	r4, r4, r5
 800b880:	10a4      	asrs	r4, r4, #2
 800b882:	42a6      	cmp	r6, r4
 800b884:	d105      	bne.n	800b892 <__libc_init_array+0x2e>
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88c:	4798      	blx	r3
 800b88e:	3601      	adds	r6, #1
 800b890:	e7ee      	b.n	800b870 <__libc_init_array+0xc>
 800b892:	f855 3b04 	ldr.w	r3, [r5], #4
 800b896:	4798      	blx	r3
 800b898:	3601      	adds	r6, #1
 800b89a:	e7f2      	b.n	800b882 <__libc_init_array+0x1e>
 800b89c:	0800fcb4 	.word	0x0800fcb4
 800b8a0:	0800fcb4 	.word	0x0800fcb4
 800b8a4:	0800fcb4 	.word	0x0800fcb4
 800b8a8:	0800fcb8 	.word	0x0800fcb8

0800b8ac <__retarget_lock_init_recursive>:
 800b8ac:	4770      	bx	lr

0800b8ae <__retarget_lock_acquire_recursive>:
 800b8ae:	4770      	bx	lr

0800b8b0 <__retarget_lock_release_recursive>:
 800b8b0:	4770      	bx	lr

0800b8b2 <memchr>:
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	b2c9      	uxtb	r1, r1
 800b8b8:	4402      	add	r2, r0
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	d101      	bne.n	800b8c4 <memchr+0x12>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e003      	b.n	800b8cc <memchr+0x1a>
 800b8c4:	7804      	ldrb	r4, [r0, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	428c      	cmp	r4, r1
 800b8ca:	d1f6      	bne.n	800b8ba <memchr+0x8>
 800b8cc:	bd10      	pop	{r4, pc}
	...

0800b8d0 <nanf>:
 800b8d0:	4800      	ldr	r0, [pc, #0]	@ (800b8d4 <nanf+0x4>)
 800b8d2:	4770      	bx	lr
 800b8d4:	7fc00000 	.word	0x7fc00000

0800b8d8 <quorem>:
 800b8d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	6903      	ldr	r3, [r0, #16]
 800b8de:	690c      	ldr	r4, [r1, #16]
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	42a3      	cmp	r3, r4
 800b8e4:	db7e      	blt.n	800b9e4 <quorem+0x10c>
 800b8e6:	3c01      	subs	r4, #1
 800b8e8:	00a3      	lsls	r3, r4, #2
 800b8ea:	f100 0514 	add.w	r5, r0, #20
 800b8ee:	f101 0814 	add.w	r8, r1, #20
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b902:	3301      	adds	r3, #1
 800b904:	429a      	cmp	r2, r3
 800b906:	fbb2 f6f3 	udiv	r6, r2, r3
 800b90a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b90e:	d32e      	bcc.n	800b96e <quorem+0x96>
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	46c4      	mov	ip, r8
 800b916:	46ae      	mov	lr, r5
 800b918:	46d3      	mov	fp, sl
 800b91a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b91e:	b298      	uxth	r0, r3
 800b920:	fb06 a000 	mla	r0, r6, r0, sl
 800b924:	0c1b      	lsrs	r3, r3, #16
 800b926:	0c02      	lsrs	r2, r0, #16
 800b928:	fb06 2303 	mla	r3, r6, r3, r2
 800b92c:	f8de 2000 	ldr.w	r2, [lr]
 800b930:	b280      	uxth	r0, r0
 800b932:	b292      	uxth	r2, r2
 800b934:	1a12      	subs	r2, r2, r0
 800b936:	445a      	add	r2, fp
 800b938:	f8de 0000 	ldr.w	r0, [lr]
 800b93c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b940:	b29b      	uxth	r3, r3
 800b942:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b946:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b94a:	b292      	uxth	r2, r2
 800b94c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b950:	45e1      	cmp	r9, ip
 800b952:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b956:	f84e 2b04 	str.w	r2, [lr], #4
 800b95a:	d2de      	bcs.n	800b91a <quorem+0x42>
 800b95c:	9b00      	ldr	r3, [sp, #0]
 800b95e:	58eb      	ldr	r3, [r5, r3]
 800b960:	b92b      	cbnz	r3, 800b96e <quorem+0x96>
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	3b04      	subs	r3, #4
 800b966:	429d      	cmp	r5, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	d32f      	bcc.n	800b9cc <quorem+0xf4>
 800b96c:	613c      	str	r4, [r7, #16]
 800b96e:	4638      	mov	r0, r7
 800b970:	f001 f9c8 	bl	800cd04 <__mcmp>
 800b974:	2800      	cmp	r0, #0
 800b976:	db25      	blt.n	800b9c4 <quorem+0xec>
 800b978:	4629      	mov	r1, r5
 800b97a:	2000      	movs	r0, #0
 800b97c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b980:	f8d1 c000 	ldr.w	ip, [r1]
 800b984:	fa1f fe82 	uxth.w	lr, r2
 800b988:	fa1f f38c 	uxth.w	r3, ip
 800b98c:	eba3 030e 	sub.w	r3, r3, lr
 800b990:	4403      	add	r3, r0
 800b992:	0c12      	lsrs	r2, r2, #16
 800b994:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b998:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9a2:	45c1      	cmp	r9, r8
 800b9a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9a8:	f841 3b04 	str.w	r3, [r1], #4
 800b9ac:	d2e6      	bcs.n	800b97c <quorem+0xa4>
 800b9ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9b6:	b922      	cbnz	r2, 800b9c2 <quorem+0xea>
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	429d      	cmp	r5, r3
 800b9bc:	461a      	mov	r2, r3
 800b9be:	d30b      	bcc.n	800b9d8 <quorem+0x100>
 800b9c0:	613c      	str	r4, [r7, #16]
 800b9c2:	3601      	adds	r6, #1
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	b003      	add	sp, #12
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	6812      	ldr	r2, [r2, #0]
 800b9ce:	3b04      	subs	r3, #4
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	d1cb      	bne.n	800b96c <quorem+0x94>
 800b9d4:	3c01      	subs	r4, #1
 800b9d6:	e7c6      	b.n	800b966 <quorem+0x8e>
 800b9d8:	6812      	ldr	r2, [r2, #0]
 800b9da:	3b04      	subs	r3, #4
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	d1ef      	bne.n	800b9c0 <quorem+0xe8>
 800b9e0:	3c01      	subs	r4, #1
 800b9e2:	e7ea      	b.n	800b9ba <quorem+0xe2>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7ee      	b.n	800b9c6 <quorem+0xee>

0800b9e8 <_dtoa_r>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	461d      	mov	r5, r3
 800b9f0:	69c7      	ldr	r7, [r0, #28]
 800b9f2:	b097      	sub	sp, #92	@ 0x5c
 800b9f4:	4681      	mov	r9, r0
 800b9f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b9fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b9fc:	b97f      	cbnz	r7, 800ba1e <_dtoa_r+0x36>
 800b9fe:	2010      	movs	r0, #16
 800ba00:	f000 fe0e 	bl	800c620 <malloc>
 800ba04:	4602      	mov	r2, r0
 800ba06:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba0a:	b920      	cbnz	r0, 800ba16 <_dtoa_r+0x2e>
 800ba0c:	21ef      	movs	r1, #239	@ 0xef
 800ba0e:	4bac      	ldr	r3, [pc, #688]	@ (800bcc0 <_dtoa_r+0x2d8>)
 800ba10:	48ac      	ldr	r0, [pc, #688]	@ (800bcc4 <_dtoa_r+0x2dc>)
 800ba12:	f002 ffa1 	bl	800e958 <__assert_func>
 800ba16:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba1a:	6007      	str	r7, [r0, #0]
 800ba1c:	60c7      	str	r7, [r0, #12]
 800ba1e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba22:	6819      	ldr	r1, [r3, #0]
 800ba24:	b159      	cbz	r1, 800ba3e <_dtoa_r+0x56>
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	2301      	movs	r3, #1
 800ba2a:	4093      	lsls	r3, r2
 800ba2c:	604a      	str	r2, [r1, #4]
 800ba2e:	608b      	str	r3, [r1, #8]
 800ba30:	4648      	mov	r0, r9
 800ba32:	f000 feeb 	bl	800c80c <_Bfree>
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	1e2b      	subs	r3, r5, #0
 800ba40:	bfaf      	iteee	ge
 800ba42:	2300      	movge	r3, #0
 800ba44:	2201      	movlt	r2, #1
 800ba46:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba4a:	9307      	strlt	r3, [sp, #28]
 800ba4c:	bfa8      	it	ge
 800ba4e:	6033      	strge	r3, [r6, #0]
 800ba50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ba54:	4b9c      	ldr	r3, [pc, #624]	@ (800bcc8 <_dtoa_r+0x2e0>)
 800ba56:	bfb8      	it	lt
 800ba58:	6032      	strlt	r2, [r6, #0]
 800ba5a:	ea33 0308 	bics.w	r3, r3, r8
 800ba5e:	d112      	bne.n	800ba86 <_dtoa_r+0x9e>
 800ba60:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ba6c:	4323      	orrs	r3, r4
 800ba6e:	f000 855e 	beq.w	800c52e <_dtoa_r+0xb46>
 800ba72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ba74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bccc <_dtoa_r+0x2e4>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 8560 	beq.w	800c53e <_dtoa_r+0xb56>
 800ba7e:	f10a 0303 	add.w	r3, sl, #3
 800ba82:	f000 bd5a 	b.w	800c53a <_dtoa_r+0xb52>
 800ba86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ba8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	f7f4 ff87 	bl	80009a8 <__aeabi_dcmpeq>
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	b158      	cbz	r0, 800bab6 <_dtoa_r+0xce>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800baa6:	b113      	cbz	r3, 800baae <_dtoa_r+0xc6>
 800baa8:	4b89      	ldr	r3, [pc, #548]	@ (800bcd0 <_dtoa_r+0x2e8>)
 800baaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800bcd4 <_dtoa_r+0x2ec>
 800bab2:	f000 bd44 	b.w	800c53e <_dtoa_r+0xb56>
 800bab6:	ab14      	add	r3, sp, #80	@ 0x50
 800bab8:	9301      	str	r3, [sp, #4]
 800baba:	ab15      	add	r3, sp, #84	@ 0x54
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4648      	mov	r0, r9
 800bac0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bac4:	f001 fa36 	bl	800cf34 <__d2b>
 800bac8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bacc:	9003      	str	r0, [sp, #12]
 800bace:	2e00      	cmp	r6, #0
 800bad0:	d078      	beq.n	800bbc4 <_dtoa_r+0x1dc>
 800bad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bad8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800badc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bae0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bae4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bae8:	9712      	str	r7, [sp, #72]	@ 0x48
 800baea:	4619      	mov	r1, r3
 800baec:	2200      	movs	r2, #0
 800baee:	4b7a      	ldr	r3, [pc, #488]	@ (800bcd8 <_dtoa_r+0x2f0>)
 800baf0:	f7f4 fb3a 	bl	8000168 <__aeabi_dsub>
 800baf4:	a36c      	add	r3, pc, #432	@ (adr r3, 800bca8 <_dtoa_r+0x2c0>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f7f4 fced 	bl	80004d8 <__aeabi_dmul>
 800bafe:	a36c      	add	r3, pc, #432	@ (adr r3, 800bcb0 <_dtoa_r+0x2c8>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fb32 	bl	800016c <__adddf3>
 800bb08:	4604      	mov	r4, r0
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	f7f4 fc79 	bl	8000404 <__aeabi_i2d>
 800bb12:	a369      	add	r3, pc, #420	@ (adr r3, 800bcb8 <_dtoa_r+0x2d0>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f7f4 fcde 	bl	80004d8 <__aeabi_dmul>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4620      	mov	r0, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	f7f4 fb22 	bl	800016c <__adddf3>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	f7f4 ff84 	bl	8000a38 <__aeabi_d2iz>
 800bb30:	2200      	movs	r2, #0
 800bb32:	4607      	mov	r7, r0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 ff3f 	bl	80009bc <__aeabi_dcmplt>
 800bb3e:	b140      	cbz	r0, 800bb52 <_dtoa_r+0x16a>
 800bb40:	4638      	mov	r0, r7
 800bb42:	f7f4 fc5f 	bl	8000404 <__aeabi_i2d>
 800bb46:	4622      	mov	r2, r4
 800bb48:	462b      	mov	r3, r5
 800bb4a:	f7f4 ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 800bb4e:	b900      	cbnz	r0, 800bb52 <_dtoa_r+0x16a>
 800bb50:	3f01      	subs	r7, #1
 800bb52:	2f16      	cmp	r7, #22
 800bb54:	d854      	bhi.n	800bc00 <_dtoa_r+0x218>
 800bb56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb5a:	4b60      	ldr	r3, [pc, #384]	@ (800bcdc <_dtoa_r+0x2f4>)
 800bb5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 ff2a 	bl	80009bc <__aeabi_dcmplt>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d04b      	beq.n	800bc04 <_dtoa_r+0x21c>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	3f01      	subs	r7, #1
 800bb70:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb74:	1b9b      	subs	r3, r3, r6
 800bb76:	1e5a      	subs	r2, r3, #1
 800bb78:	bf49      	itett	mi
 800bb7a:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb7e:	2300      	movpl	r3, #0
 800bb80:	9304      	strmi	r3, [sp, #16]
 800bb82:	2300      	movmi	r3, #0
 800bb84:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb86:	bf54      	ite	pl
 800bb88:	9304      	strpl	r3, [sp, #16]
 800bb8a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	db3b      	blt.n	800bc08 <_dtoa_r+0x220>
 800bb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb92:	970e      	str	r7, [sp, #56]	@ 0x38
 800bb94:	443b      	add	r3, r7
 800bb96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb98:	2300      	movs	r3, #0
 800bb9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb9e:	2b09      	cmp	r3, #9
 800bba0:	d865      	bhi.n	800bc6e <_dtoa_r+0x286>
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	bfc4      	itt	gt
 800bba6:	3b04      	subgt	r3, #4
 800bba8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bbaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbac:	bfc8      	it	gt
 800bbae:	2400      	movgt	r4, #0
 800bbb0:	f1a3 0302 	sub.w	r3, r3, #2
 800bbb4:	bfd8      	it	le
 800bbb6:	2401      	movle	r4, #1
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d864      	bhi.n	800bc86 <_dtoa_r+0x29e>
 800bbbc:	e8df f003 	tbb	[pc, r3]
 800bbc0:	2c385553 	.word	0x2c385553
 800bbc4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bbc8:	441e      	add	r6, r3
 800bbca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bbce:	2b20      	cmp	r3, #32
 800bbd0:	bfc1      	itttt	gt
 800bbd2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bbd6:	fa08 f803 	lslgt.w	r8, r8, r3
 800bbda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bbde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bbe2:	bfd6      	itet	le
 800bbe4:	f1c3 0320 	rsble	r3, r3, #32
 800bbe8:	ea48 0003 	orrgt.w	r0, r8, r3
 800bbec:	fa04 f003 	lslle.w	r0, r4, r3
 800bbf0:	f7f4 fbf8 	bl	80003e4 <__aeabi_ui2d>
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bbfa:	3e01      	subs	r6, #1
 800bbfc:	9212      	str	r2, [sp, #72]	@ 0x48
 800bbfe:	e774      	b.n	800baea <_dtoa_r+0x102>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e7b5      	b.n	800bb70 <_dtoa_r+0x188>
 800bc04:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bc06:	e7b4      	b.n	800bb72 <_dtoa_r+0x18a>
 800bc08:	9b04      	ldr	r3, [sp, #16]
 800bc0a:	1bdb      	subs	r3, r3, r7
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	427b      	negs	r3, r7
 800bc10:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc12:	2300      	movs	r3, #0
 800bc14:	930e      	str	r3, [sp, #56]	@ 0x38
 800bc16:	e7c1      	b.n	800bb9c <_dtoa_r+0x1b4>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc1e:	eb07 0b03 	add.w	fp, r7, r3
 800bc22:	f10b 0301 	add.w	r3, fp, #1
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	9308      	str	r3, [sp, #32]
 800bc2a:	bfb8      	it	lt
 800bc2c:	2301      	movlt	r3, #1
 800bc2e:	e006      	b.n	800bc3e <_dtoa_r+0x256>
 800bc30:	2301      	movs	r3, #1
 800bc32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	dd28      	ble.n	800bc8c <_dtoa_r+0x2a4>
 800bc3a:	469b      	mov	fp, r3
 800bc3c:	9308      	str	r3, [sp, #32]
 800bc3e:	2100      	movs	r1, #0
 800bc40:	2204      	movs	r2, #4
 800bc42:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bc46:	f102 0514 	add.w	r5, r2, #20
 800bc4a:	429d      	cmp	r5, r3
 800bc4c:	d926      	bls.n	800bc9c <_dtoa_r+0x2b4>
 800bc4e:	6041      	str	r1, [r0, #4]
 800bc50:	4648      	mov	r0, r9
 800bc52:	f000 fd9b 	bl	800c78c <_Balloc>
 800bc56:	4682      	mov	sl, r0
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d143      	bne.n	800bce4 <_dtoa_r+0x2fc>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc62:	4b1f      	ldr	r3, [pc, #124]	@ (800bce0 <_dtoa_r+0x2f8>)
 800bc64:	e6d4      	b.n	800ba10 <_dtoa_r+0x28>
 800bc66:	2300      	movs	r3, #0
 800bc68:	e7e3      	b.n	800bc32 <_dtoa_r+0x24a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e7d5      	b.n	800bc1a <_dtoa_r+0x232>
 800bc6e:	2401      	movs	r4, #1
 800bc70:	2300      	movs	r3, #0
 800bc72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc74:	9320      	str	r3, [sp, #128]	@ 0x80
 800bc76:	f04f 3bff 	mov.w	fp, #4294967295
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2312      	movs	r3, #18
 800bc7e:	f8cd b020 	str.w	fp, [sp, #32]
 800bc82:	9221      	str	r2, [sp, #132]	@ 0x84
 800bc84:	e7db      	b.n	800bc3e <_dtoa_r+0x256>
 800bc86:	2301      	movs	r3, #1
 800bc88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc8a:	e7f4      	b.n	800bc76 <_dtoa_r+0x28e>
 800bc8c:	f04f 0b01 	mov.w	fp, #1
 800bc90:	465b      	mov	r3, fp
 800bc92:	f8cd b020 	str.w	fp, [sp, #32]
 800bc96:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800bc9a:	e7d0      	b.n	800bc3e <_dtoa_r+0x256>
 800bc9c:	3101      	adds	r1, #1
 800bc9e:	0052      	lsls	r2, r2, #1
 800bca0:	e7d1      	b.n	800bc46 <_dtoa_r+0x25e>
 800bca2:	bf00      	nop
 800bca4:	f3af 8000 	nop.w
 800bca8:	636f4361 	.word	0x636f4361
 800bcac:	3fd287a7 	.word	0x3fd287a7
 800bcb0:	8b60c8b3 	.word	0x8b60c8b3
 800bcb4:	3fc68a28 	.word	0x3fc68a28
 800bcb8:	509f79fb 	.word	0x509f79fb
 800bcbc:	3fd34413 	.word	0x3fd34413
 800bcc0:	0800f8ac 	.word	0x0800f8ac
 800bcc4:	0800f8c3 	.word	0x0800f8c3
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	0800f8a8 	.word	0x0800f8a8
 800bcd0:	0800f9af 	.word	0x0800f9af
 800bcd4:	0800f9ae 	.word	0x0800f9ae
 800bcd8:	3ff80000 	.word	0x3ff80000
 800bcdc:	0800fa90 	.word	0x0800fa90
 800bce0:	0800f91b 	.word	0x0800f91b
 800bce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bce8:	6018      	str	r0, [r3, #0]
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	2b0e      	cmp	r3, #14
 800bcee:	f200 80a1 	bhi.w	800be34 <_dtoa_r+0x44c>
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	f000 809e 	beq.w	800be34 <_dtoa_r+0x44c>
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	dd33      	ble.n	800bd64 <_dtoa_r+0x37c>
 800bcfc:	4b9c      	ldr	r3, [pc, #624]	@ (800bf70 <_dtoa_r+0x588>)
 800bcfe:	f007 020f 	and.w	r2, r7, #15
 800bd02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd06:	05f8      	lsls	r0, r7, #23
 800bd08:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd0c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800bd10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd14:	d516      	bpl.n	800bd44 <_dtoa_r+0x35c>
 800bd16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd1a:	4b96      	ldr	r3, [pc, #600]	@ (800bf74 <_dtoa_r+0x58c>)
 800bd1c:	2603      	movs	r6, #3
 800bd1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd22:	f7f4 fd03 	bl	800072c <__aeabi_ddiv>
 800bd26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd2a:	f004 040f 	and.w	r4, r4, #15
 800bd2e:	4d91      	ldr	r5, [pc, #580]	@ (800bf74 <_dtoa_r+0x58c>)
 800bd30:	b954      	cbnz	r4, 800bd48 <_dtoa_r+0x360>
 800bd32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd3a:	f7f4 fcf7 	bl	800072c <__aeabi_ddiv>
 800bd3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd42:	e028      	b.n	800bd96 <_dtoa_r+0x3ae>
 800bd44:	2602      	movs	r6, #2
 800bd46:	e7f2      	b.n	800bd2e <_dtoa_r+0x346>
 800bd48:	07e1      	lsls	r1, r4, #31
 800bd4a:	d508      	bpl.n	800bd5e <_dtoa_r+0x376>
 800bd4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd54:	f7f4 fbc0 	bl	80004d8 <__aeabi_dmul>
 800bd58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	1064      	asrs	r4, r4, #1
 800bd60:	3508      	adds	r5, #8
 800bd62:	e7e5      	b.n	800bd30 <_dtoa_r+0x348>
 800bd64:	f000 80af 	beq.w	800bec6 <_dtoa_r+0x4de>
 800bd68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd6c:	427c      	negs	r4, r7
 800bd6e:	4b80      	ldr	r3, [pc, #512]	@ (800bf70 <_dtoa_r+0x588>)
 800bd70:	f004 020f 	and.w	r2, r4, #15
 800bd74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fbac 	bl	80004d8 <__aeabi_dmul>
 800bd80:	2602      	movs	r6, #2
 800bd82:	2300      	movs	r3, #0
 800bd84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd88:	4d7a      	ldr	r5, [pc, #488]	@ (800bf74 <_dtoa_r+0x58c>)
 800bd8a:	1124      	asrs	r4, r4, #4
 800bd8c:	2c00      	cmp	r4, #0
 800bd8e:	f040 808f 	bne.w	800beb0 <_dtoa_r+0x4c8>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1d3      	bne.n	800bd3e <_dtoa_r+0x356>
 800bd96:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800bd9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	f000 8094 	beq.w	800beca <_dtoa_r+0x4e2>
 800bda2:	2200      	movs	r2, #0
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	4b73      	ldr	r3, [pc, #460]	@ (800bf78 <_dtoa_r+0x590>)
 800bdaa:	f7f4 fe07 	bl	80009bc <__aeabi_dcmplt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f000 808b 	beq.w	800beca <_dtoa_r+0x4e2>
 800bdb4:	9b08      	ldr	r3, [sp, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 8087 	beq.w	800beca <_dtoa_r+0x4e2>
 800bdbc:	f1bb 0f00 	cmp.w	fp, #0
 800bdc0:	dd34      	ble.n	800be2c <_dtoa_r+0x444>
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4b6c      	ldr	r3, [pc, #432]	@ (800bf7c <_dtoa_r+0x594>)
 800bdca:	f7f4 fb85 	bl	80004d8 <__aeabi_dmul>
 800bdce:	465c      	mov	r4, fp
 800bdd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdd4:	f107 38ff 	add.w	r8, r7, #4294967295
 800bdd8:	3601      	adds	r6, #1
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7f4 fb12 	bl	8000404 <__aeabi_i2d>
 800bde0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bde4:	f7f4 fb78 	bl	80004d8 <__aeabi_dmul>
 800bde8:	2200      	movs	r2, #0
 800bdea:	4b65      	ldr	r3, [pc, #404]	@ (800bf80 <_dtoa_r+0x598>)
 800bdec:	f7f4 f9be 	bl	800016c <__adddf3>
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d16a      	bne.n	800bed0 <_dtoa_r+0x4e8>
 800bdfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdfe:	2200      	movs	r2, #0
 800be00:	4b60      	ldr	r3, [pc, #384]	@ (800bf84 <_dtoa_r+0x59c>)
 800be02:	f7f4 f9b1 	bl	8000168 <__aeabi_dsub>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be0e:	462a      	mov	r2, r5
 800be10:	4633      	mov	r3, r6
 800be12:	f7f4 fdf1 	bl	80009f8 <__aeabi_dcmpgt>
 800be16:	2800      	cmp	r0, #0
 800be18:	f040 8298 	bne.w	800c34c <_dtoa_r+0x964>
 800be1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be20:	462a      	mov	r2, r5
 800be22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be26:	f7f4 fdc9 	bl	80009bc <__aeabi_dcmplt>
 800be2a:	bb38      	cbnz	r0, 800be7c <_dtoa_r+0x494>
 800be2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800be30:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800be34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800be36:	2b00      	cmp	r3, #0
 800be38:	f2c0 8157 	blt.w	800c0ea <_dtoa_r+0x702>
 800be3c:	2f0e      	cmp	r7, #14
 800be3e:	f300 8154 	bgt.w	800c0ea <_dtoa_r+0x702>
 800be42:	4b4b      	ldr	r3, [pc, #300]	@ (800bf70 <_dtoa_r+0x588>)
 800be44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be48:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be52:	2b00      	cmp	r3, #0
 800be54:	f280 80e5 	bge.w	800c022 <_dtoa_r+0x63a>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f300 80e1 	bgt.w	800c022 <_dtoa_r+0x63a>
 800be60:	d10c      	bne.n	800be7c <_dtoa_r+0x494>
 800be62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be66:	2200      	movs	r2, #0
 800be68:	4b46      	ldr	r3, [pc, #280]	@ (800bf84 <_dtoa_r+0x59c>)
 800be6a:	f7f4 fb35 	bl	80004d8 <__aeabi_dmul>
 800be6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be72:	f7f4 fdb7 	bl	80009e4 <__aeabi_dcmpge>
 800be76:	2800      	cmp	r0, #0
 800be78:	f000 8266 	beq.w	800c348 <_dtoa_r+0x960>
 800be7c:	2400      	movs	r4, #0
 800be7e:	4625      	mov	r5, r4
 800be80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be82:	4656      	mov	r6, sl
 800be84:	ea6f 0803 	mvn.w	r8, r3
 800be88:	2700      	movs	r7, #0
 800be8a:	4621      	mov	r1, r4
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 fcbd 	bl	800c80c <_Bfree>
 800be92:	2d00      	cmp	r5, #0
 800be94:	f000 80bd 	beq.w	800c012 <_dtoa_r+0x62a>
 800be98:	b12f      	cbz	r7, 800bea6 <_dtoa_r+0x4be>
 800be9a:	42af      	cmp	r7, r5
 800be9c:	d003      	beq.n	800bea6 <_dtoa_r+0x4be>
 800be9e:	4639      	mov	r1, r7
 800bea0:	4648      	mov	r0, r9
 800bea2:	f000 fcb3 	bl	800c80c <_Bfree>
 800bea6:	4629      	mov	r1, r5
 800bea8:	4648      	mov	r0, r9
 800beaa:	f000 fcaf 	bl	800c80c <_Bfree>
 800beae:	e0b0      	b.n	800c012 <_dtoa_r+0x62a>
 800beb0:	07e2      	lsls	r2, r4, #31
 800beb2:	d505      	bpl.n	800bec0 <_dtoa_r+0x4d8>
 800beb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800beb8:	f7f4 fb0e 	bl	80004d8 <__aeabi_dmul>
 800bebc:	2301      	movs	r3, #1
 800bebe:	3601      	adds	r6, #1
 800bec0:	1064      	asrs	r4, r4, #1
 800bec2:	3508      	adds	r5, #8
 800bec4:	e762      	b.n	800bd8c <_dtoa_r+0x3a4>
 800bec6:	2602      	movs	r6, #2
 800bec8:	e765      	b.n	800bd96 <_dtoa_r+0x3ae>
 800beca:	46b8      	mov	r8, r7
 800becc:	9c08      	ldr	r4, [sp, #32]
 800bece:	e784      	b.n	800bdda <_dtoa_r+0x3f2>
 800bed0:	4b27      	ldr	r3, [pc, #156]	@ (800bf70 <_dtoa_r+0x588>)
 800bed2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bed4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bed8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bedc:	4454      	add	r4, sl
 800bede:	2900      	cmp	r1, #0
 800bee0:	d054      	beq.n	800bf8c <_dtoa_r+0x5a4>
 800bee2:	2000      	movs	r0, #0
 800bee4:	4928      	ldr	r1, [pc, #160]	@ (800bf88 <_dtoa_r+0x5a0>)
 800bee6:	f7f4 fc21 	bl	800072c <__aeabi_ddiv>
 800beea:	4633      	mov	r3, r6
 800beec:	462a      	mov	r2, r5
 800beee:	f7f4 f93b 	bl	8000168 <__aeabi_dsub>
 800bef2:	4656      	mov	r6, sl
 800bef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bef8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800befc:	f7f4 fd9c 	bl	8000a38 <__aeabi_d2iz>
 800bf00:	4605      	mov	r5, r0
 800bf02:	f7f4 fa7f 	bl	8000404 <__aeabi_i2d>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf0e:	f7f4 f92b 	bl	8000168 <__aeabi_dsub>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	3530      	adds	r5, #48	@ 0x30
 800bf18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf20:	f806 5b01 	strb.w	r5, [r6], #1
 800bf24:	f7f4 fd4a 	bl	80009bc <__aeabi_dcmplt>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d172      	bne.n	800c012 <_dtoa_r+0x62a>
 800bf2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf30:	2000      	movs	r0, #0
 800bf32:	4911      	ldr	r1, [pc, #68]	@ (800bf78 <_dtoa_r+0x590>)
 800bf34:	f7f4 f918 	bl	8000168 <__aeabi_dsub>
 800bf38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bf3c:	f7f4 fd3e 	bl	80009bc <__aeabi_dcmplt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f040 80b4 	bne.w	800c0ae <_dtoa_r+0x6c6>
 800bf46:	42a6      	cmp	r6, r4
 800bf48:	f43f af70 	beq.w	800be2c <_dtoa_r+0x444>
 800bf4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bf50:	2200      	movs	r2, #0
 800bf52:	4b0a      	ldr	r3, [pc, #40]	@ (800bf7c <_dtoa_r+0x594>)
 800bf54:	f7f4 fac0 	bl	80004d8 <__aeabi_dmul>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf62:	4b06      	ldr	r3, [pc, #24]	@ (800bf7c <_dtoa_r+0x594>)
 800bf64:	f7f4 fab8 	bl	80004d8 <__aeabi_dmul>
 800bf68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf6c:	e7c4      	b.n	800bef8 <_dtoa_r+0x510>
 800bf6e:	bf00      	nop
 800bf70:	0800fa90 	.word	0x0800fa90
 800bf74:	0800fa68 	.word	0x0800fa68
 800bf78:	3ff00000 	.word	0x3ff00000
 800bf7c:	40240000 	.word	0x40240000
 800bf80:	401c0000 	.word	0x401c0000
 800bf84:	40140000 	.word	0x40140000
 800bf88:	3fe00000 	.word	0x3fe00000
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f7f4 faa2 	bl	80004d8 <__aeabi_dmul>
 800bf94:	4656      	mov	r6, sl
 800bf96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bf9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bf9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfa0:	f7f4 fd4a 	bl	8000a38 <__aeabi_d2iz>
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	f7f4 fa2d 	bl	8000404 <__aeabi_i2d>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfb2:	f7f4 f8d9 	bl	8000168 <__aeabi_dsub>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	3530      	adds	r5, #48	@ 0x30
 800bfbc:	f806 5b01 	strb.w	r5, [r6], #1
 800bfc0:	42a6      	cmp	r6, r4
 800bfc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfc6:	f04f 0200 	mov.w	r2, #0
 800bfca:	d124      	bne.n	800c016 <_dtoa_r+0x62e>
 800bfcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bfd0:	4bae      	ldr	r3, [pc, #696]	@ (800c28c <_dtoa_r+0x8a4>)
 800bfd2:	f7f4 f8cb 	bl	800016c <__adddf3>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfde:	f7f4 fd0b 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d163      	bne.n	800c0ae <_dtoa_r+0x6c6>
 800bfe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfea:	2000      	movs	r0, #0
 800bfec:	49a7      	ldr	r1, [pc, #668]	@ (800c28c <_dtoa_r+0x8a4>)
 800bfee:	f7f4 f8bb 	bl	8000168 <__aeabi_dsub>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bffa:	f7f4 fcdf 	bl	80009bc <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f af14 	beq.w	800be2c <_dtoa_r+0x444>
 800c004:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c006:	1e73      	subs	r3, r6, #1
 800c008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c00a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c00e:	2b30      	cmp	r3, #48	@ 0x30
 800c010:	d0f8      	beq.n	800c004 <_dtoa_r+0x61c>
 800c012:	4647      	mov	r7, r8
 800c014:	e03b      	b.n	800c08e <_dtoa_r+0x6a6>
 800c016:	4b9e      	ldr	r3, [pc, #632]	@ (800c290 <_dtoa_r+0x8a8>)
 800c018:	f7f4 fa5e 	bl	80004d8 <__aeabi_dmul>
 800c01c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c020:	e7bc      	b.n	800bf9c <_dtoa_r+0x5b4>
 800c022:	4656      	mov	r6, sl
 800c024:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 fb7c 	bl	800072c <__aeabi_ddiv>
 800c034:	f7f4 fd00 	bl	8000a38 <__aeabi_d2iz>
 800c038:	4680      	mov	r8, r0
 800c03a:	f7f4 f9e3 	bl	8000404 <__aeabi_i2d>
 800c03e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c042:	f7f4 fa49 	bl	80004d8 <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4620      	mov	r0, r4
 800c04c:	4629      	mov	r1, r5
 800c04e:	f7f4 f88b 	bl	8000168 <__aeabi_dsub>
 800c052:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c056:	9d08      	ldr	r5, [sp, #32]
 800c058:	f806 4b01 	strb.w	r4, [r6], #1
 800c05c:	eba6 040a 	sub.w	r4, r6, sl
 800c060:	42a5      	cmp	r5, r4
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	d133      	bne.n	800c0d0 <_dtoa_r+0x6e8>
 800c068:	f7f4 f880 	bl	800016c <__adddf3>
 800c06c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	f7f4 fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 800c078:	b9c0      	cbnz	r0, 800c0ac <_dtoa_r+0x6c4>
 800c07a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fc91 	bl	80009a8 <__aeabi_dcmpeq>
 800c086:	b110      	cbz	r0, 800c08e <_dtoa_r+0x6a6>
 800c088:	f018 0f01 	tst.w	r8, #1
 800c08c:	d10e      	bne.n	800c0ac <_dtoa_r+0x6c4>
 800c08e:	4648      	mov	r0, r9
 800c090:	9903      	ldr	r1, [sp, #12]
 800c092:	f000 fbbb 	bl	800c80c <_Bfree>
 800c096:	2300      	movs	r3, #0
 800c098:	7033      	strb	r3, [r6, #0]
 800c09a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c09c:	3701      	adds	r7, #1
 800c09e:	601f      	str	r7, [r3, #0]
 800c0a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 824b 	beq.w	800c53e <_dtoa_r+0xb56>
 800c0a8:	601e      	str	r6, [r3, #0]
 800c0aa:	e248      	b.n	800c53e <_dtoa_r+0xb56>
 800c0ac:	46b8      	mov	r8, r7
 800c0ae:	4633      	mov	r3, r6
 800c0b0:	461e      	mov	r6, r3
 800c0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0b6:	2a39      	cmp	r2, #57	@ 0x39
 800c0b8:	d106      	bne.n	800c0c8 <_dtoa_r+0x6e0>
 800c0ba:	459a      	cmp	sl, r3
 800c0bc:	d1f8      	bne.n	800c0b0 <_dtoa_r+0x6c8>
 800c0be:	2230      	movs	r2, #48	@ 0x30
 800c0c0:	f108 0801 	add.w	r8, r8, #1
 800c0c4:	f88a 2000 	strb.w	r2, [sl]
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	3201      	adds	r2, #1
 800c0cc:	701a      	strb	r2, [r3, #0]
 800c0ce:	e7a0      	b.n	800c012 <_dtoa_r+0x62a>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b6f      	ldr	r3, [pc, #444]	@ (800c290 <_dtoa_r+0x8a8>)
 800c0d4:	f7f4 fa00 	bl	80004d8 <__aeabi_dmul>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4604      	mov	r4, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	f7f4 fc62 	bl	80009a8 <__aeabi_dcmpeq>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d09f      	beq.n	800c028 <_dtoa_r+0x640>
 800c0e8:	e7d1      	b.n	800c08e <_dtoa_r+0x6a6>
 800c0ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f000 80ea 	beq.w	800c2c6 <_dtoa_r+0x8de>
 800c0f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c0f4:	2a01      	cmp	r2, #1
 800c0f6:	f300 80cd 	bgt.w	800c294 <_dtoa_r+0x8ac>
 800c0fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c0fc:	2a00      	cmp	r2, #0
 800c0fe:	f000 80c1 	beq.w	800c284 <_dtoa_r+0x89c>
 800c102:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c106:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c108:	9e04      	ldr	r6, [sp, #16]
 800c10a:	9a04      	ldr	r2, [sp, #16]
 800c10c:	2101      	movs	r1, #1
 800c10e:	441a      	add	r2, r3
 800c110:	9204      	str	r2, [sp, #16]
 800c112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c114:	4648      	mov	r0, r9
 800c116:	441a      	add	r2, r3
 800c118:	9209      	str	r2, [sp, #36]	@ 0x24
 800c11a:	f000 fc75 	bl	800ca08 <__i2b>
 800c11e:	4605      	mov	r5, r0
 800c120:	b166      	cbz	r6, 800c13c <_dtoa_r+0x754>
 800c122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd09      	ble.n	800c13c <_dtoa_r+0x754>
 800c128:	42b3      	cmp	r3, r6
 800c12a:	bfa8      	it	ge
 800c12c:	4633      	movge	r3, r6
 800c12e:	9a04      	ldr	r2, [sp, #16]
 800c130:	1af6      	subs	r6, r6, r3
 800c132:	1ad2      	subs	r2, r2, r3
 800c134:	9204      	str	r2, [sp, #16]
 800c136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c13e:	b30b      	cbz	r3, 800c184 <_dtoa_r+0x79c>
 800c140:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 80c6 	beq.w	800c2d4 <_dtoa_r+0x8ec>
 800c148:	2c00      	cmp	r4, #0
 800c14a:	f000 80c0 	beq.w	800c2ce <_dtoa_r+0x8e6>
 800c14e:	4629      	mov	r1, r5
 800c150:	4622      	mov	r2, r4
 800c152:	4648      	mov	r0, r9
 800c154:	f000 fd10 	bl	800cb78 <__pow5mult>
 800c158:	9a03      	ldr	r2, [sp, #12]
 800c15a:	4601      	mov	r1, r0
 800c15c:	4605      	mov	r5, r0
 800c15e:	4648      	mov	r0, r9
 800c160:	f000 fc68 	bl	800ca34 <__multiply>
 800c164:	9903      	ldr	r1, [sp, #12]
 800c166:	4680      	mov	r8, r0
 800c168:	4648      	mov	r0, r9
 800c16a:	f000 fb4f 	bl	800c80c <_Bfree>
 800c16e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c170:	1b1b      	subs	r3, r3, r4
 800c172:	930a      	str	r3, [sp, #40]	@ 0x28
 800c174:	f000 80b1 	beq.w	800c2da <_dtoa_r+0x8f2>
 800c178:	4641      	mov	r1, r8
 800c17a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c17c:	4648      	mov	r0, r9
 800c17e:	f000 fcfb 	bl	800cb78 <__pow5mult>
 800c182:	9003      	str	r0, [sp, #12]
 800c184:	2101      	movs	r1, #1
 800c186:	4648      	mov	r0, r9
 800c188:	f000 fc3e 	bl	800ca08 <__i2b>
 800c18c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c18e:	4604      	mov	r4, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 81d8 	beq.w	800c546 <_dtoa_r+0xb5e>
 800c196:	461a      	mov	r2, r3
 800c198:	4601      	mov	r1, r0
 800c19a:	4648      	mov	r0, r9
 800c19c:	f000 fcec 	bl	800cb78 <__pow5mult>
 800c1a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	f300 809f 	bgt.w	800c2e8 <_dtoa_r+0x900>
 800c1aa:	9b06      	ldr	r3, [sp, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f040 8097 	bne.w	800c2e0 <_dtoa_r+0x8f8>
 800c1b2:	9b07      	ldr	r3, [sp, #28]
 800c1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f040 8093 	bne.w	800c2e4 <_dtoa_r+0x8fc>
 800c1be:	9b07      	ldr	r3, [sp, #28]
 800c1c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1c4:	0d1b      	lsrs	r3, r3, #20
 800c1c6:	051b      	lsls	r3, r3, #20
 800c1c8:	b133      	cbz	r3, 800c1d8 <_dtoa_r+0x7f0>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 81b8 	beq.w	800c552 <_dtoa_r+0xb6a>
 800c1e2:	6923      	ldr	r3, [r4, #16]
 800c1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1e8:	6918      	ldr	r0, [r3, #16]
 800c1ea:	f000 fbc1 	bl	800c970 <__hi0bits>
 800c1ee:	f1c0 0020 	rsb	r0, r0, #32
 800c1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f4:	4418      	add	r0, r3
 800c1f6:	f010 001f 	ands.w	r0, r0, #31
 800c1fa:	f000 8082 	beq.w	800c302 <_dtoa_r+0x91a>
 800c1fe:	f1c0 0320 	rsb	r3, r0, #32
 800c202:	2b04      	cmp	r3, #4
 800c204:	dd73      	ble.n	800c2ee <_dtoa_r+0x906>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	f1c0 001c 	rsb	r0, r0, #28
 800c20c:	4403      	add	r3, r0
 800c20e:	9304      	str	r3, [sp, #16]
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	4406      	add	r6, r0
 800c214:	4403      	add	r3, r0
 800c216:	9309      	str	r3, [sp, #36]	@ 0x24
 800c218:	9b04      	ldr	r3, [sp, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	dd05      	ble.n	800c22a <_dtoa_r+0x842>
 800c21e:	461a      	mov	r2, r3
 800c220:	4648      	mov	r0, r9
 800c222:	9903      	ldr	r1, [sp, #12]
 800c224:	f000 fd02 	bl	800cc2c <__lshift>
 800c228:	9003      	str	r0, [sp, #12]
 800c22a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dd05      	ble.n	800c23c <_dtoa_r+0x854>
 800c230:	4621      	mov	r1, r4
 800c232:	461a      	mov	r2, r3
 800c234:	4648      	mov	r0, r9
 800c236:	f000 fcf9 	bl	800cc2c <__lshift>
 800c23a:	4604      	mov	r4, r0
 800c23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d061      	beq.n	800c306 <_dtoa_r+0x91e>
 800c242:	4621      	mov	r1, r4
 800c244:	9803      	ldr	r0, [sp, #12]
 800c246:	f000 fd5d 	bl	800cd04 <__mcmp>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	da5b      	bge.n	800c306 <_dtoa_r+0x91e>
 800c24e:	2300      	movs	r3, #0
 800c250:	220a      	movs	r2, #10
 800c252:	4648      	mov	r0, r9
 800c254:	9903      	ldr	r1, [sp, #12]
 800c256:	f000 fafb 	bl	800c850 <__multadd>
 800c25a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c25c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c260:	9003      	str	r0, [sp, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 8177 	beq.w	800c556 <_dtoa_r+0xb6e>
 800c268:	4629      	mov	r1, r5
 800c26a:	2300      	movs	r3, #0
 800c26c:	220a      	movs	r2, #10
 800c26e:	4648      	mov	r0, r9
 800c270:	f000 faee 	bl	800c850 <__multadd>
 800c274:	f1bb 0f00 	cmp.w	fp, #0
 800c278:	4605      	mov	r5, r0
 800c27a:	dc6f      	bgt.n	800c35c <_dtoa_r+0x974>
 800c27c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c27e:	2b02      	cmp	r3, #2
 800c280:	dc49      	bgt.n	800c316 <_dtoa_r+0x92e>
 800c282:	e06b      	b.n	800c35c <_dtoa_r+0x974>
 800c284:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c286:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c28a:	e73c      	b.n	800c106 <_dtoa_r+0x71e>
 800c28c:	3fe00000 	.word	0x3fe00000
 800c290:	40240000 	.word	0x40240000
 800c294:	9b08      	ldr	r3, [sp, #32]
 800c296:	1e5c      	subs	r4, r3, #1
 800c298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c29a:	42a3      	cmp	r3, r4
 800c29c:	db09      	blt.n	800c2b2 <_dtoa_r+0x8ca>
 800c29e:	1b1c      	subs	r4, r3, r4
 800c2a0:	9b08      	ldr	r3, [sp, #32]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f6bf af30 	bge.w	800c108 <_dtoa_r+0x720>
 800c2a8:	9b04      	ldr	r3, [sp, #16]
 800c2aa:	9a08      	ldr	r2, [sp, #32]
 800c2ac:	1a9e      	subs	r6, r3, r2
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e72b      	b.n	800c10a <_dtoa_r+0x722>
 800c2b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2b6:	1ae3      	subs	r3, r4, r3
 800c2b8:	441a      	add	r2, r3
 800c2ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800c2bc:	9e04      	ldr	r6, [sp, #16]
 800c2be:	2400      	movs	r4, #0
 800c2c0:	9b08      	ldr	r3, [sp, #32]
 800c2c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2c4:	e721      	b.n	800c10a <_dtoa_r+0x722>
 800c2c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c2c8:	9e04      	ldr	r6, [sp, #16]
 800c2ca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c2cc:	e728      	b.n	800c120 <_dtoa_r+0x738>
 800c2ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c2d2:	e751      	b.n	800c178 <_dtoa_r+0x790>
 800c2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2d6:	9903      	ldr	r1, [sp, #12]
 800c2d8:	e750      	b.n	800c17c <_dtoa_r+0x794>
 800c2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2de:	e751      	b.n	800c184 <_dtoa_r+0x79c>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e779      	b.n	800c1d8 <_dtoa_r+0x7f0>
 800c2e4:	9b06      	ldr	r3, [sp, #24]
 800c2e6:	e777      	b.n	800c1d8 <_dtoa_r+0x7f0>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ec:	e779      	b.n	800c1e2 <_dtoa_r+0x7fa>
 800c2ee:	d093      	beq.n	800c218 <_dtoa_r+0x830>
 800c2f0:	9a04      	ldr	r2, [sp, #16]
 800c2f2:	331c      	adds	r3, #28
 800c2f4:	441a      	add	r2, r3
 800c2f6:	9204      	str	r2, [sp, #16]
 800c2f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2fa:	441e      	add	r6, r3
 800c2fc:	441a      	add	r2, r3
 800c2fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800c300:	e78a      	b.n	800c218 <_dtoa_r+0x830>
 800c302:	4603      	mov	r3, r0
 800c304:	e7f4      	b.n	800c2f0 <_dtoa_r+0x908>
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	46b8      	mov	r8, r7
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dc20      	bgt.n	800c350 <_dtoa_r+0x968>
 800c30e:	469b      	mov	fp, r3
 800c310:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c312:	2b02      	cmp	r3, #2
 800c314:	dd1e      	ble.n	800c354 <_dtoa_r+0x96c>
 800c316:	f1bb 0f00 	cmp.w	fp, #0
 800c31a:	f47f adb1 	bne.w	800be80 <_dtoa_r+0x498>
 800c31e:	4621      	mov	r1, r4
 800c320:	465b      	mov	r3, fp
 800c322:	2205      	movs	r2, #5
 800c324:	4648      	mov	r0, r9
 800c326:	f000 fa93 	bl	800c850 <__multadd>
 800c32a:	4601      	mov	r1, r0
 800c32c:	4604      	mov	r4, r0
 800c32e:	9803      	ldr	r0, [sp, #12]
 800c330:	f000 fce8 	bl	800cd04 <__mcmp>
 800c334:	2800      	cmp	r0, #0
 800c336:	f77f ada3 	ble.w	800be80 <_dtoa_r+0x498>
 800c33a:	4656      	mov	r6, sl
 800c33c:	2331      	movs	r3, #49	@ 0x31
 800c33e:	f108 0801 	add.w	r8, r8, #1
 800c342:	f806 3b01 	strb.w	r3, [r6], #1
 800c346:	e59f      	b.n	800be88 <_dtoa_r+0x4a0>
 800c348:	46b8      	mov	r8, r7
 800c34a:	9c08      	ldr	r4, [sp, #32]
 800c34c:	4625      	mov	r5, r4
 800c34e:	e7f4      	b.n	800c33a <_dtoa_r+0x952>
 800c350:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	f000 8101 	beq.w	800c55e <_dtoa_r+0xb76>
 800c35c:	2e00      	cmp	r6, #0
 800c35e:	dd05      	ble.n	800c36c <_dtoa_r+0x984>
 800c360:	4629      	mov	r1, r5
 800c362:	4632      	mov	r2, r6
 800c364:	4648      	mov	r0, r9
 800c366:	f000 fc61 	bl	800cc2c <__lshift>
 800c36a:	4605      	mov	r5, r0
 800c36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d05c      	beq.n	800c42c <_dtoa_r+0xa44>
 800c372:	4648      	mov	r0, r9
 800c374:	6869      	ldr	r1, [r5, #4]
 800c376:	f000 fa09 	bl	800c78c <_Balloc>
 800c37a:	4606      	mov	r6, r0
 800c37c:	b928      	cbnz	r0, 800c38a <_dtoa_r+0x9a2>
 800c37e:	4602      	mov	r2, r0
 800c380:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c384:	4b80      	ldr	r3, [pc, #512]	@ (800c588 <_dtoa_r+0xba0>)
 800c386:	f7ff bb43 	b.w	800ba10 <_dtoa_r+0x28>
 800c38a:	692a      	ldr	r2, [r5, #16]
 800c38c:	f105 010c 	add.w	r1, r5, #12
 800c390:	3202      	adds	r2, #2
 800c392:	0092      	lsls	r2, r2, #2
 800c394:	300c      	adds	r0, #12
 800c396:	f002 facb 	bl	800e930 <memcpy>
 800c39a:	2201      	movs	r2, #1
 800c39c:	4631      	mov	r1, r6
 800c39e:	4648      	mov	r0, r9
 800c3a0:	f000 fc44 	bl	800cc2c <__lshift>
 800c3a4:	462f      	mov	r7, r5
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	f10a 0301 	add.w	r3, sl, #1
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	eb0a 030b 	add.w	r3, sl, fp
 800c3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3b4:	9b06      	ldr	r3, [sp, #24]
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	4621      	mov	r1, r4
 800c3c0:	9803      	ldr	r0, [sp, #12]
 800c3c2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3c6:	f7ff fa87 	bl	800b8d8 <quorem>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4639      	mov	r1, r7
 800c3ce:	3330      	adds	r3, #48	@ 0x30
 800c3d0:	9006      	str	r0, [sp, #24]
 800c3d2:	9803      	ldr	r0, [sp, #12]
 800c3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3d6:	f000 fc95 	bl	800cd04 <__mcmp>
 800c3da:	462a      	mov	r2, r5
 800c3dc:	9008      	str	r0, [sp, #32]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4648      	mov	r0, r9
 800c3e2:	f000 fcab 	bl	800cd3c <__mdiff>
 800c3e6:	68c2      	ldr	r2, [r0, #12]
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ec:	bb02      	cbnz	r2, 800c430 <_dtoa_r+0xa48>
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	9803      	ldr	r0, [sp, #12]
 800c3f2:	f000 fc87 	bl	800cd04 <__mcmp>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c402:	f000 fa03 	bl	800c80c <_Bfree>
 800c406:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c408:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c40a:	9e04      	ldr	r6, [sp, #16]
 800c40c:	ea42 0103 	orr.w	r1, r2, r3
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	4319      	orrs	r1, r3
 800c414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c416:	d10d      	bne.n	800c434 <_dtoa_r+0xa4c>
 800c418:	2b39      	cmp	r3, #57	@ 0x39
 800c41a:	d027      	beq.n	800c46c <_dtoa_r+0xa84>
 800c41c:	9a08      	ldr	r2, [sp, #32]
 800c41e:	2a00      	cmp	r2, #0
 800c420:	dd01      	ble.n	800c426 <_dtoa_r+0xa3e>
 800c422:	9b06      	ldr	r3, [sp, #24]
 800c424:	3331      	adds	r3, #49	@ 0x31
 800c426:	f88b 3000 	strb.w	r3, [fp]
 800c42a:	e52e      	b.n	800be8a <_dtoa_r+0x4a2>
 800c42c:	4628      	mov	r0, r5
 800c42e:	e7b9      	b.n	800c3a4 <_dtoa_r+0x9bc>
 800c430:	2201      	movs	r2, #1
 800c432:	e7e2      	b.n	800c3fa <_dtoa_r+0xa12>
 800c434:	9908      	ldr	r1, [sp, #32]
 800c436:	2900      	cmp	r1, #0
 800c438:	db04      	blt.n	800c444 <_dtoa_r+0xa5c>
 800c43a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c43c:	4301      	orrs	r1, r0
 800c43e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c440:	4301      	orrs	r1, r0
 800c442:	d120      	bne.n	800c486 <_dtoa_r+0xa9e>
 800c444:	2a00      	cmp	r2, #0
 800c446:	ddee      	ble.n	800c426 <_dtoa_r+0xa3e>
 800c448:	2201      	movs	r2, #1
 800c44a:	9903      	ldr	r1, [sp, #12]
 800c44c:	4648      	mov	r0, r9
 800c44e:	9304      	str	r3, [sp, #16]
 800c450:	f000 fbec 	bl	800cc2c <__lshift>
 800c454:	4621      	mov	r1, r4
 800c456:	9003      	str	r0, [sp, #12]
 800c458:	f000 fc54 	bl	800cd04 <__mcmp>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	dc02      	bgt.n	800c468 <_dtoa_r+0xa80>
 800c462:	d1e0      	bne.n	800c426 <_dtoa_r+0xa3e>
 800c464:	07da      	lsls	r2, r3, #31
 800c466:	d5de      	bpl.n	800c426 <_dtoa_r+0xa3e>
 800c468:	2b39      	cmp	r3, #57	@ 0x39
 800c46a:	d1da      	bne.n	800c422 <_dtoa_r+0xa3a>
 800c46c:	2339      	movs	r3, #57	@ 0x39
 800c46e:	f88b 3000 	strb.w	r3, [fp]
 800c472:	4633      	mov	r3, r6
 800c474:	461e      	mov	r6, r3
 800c476:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	2a39      	cmp	r2, #57	@ 0x39
 800c47e:	d04e      	beq.n	800c51e <_dtoa_r+0xb36>
 800c480:	3201      	adds	r2, #1
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e501      	b.n	800be8a <_dtoa_r+0x4a2>
 800c486:	2a00      	cmp	r2, #0
 800c488:	dd03      	ble.n	800c492 <_dtoa_r+0xaaa>
 800c48a:	2b39      	cmp	r3, #57	@ 0x39
 800c48c:	d0ee      	beq.n	800c46c <_dtoa_r+0xa84>
 800c48e:	3301      	adds	r3, #1
 800c490:	e7c9      	b.n	800c426 <_dtoa_r+0xa3e>
 800c492:	9a04      	ldr	r2, [sp, #16]
 800c494:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c496:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c49a:	428a      	cmp	r2, r1
 800c49c:	d028      	beq.n	800c4f0 <_dtoa_r+0xb08>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	220a      	movs	r2, #10
 800c4a2:	9903      	ldr	r1, [sp, #12]
 800c4a4:	4648      	mov	r0, r9
 800c4a6:	f000 f9d3 	bl	800c850 <__multadd>
 800c4aa:	42af      	cmp	r7, r5
 800c4ac:	9003      	str	r0, [sp, #12]
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	f04f 020a 	mov.w	r2, #10
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4648      	mov	r0, r9
 800c4ba:	d107      	bne.n	800c4cc <_dtoa_r+0xae4>
 800c4bc:	f000 f9c8 	bl	800c850 <__multadd>
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	e777      	b.n	800c3bc <_dtoa_r+0x9d4>
 800c4cc:	f000 f9c0 	bl	800c850 <__multadd>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	220a      	movs	r2, #10
 800c4d8:	4648      	mov	r0, r9
 800c4da:	f000 f9b9 	bl	800c850 <__multadd>
 800c4de:	4605      	mov	r5, r0
 800c4e0:	e7f0      	b.n	800c4c4 <_dtoa_r+0xadc>
 800c4e2:	f1bb 0f00 	cmp.w	fp, #0
 800c4e6:	bfcc      	ite	gt
 800c4e8:	465e      	movgt	r6, fp
 800c4ea:	2601      	movle	r6, #1
 800c4ec:	2700      	movs	r7, #0
 800c4ee:	4456      	add	r6, sl
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	9903      	ldr	r1, [sp, #12]
 800c4f4:	4648      	mov	r0, r9
 800c4f6:	9304      	str	r3, [sp, #16]
 800c4f8:	f000 fb98 	bl	800cc2c <__lshift>
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	9003      	str	r0, [sp, #12]
 800c500:	f000 fc00 	bl	800cd04 <__mcmp>
 800c504:	2800      	cmp	r0, #0
 800c506:	dcb4      	bgt.n	800c472 <_dtoa_r+0xa8a>
 800c508:	d102      	bne.n	800c510 <_dtoa_r+0xb28>
 800c50a:	9b04      	ldr	r3, [sp, #16]
 800c50c:	07db      	lsls	r3, r3, #31
 800c50e:	d4b0      	bmi.n	800c472 <_dtoa_r+0xa8a>
 800c510:	4633      	mov	r3, r6
 800c512:	461e      	mov	r6, r3
 800c514:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c518:	2a30      	cmp	r2, #48	@ 0x30
 800c51a:	d0fa      	beq.n	800c512 <_dtoa_r+0xb2a>
 800c51c:	e4b5      	b.n	800be8a <_dtoa_r+0x4a2>
 800c51e:	459a      	cmp	sl, r3
 800c520:	d1a8      	bne.n	800c474 <_dtoa_r+0xa8c>
 800c522:	2331      	movs	r3, #49	@ 0x31
 800c524:	f108 0801 	add.w	r8, r8, #1
 800c528:	f88a 3000 	strb.w	r3, [sl]
 800c52c:	e4ad      	b.n	800be8a <_dtoa_r+0x4a2>
 800c52e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c530:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c58c <_dtoa_r+0xba4>
 800c534:	b11b      	cbz	r3, 800c53e <_dtoa_r+0xb56>
 800c536:	f10a 0308 	add.w	r3, sl, #8
 800c53a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c53c:	6013      	str	r3, [r2, #0]
 800c53e:	4650      	mov	r0, sl
 800c540:	b017      	add	sp, #92	@ 0x5c
 800c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c546:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c548:	2b01      	cmp	r3, #1
 800c54a:	f77f ae2e 	ble.w	800c1aa <_dtoa_r+0x7c2>
 800c54e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c550:	930a      	str	r3, [sp, #40]	@ 0x28
 800c552:	2001      	movs	r0, #1
 800c554:	e64d      	b.n	800c1f2 <_dtoa_r+0x80a>
 800c556:	f1bb 0f00 	cmp.w	fp, #0
 800c55a:	f77f aed9 	ble.w	800c310 <_dtoa_r+0x928>
 800c55e:	4656      	mov	r6, sl
 800c560:	4621      	mov	r1, r4
 800c562:	9803      	ldr	r0, [sp, #12]
 800c564:	f7ff f9b8 	bl	800b8d8 <quorem>
 800c568:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c56c:	f806 3b01 	strb.w	r3, [r6], #1
 800c570:	eba6 020a 	sub.w	r2, r6, sl
 800c574:	4593      	cmp	fp, r2
 800c576:	ddb4      	ble.n	800c4e2 <_dtoa_r+0xafa>
 800c578:	2300      	movs	r3, #0
 800c57a:	220a      	movs	r2, #10
 800c57c:	4648      	mov	r0, r9
 800c57e:	9903      	ldr	r1, [sp, #12]
 800c580:	f000 f966 	bl	800c850 <__multadd>
 800c584:	9003      	str	r0, [sp, #12]
 800c586:	e7eb      	b.n	800c560 <_dtoa_r+0xb78>
 800c588:	0800f91b 	.word	0x0800f91b
 800c58c:	0800f89f 	.word	0x0800f89f

0800c590 <_free_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4605      	mov	r5, r0
 800c594:	2900      	cmp	r1, #0
 800c596:	d040      	beq.n	800c61a <_free_r+0x8a>
 800c598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59c:	1f0c      	subs	r4, r1, #4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb8      	it	lt
 800c5a2:	18e4      	addlt	r4, r4, r3
 800c5a4:	f000 f8e6 	bl	800c774 <__malloc_lock>
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	@ (800c61c <_free_r+0x8c>)
 800c5aa:	6813      	ldr	r3, [r2, #0]
 800c5ac:	b933      	cbnz	r3, 800c5bc <_free_r+0x2c>
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	6014      	str	r4, [r2, #0]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b8:	f000 b8e2 	b.w	800c780 <__malloc_unlock>
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	d908      	bls.n	800c5d2 <_free_r+0x42>
 800c5c0:	6820      	ldr	r0, [r4, #0]
 800c5c2:	1821      	adds	r1, r4, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf01      	itttt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	1809      	addeq	r1, r1, r0
 800c5ce:	6021      	streq	r1, [r4, #0]
 800c5d0:	e7ed      	b.n	800c5ae <_free_r+0x1e>
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	b10b      	cbz	r3, 800c5dc <_free_r+0x4c>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d9fa      	bls.n	800c5d2 <_free_r+0x42>
 800c5dc:	6811      	ldr	r1, [r2, #0]
 800c5de:	1850      	adds	r0, r2, r1
 800c5e0:	42a0      	cmp	r0, r4
 800c5e2:	d10b      	bne.n	800c5fc <_free_r+0x6c>
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	4401      	add	r1, r0
 800c5e8:	1850      	adds	r0, r2, r1
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	6011      	str	r1, [r2, #0]
 800c5ee:	d1e0      	bne.n	800c5b2 <_free_r+0x22>
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4408      	add	r0, r1
 800c5f6:	6010      	str	r0, [r2, #0]
 800c5f8:	6053      	str	r3, [r2, #4]
 800c5fa:	e7da      	b.n	800c5b2 <_free_r+0x22>
 800c5fc:	d902      	bls.n	800c604 <_free_r+0x74>
 800c5fe:	230c      	movs	r3, #12
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	e7d6      	b.n	800c5b2 <_free_r+0x22>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	428b      	cmp	r3, r1
 800c60a:	bf01      	itttt	eq
 800c60c:	6819      	ldreq	r1, [r3, #0]
 800c60e:	685b      	ldreq	r3, [r3, #4]
 800c610:	1809      	addeq	r1, r1, r0
 800c612:	6021      	streq	r1, [r4, #0]
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6054      	str	r4, [r2, #4]
 800c618:	e7cb      	b.n	800c5b2 <_free_r+0x22>
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	200017b4 	.word	0x200017b4

0800c620 <malloc>:
 800c620:	4b02      	ldr	r3, [pc, #8]	@ (800c62c <malloc+0xc>)
 800c622:	4601      	mov	r1, r0
 800c624:	6818      	ldr	r0, [r3, #0]
 800c626:	f000 b825 	b.w	800c674 <_malloc_r>
 800c62a:	bf00      	nop
 800c62c:	20000188 	.word	0x20000188

0800c630 <sbrk_aligned>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	4e0f      	ldr	r6, [pc, #60]	@ (800c670 <sbrk_aligned+0x40>)
 800c634:	460c      	mov	r4, r1
 800c636:	6831      	ldr	r1, [r6, #0]
 800c638:	4605      	mov	r5, r0
 800c63a:	b911      	cbnz	r1, 800c642 <sbrk_aligned+0x12>
 800c63c:	f002 f968 	bl	800e910 <_sbrk_r>
 800c640:	6030      	str	r0, [r6, #0]
 800c642:	4621      	mov	r1, r4
 800c644:	4628      	mov	r0, r5
 800c646:	f002 f963 	bl	800e910 <_sbrk_r>
 800c64a:	1c43      	adds	r3, r0, #1
 800c64c:	d103      	bne.n	800c656 <sbrk_aligned+0x26>
 800c64e:	f04f 34ff 	mov.w	r4, #4294967295
 800c652:	4620      	mov	r0, r4
 800c654:	bd70      	pop	{r4, r5, r6, pc}
 800c656:	1cc4      	adds	r4, r0, #3
 800c658:	f024 0403 	bic.w	r4, r4, #3
 800c65c:	42a0      	cmp	r0, r4
 800c65e:	d0f8      	beq.n	800c652 <sbrk_aligned+0x22>
 800c660:	1a21      	subs	r1, r4, r0
 800c662:	4628      	mov	r0, r5
 800c664:	f002 f954 	bl	800e910 <_sbrk_r>
 800c668:	3001      	adds	r0, #1
 800c66a:	d1f2      	bne.n	800c652 <sbrk_aligned+0x22>
 800c66c:	e7ef      	b.n	800c64e <sbrk_aligned+0x1e>
 800c66e:	bf00      	nop
 800c670:	200017b0 	.word	0x200017b0

0800c674 <_malloc_r>:
 800c674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c678:	1ccd      	adds	r5, r1, #3
 800c67a:	f025 0503 	bic.w	r5, r5, #3
 800c67e:	3508      	adds	r5, #8
 800c680:	2d0c      	cmp	r5, #12
 800c682:	bf38      	it	cc
 800c684:	250c      	movcc	r5, #12
 800c686:	2d00      	cmp	r5, #0
 800c688:	4606      	mov	r6, r0
 800c68a:	db01      	blt.n	800c690 <_malloc_r+0x1c>
 800c68c:	42a9      	cmp	r1, r5
 800c68e:	d904      	bls.n	800c69a <_malloc_r+0x26>
 800c690:	230c      	movs	r3, #12
 800c692:	6033      	str	r3, [r6, #0]
 800c694:	2000      	movs	r0, #0
 800c696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c770 <_malloc_r+0xfc>
 800c69e:	f000 f869 	bl	800c774 <__malloc_lock>
 800c6a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a6:	461c      	mov	r4, r3
 800c6a8:	bb44      	cbnz	r4, 800c6fc <_malloc_r+0x88>
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f7ff ffbf 	bl	800c630 <sbrk_aligned>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	d158      	bne.n	800c76a <_malloc_r+0xf6>
 800c6b8:	f8d8 4000 	ldr.w	r4, [r8]
 800c6bc:	4627      	mov	r7, r4
 800c6be:	2f00      	cmp	r7, #0
 800c6c0:	d143      	bne.n	800c74a <_malloc_r+0xd6>
 800c6c2:	2c00      	cmp	r4, #0
 800c6c4:	d04b      	beq.n	800c75e <_malloc_r+0xea>
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	eb04 0903 	add.w	r9, r4, r3
 800c6d0:	f002 f91e 	bl	800e910 <_sbrk_r>
 800c6d4:	4581      	cmp	r9, r0
 800c6d6:	d142      	bne.n	800c75e <_malloc_r+0xea>
 800c6d8:	6821      	ldr	r1, [r4, #0]
 800c6da:	4630      	mov	r0, r6
 800c6dc:	1a6d      	subs	r5, r5, r1
 800c6de:	4629      	mov	r1, r5
 800c6e0:	f7ff ffa6 	bl	800c630 <sbrk_aligned>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d03a      	beq.n	800c75e <_malloc_r+0xea>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	442b      	add	r3, r5
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	bb62      	cbnz	r2, 800c750 <_malloc_r+0xdc>
 800c6f6:	f8c8 7000 	str.w	r7, [r8]
 800c6fa:	e00f      	b.n	800c71c <_malloc_r+0xa8>
 800c6fc:	6822      	ldr	r2, [r4, #0]
 800c6fe:	1b52      	subs	r2, r2, r5
 800c700:	d420      	bmi.n	800c744 <_malloc_r+0xd0>
 800c702:	2a0b      	cmp	r2, #11
 800c704:	d917      	bls.n	800c736 <_malloc_r+0xc2>
 800c706:	1961      	adds	r1, r4, r5
 800c708:	42a3      	cmp	r3, r4
 800c70a:	6025      	str	r5, [r4, #0]
 800c70c:	bf18      	it	ne
 800c70e:	6059      	strne	r1, [r3, #4]
 800c710:	6863      	ldr	r3, [r4, #4]
 800c712:	bf08      	it	eq
 800c714:	f8c8 1000 	streq.w	r1, [r8]
 800c718:	5162      	str	r2, [r4, r5]
 800c71a:	604b      	str	r3, [r1, #4]
 800c71c:	4630      	mov	r0, r6
 800c71e:	f000 f82f 	bl	800c780 <__malloc_unlock>
 800c722:	f104 000b 	add.w	r0, r4, #11
 800c726:	1d23      	adds	r3, r4, #4
 800c728:	f020 0007 	bic.w	r0, r0, #7
 800c72c:	1ac2      	subs	r2, r0, r3
 800c72e:	bf1c      	itt	ne
 800c730:	1a1b      	subne	r3, r3, r0
 800c732:	50a3      	strne	r3, [r4, r2]
 800c734:	e7af      	b.n	800c696 <_malloc_r+0x22>
 800c736:	6862      	ldr	r2, [r4, #4]
 800c738:	42a3      	cmp	r3, r4
 800c73a:	bf0c      	ite	eq
 800c73c:	f8c8 2000 	streq.w	r2, [r8]
 800c740:	605a      	strne	r2, [r3, #4]
 800c742:	e7eb      	b.n	800c71c <_malloc_r+0xa8>
 800c744:	4623      	mov	r3, r4
 800c746:	6864      	ldr	r4, [r4, #4]
 800c748:	e7ae      	b.n	800c6a8 <_malloc_r+0x34>
 800c74a:	463c      	mov	r4, r7
 800c74c:	687f      	ldr	r7, [r7, #4]
 800c74e:	e7b6      	b.n	800c6be <_malloc_r+0x4a>
 800c750:	461a      	mov	r2, r3
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	42a3      	cmp	r3, r4
 800c756:	d1fb      	bne.n	800c750 <_malloc_r+0xdc>
 800c758:	2300      	movs	r3, #0
 800c75a:	6053      	str	r3, [r2, #4]
 800c75c:	e7de      	b.n	800c71c <_malloc_r+0xa8>
 800c75e:	230c      	movs	r3, #12
 800c760:	4630      	mov	r0, r6
 800c762:	6033      	str	r3, [r6, #0]
 800c764:	f000 f80c 	bl	800c780 <__malloc_unlock>
 800c768:	e794      	b.n	800c694 <_malloc_r+0x20>
 800c76a:	6005      	str	r5, [r0, #0]
 800c76c:	e7d6      	b.n	800c71c <_malloc_r+0xa8>
 800c76e:	bf00      	nop
 800c770:	200017b4 	.word	0x200017b4

0800c774 <__malloc_lock>:
 800c774:	4801      	ldr	r0, [pc, #4]	@ (800c77c <__malloc_lock+0x8>)
 800c776:	f7ff b89a 	b.w	800b8ae <__retarget_lock_acquire_recursive>
 800c77a:	bf00      	nop
 800c77c:	200017ac 	.word	0x200017ac

0800c780 <__malloc_unlock>:
 800c780:	4801      	ldr	r0, [pc, #4]	@ (800c788 <__malloc_unlock+0x8>)
 800c782:	f7ff b895 	b.w	800b8b0 <__retarget_lock_release_recursive>
 800c786:	bf00      	nop
 800c788:	200017ac 	.word	0x200017ac

0800c78c <_Balloc>:
 800c78c:	b570      	push	{r4, r5, r6, lr}
 800c78e:	69c6      	ldr	r6, [r0, #28]
 800c790:	4604      	mov	r4, r0
 800c792:	460d      	mov	r5, r1
 800c794:	b976      	cbnz	r6, 800c7b4 <_Balloc+0x28>
 800c796:	2010      	movs	r0, #16
 800c798:	f7ff ff42 	bl	800c620 <malloc>
 800c79c:	4602      	mov	r2, r0
 800c79e:	61e0      	str	r0, [r4, #28]
 800c7a0:	b920      	cbnz	r0, 800c7ac <_Balloc+0x20>
 800c7a2:	216b      	movs	r1, #107	@ 0x6b
 800c7a4:	4b17      	ldr	r3, [pc, #92]	@ (800c804 <_Balloc+0x78>)
 800c7a6:	4818      	ldr	r0, [pc, #96]	@ (800c808 <_Balloc+0x7c>)
 800c7a8:	f002 f8d6 	bl	800e958 <__assert_func>
 800c7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7b0:	6006      	str	r6, [r0, #0]
 800c7b2:	60c6      	str	r6, [r0, #12]
 800c7b4:	69e6      	ldr	r6, [r4, #28]
 800c7b6:	68f3      	ldr	r3, [r6, #12]
 800c7b8:	b183      	cbz	r3, 800c7dc <_Balloc+0x50>
 800c7ba:	69e3      	ldr	r3, [r4, #28]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7c2:	b9b8      	cbnz	r0, 800c7f4 <_Balloc+0x68>
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	fa01 f605 	lsl.w	r6, r1, r5
 800c7ca:	1d72      	adds	r2, r6, #5
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	0092      	lsls	r2, r2, #2
 800c7d0:	f002 f8e0 	bl	800e994 <_calloc_r>
 800c7d4:	b160      	cbz	r0, 800c7f0 <_Balloc+0x64>
 800c7d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7da:	e00e      	b.n	800c7fa <_Balloc+0x6e>
 800c7dc:	2221      	movs	r2, #33	@ 0x21
 800c7de:	2104      	movs	r1, #4
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f002 f8d7 	bl	800e994 <_calloc_r>
 800c7e6:	69e3      	ldr	r3, [r4, #28]
 800c7e8:	60f0      	str	r0, [r6, #12]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1e4      	bne.n	800c7ba <_Balloc+0x2e>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	bd70      	pop	{r4, r5, r6, pc}
 800c7f4:	6802      	ldr	r2, [r0, #0]
 800c7f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c800:	e7f7      	b.n	800c7f2 <_Balloc+0x66>
 800c802:	bf00      	nop
 800c804:	0800f8ac 	.word	0x0800f8ac
 800c808:	0800f92c 	.word	0x0800f92c

0800c80c <_Bfree>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	69c6      	ldr	r6, [r0, #28]
 800c810:	4605      	mov	r5, r0
 800c812:	460c      	mov	r4, r1
 800c814:	b976      	cbnz	r6, 800c834 <_Bfree+0x28>
 800c816:	2010      	movs	r0, #16
 800c818:	f7ff ff02 	bl	800c620 <malloc>
 800c81c:	4602      	mov	r2, r0
 800c81e:	61e8      	str	r0, [r5, #28]
 800c820:	b920      	cbnz	r0, 800c82c <_Bfree+0x20>
 800c822:	218f      	movs	r1, #143	@ 0x8f
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <_Bfree+0x3c>)
 800c826:	4809      	ldr	r0, [pc, #36]	@ (800c84c <_Bfree+0x40>)
 800c828:	f002 f896 	bl	800e958 <__assert_func>
 800c82c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c830:	6006      	str	r6, [r0, #0]
 800c832:	60c6      	str	r6, [r0, #12]
 800c834:	b13c      	cbz	r4, 800c846 <_Bfree+0x3a>
 800c836:	69eb      	ldr	r3, [r5, #28]
 800c838:	6862      	ldr	r2, [r4, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c840:	6021      	str	r1, [r4, #0]
 800c842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	0800f8ac 	.word	0x0800f8ac
 800c84c:	0800f92c 	.word	0x0800f92c

0800c850 <__multadd>:
 800c850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c854:	4607      	mov	r7, r0
 800c856:	460c      	mov	r4, r1
 800c858:	461e      	mov	r6, r3
 800c85a:	2000      	movs	r0, #0
 800c85c:	690d      	ldr	r5, [r1, #16]
 800c85e:	f101 0c14 	add.w	ip, r1, #20
 800c862:	f8dc 3000 	ldr.w	r3, [ip]
 800c866:	3001      	adds	r0, #1
 800c868:	b299      	uxth	r1, r3
 800c86a:	fb02 6101 	mla	r1, r2, r1, r6
 800c86e:	0c1e      	lsrs	r6, r3, #16
 800c870:	0c0b      	lsrs	r3, r1, #16
 800c872:	fb02 3306 	mla	r3, r2, r6, r3
 800c876:	b289      	uxth	r1, r1
 800c878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c87c:	4285      	cmp	r5, r0
 800c87e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c882:	f84c 1b04 	str.w	r1, [ip], #4
 800c886:	dcec      	bgt.n	800c862 <__multadd+0x12>
 800c888:	b30e      	cbz	r6, 800c8ce <__multadd+0x7e>
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	42ab      	cmp	r3, r5
 800c88e:	dc19      	bgt.n	800c8c4 <__multadd+0x74>
 800c890:	6861      	ldr	r1, [r4, #4]
 800c892:	4638      	mov	r0, r7
 800c894:	3101      	adds	r1, #1
 800c896:	f7ff ff79 	bl	800c78c <_Balloc>
 800c89a:	4680      	mov	r8, r0
 800c89c:	b928      	cbnz	r0, 800c8aa <__multadd+0x5a>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	21ba      	movs	r1, #186	@ 0xba
 800c8a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c8d4 <__multadd+0x84>)
 800c8a4:	480c      	ldr	r0, [pc, #48]	@ (800c8d8 <__multadd+0x88>)
 800c8a6:	f002 f857 	bl	800e958 <__assert_func>
 800c8aa:	6922      	ldr	r2, [r4, #16]
 800c8ac:	f104 010c 	add.w	r1, r4, #12
 800c8b0:	3202      	adds	r2, #2
 800c8b2:	0092      	lsls	r2, r2, #2
 800c8b4:	300c      	adds	r0, #12
 800c8b6:	f002 f83b 	bl	800e930 <memcpy>
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f7ff ffa5 	bl	800c80c <_Bfree>
 800c8c2:	4644      	mov	r4, r8
 800c8c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8c8:	3501      	adds	r5, #1
 800c8ca:	615e      	str	r6, [r3, #20]
 800c8cc:	6125      	str	r5, [r4, #16]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	0800f91b 	.word	0x0800f91b
 800c8d8:	0800f92c 	.word	0x0800f92c

0800c8dc <__s2b>:
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	4615      	mov	r5, r2
 800c8e2:	2209      	movs	r2, #9
 800c8e4:	461f      	mov	r7, r3
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	db09      	blt.n	800c90c <__s2b+0x30>
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7ff ff47 	bl	800c78c <_Balloc>
 800c8fe:	b940      	cbnz	r0, 800c912 <__s2b+0x36>
 800c900:	4602      	mov	r2, r0
 800c902:	21d3      	movs	r1, #211	@ 0xd3
 800c904:	4b18      	ldr	r3, [pc, #96]	@ (800c968 <__s2b+0x8c>)
 800c906:	4819      	ldr	r0, [pc, #100]	@ (800c96c <__s2b+0x90>)
 800c908:	f002 f826 	bl	800e958 <__assert_func>
 800c90c:	0052      	lsls	r2, r2, #1
 800c90e:	3101      	adds	r1, #1
 800c910:	e7f0      	b.n	800c8f4 <__s2b+0x18>
 800c912:	9b08      	ldr	r3, [sp, #32]
 800c914:	2d09      	cmp	r5, #9
 800c916:	6143      	str	r3, [r0, #20]
 800c918:	f04f 0301 	mov.w	r3, #1
 800c91c:	6103      	str	r3, [r0, #16]
 800c91e:	dd16      	ble.n	800c94e <__s2b+0x72>
 800c920:	f104 0909 	add.w	r9, r4, #9
 800c924:	46c8      	mov	r8, r9
 800c926:	442c      	add	r4, r5
 800c928:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c92c:	4601      	mov	r1, r0
 800c92e:	220a      	movs	r2, #10
 800c930:	4630      	mov	r0, r6
 800c932:	3b30      	subs	r3, #48	@ 0x30
 800c934:	f7ff ff8c 	bl	800c850 <__multadd>
 800c938:	45a0      	cmp	r8, r4
 800c93a:	d1f5      	bne.n	800c928 <__s2b+0x4c>
 800c93c:	f1a5 0408 	sub.w	r4, r5, #8
 800c940:	444c      	add	r4, r9
 800c942:	1b2d      	subs	r5, r5, r4
 800c944:	1963      	adds	r3, r4, r5
 800c946:	42bb      	cmp	r3, r7
 800c948:	db04      	blt.n	800c954 <__s2b+0x78>
 800c94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94e:	2509      	movs	r5, #9
 800c950:	340a      	adds	r4, #10
 800c952:	e7f6      	b.n	800c942 <__s2b+0x66>
 800c954:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c958:	4601      	mov	r1, r0
 800c95a:	220a      	movs	r2, #10
 800c95c:	4630      	mov	r0, r6
 800c95e:	3b30      	subs	r3, #48	@ 0x30
 800c960:	f7ff ff76 	bl	800c850 <__multadd>
 800c964:	e7ee      	b.n	800c944 <__s2b+0x68>
 800c966:	bf00      	nop
 800c968:	0800f91b 	.word	0x0800f91b
 800c96c:	0800f92c 	.word	0x0800f92c

0800c970 <__hi0bits>:
 800c970:	4603      	mov	r3, r0
 800c972:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c976:	bf3a      	itte	cc
 800c978:	0403      	lslcc	r3, r0, #16
 800c97a:	2010      	movcc	r0, #16
 800c97c:	2000      	movcs	r0, #0
 800c97e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c982:	bf3c      	itt	cc
 800c984:	021b      	lslcc	r3, r3, #8
 800c986:	3008      	addcc	r0, #8
 800c988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c98c:	bf3c      	itt	cc
 800c98e:	011b      	lslcc	r3, r3, #4
 800c990:	3004      	addcc	r0, #4
 800c992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c996:	bf3c      	itt	cc
 800c998:	009b      	lslcc	r3, r3, #2
 800c99a:	3002      	addcc	r0, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	db05      	blt.n	800c9ac <__hi0bits+0x3c>
 800c9a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9a4:	f100 0001 	add.w	r0, r0, #1
 800c9a8:	bf08      	it	eq
 800c9aa:	2020      	moveq	r0, #32
 800c9ac:	4770      	bx	lr

0800c9ae <__lo0bits>:
 800c9ae:	6803      	ldr	r3, [r0, #0]
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	f013 0007 	ands.w	r0, r3, #7
 800c9b6:	d00b      	beq.n	800c9d0 <__lo0bits+0x22>
 800c9b8:	07d9      	lsls	r1, r3, #31
 800c9ba:	d421      	bmi.n	800ca00 <__lo0bits+0x52>
 800c9bc:	0798      	lsls	r0, r3, #30
 800c9be:	bf49      	itett	mi
 800c9c0:	085b      	lsrmi	r3, r3, #1
 800c9c2:	089b      	lsrpl	r3, r3, #2
 800c9c4:	2001      	movmi	r0, #1
 800c9c6:	6013      	strmi	r3, [r2, #0]
 800c9c8:	bf5c      	itt	pl
 800c9ca:	2002      	movpl	r0, #2
 800c9cc:	6013      	strpl	r3, [r2, #0]
 800c9ce:	4770      	bx	lr
 800c9d0:	b299      	uxth	r1, r3
 800c9d2:	b909      	cbnz	r1, 800c9d8 <__lo0bits+0x2a>
 800c9d4:	2010      	movs	r0, #16
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	b2d9      	uxtb	r1, r3
 800c9da:	b909      	cbnz	r1, 800c9e0 <__lo0bits+0x32>
 800c9dc:	3008      	adds	r0, #8
 800c9de:	0a1b      	lsrs	r3, r3, #8
 800c9e0:	0719      	lsls	r1, r3, #28
 800c9e2:	bf04      	itt	eq
 800c9e4:	091b      	lsreq	r3, r3, #4
 800c9e6:	3004      	addeq	r0, #4
 800c9e8:	0799      	lsls	r1, r3, #30
 800c9ea:	bf04      	itt	eq
 800c9ec:	089b      	lsreq	r3, r3, #2
 800c9ee:	3002      	addeq	r0, #2
 800c9f0:	07d9      	lsls	r1, r3, #31
 800c9f2:	d403      	bmi.n	800c9fc <__lo0bits+0x4e>
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	f100 0001 	add.w	r0, r0, #1
 800c9fa:	d003      	beq.n	800ca04 <__lo0bits+0x56>
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	4770      	bx	lr
 800ca00:	2000      	movs	r0, #0
 800ca02:	4770      	bx	lr
 800ca04:	2020      	movs	r0, #32
 800ca06:	4770      	bx	lr

0800ca08 <__i2b>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	2101      	movs	r1, #1
 800ca0e:	f7ff febd 	bl	800c78c <_Balloc>
 800ca12:	4602      	mov	r2, r0
 800ca14:	b928      	cbnz	r0, 800ca22 <__i2b+0x1a>
 800ca16:	f240 1145 	movw	r1, #325	@ 0x145
 800ca1a:	4b04      	ldr	r3, [pc, #16]	@ (800ca2c <__i2b+0x24>)
 800ca1c:	4804      	ldr	r0, [pc, #16]	@ (800ca30 <__i2b+0x28>)
 800ca1e:	f001 ff9b 	bl	800e958 <__assert_func>
 800ca22:	2301      	movs	r3, #1
 800ca24:	6144      	str	r4, [r0, #20]
 800ca26:	6103      	str	r3, [r0, #16]
 800ca28:	bd10      	pop	{r4, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800f91b 	.word	0x0800f91b
 800ca30:	0800f92c 	.word	0x0800f92c

0800ca34 <__multiply>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	4617      	mov	r7, r2
 800ca3a:	690a      	ldr	r2, [r1, #16]
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	4689      	mov	r9, r1
 800ca40:	429a      	cmp	r2, r3
 800ca42:	bfa2      	ittt	ge
 800ca44:	463b      	movge	r3, r7
 800ca46:	460f      	movge	r7, r1
 800ca48:	4699      	movge	r9, r3
 800ca4a:	693d      	ldr	r5, [r7, #16]
 800ca4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	eb05 060a 	add.w	r6, r5, sl
 800ca58:	42b3      	cmp	r3, r6
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	bfb8      	it	lt
 800ca5e:	3101      	addlt	r1, #1
 800ca60:	f7ff fe94 	bl	800c78c <_Balloc>
 800ca64:	b930      	cbnz	r0, 800ca74 <__multiply+0x40>
 800ca66:	4602      	mov	r2, r0
 800ca68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca6c:	4b40      	ldr	r3, [pc, #256]	@ (800cb70 <__multiply+0x13c>)
 800ca6e:	4841      	ldr	r0, [pc, #260]	@ (800cb74 <__multiply+0x140>)
 800ca70:	f001 ff72 	bl	800e958 <__assert_func>
 800ca74:	f100 0414 	add.w	r4, r0, #20
 800ca78:	4623      	mov	r3, r4
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ca80:	4573      	cmp	r3, lr
 800ca82:	d320      	bcc.n	800cac6 <__multiply+0x92>
 800ca84:	f107 0814 	add.w	r8, r7, #20
 800ca88:	f109 0114 	add.w	r1, r9, #20
 800ca8c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ca90:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	1beb      	subs	r3, r5, r7
 800ca98:	3b15      	subs	r3, #21
 800ca9a:	f023 0303 	bic.w	r3, r3, #3
 800ca9e:	3304      	adds	r3, #4
 800caa0:	3715      	adds	r7, #21
 800caa2:	42bd      	cmp	r5, r7
 800caa4:	bf38      	it	cc
 800caa6:	2304      	movcc	r3, #4
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	9b02      	ldr	r3, [sp, #8]
 800caac:	9103      	str	r1, [sp, #12]
 800caae:	428b      	cmp	r3, r1
 800cab0:	d80c      	bhi.n	800cacc <__multiply+0x98>
 800cab2:	2e00      	cmp	r6, #0
 800cab4:	dd03      	ble.n	800cabe <__multiply+0x8a>
 800cab6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d055      	beq.n	800cb6a <__multiply+0x136>
 800cabe:	6106      	str	r6, [r0, #16]
 800cac0:	b005      	add	sp, #20
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	f843 2b04 	str.w	r2, [r3], #4
 800caca:	e7d9      	b.n	800ca80 <__multiply+0x4c>
 800cacc:	f8b1 a000 	ldrh.w	sl, [r1]
 800cad0:	f1ba 0f00 	cmp.w	sl, #0
 800cad4:	d01f      	beq.n	800cb16 <__multiply+0xe2>
 800cad6:	46c4      	mov	ip, r8
 800cad8:	46a1      	mov	r9, r4
 800cada:	2700      	movs	r7, #0
 800cadc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cae0:	f8d9 3000 	ldr.w	r3, [r9]
 800cae4:	fa1f fb82 	uxth.w	fp, r2
 800cae8:	b29b      	uxth	r3, r3
 800caea:	fb0a 330b 	mla	r3, sl, fp, r3
 800caee:	443b      	add	r3, r7
 800caf0:	f8d9 7000 	ldr.w	r7, [r9]
 800caf4:	0c12      	lsrs	r2, r2, #16
 800caf6:	0c3f      	lsrs	r7, r7, #16
 800caf8:	fb0a 7202 	mla	r2, sl, r2, r7
 800cafc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb06:	4565      	cmp	r5, ip
 800cb08:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cb0c:	f849 3b04 	str.w	r3, [r9], #4
 800cb10:	d8e4      	bhi.n	800cadc <__multiply+0xa8>
 800cb12:	9b01      	ldr	r3, [sp, #4]
 800cb14:	50e7      	str	r7, [r4, r3]
 800cb16:	9b03      	ldr	r3, [sp, #12]
 800cb18:	3104      	adds	r1, #4
 800cb1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb1e:	f1b9 0f00 	cmp.w	r9, #0
 800cb22:	d020      	beq.n	800cb66 <__multiply+0x132>
 800cb24:	4647      	mov	r7, r8
 800cb26:	46a4      	mov	ip, r4
 800cb28:	f04f 0a00 	mov.w	sl, #0
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	f8b7 b000 	ldrh.w	fp, [r7]
 800cb32:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	fb09 220b 	mla	r2, r9, fp, r2
 800cb3c:	4452      	add	r2, sl
 800cb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb42:	f84c 3b04 	str.w	r3, [ip], #4
 800cb46:	f857 3b04 	ldr.w	r3, [r7], #4
 800cb4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb4e:	f8bc 3000 	ldrh.w	r3, [ip]
 800cb52:	42bd      	cmp	r5, r7
 800cb54:	fb09 330a 	mla	r3, r9, sl, r3
 800cb58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cb5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb60:	d8e5      	bhi.n	800cb2e <__multiply+0xfa>
 800cb62:	9a01      	ldr	r2, [sp, #4]
 800cb64:	50a3      	str	r3, [r4, r2]
 800cb66:	3404      	adds	r4, #4
 800cb68:	e79f      	b.n	800caaa <__multiply+0x76>
 800cb6a:	3e01      	subs	r6, #1
 800cb6c:	e7a1      	b.n	800cab2 <__multiply+0x7e>
 800cb6e:	bf00      	nop
 800cb70:	0800f91b 	.word	0x0800f91b
 800cb74:	0800f92c 	.word	0x0800f92c

0800cb78 <__pow5mult>:
 800cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	4615      	mov	r5, r2
 800cb7e:	f012 0203 	ands.w	r2, r2, #3
 800cb82:	4607      	mov	r7, r0
 800cb84:	460e      	mov	r6, r1
 800cb86:	d007      	beq.n	800cb98 <__pow5mult+0x20>
 800cb88:	4c25      	ldr	r4, [pc, #148]	@ (800cc20 <__pow5mult+0xa8>)
 800cb8a:	3a01      	subs	r2, #1
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb92:	f7ff fe5d 	bl	800c850 <__multadd>
 800cb96:	4606      	mov	r6, r0
 800cb98:	10ad      	asrs	r5, r5, #2
 800cb9a:	d03d      	beq.n	800cc18 <__pow5mult+0xa0>
 800cb9c:	69fc      	ldr	r4, [r7, #28]
 800cb9e:	b97c      	cbnz	r4, 800cbc0 <__pow5mult+0x48>
 800cba0:	2010      	movs	r0, #16
 800cba2:	f7ff fd3d 	bl	800c620 <malloc>
 800cba6:	4602      	mov	r2, r0
 800cba8:	61f8      	str	r0, [r7, #28]
 800cbaa:	b928      	cbnz	r0, 800cbb8 <__pow5mult+0x40>
 800cbac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbb0:	4b1c      	ldr	r3, [pc, #112]	@ (800cc24 <__pow5mult+0xac>)
 800cbb2:	481d      	ldr	r0, [pc, #116]	@ (800cc28 <__pow5mult+0xb0>)
 800cbb4:	f001 fed0 	bl	800e958 <__assert_func>
 800cbb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbbc:	6004      	str	r4, [r0, #0]
 800cbbe:	60c4      	str	r4, [r0, #12]
 800cbc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbc8:	b94c      	cbnz	r4, 800cbde <__pow5mult+0x66>
 800cbca:	f240 2171 	movw	r1, #625	@ 0x271
 800cbce:	4638      	mov	r0, r7
 800cbd0:	f7ff ff1a 	bl	800ca08 <__i2b>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbdc:	6003      	str	r3, [r0, #0]
 800cbde:	f04f 0900 	mov.w	r9, #0
 800cbe2:	07eb      	lsls	r3, r5, #31
 800cbe4:	d50a      	bpl.n	800cbfc <__pow5mult+0x84>
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	4622      	mov	r2, r4
 800cbea:	4638      	mov	r0, r7
 800cbec:	f7ff ff22 	bl	800ca34 <__multiply>
 800cbf0:	4680      	mov	r8, r0
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7ff fe09 	bl	800c80c <_Bfree>
 800cbfa:	4646      	mov	r6, r8
 800cbfc:	106d      	asrs	r5, r5, #1
 800cbfe:	d00b      	beq.n	800cc18 <__pow5mult+0xa0>
 800cc00:	6820      	ldr	r0, [r4, #0]
 800cc02:	b938      	cbnz	r0, 800cc14 <__pow5mult+0x9c>
 800cc04:	4622      	mov	r2, r4
 800cc06:	4621      	mov	r1, r4
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7ff ff13 	bl	800ca34 <__multiply>
 800cc0e:	6020      	str	r0, [r4, #0]
 800cc10:	f8c0 9000 	str.w	r9, [r0]
 800cc14:	4604      	mov	r4, r0
 800cc16:	e7e4      	b.n	800cbe2 <__pow5mult+0x6a>
 800cc18:	4630      	mov	r0, r6
 800cc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1e:	bf00      	nop
 800cc20:	0800fa58 	.word	0x0800fa58
 800cc24:	0800f8ac 	.word	0x0800f8ac
 800cc28:	0800f92c 	.word	0x0800f92c

0800cc2c <__lshift>:
 800cc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc30:	460c      	mov	r4, r1
 800cc32:	4607      	mov	r7, r0
 800cc34:	4691      	mov	r9, r2
 800cc36:	6923      	ldr	r3, [r4, #16]
 800cc38:	6849      	ldr	r1, [r1, #4]
 800cc3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc44:	f108 0601 	add.w	r6, r8, #1
 800cc48:	42b3      	cmp	r3, r6
 800cc4a:	db0b      	blt.n	800cc64 <__lshift+0x38>
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	f7ff fd9d 	bl	800c78c <_Balloc>
 800cc52:	4605      	mov	r5, r0
 800cc54:	b948      	cbnz	r0, 800cc6a <__lshift+0x3e>
 800cc56:	4602      	mov	r2, r0
 800cc58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc5c:	4b27      	ldr	r3, [pc, #156]	@ (800ccfc <__lshift+0xd0>)
 800cc5e:	4828      	ldr	r0, [pc, #160]	@ (800cd00 <__lshift+0xd4>)
 800cc60:	f001 fe7a 	bl	800e958 <__assert_func>
 800cc64:	3101      	adds	r1, #1
 800cc66:	005b      	lsls	r3, r3, #1
 800cc68:	e7ee      	b.n	800cc48 <__lshift+0x1c>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f100 0114 	add.w	r1, r0, #20
 800cc70:	f100 0210 	add.w	r2, r0, #16
 800cc74:	4618      	mov	r0, r3
 800cc76:	4553      	cmp	r3, sl
 800cc78:	db33      	blt.n	800cce2 <__lshift+0xb6>
 800cc7a:	6920      	ldr	r0, [r4, #16]
 800cc7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc80:	f104 0314 	add.w	r3, r4, #20
 800cc84:	f019 091f 	ands.w	r9, r9, #31
 800cc88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc90:	d02b      	beq.n	800ccea <__lshift+0xbe>
 800cc92:	468a      	mov	sl, r1
 800cc94:	2200      	movs	r2, #0
 800cc96:	f1c9 0e20 	rsb	lr, r9, #32
 800cc9a:	6818      	ldr	r0, [r3, #0]
 800cc9c:	fa00 f009 	lsl.w	r0, r0, r9
 800cca0:	4310      	orrs	r0, r2
 800cca2:	f84a 0b04 	str.w	r0, [sl], #4
 800cca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccaa:	459c      	cmp	ip, r3
 800ccac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccb0:	d8f3      	bhi.n	800cc9a <__lshift+0x6e>
 800ccb2:	ebac 0304 	sub.w	r3, ip, r4
 800ccb6:	3b15      	subs	r3, #21
 800ccb8:	f023 0303 	bic.w	r3, r3, #3
 800ccbc:	3304      	adds	r3, #4
 800ccbe:	f104 0015 	add.w	r0, r4, #21
 800ccc2:	4560      	cmp	r0, ip
 800ccc4:	bf88      	it	hi
 800ccc6:	2304      	movhi	r3, #4
 800ccc8:	50ca      	str	r2, [r1, r3]
 800ccca:	b10a      	cbz	r2, 800ccd0 <__lshift+0xa4>
 800cccc:	f108 0602 	add.w	r6, r8, #2
 800ccd0:	3e01      	subs	r6, #1
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	612e      	str	r6, [r5, #16]
 800ccd8:	f7ff fd98 	bl	800c80c <_Bfree>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cce6:	3301      	adds	r3, #1
 800cce8:	e7c5      	b.n	800cc76 <__lshift+0x4a>
 800ccea:	3904      	subs	r1, #4
 800ccec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf0:	459c      	cmp	ip, r3
 800ccf2:	f841 2f04 	str.w	r2, [r1, #4]!
 800ccf6:	d8f9      	bhi.n	800ccec <__lshift+0xc0>
 800ccf8:	e7ea      	b.n	800ccd0 <__lshift+0xa4>
 800ccfa:	bf00      	nop
 800ccfc:	0800f91b 	.word	0x0800f91b
 800cd00:	0800f92c 	.word	0x0800f92c

0800cd04 <__mcmp>:
 800cd04:	4603      	mov	r3, r0
 800cd06:	690a      	ldr	r2, [r1, #16]
 800cd08:	6900      	ldr	r0, [r0, #16]
 800cd0a:	b530      	push	{r4, r5, lr}
 800cd0c:	1a80      	subs	r0, r0, r2
 800cd0e:	d10e      	bne.n	800cd2e <__mcmp+0x2a>
 800cd10:	3314      	adds	r3, #20
 800cd12:	3114      	adds	r1, #20
 800cd14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd24:	4295      	cmp	r5, r2
 800cd26:	d003      	beq.n	800cd30 <__mcmp+0x2c>
 800cd28:	d205      	bcs.n	800cd36 <__mcmp+0x32>
 800cd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2e:	bd30      	pop	{r4, r5, pc}
 800cd30:	42a3      	cmp	r3, r4
 800cd32:	d3f3      	bcc.n	800cd1c <__mcmp+0x18>
 800cd34:	e7fb      	b.n	800cd2e <__mcmp+0x2a>
 800cd36:	2001      	movs	r0, #1
 800cd38:	e7f9      	b.n	800cd2e <__mcmp+0x2a>
	...

0800cd3c <__mdiff>:
 800cd3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	4689      	mov	r9, r1
 800cd42:	4606      	mov	r6, r0
 800cd44:	4611      	mov	r1, r2
 800cd46:	4648      	mov	r0, r9
 800cd48:	4614      	mov	r4, r2
 800cd4a:	f7ff ffdb 	bl	800cd04 <__mcmp>
 800cd4e:	1e05      	subs	r5, r0, #0
 800cd50:	d112      	bne.n	800cd78 <__mdiff+0x3c>
 800cd52:	4629      	mov	r1, r5
 800cd54:	4630      	mov	r0, r6
 800cd56:	f7ff fd19 	bl	800c78c <_Balloc>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	b928      	cbnz	r0, 800cd6a <__mdiff+0x2e>
 800cd5e:	f240 2137 	movw	r1, #567	@ 0x237
 800cd62:	4b3e      	ldr	r3, [pc, #248]	@ (800ce5c <__mdiff+0x120>)
 800cd64:	483e      	ldr	r0, [pc, #248]	@ (800ce60 <__mdiff+0x124>)
 800cd66:	f001 fdf7 	bl	800e958 <__assert_func>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd70:	4610      	mov	r0, r2
 800cd72:	b003      	add	sp, #12
 800cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd78:	bfbc      	itt	lt
 800cd7a:	464b      	movlt	r3, r9
 800cd7c:	46a1      	movlt	r9, r4
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd84:	bfba      	itte	lt
 800cd86:	461c      	movlt	r4, r3
 800cd88:	2501      	movlt	r5, #1
 800cd8a:	2500      	movge	r5, #0
 800cd8c:	f7ff fcfe 	bl	800c78c <_Balloc>
 800cd90:	4602      	mov	r2, r0
 800cd92:	b918      	cbnz	r0, 800cd9c <__mdiff+0x60>
 800cd94:	f240 2145 	movw	r1, #581	@ 0x245
 800cd98:	4b30      	ldr	r3, [pc, #192]	@ (800ce5c <__mdiff+0x120>)
 800cd9a:	e7e3      	b.n	800cd64 <__mdiff+0x28>
 800cd9c:	f100 0b14 	add.w	fp, r0, #20
 800cda0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cda4:	f109 0310 	add.w	r3, r9, #16
 800cda8:	60c5      	str	r5, [r0, #12]
 800cdaa:	f04f 0c00 	mov.w	ip, #0
 800cdae:	f109 0514 	add.w	r5, r9, #20
 800cdb2:	46d9      	mov	r9, fp
 800cdb4:	6926      	ldr	r6, [r4, #16]
 800cdb6:	f104 0e14 	add.w	lr, r4, #20
 800cdba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdbe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdce:	b281      	uxth	r1, r0
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	fa1f f38a 	uxth.w	r3, sl
 800cdd6:	1a5b      	subs	r3, r3, r1
 800cdd8:	0c00      	lsrs	r0, r0, #16
 800cdda:	4463      	add	r3, ip
 800cddc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cde0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdea:	4576      	cmp	r6, lr
 800cdec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cdf0:	f849 3b04 	str.w	r3, [r9], #4
 800cdf4:	d8e6      	bhi.n	800cdc4 <__mdiff+0x88>
 800cdf6:	1b33      	subs	r3, r6, r4
 800cdf8:	3b15      	subs	r3, #21
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	3415      	adds	r4, #21
 800ce00:	3304      	adds	r3, #4
 800ce02:	42a6      	cmp	r6, r4
 800ce04:	bf38      	it	cc
 800ce06:	2304      	movcc	r3, #4
 800ce08:	441d      	add	r5, r3
 800ce0a:	445b      	add	r3, fp
 800ce0c:	461e      	mov	r6, r3
 800ce0e:	462c      	mov	r4, r5
 800ce10:	4544      	cmp	r4, r8
 800ce12:	d30e      	bcc.n	800ce32 <__mdiff+0xf6>
 800ce14:	f108 0103 	add.w	r1, r8, #3
 800ce18:	1b49      	subs	r1, r1, r5
 800ce1a:	f021 0103 	bic.w	r1, r1, #3
 800ce1e:	3d03      	subs	r5, #3
 800ce20:	45a8      	cmp	r8, r5
 800ce22:	bf38      	it	cc
 800ce24:	2100      	movcc	r1, #0
 800ce26:	440b      	add	r3, r1
 800ce28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce2c:	b199      	cbz	r1, 800ce56 <__mdiff+0x11a>
 800ce2e:	6117      	str	r7, [r2, #16]
 800ce30:	e79e      	b.n	800cd70 <__mdiff+0x34>
 800ce32:	46e6      	mov	lr, ip
 800ce34:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce38:	fa1f fc81 	uxth.w	ip, r1
 800ce3c:	44f4      	add	ip, lr
 800ce3e:	0c08      	lsrs	r0, r1, #16
 800ce40:	4471      	add	r1, lr
 800ce42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce46:	b289      	uxth	r1, r1
 800ce48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce50:	f846 1b04 	str.w	r1, [r6], #4
 800ce54:	e7dc      	b.n	800ce10 <__mdiff+0xd4>
 800ce56:	3f01      	subs	r7, #1
 800ce58:	e7e6      	b.n	800ce28 <__mdiff+0xec>
 800ce5a:	bf00      	nop
 800ce5c:	0800f91b 	.word	0x0800f91b
 800ce60:	0800f92c 	.word	0x0800f92c

0800ce64 <__ulp>:
 800ce64:	4b0e      	ldr	r3, [pc, #56]	@ (800cea0 <__ulp+0x3c>)
 800ce66:	400b      	ands	r3, r1
 800ce68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dc08      	bgt.n	800ce82 <__ulp+0x1e>
 800ce70:	425b      	negs	r3, r3
 800ce72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ce76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce7a:	da04      	bge.n	800ce86 <__ulp+0x22>
 800ce7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ce80:	4113      	asrs	r3, r2
 800ce82:	2200      	movs	r2, #0
 800ce84:	e008      	b.n	800ce98 <__ulp+0x34>
 800ce86:	f1a2 0314 	sub.w	r3, r2, #20
 800ce8a:	2b1e      	cmp	r3, #30
 800ce8c:	bfd6      	itet	le
 800ce8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ce92:	2201      	movgt	r2, #1
 800ce94:	40da      	lsrle	r2, r3
 800ce96:	2300      	movs	r3, #0
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	7ff00000 	.word	0x7ff00000

0800cea4 <__b2d>:
 800cea4:	6902      	ldr	r2, [r0, #16]
 800cea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea8:	f100 0614 	add.w	r6, r0, #20
 800ceac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ceb0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ceb4:	4f1e      	ldr	r7, [pc, #120]	@ (800cf30 <__b2d+0x8c>)
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f7ff fd5a 	bl	800c970 <__hi0bits>
 800cebc:	4603      	mov	r3, r0
 800cebe:	f1c0 0020 	rsb	r0, r0, #32
 800cec2:	2b0a      	cmp	r3, #10
 800cec4:	f1a2 0504 	sub.w	r5, r2, #4
 800cec8:	6008      	str	r0, [r1, #0]
 800ceca:	dc12      	bgt.n	800cef2 <__b2d+0x4e>
 800cecc:	42ae      	cmp	r6, r5
 800cece:	bf2c      	ite	cs
 800ced0:	2200      	movcs	r2, #0
 800ced2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ced6:	f1c3 0c0b 	rsb	ip, r3, #11
 800ceda:	3315      	adds	r3, #21
 800cedc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800cee0:	fa04 f303 	lsl.w	r3, r4, r3
 800cee4:	fa22 f20c 	lsr.w	r2, r2, ip
 800cee8:	ea4e 0107 	orr.w	r1, lr, r7
 800ceec:	431a      	orrs	r2, r3
 800ceee:	4610      	mov	r0, r2
 800cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef2:	42ae      	cmp	r6, r5
 800cef4:	bf36      	itet	cc
 800cef6:	f1a2 0508 	subcc.w	r5, r2, #8
 800cefa:	2200      	movcs	r2, #0
 800cefc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800cf00:	3b0b      	subs	r3, #11
 800cf02:	d012      	beq.n	800cf2a <__b2d+0x86>
 800cf04:	f1c3 0720 	rsb	r7, r3, #32
 800cf08:	fa22 f107 	lsr.w	r1, r2, r7
 800cf0c:	409c      	lsls	r4, r3
 800cf0e:	430c      	orrs	r4, r1
 800cf10:	42b5      	cmp	r5, r6
 800cf12:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800cf16:	bf94      	ite	ls
 800cf18:	2400      	movls	r4, #0
 800cf1a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800cf1e:	409a      	lsls	r2, r3
 800cf20:	40fc      	lsrs	r4, r7
 800cf22:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cf26:	4322      	orrs	r2, r4
 800cf28:	e7e1      	b.n	800ceee <__b2d+0x4a>
 800cf2a:	ea44 0107 	orr.w	r1, r4, r7
 800cf2e:	e7de      	b.n	800ceee <__b2d+0x4a>
 800cf30:	3ff00000 	.word	0x3ff00000

0800cf34 <__d2b>:
 800cf34:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cf38:	2101      	movs	r1, #1
 800cf3a:	4690      	mov	r8, r2
 800cf3c:	4699      	mov	r9, r3
 800cf3e:	9e08      	ldr	r6, [sp, #32]
 800cf40:	f7ff fc24 	bl	800c78c <_Balloc>
 800cf44:	4604      	mov	r4, r0
 800cf46:	b930      	cbnz	r0, 800cf56 <__d2b+0x22>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	f240 310f 	movw	r1, #783	@ 0x30f
 800cf4e:	4b23      	ldr	r3, [pc, #140]	@ (800cfdc <__d2b+0xa8>)
 800cf50:	4823      	ldr	r0, [pc, #140]	@ (800cfe0 <__d2b+0xac>)
 800cf52:	f001 fd01 	bl	800e958 <__assert_func>
 800cf56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cf5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cf5e:	b10d      	cbz	r5, 800cf64 <__d2b+0x30>
 800cf60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	f1b8 0300 	subs.w	r3, r8, #0
 800cf6a:	d024      	beq.n	800cfb6 <__d2b+0x82>
 800cf6c:	4668      	mov	r0, sp
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	f7ff fd1d 	bl	800c9ae <__lo0bits>
 800cf74:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cf78:	b1d8      	cbz	r0, 800cfb2 <__d2b+0x7e>
 800cf7a:	f1c0 0320 	rsb	r3, r0, #32
 800cf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cf82:	430b      	orrs	r3, r1
 800cf84:	40c2      	lsrs	r2, r0
 800cf86:	6163      	str	r3, [r4, #20]
 800cf88:	9201      	str	r2, [sp, #4]
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bf0c      	ite	eq
 800cf90:	2201      	moveq	r2, #1
 800cf92:	2202      	movne	r2, #2
 800cf94:	61a3      	str	r3, [r4, #24]
 800cf96:	6122      	str	r2, [r4, #16]
 800cf98:	b1ad      	cbz	r5, 800cfc6 <__d2b+0x92>
 800cf9a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cf9e:	4405      	add	r5, r0
 800cfa0:	6035      	str	r5, [r6, #0]
 800cfa2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cfa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa8:	6018      	str	r0, [r3, #0]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	b002      	add	sp, #8
 800cfae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cfb2:	6161      	str	r1, [r4, #20]
 800cfb4:	e7e9      	b.n	800cf8a <__d2b+0x56>
 800cfb6:	a801      	add	r0, sp, #4
 800cfb8:	f7ff fcf9 	bl	800c9ae <__lo0bits>
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	6163      	str	r3, [r4, #20]
 800cfc2:	3020      	adds	r0, #32
 800cfc4:	e7e7      	b.n	800cf96 <__d2b+0x62>
 800cfc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cfca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cfce:	6030      	str	r0, [r6, #0]
 800cfd0:	6918      	ldr	r0, [r3, #16]
 800cfd2:	f7ff fccd 	bl	800c970 <__hi0bits>
 800cfd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cfda:	e7e4      	b.n	800cfa6 <__d2b+0x72>
 800cfdc:	0800f91b 	.word	0x0800f91b
 800cfe0:	0800f92c 	.word	0x0800f92c

0800cfe4 <__ratio>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	b085      	sub	sp, #20
 800cfea:	e9cd 1000 	strd	r1, r0, [sp]
 800cfee:	a902      	add	r1, sp, #8
 800cff0:	f7ff ff58 	bl	800cea4 <__b2d>
 800cff4:	468b      	mov	fp, r1
 800cff6:	4606      	mov	r6, r0
 800cff8:	460f      	mov	r7, r1
 800cffa:	9800      	ldr	r0, [sp, #0]
 800cffc:	a903      	add	r1, sp, #12
 800cffe:	f7ff ff51 	bl	800cea4 <__b2d>
 800d002:	460d      	mov	r5, r1
 800d004:	9b01      	ldr	r3, [sp, #4]
 800d006:	4689      	mov	r9, r1
 800d008:	6919      	ldr	r1, [r3, #16]
 800d00a:	9b00      	ldr	r3, [sp, #0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	4630      	mov	r0, r6
 800d012:	1ac9      	subs	r1, r1, r3
 800d014:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d01e:	2b00      	cmp	r3, #0
 800d020:	bfcd      	iteet	gt
 800d022:	463a      	movgt	r2, r7
 800d024:	462a      	movle	r2, r5
 800d026:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d02a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d02e:	bfd8      	it	le
 800d030:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d034:	464b      	mov	r3, r9
 800d036:	4622      	mov	r2, r4
 800d038:	4659      	mov	r1, fp
 800d03a:	f7f3 fb77 	bl	800072c <__aeabi_ddiv>
 800d03e:	b005      	add	sp, #20
 800d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d044 <__copybits>:
 800d044:	3901      	subs	r1, #1
 800d046:	b570      	push	{r4, r5, r6, lr}
 800d048:	1149      	asrs	r1, r1, #5
 800d04a:	6914      	ldr	r4, [r2, #16]
 800d04c:	3101      	adds	r1, #1
 800d04e:	f102 0314 	add.w	r3, r2, #20
 800d052:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d056:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d05a:	1f05      	subs	r5, r0, #4
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	d30c      	bcc.n	800d07a <__copybits+0x36>
 800d060:	1aa3      	subs	r3, r4, r2
 800d062:	3b11      	subs	r3, #17
 800d064:	f023 0303 	bic.w	r3, r3, #3
 800d068:	3211      	adds	r2, #17
 800d06a:	42a2      	cmp	r2, r4
 800d06c:	bf88      	it	hi
 800d06e:	2300      	movhi	r3, #0
 800d070:	4418      	add	r0, r3
 800d072:	2300      	movs	r3, #0
 800d074:	4288      	cmp	r0, r1
 800d076:	d305      	bcc.n	800d084 <__copybits+0x40>
 800d078:	bd70      	pop	{r4, r5, r6, pc}
 800d07a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d07e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d082:	e7eb      	b.n	800d05c <__copybits+0x18>
 800d084:	f840 3b04 	str.w	r3, [r0], #4
 800d088:	e7f4      	b.n	800d074 <__copybits+0x30>

0800d08a <__any_on>:
 800d08a:	f100 0214 	add.w	r2, r0, #20
 800d08e:	6900      	ldr	r0, [r0, #16]
 800d090:	114b      	asrs	r3, r1, #5
 800d092:	4298      	cmp	r0, r3
 800d094:	b510      	push	{r4, lr}
 800d096:	db11      	blt.n	800d0bc <__any_on+0x32>
 800d098:	dd0a      	ble.n	800d0b0 <__any_on+0x26>
 800d09a:	f011 011f 	ands.w	r1, r1, #31
 800d09e:	d007      	beq.n	800d0b0 <__any_on+0x26>
 800d0a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d0a4:	fa24 f001 	lsr.w	r0, r4, r1
 800d0a8:	fa00 f101 	lsl.w	r1, r0, r1
 800d0ac:	428c      	cmp	r4, r1
 800d0ae:	d10b      	bne.n	800d0c8 <__any_on+0x3e>
 800d0b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d803      	bhi.n	800d0c0 <__any_on+0x36>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	bd10      	pop	{r4, pc}
 800d0bc:	4603      	mov	r3, r0
 800d0be:	e7f7      	b.n	800d0b0 <__any_on+0x26>
 800d0c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0c4:	2900      	cmp	r1, #0
 800d0c6:	d0f5      	beq.n	800d0b4 <__any_on+0x2a>
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	e7f6      	b.n	800d0ba <__any_on+0x30>

0800d0cc <sulp>:
 800d0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d0:	460f      	mov	r7, r1
 800d0d2:	4690      	mov	r8, r2
 800d0d4:	f7ff fec6 	bl	800ce64 <__ulp>
 800d0d8:	4604      	mov	r4, r0
 800d0da:	460d      	mov	r5, r1
 800d0dc:	f1b8 0f00 	cmp.w	r8, #0
 800d0e0:	d011      	beq.n	800d106 <sulp+0x3a>
 800d0e2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d0e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dd0b      	ble.n	800d106 <sulp+0x3a>
 800d0ee:	2400      	movs	r4, #0
 800d0f0:	051b      	lsls	r3, r3, #20
 800d0f2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d0f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	f7f3 f9eb 	bl	80004d8 <__aeabi_dmul>
 800d102:	4604      	mov	r4, r0
 800d104:	460d      	mov	r5, r1
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d110 <_strtod_l>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	b09f      	sub	sp, #124	@ 0x7c
 800d116:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d118:	2200      	movs	r2, #0
 800d11a:	460c      	mov	r4, r1
 800d11c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d11e:	f04f 0a00 	mov.w	sl, #0
 800d122:	f04f 0b00 	mov.w	fp, #0
 800d126:	460a      	mov	r2, r1
 800d128:	9005      	str	r0, [sp, #20]
 800d12a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d12c:	7811      	ldrb	r1, [r2, #0]
 800d12e:	292b      	cmp	r1, #43	@ 0x2b
 800d130:	d048      	beq.n	800d1c4 <_strtod_l+0xb4>
 800d132:	d836      	bhi.n	800d1a2 <_strtod_l+0x92>
 800d134:	290d      	cmp	r1, #13
 800d136:	d830      	bhi.n	800d19a <_strtod_l+0x8a>
 800d138:	2908      	cmp	r1, #8
 800d13a:	d830      	bhi.n	800d19e <_strtod_l+0x8e>
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d039      	beq.n	800d1b4 <_strtod_l+0xa4>
 800d140:	2200      	movs	r2, #0
 800d142:	920e      	str	r2, [sp, #56]	@ 0x38
 800d144:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d146:	782a      	ldrb	r2, [r5, #0]
 800d148:	2a30      	cmp	r2, #48	@ 0x30
 800d14a:	f040 80b0 	bne.w	800d2ae <_strtod_l+0x19e>
 800d14e:	786a      	ldrb	r2, [r5, #1]
 800d150:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d154:	2a58      	cmp	r2, #88	@ 0x58
 800d156:	d16c      	bne.n	800d232 <_strtod_l+0x122>
 800d158:	9302      	str	r3, [sp, #8]
 800d15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d15c:	4a8f      	ldr	r2, [pc, #572]	@ (800d39c <_strtod_l+0x28c>)
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	ab1a      	add	r3, sp, #104	@ 0x68
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	9805      	ldr	r0, [sp, #20]
 800d166:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d168:	a919      	add	r1, sp, #100	@ 0x64
 800d16a:	f001 fc8f 	bl	800ea8c <__gethex>
 800d16e:	f010 060f 	ands.w	r6, r0, #15
 800d172:	4604      	mov	r4, r0
 800d174:	d005      	beq.n	800d182 <_strtod_l+0x72>
 800d176:	2e06      	cmp	r6, #6
 800d178:	d126      	bne.n	800d1c8 <_strtod_l+0xb8>
 800d17a:	2300      	movs	r3, #0
 800d17c:	3501      	adds	r5, #1
 800d17e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d180:	930e      	str	r3, [sp, #56]	@ 0x38
 800d182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 8582 	bne.w	800dc8e <_strtod_l+0xb7e>
 800d18a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d18c:	b1bb      	cbz	r3, 800d1be <_strtod_l+0xae>
 800d18e:	4650      	mov	r0, sl
 800d190:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800d194:	b01f      	add	sp, #124	@ 0x7c
 800d196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19a:	2920      	cmp	r1, #32
 800d19c:	d1d0      	bne.n	800d140 <_strtod_l+0x30>
 800d19e:	3201      	adds	r2, #1
 800d1a0:	e7c3      	b.n	800d12a <_strtod_l+0x1a>
 800d1a2:	292d      	cmp	r1, #45	@ 0x2d
 800d1a4:	d1cc      	bne.n	800d140 <_strtod_l+0x30>
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	910e      	str	r1, [sp, #56]	@ 0x38
 800d1aa:	1c51      	adds	r1, r2, #1
 800d1ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800d1ae:	7852      	ldrb	r2, [r2, #1]
 800d1b0:	2a00      	cmp	r2, #0
 800d1b2:	d1c7      	bne.n	800d144 <_strtod_l+0x34>
 800d1b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1b6:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f040 8566 	bne.w	800dc8a <_strtod_l+0xb7a>
 800d1be:	4650      	mov	r0, sl
 800d1c0:	4659      	mov	r1, fp
 800d1c2:	e7e7      	b.n	800d194 <_strtod_l+0x84>
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	e7ef      	b.n	800d1a8 <_strtod_l+0x98>
 800d1c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1ca:	b13a      	cbz	r2, 800d1dc <_strtod_l+0xcc>
 800d1cc:	2135      	movs	r1, #53	@ 0x35
 800d1ce:	a81c      	add	r0, sp, #112	@ 0x70
 800d1d0:	f7ff ff38 	bl	800d044 <__copybits>
 800d1d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1d6:	9805      	ldr	r0, [sp, #20]
 800d1d8:	f7ff fb18 	bl	800c80c <_Bfree>
 800d1dc:	3e01      	subs	r6, #1
 800d1de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d1e0:	2e04      	cmp	r6, #4
 800d1e2:	d806      	bhi.n	800d1f2 <_strtod_l+0xe2>
 800d1e4:	e8df f006 	tbb	[pc, r6]
 800d1e8:	201d0314 	.word	0x201d0314
 800d1ec:	14          	.byte	0x14
 800d1ed:	00          	.byte	0x00
 800d1ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d1f2:	05e1      	lsls	r1, r4, #23
 800d1f4:	bf48      	it	mi
 800d1f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d1fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1fe:	0d1b      	lsrs	r3, r3, #20
 800d200:	051b      	lsls	r3, r3, #20
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1bd      	bne.n	800d182 <_strtod_l+0x72>
 800d206:	f7fe fb27 	bl	800b858 <__errno>
 800d20a:	2322      	movs	r3, #34	@ 0x22
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	e7b8      	b.n	800d182 <_strtod_l+0x72>
 800d210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d214:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d218:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d21c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d220:	e7e7      	b.n	800d1f2 <_strtod_l+0xe2>
 800d222:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d3a0 <_strtod_l+0x290>
 800d226:	e7e4      	b.n	800d1f2 <_strtod_l+0xe2>
 800d228:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d22c:	f04f 3aff 	mov.w	sl, #4294967295
 800d230:	e7df      	b.n	800d1f2 <_strtod_l+0xe2>
 800d232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d234:	1c5a      	adds	r2, r3, #1
 800d236:	9219      	str	r2, [sp, #100]	@ 0x64
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	2b30      	cmp	r3, #48	@ 0x30
 800d23c:	d0f9      	beq.n	800d232 <_strtod_l+0x122>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d09f      	beq.n	800d182 <_strtod_l+0x72>
 800d242:	2301      	movs	r3, #1
 800d244:	2700      	movs	r7, #0
 800d246:	220a      	movs	r2, #10
 800d248:	46b9      	mov	r9, r7
 800d24a:	9308      	str	r3, [sp, #32]
 800d24c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d24e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d250:	930c      	str	r3, [sp, #48]	@ 0x30
 800d252:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d254:	7805      	ldrb	r5, [r0, #0]
 800d256:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d25a:	b2d9      	uxtb	r1, r3
 800d25c:	2909      	cmp	r1, #9
 800d25e:	d928      	bls.n	800d2b2 <_strtod_l+0x1a2>
 800d260:	2201      	movs	r2, #1
 800d262:	4950      	ldr	r1, [pc, #320]	@ (800d3a4 <_strtod_l+0x294>)
 800d264:	f7fe fa9b 	bl	800b79e <strncmp>
 800d268:	2800      	cmp	r0, #0
 800d26a:	d032      	beq.n	800d2d2 <_strtod_l+0x1c2>
 800d26c:	2000      	movs	r0, #0
 800d26e:	462a      	mov	r2, r5
 800d270:	4603      	mov	r3, r0
 800d272:	464d      	mov	r5, r9
 800d274:	900a      	str	r0, [sp, #40]	@ 0x28
 800d276:	2a65      	cmp	r2, #101	@ 0x65
 800d278:	d001      	beq.n	800d27e <_strtod_l+0x16e>
 800d27a:	2a45      	cmp	r2, #69	@ 0x45
 800d27c:	d114      	bne.n	800d2a8 <_strtod_l+0x198>
 800d27e:	b91d      	cbnz	r5, 800d288 <_strtod_l+0x178>
 800d280:	9a08      	ldr	r2, [sp, #32]
 800d282:	4302      	orrs	r2, r0
 800d284:	d096      	beq.n	800d1b4 <_strtod_l+0xa4>
 800d286:	2500      	movs	r5, #0
 800d288:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d28a:	1c62      	adds	r2, r4, #1
 800d28c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d28e:	7862      	ldrb	r2, [r4, #1]
 800d290:	2a2b      	cmp	r2, #43	@ 0x2b
 800d292:	d07a      	beq.n	800d38a <_strtod_l+0x27a>
 800d294:	2a2d      	cmp	r2, #45	@ 0x2d
 800d296:	d07e      	beq.n	800d396 <_strtod_l+0x286>
 800d298:	f04f 0c00 	mov.w	ip, #0
 800d29c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d2a0:	2909      	cmp	r1, #9
 800d2a2:	f240 8085 	bls.w	800d3b0 <_strtod_l+0x2a0>
 800d2a6:	9419      	str	r4, [sp, #100]	@ 0x64
 800d2a8:	f04f 0800 	mov.w	r8, #0
 800d2ac:	e0a5      	b.n	800d3fa <_strtod_l+0x2ea>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e7c8      	b.n	800d244 <_strtod_l+0x134>
 800d2b2:	f1b9 0f08 	cmp.w	r9, #8
 800d2b6:	bfd8      	it	le
 800d2b8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d2ba:	f100 0001 	add.w	r0, r0, #1
 800d2be:	bfd6      	itet	le
 800d2c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d2c4:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d2c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d2ca:	f109 0901 	add.w	r9, r9, #1
 800d2ce:	9019      	str	r0, [sp, #100]	@ 0x64
 800d2d0:	e7bf      	b.n	800d252 <_strtod_l+0x142>
 800d2d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2d4:	1c5a      	adds	r2, r3, #1
 800d2d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2d8:	785a      	ldrb	r2, [r3, #1]
 800d2da:	f1b9 0f00 	cmp.w	r9, #0
 800d2de:	d03b      	beq.n	800d358 <_strtod_l+0x248>
 800d2e0:	464d      	mov	r5, r9
 800d2e2:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2e4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d2e8:	2b09      	cmp	r3, #9
 800d2ea:	d912      	bls.n	800d312 <_strtod_l+0x202>
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	e7c2      	b.n	800d276 <_strtod_l+0x166>
 800d2f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2f8:	785a      	ldrb	r2, [r3, #1]
 800d2fa:	2a30      	cmp	r2, #48	@ 0x30
 800d2fc:	d0f8      	beq.n	800d2f0 <_strtod_l+0x1e0>
 800d2fe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d302:	2b08      	cmp	r3, #8
 800d304:	f200 84c8 	bhi.w	800dc98 <_strtod_l+0xb88>
 800d308:	900a      	str	r0, [sp, #40]	@ 0x28
 800d30a:	2000      	movs	r0, #0
 800d30c:	4605      	mov	r5, r0
 800d30e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d310:	930c      	str	r3, [sp, #48]	@ 0x30
 800d312:	3a30      	subs	r2, #48	@ 0x30
 800d314:	f100 0301 	add.w	r3, r0, #1
 800d318:	d018      	beq.n	800d34c <_strtod_l+0x23c>
 800d31a:	462e      	mov	r6, r5
 800d31c:	f04f 0e0a 	mov.w	lr, #10
 800d320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d322:	4419      	add	r1, r3
 800d324:	910a      	str	r1, [sp, #40]	@ 0x28
 800d326:	1c71      	adds	r1, r6, #1
 800d328:	eba1 0c05 	sub.w	ip, r1, r5
 800d32c:	4563      	cmp	r3, ip
 800d32e:	dc15      	bgt.n	800d35c <_strtod_l+0x24c>
 800d330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d334:	182b      	adds	r3, r5, r0
 800d336:	2b08      	cmp	r3, #8
 800d338:	f105 0501 	add.w	r5, r5, #1
 800d33c:	4405      	add	r5, r0
 800d33e:	dc1a      	bgt.n	800d376 <_strtod_l+0x266>
 800d340:	230a      	movs	r3, #10
 800d342:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d344:	fb03 2301 	mla	r3, r3, r1, r2
 800d348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d34a:	2300      	movs	r3, #0
 800d34c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d34e:	4618      	mov	r0, r3
 800d350:	1c51      	adds	r1, r2, #1
 800d352:	9119      	str	r1, [sp, #100]	@ 0x64
 800d354:	7852      	ldrb	r2, [r2, #1]
 800d356:	e7c5      	b.n	800d2e4 <_strtod_l+0x1d4>
 800d358:	4648      	mov	r0, r9
 800d35a:	e7ce      	b.n	800d2fa <_strtod_l+0x1ea>
 800d35c:	2e08      	cmp	r6, #8
 800d35e:	dc05      	bgt.n	800d36c <_strtod_l+0x25c>
 800d360:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d362:	fb0e f606 	mul.w	r6, lr, r6
 800d366:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d368:	460e      	mov	r6, r1
 800d36a:	e7dc      	b.n	800d326 <_strtod_l+0x216>
 800d36c:	2910      	cmp	r1, #16
 800d36e:	bfd8      	it	le
 800d370:	fb0e f707 	mulle.w	r7, lr, r7
 800d374:	e7f8      	b.n	800d368 <_strtod_l+0x258>
 800d376:	2b0f      	cmp	r3, #15
 800d378:	bfdc      	itt	le
 800d37a:	230a      	movle	r3, #10
 800d37c:	fb03 2707 	mlale	r7, r3, r7, r2
 800d380:	e7e3      	b.n	800d34a <_strtod_l+0x23a>
 800d382:	2300      	movs	r3, #0
 800d384:	930a      	str	r3, [sp, #40]	@ 0x28
 800d386:	2301      	movs	r3, #1
 800d388:	e77a      	b.n	800d280 <_strtod_l+0x170>
 800d38a:	f04f 0c00 	mov.w	ip, #0
 800d38e:	1ca2      	adds	r2, r4, #2
 800d390:	9219      	str	r2, [sp, #100]	@ 0x64
 800d392:	78a2      	ldrb	r2, [r4, #2]
 800d394:	e782      	b.n	800d29c <_strtod_l+0x18c>
 800d396:	f04f 0c01 	mov.w	ip, #1
 800d39a:	e7f8      	b.n	800d38e <_strtod_l+0x27e>
 800d39c:	0800fb6c 	.word	0x0800fb6c
 800d3a0:	7ff00000 	.word	0x7ff00000
 800d3a4:	0800f985 	.word	0x0800f985
 800d3a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3aa:	1c51      	adds	r1, r2, #1
 800d3ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800d3ae:	7852      	ldrb	r2, [r2, #1]
 800d3b0:	2a30      	cmp	r2, #48	@ 0x30
 800d3b2:	d0f9      	beq.n	800d3a8 <_strtod_l+0x298>
 800d3b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d3b8:	2908      	cmp	r1, #8
 800d3ba:	f63f af75 	bhi.w	800d2a8 <_strtod_l+0x198>
 800d3be:	f04f 080a 	mov.w	r8, #10
 800d3c2:	3a30      	subs	r2, #48	@ 0x30
 800d3c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d3ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d3cc:	1c56      	adds	r6, r2, #1
 800d3ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800d3d0:	7852      	ldrb	r2, [r2, #1]
 800d3d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d3d6:	f1be 0f09 	cmp.w	lr, #9
 800d3da:	d939      	bls.n	800d450 <_strtod_l+0x340>
 800d3dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d3de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d3e2:	1a76      	subs	r6, r6, r1
 800d3e4:	2e08      	cmp	r6, #8
 800d3e6:	dc03      	bgt.n	800d3f0 <_strtod_l+0x2e0>
 800d3e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3ea:	4588      	cmp	r8, r1
 800d3ec:	bfa8      	it	ge
 800d3ee:	4688      	movge	r8, r1
 800d3f0:	f1bc 0f00 	cmp.w	ip, #0
 800d3f4:	d001      	beq.n	800d3fa <_strtod_l+0x2ea>
 800d3f6:	f1c8 0800 	rsb	r8, r8, #0
 800d3fa:	2d00      	cmp	r5, #0
 800d3fc:	d14e      	bne.n	800d49c <_strtod_l+0x38c>
 800d3fe:	9908      	ldr	r1, [sp, #32]
 800d400:	4308      	orrs	r0, r1
 800d402:	f47f aebe 	bne.w	800d182 <_strtod_l+0x72>
 800d406:	2b00      	cmp	r3, #0
 800d408:	f47f aed4 	bne.w	800d1b4 <_strtod_l+0xa4>
 800d40c:	2a69      	cmp	r2, #105	@ 0x69
 800d40e:	d028      	beq.n	800d462 <_strtod_l+0x352>
 800d410:	dc25      	bgt.n	800d45e <_strtod_l+0x34e>
 800d412:	2a49      	cmp	r2, #73	@ 0x49
 800d414:	d025      	beq.n	800d462 <_strtod_l+0x352>
 800d416:	2a4e      	cmp	r2, #78	@ 0x4e
 800d418:	f47f aecc 	bne.w	800d1b4 <_strtod_l+0xa4>
 800d41c:	4999      	ldr	r1, [pc, #612]	@ (800d684 <_strtod_l+0x574>)
 800d41e:	a819      	add	r0, sp, #100	@ 0x64
 800d420:	f001 fd56 	bl	800eed0 <__match>
 800d424:	2800      	cmp	r0, #0
 800d426:	f43f aec5 	beq.w	800d1b4 <_strtod_l+0xa4>
 800d42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2b28      	cmp	r3, #40	@ 0x28
 800d430:	d12e      	bne.n	800d490 <_strtod_l+0x380>
 800d432:	4995      	ldr	r1, [pc, #596]	@ (800d688 <_strtod_l+0x578>)
 800d434:	aa1c      	add	r2, sp, #112	@ 0x70
 800d436:	a819      	add	r0, sp, #100	@ 0x64
 800d438:	f001 fd5e 	bl	800eef8 <__hexnan>
 800d43c:	2805      	cmp	r0, #5
 800d43e:	d127      	bne.n	800d490 <_strtod_l+0x380>
 800d440:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d442:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d446:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d44a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d44e:	e698      	b.n	800d182 <_strtod_l+0x72>
 800d450:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d452:	fb08 2101 	mla	r1, r8, r1, r2
 800d456:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d45a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d45c:	e7b5      	b.n	800d3ca <_strtod_l+0x2ba>
 800d45e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d460:	e7da      	b.n	800d418 <_strtod_l+0x308>
 800d462:	498a      	ldr	r1, [pc, #552]	@ (800d68c <_strtod_l+0x57c>)
 800d464:	a819      	add	r0, sp, #100	@ 0x64
 800d466:	f001 fd33 	bl	800eed0 <__match>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f43f aea2 	beq.w	800d1b4 <_strtod_l+0xa4>
 800d470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d472:	4987      	ldr	r1, [pc, #540]	@ (800d690 <_strtod_l+0x580>)
 800d474:	3b01      	subs	r3, #1
 800d476:	a819      	add	r0, sp, #100	@ 0x64
 800d478:	9319      	str	r3, [sp, #100]	@ 0x64
 800d47a:	f001 fd29 	bl	800eed0 <__match>
 800d47e:	b910      	cbnz	r0, 800d486 <_strtod_l+0x376>
 800d480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d482:	3301      	adds	r3, #1
 800d484:	9319      	str	r3, [sp, #100]	@ 0x64
 800d486:	f04f 0a00 	mov.w	sl, #0
 800d48a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800d694 <_strtod_l+0x584>
 800d48e:	e678      	b.n	800d182 <_strtod_l+0x72>
 800d490:	4881      	ldr	r0, [pc, #516]	@ (800d698 <_strtod_l+0x588>)
 800d492:	f001 fa5b 	bl	800e94c <nan>
 800d496:	4682      	mov	sl, r0
 800d498:	468b      	mov	fp, r1
 800d49a:	e672      	b.n	800d182 <_strtod_l+0x72>
 800d49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d49e:	f1b9 0f00 	cmp.w	r9, #0
 800d4a2:	bf08      	it	eq
 800d4a4:	46a9      	moveq	r9, r5
 800d4a6:	eba8 0303 	sub.w	r3, r8, r3
 800d4aa:	2d10      	cmp	r5, #16
 800d4ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d4ae:	462c      	mov	r4, r5
 800d4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b2:	bfa8      	it	ge
 800d4b4:	2410      	movge	r4, #16
 800d4b6:	f7f2 ff95 	bl	80003e4 <__aeabi_ui2d>
 800d4ba:	2d09      	cmp	r5, #9
 800d4bc:	4682      	mov	sl, r0
 800d4be:	468b      	mov	fp, r1
 800d4c0:	dc11      	bgt.n	800d4e6 <_strtod_l+0x3d6>
 800d4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f43f ae5c 	beq.w	800d182 <_strtod_l+0x72>
 800d4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4cc:	dd76      	ble.n	800d5bc <_strtod_l+0x4ac>
 800d4ce:	2b16      	cmp	r3, #22
 800d4d0:	dc5d      	bgt.n	800d58e <_strtod_l+0x47e>
 800d4d2:	4972      	ldr	r1, [pc, #456]	@ (800d69c <_strtod_l+0x58c>)
 800d4d4:	4652      	mov	r2, sl
 800d4d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4da:	465b      	mov	r3, fp
 800d4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4e0:	f7f2 fffa 	bl	80004d8 <__aeabi_dmul>
 800d4e4:	e7d7      	b.n	800d496 <_strtod_l+0x386>
 800d4e6:	4b6d      	ldr	r3, [pc, #436]	@ (800d69c <_strtod_l+0x58c>)
 800d4e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d4ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d4f0:	f7f2 fff2 	bl	80004d8 <__aeabi_dmul>
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	468b      	mov	fp, r1
 800d4fa:	f7f2 ff73 	bl	80003e4 <__aeabi_ui2d>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4650      	mov	r0, sl
 800d504:	4659      	mov	r1, fp
 800d506:	f7f2 fe31 	bl	800016c <__adddf3>
 800d50a:	2d0f      	cmp	r5, #15
 800d50c:	4682      	mov	sl, r0
 800d50e:	468b      	mov	fp, r1
 800d510:	ddd7      	ble.n	800d4c2 <_strtod_l+0x3b2>
 800d512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d514:	1b2c      	subs	r4, r5, r4
 800d516:	441c      	add	r4, r3
 800d518:	2c00      	cmp	r4, #0
 800d51a:	f340 8093 	ble.w	800d644 <_strtod_l+0x534>
 800d51e:	f014 030f 	ands.w	r3, r4, #15
 800d522:	d00a      	beq.n	800d53a <_strtod_l+0x42a>
 800d524:	495d      	ldr	r1, [pc, #372]	@ (800d69c <_strtod_l+0x58c>)
 800d526:	4652      	mov	r2, sl
 800d528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d530:	465b      	mov	r3, fp
 800d532:	f7f2 ffd1 	bl	80004d8 <__aeabi_dmul>
 800d536:	4682      	mov	sl, r0
 800d538:	468b      	mov	fp, r1
 800d53a:	f034 040f 	bics.w	r4, r4, #15
 800d53e:	d073      	beq.n	800d628 <_strtod_l+0x518>
 800d540:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d544:	dd49      	ble.n	800d5da <_strtod_l+0x4ca>
 800d546:	2400      	movs	r4, #0
 800d548:	46a0      	mov	r8, r4
 800d54a:	46a1      	mov	r9, r4
 800d54c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d54e:	2322      	movs	r3, #34	@ 0x22
 800d550:	f04f 0a00 	mov.w	sl, #0
 800d554:	9a05      	ldr	r2, [sp, #20]
 800d556:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800d694 <_strtod_l+0x584>
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f43f ae0f 	beq.w	800d182 <_strtod_l+0x72>
 800d564:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f7ff f950 	bl	800c80c <_Bfree>
 800d56c:	4649      	mov	r1, r9
 800d56e:	9805      	ldr	r0, [sp, #20]
 800d570:	f7ff f94c 	bl	800c80c <_Bfree>
 800d574:	4641      	mov	r1, r8
 800d576:	9805      	ldr	r0, [sp, #20]
 800d578:	f7ff f948 	bl	800c80c <_Bfree>
 800d57c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d57e:	9805      	ldr	r0, [sp, #20]
 800d580:	f7ff f944 	bl	800c80c <_Bfree>
 800d584:	4621      	mov	r1, r4
 800d586:	9805      	ldr	r0, [sp, #20]
 800d588:	f7ff f940 	bl	800c80c <_Bfree>
 800d58c:	e5f9      	b.n	800d182 <_strtod_l+0x72>
 800d58e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d590:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d594:	4293      	cmp	r3, r2
 800d596:	dbbc      	blt.n	800d512 <_strtod_l+0x402>
 800d598:	4c40      	ldr	r4, [pc, #256]	@ (800d69c <_strtod_l+0x58c>)
 800d59a:	f1c5 050f 	rsb	r5, r5, #15
 800d59e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d5a2:	4652      	mov	r2, sl
 800d5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5a8:	465b      	mov	r3, fp
 800d5aa:	f7f2 ff95 	bl	80004d8 <__aeabi_dmul>
 800d5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5b0:	1b5d      	subs	r5, r3, r5
 800d5b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d5b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d5ba:	e791      	b.n	800d4e0 <_strtod_l+0x3d0>
 800d5bc:	3316      	adds	r3, #22
 800d5be:	dba8      	blt.n	800d512 <_strtod_l+0x402>
 800d5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5c2:	4650      	mov	r0, sl
 800d5c4:	eba3 0808 	sub.w	r8, r3, r8
 800d5c8:	4b34      	ldr	r3, [pc, #208]	@ (800d69c <_strtod_l+0x58c>)
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d5d0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d5d4:	f7f3 f8aa 	bl	800072c <__aeabi_ddiv>
 800d5d8:	e75d      	b.n	800d496 <_strtod_l+0x386>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4650      	mov	r0, sl
 800d5de:	4659      	mov	r1, fp
 800d5e0:	461e      	mov	r6, r3
 800d5e2:	4f2f      	ldr	r7, [pc, #188]	@ (800d6a0 <_strtod_l+0x590>)
 800d5e4:	1124      	asrs	r4, r4, #4
 800d5e6:	2c01      	cmp	r4, #1
 800d5e8:	dc21      	bgt.n	800d62e <_strtod_l+0x51e>
 800d5ea:	b10b      	cbz	r3, 800d5f0 <_strtod_l+0x4e0>
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	468b      	mov	fp, r1
 800d5f0:	492b      	ldr	r1, [pc, #172]	@ (800d6a0 <_strtod_l+0x590>)
 800d5f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d5f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d600:	465b      	mov	r3, fp
 800d602:	f7f2 ff69 	bl	80004d8 <__aeabi_dmul>
 800d606:	4b23      	ldr	r3, [pc, #140]	@ (800d694 <_strtod_l+0x584>)
 800d608:	460a      	mov	r2, r1
 800d60a:	400b      	ands	r3, r1
 800d60c:	4925      	ldr	r1, [pc, #148]	@ (800d6a4 <_strtod_l+0x594>)
 800d60e:	4682      	mov	sl, r0
 800d610:	428b      	cmp	r3, r1
 800d612:	d898      	bhi.n	800d546 <_strtod_l+0x436>
 800d614:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d618:	428b      	cmp	r3, r1
 800d61a:	bf86      	itte	hi
 800d61c:	f04f 3aff 	movhi.w	sl, #4294967295
 800d620:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800d6a8 <_strtod_l+0x598>
 800d624:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d628:	2300      	movs	r3, #0
 800d62a:	9308      	str	r3, [sp, #32]
 800d62c:	e076      	b.n	800d71c <_strtod_l+0x60c>
 800d62e:	07e2      	lsls	r2, r4, #31
 800d630:	d504      	bpl.n	800d63c <_strtod_l+0x52c>
 800d632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d636:	f7f2 ff4f 	bl	80004d8 <__aeabi_dmul>
 800d63a:	2301      	movs	r3, #1
 800d63c:	3601      	adds	r6, #1
 800d63e:	1064      	asrs	r4, r4, #1
 800d640:	3708      	adds	r7, #8
 800d642:	e7d0      	b.n	800d5e6 <_strtod_l+0x4d6>
 800d644:	d0f0      	beq.n	800d628 <_strtod_l+0x518>
 800d646:	4264      	negs	r4, r4
 800d648:	f014 020f 	ands.w	r2, r4, #15
 800d64c:	d00a      	beq.n	800d664 <_strtod_l+0x554>
 800d64e:	4b13      	ldr	r3, [pc, #76]	@ (800d69c <_strtod_l+0x58c>)
 800d650:	4650      	mov	r0, sl
 800d652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d656:	4659      	mov	r1, fp
 800d658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d65c:	f7f3 f866 	bl	800072c <__aeabi_ddiv>
 800d660:	4682      	mov	sl, r0
 800d662:	468b      	mov	fp, r1
 800d664:	1124      	asrs	r4, r4, #4
 800d666:	d0df      	beq.n	800d628 <_strtod_l+0x518>
 800d668:	2c1f      	cmp	r4, #31
 800d66a:	dd1f      	ble.n	800d6ac <_strtod_l+0x59c>
 800d66c:	2400      	movs	r4, #0
 800d66e:	46a0      	mov	r8, r4
 800d670:	46a1      	mov	r9, r4
 800d672:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d674:	2322      	movs	r3, #34	@ 0x22
 800d676:	9a05      	ldr	r2, [sp, #20]
 800d678:	f04f 0a00 	mov.w	sl, #0
 800d67c:	f04f 0b00 	mov.w	fp, #0
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	e76b      	b.n	800d55c <_strtod_l+0x44c>
 800d684:	0800f875 	.word	0x0800f875
 800d688:	0800fb58 	.word	0x0800fb58
 800d68c:	0800f86d 	.word	0x0800f86d
 800d690:	0800f8a2 	.word	0x0800f8a2
 800d694:	7ff00000 	.word	0x7ff00000
 800d698:	0800f9f6 	.word	0x0800f9f6
 800d69c:	0800fa90 	.word	0x0800fa90
 800d6a0:	0800fa68 	.word	0x0800fa68
 800d6a4:	7ca00000 	.word	0x7ca00000
 800d6a8:	7fefffff 	.word	0x7fefffff
 800d6ac:	f014 0310 	ands.w	r3, r4, #16
 800d6b0:	bf18      	it	ne
 800d6b2:	236a      	movne	r3, #106	@ 0x6a
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	9308      	str	r3, [sp, #32]
 800d6b8:	4659      	mov	r1, fp
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	4e77      	ldr	r6, [pc, #476]	@ (800d89c <_strtod_l+0x78c>)
 800d6be:	07e7      	lsls	r7, r4, #31
 800d6c0:	d504      	bpl.n	800d6cc <_strtod_l+0x5bc>
 800d6c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6c6:	f7f2 ff07 	bl	80004d8 <__aeabi_dmul>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	1064      	asrs	r4, r4, #1
 800d6ce:	f106 0608 	add.w	r6, r6, #8
 800d6d2:	d1f4      	bne.n	800d6be <_strtod_l+0x5ae>
 800d6d4:	b10b      	cbz	r3, 800d6da <_strtod_l+0x5ca>
 800d6d6:	4682      	mov	sl, r0
 800d6d8:	468b      	mov	fp, r1
 800d6da:	9b08      	ldr	r3, [sp, #32]
 800d6dc:	b1b3      	cbz	r3, 800d70c <_strtod_l+0x5fc>
 800d6de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d6e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	4659      	mov	r1, fp
 800d6ea:	dd0f      	ble.n	800d70c <_strtod_l+0x5fc>
 800d6ec:	2b1f      	cmp	r3, #31
 800d6ee:	dd58      	ble.n	800d7a2 <_strtod_l+0x692>
 800d6f0:	2b34      	cmp	r3, #52	@ 0x34
 800d6f2:	bfd8      	it	le
 800d6f4:	f04f 33ff 	movle.w	r3, #4294967295
 800d6f8:	f04f 0a00 	mov.w	sl, #0
 800d6fc:	bfcf      	iteee	gt
 800d6fe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d702:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d706:	4093      	lslle	r3, r2
 800d708:	ea03 0b01 	andle.w	fp, r3, r1
 800d70c:	2200      	movs	r2, #0
 800d70e:	2300      	movs	r3, #0
 800d710:	4650      	mov	r0, sl
 800d712:	4659      	mov	r1, fp
 800d714:	f7f3 f948 	bl	80009a8 <__aeabi_dcmpeq>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d1a7      	bne.n	800d66c <_strtod_l+0x55c>
 800d71c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d71e:	464a      	mov	r2, r9
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d724:	462b      	mov	r3, r5
 800d726:	9805      	ldr	r0, [sp, #20]
 800d728:	f7ff f8d8 	bl	800c8dc <__s2b>
 800d72c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d72e:	2800      	cmp	r0, #0
 800d730:	f43f af09 	beq.w	800d546 <_strtod_l+0x436>
 800d734:	2400      	movs	r4, #0
 800d736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d73a:	2a00      	cmp	r2, #0
 800d73c:	eba3 0308 	sub.w	r3, r3, r8
 800d740:	bfa8      	it	ge
 800d742:	2300      	movge	r3, #0
 800d744:	46a0      	mov	r8, r4
 800d746:	9312      	str	r3, [sp, #72]	@ 0x48
 800d748:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d74c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d750:	9805      	ldr	r0, [sp, #20]
 800d752:	6859      	ldr	r1, [r3, #4]
 800d754:	f7ff f81a 	bl	800c78c <_Balloc>
 800d758:	4681      	mov	r9, r0
 800d75a:	2800      	cmp	r0, #0
 800d75c:	f43f aef7 	beq.w	800d54e <_strtod_l+0x43e>
 800d760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d762:	300c      	adds	r0, #12
 800d764:	691a      	ldr	r2, [r3, #16]
 800d766:	f103 010c 	add.w	r1, r3, #12
 800d76a:	3202      	adds	r2, #2
 800d76c:	0092      	lsls	r2, r2, #2
 800d76e:	f001 f8df 	bl	800e930 <memcpy>
 800d772:	ab1c      	add	r3, sp, #112	@ 0x70
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4652      	mov	r2, sl
 800d77c:	465b      	mov	r3, fp
 800d77e:	9805      	ldr	r0, [sp, #20]
 800d780:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d784:	f7ff fbd6 	bl	800cf34 <__d2b>
 800d788:	901a      	str	r0, [sp, #104]	@ 0x68
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f43f aedf 	beq.w	800d54e <_strtod_l+0x43e>
 800d790:	2101      	movs	r1, #1
 800d792:	9805      	ldr	r0, [sp, #20]
 800d794:	f7ff f938 	bl	800ca08 <__i2b>
 800d798:	4680      	mov	r8, r0
 800d79a:	b948      	cbnz	r0, 800d7b0 <_strtod_l+0x6a0>
 800d79c:	f04f 0800 	mov.w	r8, #0
 800d7a0:	e6d5      	b.n	800d54e <_strtod_l+0x43e>
 800d7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7aa:	ea03 0a0a 	and.w	sl, r3, sl
 800d7ae:	e7ad      	b.n	800d70c <_strtod_l+0x5fc>
 800d7b0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d7b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d7b4:	2d00      	cmp	r5, #0
 800d7b6:	bfab      	itete	ge
 800d7b8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d7ba:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d7bc:	18ef      	addge	r7, r5, r3
 800d7be:	1b5e      	sublt	r6, r3, r5
 800d7c0:	9b08      	ldr	r3, [sp, #32]
 800d7c2:	bfa8      	it	ge
 800d7c4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d7c6:	eba5 0503 	sub.w	r5, r5, r3
 800d7ca:	4415      	add	r5, r2
 800d7cc:	4b34      	ldr	r3, [pc, #208]	@ (800d8a0 <_strtod_l+0x790>)
 800d7ce:	f105 35ff 	add.w	r5, r5, #4294967295
 800d7d2:	bfb8      	it	lt
 800d7d4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d7d6:	429d      	cmp	r5, r3
 800d7d8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d7dc:	da50      	bge.n	800d880 <_strtod_l+0x770>
 800d7de:	1b5b      	subs	r3, r3, r5
 800d7e0:	2b1f      	cmp	r3, #31
 800d7e2:	f04f 0101 	mov.w	r1, #1
 800d7e6:	eba2 0203 	sub.w	r2, r2, r3
 800d7ea:	dc3d      	bgt.n	800d868 <_strtod_l+0x758>
 800d7ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d7f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7f6:	18bd      	adds	r5, r7, r2
 800d7f8:	9b08      	ldr	r3, [sp, #32]
 800d7fa:	42af      	cmp	r7, r5
 800d7fc:	4416      	add	r6, r2
 800d7fe:	441e      	add	r6, r3
 800d800:	463b      	mov	r3, r7
 800d802:	bfa8      	it	ge
 800d804:	462b      	movge	r3, r5
 800d806:	42b3      	cmp	r3, r6
 800d808:	bfa8      	it	ge
 800d80a:	4633      	movge	r3, r6
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bfc2      	ittt	gt
 800d810:	1aed      	subgt	r5, r5, r3
 800d812:	1af6      	subgt	r6, r6, r3
 800d814:	1aff      	subgt	r7, r7, r3
 800d816:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d818:	2b00      	cmp	r3, #0
 800d81a:	dd16      	ble.n	800d84a <_strtod_l+0x73a>
 800d81c:	4641      	mov	r1, r8
 800d81e:	461a      	mov	r2, r3
 800d820:	9805      	ldr	r0, [sp, #20]
 800d822:	f7ff f9a9 	bl	800cb78 <__pow5mult>
 800d826:	4680      	mov	r8, r0
 800d828:	2800      	cmp	r0, #0
 800d82a:	d0b7      	beq.n	800d79c <_strtod_l+0x68c>
 800d82c:	4601      	mov	r1, r0
 800d82e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d830:	9805      	ldr	r0, [sp, #20]
 800d832:	f7ff f8ff 	bl	800ca34 <__multiply>
 800d836:	900a      	str	r0, [sp, #40]	@ 0x28
 800d838:	2800      	cmp	r0, #0
 800d83a:	f43f ae88 	beq.w	800d54e <_strtod_l+0x43e>
 800d83e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d840:	9805      	ldr	r0, [sp, #20]
 800d842:	f7fe ffe3 	bl	800c80c <_Bfree>
 800d846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d848:	931a      	str	r3, [sp, #104]	@ 0x68
 800d84a:	2d00      	cmp	r5, #0
 800d84c:	dc1d      	bgt.n	800d88a <_strtod_l+0x77a>
 800d84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d850:	2b00      	cmp	r3, #0
 800d852:	dd27      	ble.n	800d8a4 <_strtod_l+0x794>
 800d854:	4649      	mov	r1, r9
 800d856:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d858:	9805      	ldr	r0, [sp, #20]
 800d85a:	f7ff f98d 	bl	800cb78 <__pow5mult>
 800d85e:	4681      	mov	r9, r0
 800d860:	bb00      	cbnz	r0, 800d8a4 <_strtod_l+0x794>
 800d862:	f04f 0900 	mov.w	r9, #0
 800d866:	e672      	b.n	800d54e <_strtod_l+0x43e>
 800d868:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d86c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d870:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d874:	35e2      	adds	r5, #226	@ 0xe2
 800d876:	fa01 f305 	lsl.w	r3, r1, r5
 800d87a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d87c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d87e:	e7ba      	b.n	800d7f6 <_strtod_l+0x6e6>
 800d880:	2300      	movs	r3, #0
 800d882:	9310      	str	r3, [sp, #64]	@ 0x40
 800d884:	2301      	movs	r3, #1
 800d886:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d888:	e7b5      	b.n	800d7f6 <_strtod_l+0x6e6>
 800d88a:	462a      	mov	r2, r5
 800d88c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d88e:	9805      	ldr	r0, [sp, #20]
 800d890:	f7ff f9cc 	bl	800cc2c <__lshift>
 800d894:	901a      	str	r0, [sp, #104]	@ 0x68
 800d896:	2800      	cmp	r0, #0
 800d898:	d1d9      	bne.n	800d84e <_strtod_l+0x73e>
 800d89a:	e658      	b.n	800d54e <_strtod_l+0x43e>
 800d89c:	0800fb80 	.word	0x0800fb80
 800d8a0:	fffffc02 	.word	0xfffffc02
 800d8a4:	2e00      	cmp	r6, #0
 800d8a6:	dd07      	ble.n	800d8b8 <_strtod_l+0x7a8>
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	4632      	mov	r2, r6
 800d8ac:	9805      	ldr	r0, [sp, #20]
 800d8ae:	f7ff f9bd 	bl	800cc2c <__lshift>
 800d8b2:	4681      	mov	r9, r0
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d0d4      	beq.n	800d862 <_strtod_l+0x752>
 800d8b8:	2f00      	cmp	r7, #0
 800d8ba:	dd08      	ble.n	800d8ce <_strtod_l+0x7be>
 800d8bc:	4641      	mov	r1, r8
 800d8be:	463a      	mov	r2, r7
 800d8c0:	9805      	ldr	r0, [sp, #20]
 800d8c2:	f7ff f9b3 	bl	800cc2c <__lshift>
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f43f ae40 	beq.w	800d54e <_strtod_l+0x43e>
 800d8ce:	464a      	mov	r2, r9
 800d8d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8d2:	9805      	ldr	r0, [sp, #20]
 800d8d4:	f7ff fa32 	bl	800cd3c <__mdiff>
 800d8d8:	4604      	mov	r4, r0
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f43f ae37 	beq.w	800d54e <_strtod_l+0x43e>
 800d8e0:	68c3      	ldr	r3, [r0, #12]
 800d8e2:	4641      	mov	r1, r8
 800d8e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60c3      	str	r3, [r0, #12]
 800d8ea:	f7ff fa0b 	bl	800cd04 <__mcmp>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	da3d      	bge.n	800d96e <_strtod_l+0x85e>
 800d8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8f4:	ea53 030a 	orrs.w	r3, r3, sl
 800d8f8:	d163      	bne.n	800d9c2 <_strtod_l+0x8b2>
 800d8fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d15f      	bne.n	800d9c2 <_strtod_l+0x8b2>
 800d902:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d906:	0d1b      	lsrs	r3, r3, #20
 800d908:	051b      	lsls	r3, r3, #20
 800d90a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d90e:	d958      	bls.n	800d9c2 <_strtod_l+0x8b2>
 800d910:	6963      	ldr	r3, [r4, #20]
 800d912:	b913      	cbnz	r3, 800d91a <_strtod_l+0x80a>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	2b01      	cmp	r3, #1
 800d918:	dd53      	ble.n	800d9c2 <_strtod_l+0x8b2>
 800d91a:	4621      	mov	r1, r4
 800d91c:	2201      	movs	r2, #1
 800d91e:	9805      	ldr	r0, [sp, #20]
 800d920:	f7ff f984 	bl	800cc2c <__lshift>
 800d924:	4641      	mov	r1, r8
 800d926:	4604      	mov	r4, r0
 800d928:	f7ff f9ec 	bl	800cd04 <__mcmp>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	dd48      	ble.n	800d9c2 <_strtod_l+0x8b2>
 800d930:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d934:	9a08      	ldr	r2, [sp, #32]
 800d936:	0d1b      	lsrs	r3, r3, #20
 800d938:	051b      	lsls	r3, r3, #20
 800d93a:	2a00      	cmp	r2, #0
 800d93c:	d062      	beq.n	800da04 <_strtod_l+0x8f4>
 800d93e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d942:	d85f      	bhi.n	800da04 <_strtod_l+0x8f4>
 800d944:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d948:	f67f ae94 	bls.w	800d674 <_strtod_l+0x564>
 800d94c:	4650      	mov	r0, sl
 800d94e:	4659      	mov	r1, fp
 800d950:	4ba3      	ldr	r3, [pc, #652]	@ (800dbe0 <_strtod_l+0xad0>)
 800d952:	2200      	movs	r2, #0
 800d954:	f7f2 fdc0 	bl	80004d8 <__aeabi_dmul>
 800d958:	4ba2      	ldr	r3, [pc, #648]	@ (800dbe4 <_strtod_l+0xad4>)
 800d95a:	4682      	mov	sl, r0
 800d95c:	400b      	ands	r3, r1
 800d95e:	468b      	mov	fp, r1
 800d960:	2b00      	cmp	r3, #0
 800d962:	f47f adff 	bne.w	800d564 <_strtod_l+0x454>
 800d966:	2322      	movs	r3, #34	@ 0x22
 800d968:	9a05      	ldr	r2, [sp, #20]
 800d96a:	6013      	str	r3, [r2, #0]
 800d96c:	e5fa      	b.n	800d564 <_strtod_l+0x454>
 800d96e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d972:	d165      	bne.n	800da40 <_strtod_l+0x930>
 800d974:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d97a:	b35a      	cbz	r2, 800d9d4 <_strtod_l+0x8c4>
 800d97c:	4a9a      	ldr	r2, [pc, #616]	@ (800dbe8 <_strtod_l+0xad8>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d12b      	bne.n	800d9da <_strtod_l+0x8ca>
 800d982:	9b08      	ldr	r3, [sp, #32]
 800d984:	4651      	mov	r1, sl
 800d986:	b303      	cbz	r3, 800d9ca <_strtod_l+0x8ba>
 800d988:	465a      	mov	r2, fp
 800d98a:	4b96      	ldr	r3, [pc, #600]	@ (800dbe4 <_strtod_l+0xad4>)
 800d98c:	4013      	ands	r3, r2
 800d98e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d992:	f04f 32ff 	mov.w	r2, #4294967295
 800d996:	d81b      	bhi.n	800d9d0 <_strtod_l+0x8c0>
 800d998:	0d1b      	lsrs	r3, r3, #20
 800d99a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d99e:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a2:	4299      	cmp	r1, r3
 800d9a4:	d119      	bne.n	800d9da <_strtod_l+0x8ca>
 800d9a6:	4b91      	ldr	r3, [pc, #580]	@ (800dbec <_strtod_l+0xadc>)
 800d9a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d102      	bne.n	800d9b4 <_strtod_l+0x8a4>
 800d9ae:	3101      	adds	r1, #1
 800d9b0:	f43f adcd 	beq.w	800d54e <_strtod_l+0x43e>
 800d9b4:	f04f 0a00 	mov.w	sl, #0
 800d9b8:	4b8a      	ldr	r3, [pc, #552]	@ (800dbe4 <_strtod_l+0xad4>)
 800d9ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9bc:	401a      	ands	r2, r3
 800d9be:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1c1      	bne.n	800d94c <_strtod_l+0x83c>
 800d9c8:	e5cc      	b.n	800d564 <_strtod_l+0x454>
 800d9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ce:	e7e8      	b.n	800d9a2 <_strtod_l+0x892>
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	e7e6      	b.n	800d9a2 <_strtod_l+0x892>
 800d9d4:	ea53 030a 	orrs.w	r3, r3, sl
 800d9d8:	d0aa      	beq.n	800d930 <_strtod_l+0x820>
 800d9da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9dc:	b1db      	cbz	r3, 800da16 <_strtod_l+0x906>
 800d9de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9e0:	4213      	tst	r3, r2
 800d9e2:	d0ee      	beq.n	800d9c2 <_strtod_l+0x8b2>
 800d9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	4659      	mov	r1, fp
 800d9ea:	9a08      	ldr	r2, [sp, #32]
 800d9ec:	b1bb      	cbz	r3, 800da1e <_strtod_l+0x90e>
 800d9ee:	f7ff fb6d 	bl	800d0cc <sulp>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9fa:	f7f2 fbb7 	bl	800016c <__adddf3>
 800d9fe:	4682      	mov	sl, r0
 800da00:	468b      	mov	fp, r1
 800da02:	e7de      	b.n	800d9c2 <_strtod_l+0x8b2>
 800da04:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800da08:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800da0c:	f04f 3aff 	mov.w	sl, #4294967295
 800da10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800da14:	e7d5      	b.n	800d9c2 <_strtod_l+0x8b2>
 800da16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800da18:	ea13 0f0a 	tst.w	r3, sl
 800da1c:	e7e1      	b.n	800d9e2 <_strtod_l+0x8d2>
 800da1e:	f7ff fb55 	bl	800d0cc <sulp>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da2a:	f7f2 fb9d 	bl	8000168 <__aeabi_dsub>
 800da2e:	2200      	movs	r2, #0
 800da30:	2300      	movs	r3, #0
 800da32:	4682      	mov	sl, r0
 800da34:	468b      	mov	fp, r1
 800da36:	f7f2 ffb7 	bl	80009a8 <__aeabi_dcmpeq>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d0c1      	beq.n	800d9c2 <_strtod_l+0x8b2>
 800da3e:	e619      	b.n	800d674 <_strtod_l+0x564>
 800da40:	4641      	mov	r1, r8
 800da42:	4620      	mov	r0, r4
 800da44:	f7ff face 	bl	800cfe4 <__ratio>
 800da48:	2200      	movs	r2, #0
 800da4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800da4e:	4606      	mov	r6, r0
 800da50:	460f      	mov	r7, r1
 800da52:	f7f2 ffbd 	bl	80009d0 <__aeabi_dcmple>
 800da56:	2800      	cmp	r0, #0
 800da58:	d06d      	beq.n	800db36 <_strtod_l+0xa26>
 800da5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d178      	bne.n	800db52 <_strtod_l+0xa42>
 800da60:	f1ba 0f00 	cmp.w	sl, #0
 800da64:	d156      	bne.n	800db14 <_strtod_l+0xa04>
 800da66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d158      	bne.n	800db22 <_strtod_l+0xa12>
 800da70:	2200      	movs	r2, #0
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	4b5e      	ldr	r3, [pc, #376]	@ (800dbf0 <_strtod_l+0xae0>)
 800da78:	f7f2 ffa0 	bl	80009bc <__aeabi_dcmplt>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d157      	bne.n	800db30 <_strtod_l+0xa20>
 800da80:	4630      	mov	r0, r6
 800da82:	4639      	mov	r1, r7
 800da84:	2200      	movs	r2, #0
 800da86:	4b5b      	ldr	r3, [pc, #364]	@ (800dbf4 <_strtod_l+0xae4>)
 800da88:	f7f2 fd26 	bl	80004d8 <__aeabi_dmul>
 800da8c:	4606      	mov	r6, r0
 800da8e:	460f      	mov	r7, r1
 800da90:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800da94:	9606      	str	r6, [sp, #24]
 800da96:	9307      	str	r3, [sp, #28]
 800da98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da9c:	4d51      	ldr	r5, [pc, #324]	@ (800dbe4 <_strtod_l+0xad4>)
 800da9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800daa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800daa4:	401d      	ands	r5, r3
 800daa6:	4b54      	ldr	r3, [pc, #336]	@ (800dbf8 <_strtod_l+0xae8>)
 800daa8:	429d      	cmp	r5, r3
 800daaa:	f040 80ab 	bne.w	800dc04 <_strtod_l+0xaf4>
 800daae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dab0:	4650      	mov	r0, sl
 800dab2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dab6:	4659      	mov	r1, fp
 800dab8:	f7ff f9d4 	bl	800ce64 <__ulp>
 800dabc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dac0:	f7f2 fd0a 	bl	80004d8 <__aeabi_dmul>
 800dac4:	4652      	mov	r2, sl
 800dac6:	465b      	mov	r3, fp
 800dac8:	f7f2 fb50 	bl	800016c <__adddf3>
 800dacc:	460b      	mov	r3, r1
 800dace:	4945      	ldr	r1, [pc, #276]	@ (800dbe4 <_strtod_l+0xad4>)
 800dad0:	4a4a      	ldr	r2, [pc, #296]	@ (800dbfc <_strtod_l+0xaec>)
 800dad2:	4019      	ands	r1, r3
 800dad4:	4291      	cmp	r1, r2
 800dad6:	4682      	mov	sl, r0
 800dad8:	d942      	bls.n	800db60 <_strtod_l+0xa50>
 800dada:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dadc:	4b43      	ldr	r3, [pc, #268]	@ (800dbec <_strtod_l+0xadc>)
 800dade:	429a      	cmp	r2, r3
 800dae0:	d103      	bne.n	800daea <_strtod_l+0x9da>
 800dae2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dae4:	3301      	adds	r3, #1
 800dae6:	f43f ad32 	beq.w	800d54e <_strtod_l+0x43e>
 800daea:	f04f 3aff 	mov.w	sl, #4294967295
 800daee:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800dbec <_strtod_l+0xadc>
 800daf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daf4:	9805      	ldr	r0, [sp, #20]
 800daf6:	f7fe fe89 	bl	800c80c <_Bfree>
 800dafa:	4649      	mov	r1, r9
 800dafc:	9805      	ldr	r0, [sp, #20]
 800dafe:	f7fe fe85 	bl	800c80c <_Bfree>
 800db02:	4641      	mov	r1, r8
 800db04:	9805      	ldr	r0, [sp, #20]
 800db06:	f7fe fe81 	bl	800c80c <_Bfree>
 800db0a:	4621      	mov	r1, r4
 800db0c:	9805      	ldr	r0, [sp, #20]
 800db0e:	f7fe fe7d 	bl	800c80c <_Bfree>
 800db12:	e61c      	b.n	800d74e <_strtod_l+0x63e>
 800db14:	f1ba 0f01 	cmp.w	sl, #1
 800db18:	d103      	bne.n	800db22 <_strtod_l+0xa12>
 800db1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f43f ada9 	beq.w	800d674 <_strtod_l+0x564>
 800db22:	2200      	movs	r2, #0
 800db24:	4b36      	ldr	r3, [pc, #216]	@ (800dc00 <_strtod_l+0xaf0>)
 800db26:	2600      	movs	r6, #0
 800db28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db2c:	4f30      	ldr	r7, [pc, #192]	@ (800dbf0 <_strtod_l+0xae0>)
 800db2e:	e7b3      	b.n	800da98 <_strtod_l+0x988>
 800db30:	2600      	movs	r6, #0
 800db32:	4f30      	ldr	r7, [pc, #192]	@ (800dbf4 <_strtod_l+0xae4>)
 800db34:	e7ac      	b.n	800da90 <_strtod_l+0x980>
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	4b2e      	ldr	r3, [pc, #184]	@ (800dbf4 <_strtod_l+0xae4>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	f7f2 fccb 	bl	80004d8 <__aeabi_dmul>
 800db42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db44:	4606      	mov	r6, r0
 800db46:	460f      	mov	r7, r1
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d0a1      	beq.n	800da90 <_strtod_l+0x980>
 800db4c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800db50:	e7a2      	b.n	800da98 <_strtod_l+0x988>
 800db52:	2200      	movs	r2, #0
 800db54:	4b26      	ldr	r3, [pc, #152]	@ (800dbf0 <_strtod_l+0xae0>)
 800db56:	4616      	mov	r6, r2
 800db58:	461f      	mov	r7, r3
 800db5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db5e:	e79b      	b.n	800da98 <_strtod_l+0x988>
 800db60:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800db64:	9b08      	ldr	r3, [sp, #32]
 800db66:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1c1      	bne.n	800daf2 <_strtod_l+0x9e2>
 800db6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db72:	0d1b      	lsrs	r3, r3, #20
 800db74:	051b      	lsls	r3, r3, #20
 800db76:	429d      	cmp	r5, r3
 800db78:	d1bb      	bne.n	800daf2 <_strtod_l+0x9e2>
 800db7a:	4630      	mov	r0, r6
 800db7c:	4639      	mov	r1, r7
 800db7e:	f7f3 fa77 	bl	8001070 <__aeabi_d2lz>
 800db82:	f7f2 fc7b 	bl	800047c <__aeabi_l2d>
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4630      	mov	r0, r6
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 faeb 	bl	8000168 <__aeabi_dsub>
 800db92:	460b      	mov	r3, r1
 800db94:	4602      	mov	r2, r0
 800db96:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800db9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800db9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dba0:	ea46 060a 	orr.w	r6, r6, sl
 800dba4:	431e      	orrs	r6, r3
 800dba6:	d06a      	beq.n	800dc7e <_strtod_l+0xb6e>
 800dba8:	a309      	add	r3, pc, #36	@ (adr r3, 800dbd0 <_strtod_l+0xac0>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 ff05 	bl	80009bc <__aeabi_dcmplt>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	f47f acd6 	bne.w	800d564 <_strtod_l+0x454>
 800dbb8:	a307      	add	r3, pc, #28	@ (adr r3, 800dbd8 <_strtod_l+0xac8>)
 800dbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dbc2:	f7f2 ff19 	bl	80009f8 <__aeabi_dcmpgt>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d093      	beq.n	800daf2 <_strtod_l+0x9e2>
 800dbca:	e4cb      	b.n	800d564 <_strtod_l+0x454>
 800dbcc:	f3af 8000 	nop.w
 800dbd0:	94a03595 	.word	0x94a03595
 800dbd4:	3fdfffff 	.word	0x3fdfffff
 800dbd8:	35afe535 	.word	0x35afe535
 800dbdc:	3fe00000 	.word	0x3fe00000
 800dbe0:	39500000 	.word	0x39500000
 800dbe4:	7ff00000 	.word	0x7ff00000
 800dbe8:	000fffff 	.word	0x000fffff
 800dbec:	7fefffff 	.word	0x7fefffff
 800dbf0:	3ff00000 	.word	0x3ff00000
 800dbf4:	3fe00000 	.word	0x3fe00000
 800dbf8:	7fe00000 	.word	0x7fe00000
 800dbfc:	7c9fffff 	.word	0x7c9fffff
 800dc00:	bff00000 	.word	0xbff00000
 800dc04:	9b08      	ldr	r3, [sp, #32]
 800dc06:	b323      	cbz	r3, 800dc52 <_strtod_l+0xb42>
 800dc08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dc0c:	d821      	bhi.n	800dc52 <_strtod_l+0xb42>
 800dc0e:	a328      	add	r3, pc, #160	@ (adr r3, 800dcb0 <_strtod_l+0xba0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	4630      	mov	r0, r6
 800dc16:	4639      	mov	r1, r7
 800dc18:	f7f2 feda 	bl	80009d0 <__aeabi_dcmple>
 800dc1c:	b1a0      	cbz	r0, 800dc48 <_strtod_l+0xb38>
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4630      	mov	r0, r6
 800dc22:	f7f2 ff31 	bl	8000a88 <__aeabi_d2uiz>
 800dc26:	2801      	cmp	r0, #1
 800dc28:	bf38      	it	cc
 800dc2a:	2001      	movcc	r0, #1
 800dc2c:	f7f2 fbda 	bl	80003e4 <__aeabi_ui2d>
 800dc30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	b9fb      	cbnz	r3, 800dc78 <_strtod_l+0xb68>
 800dc38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800dc3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800dc40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dc44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dc4e:	1b5b      	subs	r3, r3, r5
 800dc50:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dc5a:	f7ff f903 	bl	800ce64 <__ulp>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	4650      	mov	r0, sl
 800dc64:	4659      	mov	r1, fp
 800dc66:	f7f2 fc37 	bl	80004d8 <__aeabi_dmul>
 800dc6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dc6e:	f7f2 fa7d 	bl	800016c <__adddf3>
 800dc72:	4682      	mov	sl, r0
 800dc74:	468b      	mov	fp, r1
 800dc76:	e775      	b.n	800db64 <_strtod_l+0xa54>
 800dc78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dc7c:	e7e0      	b.n	800dc40 <_strtod_l+0xb30>
 800dc7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dcb8 <_strtod_l+0xba8>)
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	f7f2 fe9a 	bl	80009bc <__aeabi_dcmplt>
 800dc88:	e79d      	b.n	800dbc6 <_strtod_l+0xab6>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc90:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	f7ff ba79 	b.w	800d18a <_strtod_l+0x7a>
 800dc98:	2a65      	cmp	r2, #101	@ 0x65
 800dc9a:	f43f ab72 	beq.w	800d382 <_strtod_l+0x272>
 800dc9e:	2a45      	cmp	r2, #69	@ 0x45
 800dca0:	f43f ab6f 	beq.w	800d382 <_strtod_l+0x272>
 800dca4:	2301      	movs	r3, #1
 800dca6:	f7ff bbaa 	b.w	800d3fe <_strtod_l+0x2ee>
 800dcaa:	bf00      	nop
 800dcac:	f3af 8000 	nop.w
 800dcb0:	ffc00000 	.word	0xffc00000
 800dcb4:	41dfffff 	.word	0x41dfffff
 800dcb8:	94a03595 	.word	0x94a03595
 800dcbc:	3fcfffff 	.word	0x3fcfffff

0800dcc0 <_strtod_r>:
 800dcc0:	4b01      	ldr	r3, [pc, #4]	@ (800dcc8 <_strtod_r+0x8>)
 800dcc2:	f7ff ba25 	b.w	800d110 <_strtod_l>
 800dcc6:	bf00      	nop
 800dcc8:	200001d8 	.word	0x200001d8

0800dccc <_strtol_l.isra.0>:
 800dccc:	2b24      	cmp	r3, #36	@ 0x24
 800dcce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd2:	4686      	mov	lr, r0
 800dcd4:	4690      	mov	r8, r2
 800dcd6:	d801      	bhi.n	800dcdc <_strtol_l.isra.0+0x10>
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d106      	bne.n	800dcea <_strtol_l.isra.0+0x1e>
 800dcdc:	f7fd fdbc 	bl	800b858 <__errno>
 800dce0:	2316      	movs	r3, #22
 800dce2:	6003      	str	r3, [r0, #0]
 800dce4:	2000      	movs	r0, #0
 800dce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcea:	460d      	mov	r5, r1
 800dcec:	4833      	ldr	r0, [pc, #204]	@ (800ddbc <_strtol_l.isra.0+0xf0>)
 800dcee:	462a      	mov	r2, r5
 800dcf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcf4:	5d06      	ldrb	r6, [r0, r4]
 800dcf6:	f016 0608 	ands.w	r6, r6, #8
 800dcfa:	d1f8      	bne.n	800dcee <_strtol_l.isra.0+0x22>
 800dcfc:	2c2d      	cmp	r4, #45	@ 0x2d
 800dcfe:	d110      	bne.n	800dd22 <_strtol_l.isra.0+0x56>
 800dd00:	2601      	movs	r6, #1
 800dd02:	782c      	ldrb	r4, [r5, #0]
 800dd04:	1c95      	adds	r5, r2, #2
 800dd06:	f033 0210 	bics.w	r2, r3, #16
 800dd0a:	d115      	bne.n	800dd38 <_strtol_l.isra.0+0x6c>
 800dd0c:	2c30      	cmp	r4, #48	@ 0x30
 800dd0e:	d10d      	bne.n	800dd2c <_strtol_l.isra.0+0x60>
 800dd10:	782a      	ldrb	r2, [r5, #0]
 800dd12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd16:	2a58      	cmp	r2, #88	@ 0x58
 800dd18:	d108      	bne.n	800dd2c <_strtol_l.isra.0+0x60>
 800dd1a:	786c      	ldrb	r4, [r5, #1]
 800dd1c:	3502      	adds	r5, #2
 800dd1e:	2310      	movs	r3, #16
 800dd20:	e00a      	b.n	800dd38 <_strtol_l.isra.0+0x6c>
 800dd22:	2c2b      	cmp	r4, #43	@ 0x2b
 800dd24:	bf04      	itt	eq
 800dd26:	782c      	ldrbeq	r4, [r5, #0]
 800dd28:	1c95      	addeq	r5, r2, #2
 800dd2a:	e7ec      	b.n	800dd06 <_strtol_l.isra.0+0x3a>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1f6      	bne.n	800dd1e <_strtol_l.isra.0+0x52>
 800dd30:	2c30      	cmp	r4, #48	@ 0x30
 800dd32:	bf14      	ite	ne
 800dd34:	230a      	movne	r3, #10
 800dd36:	2308      	moveq	r3, #8
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dd3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dd42:	fbbc f9f3 	udiv	r9, ip, r3
 800dd46:	4610      	mov	r0, r2
 800dd48:	fb03 ca19 	mls	sl, r3, r9, ip
 800dd4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dd50:	2f09      	cmp	r7, #9
 800dd52:	d80f      	bhi.n	800dd74 <_strtol_l.isra.0+0xa8>
 800dd54:	463c      	mov	r4, r7
 800dd56:	42a3      	cmp	r3, r4
 800dd58:	dd1b      	ble.n	800dd92 <_strtol_l.isra.0+0xc6>
 800dd5a:	1c57      	adds	r7, r2, #1
 800dd5c:	d007      	beq.n	800dd6e <_strtol_l.isra.0+0xa2>
 800dd5e:	4581      	cmp	r9, r0
 800dd60:	d314      	bcc.n	800dd8c <_strtol_l.isra.0+0xc0>
 800dd62:	d101      	bne.n	800dd68 <_strtol_l.isra.0+0x9c>
 800dd64:	45a2      	cmp	sl, r4
 800dd66:	db11      	blt.n	800dd8c <_strtol_l.isra.0+0xc0>
 800dd68:	2201      	movs	r2, #1
 800dd6a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd72:	e7eb      	b.n	800dd4c <_strtol_l.isra.0+0x80>
 800dd74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dd78:	2f19      	cmp	r7, #25
 800dd7a:	d801      	bhi.n	800dd80 <_strtol_l.isra.0+0xb4>
 800dd7c:	3c37      	subs	r4, #55	@ 0x37
 800dd7e:	e7ea      	b.n	800dd56 <_strtol_l.isra.0+0x8a>
 800dd80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dd84:	2f19      	cmp	r7, #25
 800dd86:	d804      	bhi.n	800dd92 <_strtol_l.isra.0+0xc6>
 800dd88:	3c57      	subs	r4, #87	@ 0x57
 800dd8a:	e7e4      	b.n	800dd56 <_strtol_l.isra.0+0x8a>
 800dd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd90:	e7ed      	b.n	800dd6e <_strtol_l.isra.0+0xa2>
 800dd92:	1c53      	adds	r3, r2, #1
 800dd94:	d108      	bne.n	800dda8 <_strtol_l.isra.0+0xdc>
 800dd96:	2322      	movs	r3, #34	@ 0x22
 800dd98:	4660      	mov	r0, ip
 800dd9a:	f8ce 3000 	str.w	r3, [lr]
 800dd9e:	f1b8 0f00 	cmp.w	r8, #0
 800dda2:	d0a0      	beq.n	800dce6 <_strtol_l.isra.0+0x1a>
 800dda4:	1e69      	subs	r1, r5, #1
 800dda6:	e006      	b.n	800ddb6 <_strtol_l.isra.0+0xea>
 800dda8:	b106      	cbz	r6, 800ddac <_strtol_l.isra.0+0xe0>
 800ddaa:	4240      	negs	r0, r0
 800ddac:	f1b8 0f00 	cmp.w	r8, #0
 800ddb0:	d099      	beq.n	800dce6 <_strtol_l.isra.0+0x1a>
 800ddb2:	2a00      	cmp	r2, #0
 800ddb4:	d1f6      	bne.n	800dda4 <_strtol_l.isra.0+0xd8>
 800ddb6:	f8c8 1000 	str.w	r1, [r8]
 800ddba:	e794      	b.n	800dce6 <_strtol_l.isra.0+0x1a>
 800ddbc:	0800fba9 	.word	0x0800fba9

0800ddc0 <_strtol_r>:
 800ddc0:	f7ff bf84 	b.w	800dccc <_strtol_l.isra.0>

0800ddc4 <__ssputs_r>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	461f      	mov	r7, r3
 800ddca:	688e      	ldr	r6, [r1, #8]
 800ddcc:	4682      	mov	sl, r0
 800ddce:	42be      	cmp	r6, r7
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	4690      	mov	r8, r2
 800ddd4:	680b      	ldr	r3, [r1, #0]
 800ddd6:	d82d      	bhi.n	800de34 <__ssputs_r+0x70>
 800ddd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dde0:	d026      	beq.n	800de30 <__ssputs_r+0x6c>
 800dde2:	6965      	ldr	r5, [r4, #20]
 800dde4:	6909      	ldr	r1, [r1, #16]
 800dde6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddea:	eba3 0901 	sub.w	r9, r3, r1
 800ddee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddf2:	1c7b      	adds	r3, r7, #1
 800ddf4:	444b      	add	r3, r9
 800ddf6:	106d      	asrs	r5, r5, #1
 800ddf8:	429d      	cmp	r5, r3
 800ddfa:	bf38      	it	cc
 800ddfc:	461d      	movcc	r5, r3
 800ddfe:	0553      	lsls	r3, r2, #21
 800de00:	d527      	bpl.n	800de52 <__ssputs_r+0x8e>
 800de02:	4629      	mov	r1, r5
 800de04:	f7fe fc36 	bl	800c674 <_malloc_r>
 800de08:	4606      	mov	r6, r0
 800de0a:	b360      	cbz	r0, 800de66 <__ssputs_r+0xa2>
 800de0c:	464a      	mov	r2, r9
 800de0e:	6921      	ldr	r1, [r4, #16]
 800de10:	f000 fd8e 	bl	800e930 <memcpy>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	6126      	str	r6, [r4, #16]
 800de22:	444e      	add	r6, r9
 800de24:	6026      	str	r6, [r4, #0]
 800de26:	463e      	mov	r6, r7
 800de28:	6165      	str	r5, [r4, #20]
 800de2a:	eba5 0509 	sub.w	r5, r5, r9
 800de2e:	60a5      	str	r5, [r4, #8]
 800de30:	42be      	cmp	r6, r7
 800de32:	d900      	bls.n	800de36 <__ssputs_r+0x72>
 800de34:	463e      	mov	r6, r7
 800de36:	4632      	mov	r2, r6
 800de38:	4641      	mov	r1, r8
 800de3a:	6820      	ldr	r0, [r4, #0]
 800de3c:	f000 fd4d 	bl	800e8da <memmove>
 800de40:	2000      	movs	r0, #0
 800de42:	68a3      	ldr	r3, [r4, #8]
 800de44:	1b9b      	subs	r3, r3, r6
 800de46:	60a3      	str	r3, [r4, #8]
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	4433      	add	r3, r6
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de52:	462a      	mov	r2, r5
 800de54:	f001 f8fd 	bl	800f052 <_realloc_r>
 800de58:	4606      	mov	r6, r0
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d1e0      	bne.n	800de20 <__ssputs_r+0x5c>
 800de5e:	4650      	mov	r0, sl
 800de60:	6921      	ldr	r1, [r4, #16]
 800de62:	f7fe fb95 	bl	800c590 <_free_r>
 800de66:	230c      	movs	r3, #12
 800de68:	f8ca 3000 	str.w	r3, [sl]
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	f04f 30ff 	mov.w	r0, #4294967295
 800de72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	e7e9      	b.n	800de4e <__ssputs_r+0x8a>
	...

0800de7c <_svfiprintf_r>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	4698      	mov	r8, r3
 800de82:	898b      	ldrh	r3, [r1, #12]
 800de84:	4607      	mov	r7, r0
 800de86:	061b      	lsls	r3, r3, #24
 800de88:	460d      	mov	r5, r1
 800de8a:	4614      	mov	r4, r2
 800de8c:	b09d      	sub	sp, #116	@ 0x74
 800de8e:	d510      	bpl.n	800deb2 <_svfiprintf_r+0x36>
 800de90:	690b      	ldr	r3, [r1, #16]
 800de92:	b973      	cbnz	r3, 800deb2 <_svfiprintf_r+0x36>
 800de94:	2140      	movs	r1, #64	@ 0x40
 800de96:	f7fe fbed 	bl	800c674 <_malloc_r>
 800de9a:	6028      	str	r0, [r5, #0]
 800de9c:	6128      	str	r0, [r5, #16]
 800de9e:	b930      	cbnz	r0, 800deae <_svfiprintf_r+0x32>
 800dea0:	230c      	movs	r3, #12
 800dea2:	603b      	str	r3, [r7, #0]
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	b01d      	add	sp, #116	@ 0x74
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deae:	2340      	movs	r3, #64	@ 0x40
 800deb0:	616b      	str	r3, [r5, #20]
 800deb2:	2300      	movs	r3, #0
 800deb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb6:	2320      	movs	r3, #32
 800deb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800debc:	2330      	movs	r3, #48	@ 0x30
 800debe:	f04f 0901 	mov.w	r9, #1
 800dec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dec6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e060 <_svfiprintf_r+0x1e4>
 800deca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dece:	4623      	mov	r3, r4
 800ded0:	469a      	mov	sl, r3
 800ded2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ded6:	b10a      	cbz	r2, 800dedc <_svfiprintf_r+0x60>
 800ded8:	2a25      	cmp	r2, #37	@ 0x25
 800deda:	d1f9      	bne.n	800ded0 <_svfiprintf_r+0x54>
 800dedc:	ebba 0b04 	subs.w	fp, sl, r4
 800dee0:	d00b      	beq.n	800defa <_svfiprintf_r+0x7e>
 800dee2:	465b      	mov	r3, fp
 800dee4:	4622      	mov	r2, r4
 800dee6:	4629      	mov	r1, r5
 800dee8:	4638      	mov	r0, r7
 800deea:	f7ff ff6b 	bl	800ddc4 <__ssputs_r>
 800deee:	3001      	adds	r0, #1
 800def0:	f000 80a7 	beq.w	800e042 <_svfiprintf_r+0x1c6>
 800def4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800def6:	445a      	add	r2, fp
 800def8:	9209      	str	r2, [sp, #36]	@ 0x24
 800defa:	f89a 3000 	ldrb.w	r3, [sl]
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 809f 	beq.w	800e042 <_svfiprintf_r+0x1c6>
 800df04:	2300      	movs	r3, #0
 800df06:	f04f 32ff 	mov.w	r2, #4294967295
 800df0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df0e:	f10a 0a01 	add.w	sl, sl, #1
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	9307      	str	r3, [sp, #28]
 800df16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df1c:	4654      	mov	r4, sl
 800df1e:	2205      	movs	r2, #5
 800df20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df24:	484e      	ldr	r0, [pc, #312]	@ (800e060 <_svfiprintf_r+0x1e4>)
 800df26:	f7fd fcc4 	bl	800b8b2 <memchr>
 800df2a:	9a04      	ldr	r2, [sp, #16]
 800df2c:	b9d8      	cbnz	r0, 800df66 <_svfiprintf_r+0xea>
 800df2e:	06d0      	lsls	r0, r2, #27
 800df30:	bf44      	itt	mi
 800df32:	2320      	movmi	r3, #32
 800df34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df38:	0711      	lsls	r1, r2, #28
 800df3a:	bf44      	itt	mi
 800df3c:	232b      	movmi	r3, #43	@ 0x2b
 800df3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df42:	f89a 3000 	ldrb.w	r3, [sl]
 800df46:	2b2a      	cmp	r3, #42	@ 0x2a
 800df48:	d015      	beq.n	800df76 <_svfiprintf_r+0xfa>
 800df4a:	4654      	mov	r4, sl
 800df4c:	2000      	movs	r0, #0
 800df4e:	f04f 0c0a 	mov.w	ip, #10
 800df52:	9a07      	ldr	r2, [sp, #28]
 800df54:	4621      	mov	r1, r4
 800df56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df5a:	3b30      	subs	r3, #48	@ 0x30
 800df5c:	2b09      	cmp	r3, #9
 800df5e:	d94b      	bls.n	800dff8 <_svfiprintf_r+0x17c>
 800df60:	b1b0      	cbz	r0, 800df90 <_svfiprintf_r+0x114>
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	e014      	b.n	800df90 <_svfiprintf_r+0x114>
 800df66:	eba0 0308 	sub.w	r3, r0, r8
 800df6a:	fa09 f303 	lsl.w	r3, r9, r3
 800df6e:	4313      	orrs	r3, r2
 800df70:	46a2      	mov	sl, r4
 800df72:	9304      	str	r3, [sp, #16]
 800df74:	e7d2      	b.n	800df1c <_svfiprintf_r+0xa0>
 800df76:	9b03      	ldr	r3, [sp, #12]
 800df78:	1d19      	adds	r1, r3, #4
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	9103      	str	r1, [sp, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bfbb      	ittet	lt
 800df82:	425b      	neglt	r3, r3
 800df84:	f042 0202 	orrlt.w	r2, r2, #2
 800df88:	9307      	strge	r3, [sp, #28]
 800df8a:	9307      	strlt	r3, [sp, #28]
 800df8c:	bfb8      	it	lt
 800df8e:	9204      	strlt	r2, [sp, #16]
 800df90:	7823      	ldrb	r3, [r4, #0]
 800df92:	2b2e      	cmp	r3, #46	@ 0x2e
 800df94:	d10a      	bne.n	800dfac <_svfiprintf_r+0x130>
 800df96:	7863      	ldrb	r3, [r4, #1]
 800df98:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9a:	d132      	bne.n	800e002 <_svfiprintf_r+0x186>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	3402      	adds	r4, #2
 800dfa0:	1d1a      	adds	r2, r3, #4
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	9203      	str	r2, [sp, #12]
 800dfa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfaa:	9305      	str	r3, [sp, #20]
 800dfac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e064 <_svfiprintf_r+0x1e8>
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	7821      	ldrb	r1, [r4, #0]
 800dfb6:	f7fd fc7c 	bl	800b8b2 <memchr>
 800dfba:	b138      	cbz	r0, 800dfcc <_svfiprintf_r+0x150>
 800dfbc:	2240      	movs	r2, #64	@ 0x40
 800dfbe:	9b04      	ldr	r3, [sp, #16]
 800dfc0:	eba0 000a 	sub.w	r0, r0, sl
 800dfc4:	4082      	lsls	r2, r0
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	3401      	adds	r4, #1
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd0:	2206      	movs	r2, #6
 800dfd2:	4825      	ldr	r0, [pc, #148]	@ (800e068 <_svfiprintf_r+0x1ec>)
 800dfd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfd8:	f7fd fc6b 	bl	800b8b2 <memchr>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d036      	beq.n	800e04e <_svfiprintf_r+0x1d2>
 800dfe0:	4b22      	ldr	r3, [pc, #136]	@ (800e06c <_svfiprintf_r+0x1f0>)
 800dfe2:	bb1b      	cbnz	r3, 800e02c <_svfiprintf_r+0x1b0>
 800dfe4:	9b03      	ldr	r3, [sp, #12]
 800dfe6:	3307      	adds	r3, #7
 800dfe8:	f023 0307 	bic.w	r3, r3, #7
 800dfec:	3308      	adds	r3, #8
 800dfee:	9303      	str	r3, [sp, #12]
 800dff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff2:	4433      	add	r3, r6
 800dff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dff6:	e76a      	b.n	800dece <_svfiprintf_r+0x52>
 800dff8:	460c      	mov	r4, r1
 800dffa:	2001      	movs	r0, #1
 800dffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e000:	e7a8      	b.n	800df54 <_svfiprintf_r+0xd8>
 800e002:	2300      	movs	r3, #0
 800e004:	f04f 0c0a 	mov.w	ip, #10
 800e008:	4619      	mov	r1, r3
 800e00a:	3401      	adds	r4, #1
 800e00c:	9305      	str	r3, [sp, #20]
 800e00e:	4620      	mov	r0, r4
 800e010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e014:	3a30      	subs	r2, #48	@ 0x30
 800e016:	2a09      	cmp	r2, #9
 800e018:	d903      	bls.n	800e022 <_svfiprintf_r+0x1a6>
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0c6      	beq.n	800dfac <_svfiprintf_r+0x130>
 800e01e:	9105      	str	r1, [sp, #20]
 800e020:	e7c4      	b.n	800dfac <_svfiprintf_r+0x130>
 800e022:	4604      	mov	r4, r0
 800e024:	2301      	movs	r3, #1
 800e026:	fb0c 2101 	mla	r1, ip, r1, r2
 800e02a:	e7f0      	b.n	800e00e <_svfiprintf_r+0x192>
 800e02c:	ab03      	add	r3, sp, #12
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	462a      	mov	r2, r5
 800e032:	4638      	mov	r0, r7
 800e034:	4b0e      	ldr	r3, [pc, #56]	@ (800e070 <_svfiprintf_r+0x1f4>)
 800e036:	a904      	add	r1, sp, #16
 800e038:	f7fc fc58 	bl	800a8ec <_printf_float>
 800e03c:	1c42      	adds	r2, r0, #1
 800e03e:	4606      	mov	r6, r0
 800e040:	d1d6      	bne.n	800dff0 <_svfiprintf_r+0x174>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	065b      	lsls	r3, r3, #25
 800e046:	f53f af2d 	bmi.w	800dea4 <_svfiprintf_r+0x28>
 800e04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e04c:	e72c      	b.n	800dea8 <_svfiprintf_r+0x2c>
 800e04e:	ab03      	add	r3, sp, #12
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	462a      	mov	r2, r5
 800e054:	4638      	mov	r0, r7
 800e056:	4b06      	ldr	r3, [pc, #24]	@ (800e070 <_svfiprintf_r+0x1f4>)
 800e058:	a904      	add	r1, sp, #16
 800e05a:	f7fc fee5 	bl	800ae28 <_printf_i>
 800e05e:	e7ed      	b.n	800e03c <_svfiprintf_r+0x1c0>
 800e060:	0800f987 	.word	0x0800f987
 800e064:	0800f98d 	.word	0x0800f98d
 800e068:	0800f991 	.word	0x0800f991
 800e06c:	0800a8ed 	.word	0x0800a8ed
 800e070:	0800ddc5 	.word	0x0800ddc5

0800e074 <_sungetc_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	1c4b      	adds	r3, r1, #1
 800e078:	4614      	mov	r4, r2
 800e07a:	d103      	bne.n	800e084 <_sungetc_r+0x10>
 800e07c:	f04f 35ff 	mov.w	r5, #4294967295
 800e080:	4628      	mov	r0, r5
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	8993      	ldrh	r3, [r2, #12]
 800e086:	b2cd      	uxtb	r5, r1
 800e088:	f023 0320 	bic.w	r3, r3, #32
 800e08c:	8193      	strh	r3, [r2, #12]
 800e08e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e090:	6852      	ldr	r2, [r2, #4]
 800e092:	b18b      	cbz	r3, 800e0b8 <_sungetc_r+0x44>
 800e094:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e096:	4293      	cmp	r3, r2
 800e098:	dd08      	ble.n	800e0ac <_sungetc_r+0x38>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	1e5a      	subs	r2, r3, #1
 800e09e:	6022      	str	r2, [r4, #0]
 800e0a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e0a4:	6863      	ldr	r3, [r4, #4]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	6063      	str	r3, [r4, #4]
 800e0aa:	e7e9      	b.n	800e080 <_sungetc_r+0xc>
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	f000 fbdc 	bl	800e86a <__submore>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0f1      	beq.n	800e09a <_sungetc_r+0x26>
 800e0b6:	e7e1      	b.n	800e07c <_sungetc_r+0x8>
 800e0b8:	6921      	ldr	r1, [r4, #16]
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	b151      	cbz	r1, 800e0d4 <_sungetc_r+0x60>
 800e0be:	4299      	cmp	r1, r3
 800e0c0:	d208      	bcs.n	800e0d4 <_sungetc_r+0x60>
 800e0c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e0c6:	42a9      	cmp	r1, r5
 800e0c8:	d104      	bne.n	800e0d4 <_sungetc_r+0x60>
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	3201      	adds	r2, #1
 800e0ce:	6023      	str	r3, [r4, #0]
 800e0d0:	6062      	str	r2, [r4, #4]
 800e0d2:	e7d5      	b.n	800e080 <_sungetc_r+0xc>
 800e0d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800e0d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0de:	2303      	movs	r3, #3
 800e0e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e0e2:	4623      	mov	r3, r4
 800e0e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e0e8:	6023      	str	r3, [r4, #0]
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e7dc      	b.n	800e0a8 <_sungetc_r+0x34>

0800e0ee <__ssrefill_r>:
 800e0ee:	b510      	push	{r4, lr}
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e0f4:	b169      	cbz	r1, 800e112 <__ssrefill_r+0x24>
 800e0f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0fa:	4299      	cmp	r1, r3
 800e0fc:	d001      	beq.n	800e102 <__ssrefill_r+0x14>
 800e0fe:	f7fe fa47 	bl	800c590 <_free_r>
 800e102:	2000      	movs	r0, #0
 800e104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e106:	6360      	str	r0, [r4, #52]	@ 0x34
 800e108:	6063      	str	r3, [r4, #4]
 800e10a:	b113      	cbz	r3, 800e112 <__ssrefill_r+0x24>
 800e10c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e10e:	6023      	str	r3, [r4, #0]
 800e110:	bd10      	pop	{r4, pc}
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	2300      	movs	r3, #0
 800e11c:	6063      	str	r3, [r4, #4]
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	f043 0320 	orr.w	r3, r3, #32
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	e7f3      	b.n	800e110 <__ssrefill_r+0x22>

0800e128 <__ssvfiscanf_r>:
 800e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e12c:	460c      	mov	r4, r1
 800e12e:	2100      	movs	r1, #0
 800e130:	4606      	mov	r6, r0
 800e132:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800e136:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e13a:	49ab      	ldr	r1, [pc, #684]	@ (800e3e8 <__ssvfiscanf_r+0x2c0>)
 800e13c:	f10d 0804 	add.w	r8, sp, #4
 800e140:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e142:	49aa      	ldr	r1, [pc, #680]	@ (800e3ec <__ssvfiscanf_r+0x2c4>)
 800e144:	4faa      	ldr	r7, [pc, #680]	@ (800e3f0 <__ssvfiscanf_r+0x2c8>)
 800e146:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e14a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	f892 9000 	ldrb.w	r9, [r2]
 800e152:	f1b9 0f00 	cmp.w	r9, #0
 800e156:	f000 8159 	beq.w	800e40c <__ssvfiscanf_r+0x2e4>
 800e15a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800e15e:	1c55      	adds	r5, r2, #1
 800e160:	f013 0308 	ands.w	r3, r3, #8
 800e164:	d019      	beq.n	800e19a <__ssvfiscanf_r+0x72>
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	dd0f      	ble.n	800e18c <__ssvfiscanf_r+0x64>
 800e16c:	6823      	ldr	r3, [r4, #0]
 800e16e:	781a      	ldrb	r2, [r3, #0]
 800e170:	5cba      	ldrb	r2, [r7, r2]
 800e172:	0712      	lsls	r2, r2, #28
 800e174:	d401      	bmi.n	800e17a <__ssvfiscanf_r+0x52>
 800e176:	462a      	mov	r2, r5
 800e178:	e7e9      	b.n	800e14e <__ssvfiscanf_r+0x26>
 800e17a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e17c:	3301      	adds	r3, #1
 800e17e:	3201      	adds	r2, #1
 800e180:	9245      	str	r2, [sp, #276]	@ 0x114
 800e182:	6862      	ldr	r2, [r4, #4]
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	3a01      	subs	r2, #1
 800e188:	6062      	str	r2, [r4, #4]
 800e18a:	e7ec      	b.n	800e166 <__ssvfiscanf_r+0x3e>
 800e18c:	4621      	mov	r1, r4
 800e18e:	4630      	mov	r0, r6
 800e190:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e192:	4798      	blx	r3
 800e194:	2800      	cmp	r0, #0
 800e196:	d0e9      	beq.n	800e16c <__ssvfiscanf_r+0x44>
 800e198:	e7ed      	b.n	800e176 <__ssvfiscanf_r+0x4e>
 800e19a:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800e19e:	f040 8086 	bne.w	800e2ae <__ssvfiscanf_r+0x186>
 800e1a2:	9341      	str	r3, [sp, #260]	@ 0x104
 800e1a4:	9343      	str	r3, [sp, #268]	@ 0x10c
 800e1a6:	7853      	ldrb	r3, [r2, #1]
 800e1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1aa:	bf04      	itt	eq
 800e1ac:	2310      	moveq	r3, #16
 800e1ae:	1c95      	addeq	r5, r2, #2
 800e1b0:	f04f 020a 	mov.w	r2, #10
 800e1b4:	bf08      	it	eq
 800e1b6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e1b8:	46aa      	mov	sl, r5
 800e1ba:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e1be:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e1c2:	2b09      	cmp	r3, #9
 800e1c4:	d91e      	bls.n	800e204 <__ssvfiscanf_r+0xdc>
 800e1c6:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800e3f4 <__ssvfiscanf_r+0x2cc>
 800e1ca:	2203      	movs	r2, #3
 800e1cc:	4658      	mov	r0, fp
 800e1ce:	f7fd fb70 	bl	800b8b2 <memchr>
 800e1d2:	b138      	cbz	r0, 800e1e4 <__ssvfiscanf_r+0xbc>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4655      	mov	r5, sl
 800e1d8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e1da:	eba0 000b 	sub.w	r0, r0, fp
 800e1de:	4083      	lsls	r3, r0
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	9341      	str	r3, [sp, #260]	@ 0x104
 800e1e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e1e8:	2b78      	cmp	r3, #120	@ 0x78
 800e1ea:	d806      	bhi.n	800e1fa <__ssvfiscanf_r+0xd2>
 800e1ec:	2b57      	cmp	r3, #87	@ 0x57
 800e1ee:	d810      	bhi.n	800e212 <__ssvfiscanf_r+0xea>
 800e1f0:	2b25      	cmp	r3, #37	@ 0x25
 800e1f2:	d05c      	beq.n	800e2ae <__ssvfiscanf_r+0x186>
 800e1f4:	d856      	bhi.n	800e2a4 <__ssvfiscanf_r+0x17c>
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d074      	beq.n	800e2e4 <__ssvfiscanf_r+0x1bc>
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e1fe:	230a      	movs	r3, #10
 800e200:	9342      	str	r3, [sp, #264]	@ 0x108
 800e202:	e087      	b.n	800e314 <__ssvfiscanf_r+0x1ec>
 800e204:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e206:	4655      	mov	r5, sl
 800e208:	fb02 1103 	mla	r1, r2, r3, r1
 800e20c:	3930      	subs	r1, #48	@ 0x30
 800e20e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e210:	e7d2      	b.n	800e1b8 <__ssvfiscanf_r+0x90>
 800e212:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e216:	2a20      	cmp	r2, #32
 800e218:	d8ef      	bhi.n	800e1fa <__ssvfiscanf_r+0xd2>
 800e21a:	a101      	add	r1, pc, #4	@ (adr r1, 800e220 <__ssvfiscanf_r+0xf8>)
 800e21c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e220:	0800e2f3 	.word	0x0800e2f3
 800e224:	0800e1fb 	.word	0x0800e1fb
 800e228:	0800e1fb 	.word	0x0800e1fb
 800e22c:	0800e34d 	.word	0x0800e34d
 800e230:	0800e1fb 	.word	0x0800e1fb
 800e234:	0800e1fb 	.word	0x0800e1fb
 800e238:	0800e1fb 	.word	0x0800e1fb
 800e23c:	0800e1fb 	.word	0x0800e1fb
 800e240:	0800e1fb 	.word	0x0800e1fb
 800e244:	0800e1fb 	.word	0x0800e1fb
 800e248:	0800e1fb 	.word	0x0800e1fb
 800e24c:	0800e363 	.word	0x0800e363
 800e250:	0800e349 	.word	0x0800e349
 800e254:	0800e2ab 	.word	0x0800e2ab
 800e258:	0800e2ab 	.word	0x0800e2ab
 800e25c:	0800e2ab 	.word	0x0800e2ab
 800e260:	0800e1fb 	.word	0x0800e1fb
 800e264:	0800e305 	.word	0x0800e305
 800e268:	0800e1fb 	.word	0x0800e1fb
 800e26c:	0800e1fb 	.word	0x0800e1fb
 800e270:	0800e1fb 	.word	0x0800e1fb
 800e274:	0800e1fb 	.word	0x0800e1fb
 800e278:	0800e373 	.word	0x0800e373
 800e27c:	0800e30d 	.word	0x0800e30d
 800e280:	0800e2eb 	.word	0x0800e2eb
 800e284:	0800e1fb 	.word	0x0800e1fb
 800e288:	0800e1fb 	.word	0x0800e1fb
 800e28c:	0800e36f 	.word	0x0800e36f
 800e290:	0800e1fb 	.word	0x0800e1fb
 800e294:	0800e349 	.word	0x0800e349
 800e298:	0800e1fb 	.word	0x0800e1fb
 800e29c:	0800e1fb 	.word	0x0800e1fb
 800e2a0:	0800e2f3 	.word	0x0800e2f3
 800e2a4:	3b45      	subs	r3, #69	@ 0x45
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d8a7      	bhi.n	800e1fa <__ssvfiscanf_r+0xd2>
 800e2aa:	2305      	movs	r3, #5
 800e2ac:	e031      	b.n	800e312 <__ssvfiscanf_r+0x1ea>
 800e2ae:	6863      	ldr	r3, [r4, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dd0d      	ble.n	800e2d0 <__ssvfiscanf_r+0x1a8>
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	781a      	ldrb	r2, [r3, #0]
 800e2b8:	454a      	cmp	r2, r9
 800e2ba:	f040 80a7 	bne.w	800e40c <__ssvfiscanf_r+0x2e4>
 800e2be:	3301      	adds	r3, #1
 800e2c0:	6862      	ldr	r2, [r4, #4]
 800e2c2:	6023      	str	r3, [r4, #0]
 800e2c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e2c6:	3a01      	subs	r2, #1
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	6062      	str	r2, [r4, #4]
 800e2cc:	9345      	str	r3, [sp, #276]	@ 0x114
 800e2ce:	e752      	b.n	800e176 <__ssvfiscanf_r+0x4e>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e2d6:	4798      	blx	r3
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0eb      	beq.n	800e2b4 <__ssvfiscanf_r+0x18c>
 800e2dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	f040 808c 	bne.w	800e3fc <__ssvfiscanf_r+0x2d4>
 800e2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e8:	e08c      	b.n	800e404 <__ssvfiscanf_r+0x2dc>
 800e2ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e2ec:	f042 0220 	orr.w	r2, r2, #32
 800e2f0:	9241      	str	r2, [sp, #260]	@ 0x104
 800e2f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e2f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2f8:	9241      	str	r2, [sp, #260]	@ 0x104
 800e2fa:	2210      	movs	r2, #16
 800e2fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800e2fe:	9242      	str	r2, [sp, #264]	@ 0x108
 800e300:	d902      	bls.n	800e308 <__ssvfiscanf_r+0x1e0>
 800e302:	e005      	b.n	800e310 <__ssvfiscanf_r+0x1e8>
 800e304:	2300      	movs	r3, #0
 800e306:	9342      	str	r3, [sp, #264]	@ 0x108
 800e308:	2303      	movs	r3, #3
 800e30a:	e002      	b.n	800e312 <__ssvfiscanf_r+0x1ea>
 800e30c:	2308      	movs	r3, #8
 800e30e:	9342      	str	r3, [sp, #264]	@ 0x108
 800e310:	2304      	movs	r3, #4
 800e312:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e314:	6863      	ldr	r3, [r4, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	dd39      	ble.n	800e38e <__ssvfiscanf_r+0x266>
 800e31a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e31c:	0659      	lsls	r1, r3, #25
 800e31e:	d404      	bmi.n	800e32a <__ssvfiscanf_r+0x202>
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	781a      	ldrb	r2, [r3, #0]
 800e324:	5cba      	ldrb	r2, [r7, r2]
 800e326:	0712      	lsls	r2, r2, #28
 800e328:	d438      	bmi.n	800e39c <__ssvfiscanf_r+0x274>
 800e32a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	dc47      	bgt.n	800e3c0 <__ssvfiscanf_r+0x298>
 800e330:	466b      	mov	r3, sp
 800e332:	4622      	mov	r2, r4
 800e334:	4630      	mov	r0, r6
 800e336:	a941      	add	r1, sp, #260	@ 0x104
 800e338:	f000 f86a 	bl	800e410 <_scanf_chars>
 800e33c:	2801      	cmp	r0, #1
 800e33e:	d065      	beq.n	800e40c <__ssvfiscanf_r+0x2e4>
 800e340:	2802      	cmp	r0, #2
 800e342:	f47f af18 	bne.w	800e176 <__ssvfiscanf_r+0x4e>
 800e346:	e7c9      	b.n	800e2dc <__ssvfiscanf_r+0x1b4>
 800e348:	220a      	movs	r2, #10
 800e34a:	e7d7      	b.n	800e2fc <__ssvfiscanf_r+0x1d4>
 800e34c:	4629      	mov	r1, r5
 800e34e:	4640      	mov	r0, r8
 800e350:	f000 fa52 	bl	800e7f8 <__sccl>
 800e354:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e356:	4605      	mov	r5, r0
 800e358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e35c:	9341      	str	r3, [sp, #260]	@ 0x104
 800e35e:	2301      	movs	r3, #1
 800e360:	e7d7      	b.n	800e312 <__ssvfiscanf_r+0x1ea>
 800e362:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e368:	9341      	str	r3, [sp, #260]	@ 0x104
 800e36a:	2300      	movs	r3, #0
 800e36c:	e7d1      	b.n	800e312 <__ssvfiscanf_r+0x1ea>
 800e36e:	2302      	movs	r3, #2
 800e370:	e7cf      	b.n	800e312 <__ssvfiscanf_r+0x1ea>
 800e372:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e374:	06c3      	lsls	r3, r0, #27
 800e376:	f53f aefe 	bmi.w	800e176 <__ssvfiscanf_r+0x4e>
 800e37a:	9b00      	ldr	r3, [sp, #0]
 800e37c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e37e:	1d19      	adds	r1, r3, #4
 800e380:	9100      	str	r1, [sp, #0]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	07c0      	lsls	r0, r0, #31
 800e386:	bf4c      	ite	mi
 800e388:	801a      	strhmi	r2, [r3, #0]
 800e38a:	601a      	strpl	r2, [r3, #0]
 800e38c:	e6f3      	b.n	800e176 <__ssvfiscanf_r+0x4e>
 800e38e:	4621      	mov	r1, r4
 800e390:	4630      	mov	r0, r6
 800e392:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e394:	4798      	blx	r3
 800e396:	2800      	cmp	r0, #0
 800e398:	d0bf      	beq.n	800e31a <__ssvfiscanf_r+0x1f2>
 800e39a:	e79f      	b.n	800e2dc <__ssvfiscanf_r+0x1b4>
 800e39c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e39e:	3201      	adds	r2, #1
 800e3a0:	9245      	str	r2, [sp, #276]	@ 0x114
 800e3a2:	6862      	ldr	r2, [r4, #4]
 800e3a4:	3a01      	subs	r2, #1
 800e3a6:	2a00      	cmp	r2, #0
 800e3a8:	6062      	str	r2, [r4, #4]
 800e3aa:	dd02      	ble.n	800e3b2 <__ssvfiscanf_r+0x28a>
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	6023      	str	r3, [r4, #0]
 800e3b0:	e7b6      	b.n	800e320 <__ssvfiscanf_r+0x1f8>
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3b8:	4798      	blx	r3
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d0b0      	beq.n	800e320 <__ssvfiscanf_r+0x1f8>
 800e3be:	e78d      	b.n	800e2dc <__ssvfiscanf_r+0x1b4>
 800e3c0:	2b04      	cmp	r3, #4
 800e3c2:	dc06      	bgt.n	800e3d2 <__ssvfiscanf_r+0x2aa>
 800e3c4:	466b      	mov	r3, sp
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	a941      	add	r1, sp, #260	@ 0x104
 800e3cc:	f000 f87a 	bl	800e4c4 <_scanf_i>
 800e3d0:	e7b4      	b.n	800e33c <__ssvfiscanf_r+0x214>
 800e3d2:	4b09      	ldr	r3, [pc, #36]	@ (800e3f8 <__ssvfiscanf_r+0x2d0>)
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f43f aece 	beq.w	800e176 <__ssvfiscanf_r+0x4e>
 800e3da:	466b      	mov	r3, sp
 800e3dc:	4622      	mov	r2, r4
 800e3de:	4630      	mov	r0, r6
 800e3e0:	a941      	add	r1, sp, #260	@ 0x104
 800e3e2:	f7fc fe3f 	bl	800b064 <_scanf_float>
 800e3e6:	e7a9      	b.n	800e33c <__ssvfiscanf_r+0x214>
 800e3e8:	0800e075 	.word	0x0800e075
 800e3ec:	0800e0ef 	.word	0x0800e0ef
 800e3f0:	0800fba9 	.word	0x0800fba9
 800e3f4:	0800f98d 	.word	0x0800f98d
 800e3f8:	0800b065 	.word	0x0800b065
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	065b      	lsls	r3, r3, #25
 800e400:	f53f af70 	bmi.w	800e2e4 <__ssvfiscanf_r+0x1bc>
 800e404:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e40e:	e7f9      	b.n	800e404 <__ssvfiscanf_r+0x2dc>

0800e410 <_scanf_chars>:
 800e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e414:	4615      	mov	r5, r2
 800e416:	688a      	ldr	r2, [r1, #8]
 800e418:	4680      	mov	r8, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	b932      	cbnz	r2, 800e42c <_scanf_chars+0x1c>
 800e41e:	698a      	ldr	r2, [r1, #24]
 800e420:	2a00      	cmp	r2, #0
 800e422:	bf14      	ite	ne
 800e424:	f04f 32ff 	movne.w	r2, #4294967295
 800e428:	2201      	moveq	r2, #1
 800e42a:	608a      	str	r2, [r1, #8]
 800e42c:	2700      	movs	r7, #0
 800e42e:	6822      	ldr	r2, [r4, #0]
 800e430:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800e4c0 <_scanf_chars+0xb0>
 800e434:	06d1      	lsls	r1, r2, #27
 800e436:	bf5f      	itttt	pl
 800e438:	681a      	ldrpl	r2, [r3, #0]
 800e43a:	1d11      	addpl	r1, r2, #4
 800e43c:	6019      	strpl	r1, [r3, #0]
 800e43e:	6816      	ldrpl	r6, [r2, #0]
 800e440:	69a0      	ldr	r0, [r4, #24]
 800e442:	b188      	cbz	r0, 800e468 <_scanf_chars+0x58>
 800e444:	2801      	cmp	r0, #1
 800e446:	d107      	bne.n	800e458 <_scanf_chars+0x48>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	6963      	ldr	r3, [r4, #20]
 800e44e:	5c9b      	ldrb	r3, [r3, r2]
 800e450:	b953      	cbnz	r3, 800e468 <_scanf_chars+0x58>
 800e452:	2f00      	cmp	r7, #0
 800e454:	d031      	beq.n	800e4ba <_scanf_chars+0xaa>
 800e456:	e022      	b.n	800e49e <_scanf_chars+0x8e>
 800e458:	2802      	cmp	r0, #2
 800e45a:	d120      	bne.n	800e49e <_scanf_chars+0x8e>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e464:	071b      	lsls	r3, r3, #28
 800e466:	d41a      	bmi.n	800e49e <_scanf_chars+0x8e>
 800e468:	6823      	ldr	r3, [r4, #0]
 800e46a:	3701      	adds	r7, #1
 800e46c:	06da      	lsls	r2, r3, #27
 800e46e:	bf5e      	ittt	pl
 800e470:	682b      	ldrpl	r3, [r5, #0]
 800e472:	781b      	ldrbpl	r3, [r3, #0]
 800e474:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e478:	682a      	ldr	r2, [r5, #0]
 800e47a:	686b      	ldr	r3, [r5, #4]
 800e47c:	3201      	adds	r2, #1
 800e47e:	602a      	str	r2, [r5, #0]
 800e480:	68a2      	ldr	r2, [r4, #8]
 800e482:	3b01      	subs	r3, #1
 800e484:	3a01      	subs	r2, #1
 800e486:	606b      	str	r3, [r5, #4]
 800e488:	60a2      	str	r2, [r4, #8]
 800e48a:	b142      	cbz	r2, 800e49e <_scanf_chars+0x8e>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dcd7      	bgt.n	800e440 <_scanf_chars+0x30>
 800e490:	4629      	mov	r1, r5
 800e492:	4640      	mov	r0, r8
 800e494:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e498:	4798      	blx	r3
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d0d0      	beq.n	800e440 <_scanf_chars+0x30>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	f013 0310 	ands.w	r3, r3, #16
 800e4a4:	d105      	bne.n	800e4b2 <_scanf_chars+0xa2>
 800e4a6:	68e2      	ldr	r2, [r4, #12]
 800e4a8:	3201      	adds	r2, #1
 800e4aa:	60e2      	str	r2, [r4, #12]
 800e4ac:	69a2      	ldr	r2, [r4, #24]
 800e4ae:	b102      	cbz	r2, 800e4b2 <_scanf_chars+0xa2>
 800e4b0:	7033      	strb	r3, [r6, #0]
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	6923      	ldr	r3, [r4, #16]
 800e4b6:	443b      	add	r3, r7
 800e4b8:	6123      	str	r3, [r4, #16]
 800e4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4be:	bf00      	nop
 800e4c0:	0800fba9 	.word	0x0800fba9

0800e4c4 <_scanf_i>:
 800e4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	4698      	mov	r8, r3
 800e4cc:	4b72      	ldr	r3, [pc, #456]	@ (800e698 <_scanf_i+0x1d4>)
 800e4ce:	b087      	sub	sp, #28
 800e4d0:	4682      	mov	sl, r0
 800e4d2:	4616      	mov	r6, r2
 800e4d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4d8:	ab03      	add	r3, sp, #12
 800e4da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e4de:	4b6f      	ldr	r3, [pc, #444]	@ (800e69c <_scanf_i+0x1d8>)
 800e4e0:	69a1      	ldr	r1, [r4, #24]
 800e4e2:	4a6f      	ldr	r2, [pc, #444]	@ (800e6a0 <_scanf_i+0x1dc>)
 800e4e4:	4627      	mov	r7, r4
 800e4e6:	2903      	cmp	r1, #3
 800e4e8:	bf08      	it	eq
 800e4ea:	461a      	moveq	r2, r3
 800e4ec:	68a3      	ldr	r3, [r4, #8]
 800e4ee:	9201      	str	r2, [sp, #4]
 800e4f0:	1e5a      	subs	r2, r3, #1
 800e4f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e4f6:	bf81      	itttt	hi
 800e4f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e4fc:	eb03 0905 	addhi.w	r9, r3, r5
 800e500:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e504:	60a3      	strhi	r3, [r4, #8]
 800e506:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e50a:	bf98      	it	ls
 800e50c:	f04f 0900 	movls.w	r9, #0
 800e510:	463d      	mov	r5, r7
 800e512:	f04f 0b00 	mov.w	fp, #0
 800e516:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e51a:	6023      	str	r3, [r4, #0]
 800e51c:	6831      	ldr	r1, [r6, #0]
 800e51e:	ab03      	add	r3, sp, #12
 800e520:	2202      	movs	r2, #2
 800e522:	7809      	ldrb	r1, [r1, #0]
 800e524:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e528:	f7fd f9c3 	bl	800b8b2 <memchr>
 800e52c:	b328      	cbz	r0, 800e57a <_scanf_i+0xb6>
 800e52e:	f1bb 0f01 	cmp.w	fp, #1
 800e532:	d159      	bne.n	800e5e8 <_scanf_i+0x124>
 800e534:	6862      	ldr	r2, [r4, #4]
 800e536:	b92a      	cbnz	r2, 800e544 <_scanf_i+0x80>
 800e538:	2108      	movs	r1, #8
 800e53a:	6822      	ldr	r2, [r4, #0]
 800e53c:	6061      	str	r1, [r4, #4]
 800e53e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e542:	6022      	str	r2, [r4, #0]
 800e544:	6822      	ldr	r2, [r4, #0]
 800e546:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e54a:	6022      	str	r2, [r4, #0]
 800e54c:	68a2      	ldr	r2, [r4, #8]
 800e54e:	1e51      	subs	r1, r2, #1
 800e550:	60a1      	str	r1, [r4, #8]
 800e552:	b192      	cbz	r2, 800e57a <_scanf_i+0xb6>
 800e554:	6832      	ldr	r2, [r6, #0]
 800e556:	1c51      	adds	r1, r2, #1
 800e558:	6031      	str	r1, [r6, #0]
 800e55a:	7812      	ldrb	r2, [r2, #0]
 800e55c:	f805 2b01 	strb.w	r2, [r5], #1
 800e560:	6872      	ldr	r2, [r6, #4]
 800e562:	3a01      	subs	r2, #1
 800e564:	2a00      	cmp	r2, #0
 800e566:	6072      	str	r2, [r6, #4]
 800e568:	dc07      	bgt.n	800e57a <_scanf_i+0xb6>
 800e56a:	4631      	mov	r1, r6
 800e56c:	4650      	mov	r0, sl
 800e56e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e572:	4790      	blx	r2
 800e574:	2800      	cmp	r0, #0
 800e576:	f040 8085 	bne.w	800e684 <_scanf_i+0x1c0>
 800e57a:	f10b 0b01 	add.w	fp, fp, #1
 800e57e:	f1bb 0f03 	cmp.w	fp, #3
 800e582:	d1cb      	bne.n	800e51c <_scanf_i+0x58>
 800e584:	6863      	ldr	r3, [r4, #4]
 800e586:	b90b      	cbnz	r3, 800e58c <_scanf_i+0xc8>
 800e588:	230a      	movs	r3, #10
 800e58a:	6063      	str	r3, [r4, #4]
 800e58c:	6863      	ldr	r3, [r4, #4]
 800e58e:	4945      	ldr	r1, [pc, #276]	@ (800e6a4 <_scanf_i+0x1e0>)
 800e590:	6960      	ldr	r0, [r4, #20]
 800e592:	1ac9      	subs	r1, r1, r3
 800e594:	f000 f930 	bl	800e7f8 <__sccl>
 800e598:	f04f 0b00 	mov.w	fp, #0
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d03d      	beq.n	800e620 <_scanf_i+0x15c>
 800e5a4:	6831      	ldr	r1, [r6, #0]
 800e5a6:	6960      	ldr	r0, [r4, #20]
 800e5a8:	f891 c000 	ldrb.w	ip, [r1]
 800e5ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d035      	beq.n	800e620 <_scanf_i+0x15c>
 800e5b4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e5b8:	d124      	bne.n	800e604 <_scanf_i+0x140>
 800e5ba:	0510      	lsls	r0, r2, #20
 800e5bc:	d522      	bpl.n	800e604 <_scanf_i+0x140>
 800e5be:	f10b 0b01 	add.w	fp, fp, #1
 800e5c2:	f1b9 0f00 	cmp.w	r9, #0
 800e5c6:	d003      	beq.n	800e5d0 <_scanf_i+0x10c>
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800e5ce:	60a3      	str	r3, [r4, #8]
 800e5d0:	6873      	ldr	r3, [r6, #4]
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	6073      	str	r3, [r6, #4]
 800e5d8:	dd1b      	ble.n	800e612 <_scanf_i+0x14e>
 800e5da:	6833      	ldr	r3, [r6, #0]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	6033      	str	r3, [r6, #0]
 800e5e0:	68a3      	ldr	r3, [r4, #8]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	60a3      	str	r3, [r4, #8]
 800e5e6:	e7d9      	b.n	800e59c <_scanf_i+0xd8>
 800e5e8:	f1bb 0f02 	cmp.w	fp, #2
 800e5ec:	d1ae      	bne.n	800e54c <_scanf_i+0x88>
 800e5ee:	6822      	ldr	r2, [r4, #0]
 800e5f0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e5f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e5f8:	d1c4      	bne.n	800e584 <_scanf_i+0xc0>
 800e5fa:	2110      	movs	r1, #16
 800e5fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e600:	6061      	str	r1, [r4, #4]
 800e602:	e7a2      	b.n	800e54a <_scanf_i+0x86>
 800e604:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e608:	6022      	str	r2, [r4, #0]
 800e60a:	780b      	ldrb	r3, [r1, #0]
 800e60c:	f805 3b01 	strb.w	r3, [r5], #1
 800e610:	e7de      	b.n	800e5d0 <_scanf_i+0x10c>
 800e612:	4631      	mov	r1, r6
 800e614:	4650      	mov	r0, sl
 800e616:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e61a:	4798      	blx	r3
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d0df      	beq.n	800e5e0 <_scanf_i+0x11c>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	05d9      	lsls	r1, r3, #23
 800e624:	d50d      	bpl.n	800e642 <_scanf_i+0x17e>
 800e626:	42bd      	cmp	r5, r7
 800e628:	d909      	bls.n	800e63e <_scanf_i+0x17a>
 800e62a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e62e:	4632      	mov	r2, r6
 800e630:	4650      	mov	r0, sl
 800e632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e636:	f105 39ff 	add.w	r9, r5, #4294967295
 800e63a:	4798      	blx	r3
 800e63c:	464d      	mov	r5, r9
 800e63e:	42bd      	cmp	r5, r7
 800e640:	d028      	beq.n	800e694 <_scanf_i+0x1d0>
 800e642:	6822      	ldr	r2, [r4, #0]
 800e644:	f012 0210 	ands.w	r2, r2, #16
 800e648:	d113      	bne.n	800e672 <_scanf_i+0x1ae>
 800e64a:	702a      	strb	r2, [r5, #0]
 800e64c:	4639      	mov	r1, r7
 800e64e:	6863      	ldr	r3, [r4, #4]
 800e650:	4650      	mov	r0, sl
 800e652:	9e01      	ldr	r6, [sp, #4]
 800e654:	47b0      	blx	r6
 800e656:	f8d8 3000 	ldr.w	r3, [r8]
 800e65a:	6821      	ldr	r1, [r4, #0]
 800e65c:	1d1a      	adds	r2, r3, #4
 800e65e:	f8c8 2000 	str.w	r2, [r8]
 800e662:	f011 0f20 	tst.w	r1, #32
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	d00f      	beq.n	800e68a <_scanf_i+0x1c6>
 800e66a:	6018      	str	r0, [r3, #0]
 800e66c:	68e3      	ldr	r3, [r4, #12]
 800e66e:	3301      	adds	r3, #1
 800e670:	60e3      	str	r3, [r4, #12]
 800e672:	2000      	movs	r0, #0
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	1bed      	subs	r5, r5, r7
 800e678:	445d      	add	r5, fp
 800e67a:	442b      	add	r3, r5
 800e67c:	6123      	str	r3, [r4, #16]
 800e67e:	b007      	add	sp, #28
 800e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e684:	f04f 0b00 	mov.w	fp, #0
 800e688:	e7ca      	b.n	800e620 <_scanf_i+0x15c>
 800e68a:	07ca      	lsls	r2, r1, #31
 800e68c:	bf4c      	ite	mi
 800e68e:	8018      	strhmi	r0, [r3, #0]
 800e690:	6018      	strpl	r0, [r3, #0]
 800e692:	e7eb      	b.n	800e66c <_scanf_i+0x1a8>
 800e694:	2001      	movs	r0, #1
 800e696:	e7f2      	b.n	800e67e <_scanf_i+0x1ba>
 800e698:	0800f800 	.word	0x0800f800
 800e69c:	0800ddc1 	.word	0x0800ddc1
 800e6a0:	0800f18d 	.word	0x0800f18d
 800e6a4:	0800f9a8 	.word	0x0800f9a8

0800e6a8 <__sflush_r>:
 800e6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	0716      	lsls	r6, r2, #28
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	d454      	bmi.n	800e760 <__sflush_r+0xb8>
 800e6b6:	684b      	ldr	r3, [r1, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	dc02      	bgt.n	800e6c2 <__sflush_r+0x1a>
 800e6bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	dd48      	ble.n	800e754 <__sflush_r+0xac>
 800e6c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6c4:	2e00      	cmp	r6, #0
 800e6c6:	d045      	beq.n	800e754 <__sflush_r+0xac>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6ce:	682f      	ldr	r7, [r5, #0]
 800e6d0:	6a21      	ldr	r1, [r4, #32]
 800e6d2:	602b      	str	r3, [r5, #0]
 800e6d4:	d030      	beq.n	800e738 <__sflush_r+0x90>
 800e6d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6d8:	89a3      	ldrh	r3, [r4, #12]
 800e6da:	0759      	lsls	r1, r3, #29
 800e6dc:	d505      	bpl.n	800e6ea <__sflush_r+0x42>
 800e6de:	6863      	ldr	r3, [r4, #4]
 800e6e0:	1ad2      	subs	r2, r2, r3
 800e6e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6e4:	b10b      	cbz	r3, 800e6ea <__sflush_r+0x42>
 800e6e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6e8:	1ad2      	subs	r2, r2, r3
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6f0:	6a21      	ldr	r1, [r4, #32]
 800e6f2:	47b0      	blx	r6
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	d106      	bne.n	800e708 <__sflush_r+0x60>
 800e6fa:	6829      	ldr	r1, [r5, #0]
 800e6fc:	291d      	cmp	r1, #29
 800e6fe:	d82b      	bhi.n	800e758 <__sflush_r+0xb0>
 800e700:	4a28      	ldr	r2, [pc, #160]	@ (800e7a4 <__sflush_r+0xfc>)
 800e702:	40ca      	lsrs	r2, r1
 800e704:	07d6      	lsls	r6, r2, #31
 800e706:	d527      	bpl.n	800e758 <__sflush_r+0xb0>
 800e708:	2200      	movs	r2, #0
 800e70a:	6062      	str	r2, [r4, #4]
 800e70c:	6922      	ldr	r2, [r4, #16]
 800e70e:	04d9      	lsls	r1, r3, #19
 800e710:	6022      	str	r2, [r4, #0]
 800e712:	d504      	bpl.n	800e71e <__sflush_r+0x76>
 800e714:	1c42      	adds	r2, r0, #1
 800e716:	d101      	bne.n	800e71c <__sflush_r+0x74>
 800e718:	682b      	ldr	r3, [r5, #0]
 800e71a:	b903      	cbnz	r3, 800e71e <__sflush_r+0x76>
 800e71c:	6560      	str	r0, [r4, #84]	@ 0x54
 800e71e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e720:	602f      	str	r7, [r5, #0]
 800e722:	b1b9      	cbz	r1, 800e754 <__sflush_r+0xac>
 800e724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e728:	4299      	cmp	r1, r3
 800e72a:	d002      	beq.n	800e732 <__sflush_r+0x8a>
 800e72c:	4628      	mov	r0, r5
 800e72e:	f7fd ff2f 	bl	800c590 <_free_r>
 800e732:	2300      	movs	r3, #0
 800e734:	6363      	str	r3, [r4, #52]	@ 0x34
 800e736:	e00d      	b.n	800e754 <__sflush_r+0xac>
 800e738:	2301      	movs	r3, #1
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b0      	blx	r6
 800e73e:	4602      	mov	r2, r0
 800e740:	1c50      	adds	r0, r2, #1
 800e742:	d1c9      	bne.n	800e6d8 <__sflush_r+0x30>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0c6      	beq.n	800e6d8 <__sflush_r+0x30>
 800e74a:	2b1d      	cmp	r3, #29
 800e74c:	d001      	beq.n	800e752 <__sflush_r+0xaa>
 800e74e:	2b16      	cmp	r3, #22
 800e750:	d11d      	bne.n	800e78e <__sflush_r+0xe6>
 800e752:	602f      	str	r7, [r5, #0]
 800e754:	2000      	movs	r0, #0
 800e756:	e021      	b.n	800e79c <__sflush_r+0xf4>
 800e758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e75c:	b21b      	sxth	r3, r3
 800e75e:	e01a      	b.n	800e796 <__sflush_r+0xee>
 800e760:	690f      	ldr	r7, [r1, #16]
 800e762:	2f00      	cmp	r7, #0
 800e764:	d0f6      	beq.n	800e754 <__sflush_r+0xac>
 800e766:	0793      	lsls	r3, r2, #30
 800e768:	bf18      	it	ne
 800e76a:	2300      	movne	r3, #0
 800e76c:	680e      	ldr	r6, [r1, #0]
 800e76e:	bf08      	it	eq
 800e770:	694b      	ldreq	r3, [r1, #20]
 800e772:	1bf6      	subs	r6, r6, r7
 800e774:	600f      	str	r7, [r1, #0]
 800e776:	608b      	str	r3, [r1, #8]
 800e778:	2e00      	cmp	r6, #0
 800e77a:	ddeb      	ble.n	800e754 <__sflush_r+0xac>
 800e77c:	4633      	mov	r3, r6
 800e77e:	463a      	mov	r2, r7
 800e780:	4628      	mov	r0, r5
 800e782:	6a21      	ldr	r1, [r4, #32]
 800e784:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e788:	47e0      	blx	ip
 800e78a:	2800      	cmp	r0, #0
 800e78c:	dc07      	bgt.n	800e79e <__sflush_r+0xf6>
 800e78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e796:	f04f 30ff 	mov.w	r0, #4294967295
 800e79a:	81a3      	strh	r3, [r4, #12]
 800e79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e79e:	4407      	add	r7, r0
 800e7a0:	1a36      	subs	r6, r6, r0
 800e7a2:	e7e9      	b.n	800e778 <__sflush_r+0xd0>
 800e7a4:	20400001 	.word	0x20400001

0800e7a8 <_fflush_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	690b      	ldr	r3, [r1, #16]
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	b913      	cbnz	r3, 800e7b8 <_fflush_r+0x10>
 800e7b2:	2500      	movs	r5, #0
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	b118      	cbz	r0, 800e7c2 <_fflush_r+0x1a>
 800e7ba:	6a03      	ldr	r3, [r0, #32]
 800e7bc:	b90b      	cbnz	r3, 800e7c2 <_fflush_r+0x1a>
 800e7be:	f7fc fee7 	bl	800b590 <__sinit>
 800e7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0f3      	beq.n	800e7b2 <_fflush_r+0xa>
 800e7ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7cc:	07d0      	lsls	r0, r2, #31
 800e7ce:	d404      	bmi.n	800e7da <_fflush_r+0x32>
 800e7d0:	0599      	lsls	r1, r3, #22
 800e7d2:	d402      	bmi.n	800e7da <_fflush_r+0x32>
 800e7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7d6:	f7fd f86a 	bl	800b8ae <__retarget_lock_acquire_recursive>
 800e7da:	4628      	mov	r0, r5
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7ff ff63 	bl	800e6a8 <__sflush_r>
 800e7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	07da      	lsls	r2, r3, #31
 800e7e8:	d4e4      	bmi.n	800e7b4 <_fflush_r+0xc>
 800e7ea:	89a3      	ldrh	r3, [r4, #12]
 800e7ec:	059b      	lsls	r3, r3, #22
 800e7ee:	d4e1      	bmi.n	800e7b4 <_fflush_r+0xc>
 800e7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7f2:	f7fd f85d 	bl	800b8b0 <__retarget_lock_release_recursive>
 800e7f6:	e7dd      	b.n	800e7b4 <_fflush_r+0xc>

0800e7f8 <__sccl>:
 800e7f8:	b570      	push	{r4, r5, r6, lr}
 800e7fa:	780b      	ldrb	r3, [r1, #0]
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	2b5e      	cmp	r3, #94	@ 0x5e
 800e800:	bf0b      	itete	eq
 800e802:	784b      	ldrbeq	r3, [r1, #1]
 800e804:	1c4a      	addne	r2, r1, #1
 800e806:	1c8a      	addeq	r2, r1, #2
 800e808:	2100      	movne	r1, #0
 800e80a:	bf08      	it	eq
 800e80c:	2101      	moveq	r1, #1
 800e80e:	3801      	subs	r0, #1
 800e810:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e814:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e818:	42a8      	cmp	r0, r5
 800e81a:	d1fb      	bne.n	800e814 <__sccl+0x1c>
 800e81c:	b90b      	cbnz	r3, 800e822 <__sccl+0x2a>
 800e81e:	1e50      	subs	r0, r2, #1
 800e820:	bd70      	pop	{r4, r5, r6, pc}
 800e822:	f081 0101 	eor.w	r1, r1, #1
 800e826:	4610      	mov	r0, r2
 800e828:	54e1      	strb	r1, [r4, r3]
 800e82a:	4602      	mov	r2, r0
 800e82c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e830:	2d2d      	cmp	r5, #45	@ 0x2d
 800e832:	d005      	beq.n	800e840 <__sccl+0x48>
 800e834:	2d5d      	cmp	r5, #93	@ 0x5d
 800e836:	d016      	beq.n	800e866 <__sccl+0x6e>
 800e838:	2d00      	cmp	r5, #0
 800e83a:	d0f1      	beq.n	800e820 <__sccl+0x28>
 800e83c:	462b      	mov	r3, r5
 800e83e:	e7f2      	b.n	800e826 <__sccl+0x2e>
 800e840:	7846      	ldrb	r6, [r0, #1]
 800e842:	2e5d      	cmp	r6, #93	@ 0x5d
 800e844:	d0fa      	beq.n	800e83c <__sccl+0x44>
 800e846:	42b3      	cmp	r3, r6
 800e848:	dcf8      	bgt.n	800e83c <__sccl+0x44>
 800e84a:	461a      	mov	r2, r3
 800e84c:	3002      	adds	r0, #2
 800e84e:	3201      	adds	r2, #1
 800e850:	4296      	cmp	r6, r2
 800e852:	54a1      	strb	r1, [r4, r2]
 800e854:	dcfb      	bgt.n	800e84e <__sccl+0x56>
 800e856:	1af2      	subs	r2, r6, r3
 800e858:	3a01      	subs	r2, #1
 800e85a:	42b3      	cmp	r3, r6
 800e85c:	bfa8      	it	ge
 800e85e:	2200      	movge	r2, #0
 800e860:	1c5d      	adds	r5, r3, #1
 800e862:	18ab      	adds	r3, r5, r2
 800e864:	e7e1      	b.n	800e82a <__sccl+0x32>
 800e866:	4610      	mov	r0, r2
 800e868:	e7da      	b.n	800e820 <__sccl+0x28>

0800e86a <__submore>:
 800e86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e86e:	460c      	mov	r4, r1
 800e870:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e876:	4299      	cmp	r1, r3
 800e878:	d11b      	bne.n	800e8b2 <__submore+0x48>
 800e87a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e87e:	f7fd fef9 	bl	800c674 <_malloc_r>
 800e882:	b918      	cbnz	r0, 800e88c <__submore+0x22>
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e890:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e892:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e896:	6360      	str	r0, [r4, #52]	@ 0x34
 800e898:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e89c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e8a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e8a4:	7043      	strb	r3, [r0, #1]
 800e8a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e8aa:	7003      	strb	r3, [r0, #0]
 800e8ac:	6020      	str	r0, [r4, #0]
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	e7ea      	b.n	800e888 <__submore+0x1e>
 800e8b2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e8b4:	0077      	lsls	r7, r6, #1
 800e8b6:	463a      	mov	r2, r7
 800e8b8:	f000 fbcb 	bl	800f052 <_realloc_r>
 800e8bc:	4605      	mov	r5, r0
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d0e0      	beq.n	800e884 <__submore+0x1a>
 800e8c2:	eb00 0806 	add.w	r8, r0, r6
 800e8c6:	4601      	mov	r1, r0
 800e8c8:	4632      	mov	r2, r6
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	f000 f830 	bl	800e930 <memcpy>
 800e8d0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e8d4:	f8c4 8000 	str.w	r8, [r4]
 800e8d8:	e7e9      	b.n	800e8ae <__submore+0x44>

0800e8da <memmove>:
 800e8da:	4288      	cmp	r0, r1
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	eb01 0402 	add.w	r4, r1, r2
 800e8e2:	d902      	bls.n	800e8ea <memmove+0x10>
 800e8e4:	4284      	cmp	r4, r0
 800e8e6:	4623      	mov	r3, r4
 800e8e8:	d807      	bhi.n	800e8fa <memmove+0x20>
 800e8ea:	1e43      	subs	r3, r0, #1
 800e8ec:	42a1      	cmp	r1, r4
 800e8ee:	d008      	beq.n	800e902 <memmove+0x28>
 800e8f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8f8:	e7f8      	b.n	800e8ec <memmove+0x12>
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	4402      	add	r2, r0
 800e8fe:	428a      	cmp	r2, r1
 800e900:	d100      	bne.n	800e904 <memmove+0x2a>
 800e902:	bd10      	pop	{r4, pc}
 800e904:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e908:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e90c:	e7f7      	b.n	800e8fe <memmove+0x24>
	...

0800e910 <_sbrk_r>:
 800e910:	b538      	push	{r3, r4, r5, lr}
 800e912:	2300      	movs	r3, #0
 800e914:	4d05      	ldr	r5, [pc, #20]	@ (800e92c <_sbrk_r+0x1c>)
 800e916:	4604      	mov	r4, r0
 800e918:	4608      	mov	r0, r1
 800e91a:	602b      	str	r3, [r5, #0]
 800e91c:	f7f3 f8de 	bl	8001adc <_sbrk>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	d102      	bne.n	800e92a <_sbrk_r+0x1a>
 800e924:	682b      	ldr	r3, [r5, #0]
 800e926:	b103      	cbz	r3, 800e92a <_sbrk_r+0x1a>
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	200017a8 	.word	0x200017a8

0800e930 <memcpy>:
 800e930:	440a      	add	r2, r1
 800e932:	4291      	cmp	r1, r2
 800e934:	f100 33ff 	add.w	r3, r0, #4294967295
 800e938:	d100      	bne.n	800e93c <memcpy+0xc>
 800e93a:	4770      	bx	lr
 800e93c:	b510      	push	{r4, lr}
 800e93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e942:	4291      	cmp	r1, r2
 800e944:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e948:	d1f9      	bne.n	800e93e <memcpy+0xe>
 800e94a:	bd10      	pop	{r4, pc}

0800e94c <nan>:
 800e94c:	2000      	movs	r0, #0
 800e94e:	4901      	ldr	r1, [pc, #4]	@ (800e954 <nan+0x8>)
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	7ff80000 	.word	0x7ff80000

0800e958 <__assert_func>:
 800e958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e95a:	4614      	mov	r4, r2
 800e95c:	461a      	mov	r2, r3
 800e95e:	4b09      	ldr	r3, [pc, #36]	@ (800e984 <__assert_func+0x2c>)
 800e960:	4605      	mov	r5, r0
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68d8      	ldr	r0, [r3, #12]
 800e966:	b14c      	cbz	r4, 800e97c <__assert_func+0x24>
 800e968:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <__assert_func+0x30>)
 800e96a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e96e:	9100      	str	r1, [sp, #0]
 800e970:	462b      	mov	r3, r5
 800e972:	4906      	ldr	r1, [pc, #24]	@ (800e98c <__assert_func+0x34>)
 800e974:	f000 fc1a 	bl	800f1ac <fiprintf>
 800e978:	f000 fc2a 	bl	800f1d0 <abort>
 800e97c:	4b04      	ldr	r3, [pc, #16]	@ (800e990 <__assert_func+0x38>)
 800e97e:	461c      	mov	r4, r3
 800e980:	e7f3      	b.n	800e96a <__assert_func+0x12>
 800e982:	bf00      	nop
 800e984:	20000188 	.word	0x20000188
 800e988:	0800f9bb 	.word	0x0800f9bb
 800e98c:	0800f9c8 	.word	0x0800f9c8
 800e990:	0800f9f6 	.word	0x0800f9f6

0800e994 <_calloc_r>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	fba1 5402 	umull	r5, r4, r1, r2
 800e99a:	b934      	cbnz	r4, 800e9aa <_calloc_r+0x16>
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7fd fe69 	bl	800c674 <_malloc_r>
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	b928      	cbnz	r0, 800e9b2 <_calloc_r+0x1e>
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	bd70      	pop	{r4, r5, r6, pc}
 800e9aa:	220c      	movs	r2, #12
 800e9ac:	2600      	movs	r6, #0
 800e9ae:	6002      	str	r2, [r0, #0]
 800e9b0:	e7f9      	b.n	800e9a6 <_calloc_r+0x12>
 800e9b2:	462a      	mov	r2, r5
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	f7fc feea 	bl	800b78e <memset>
 800e9ba:	e7f4      	b.n	800e9a6 <_calloc_r+0x12>

0800e9bc <rshift>:
 800e9bc:	6903      	ldr	r3, [r0, #16]
 800e9be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e9c6:	f100 0414 	add.w	r4, r0, #20
 800e9ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9ce:	dd46      	ble.n	800ea5e <rshift+0xa2>
 800e9d0:	f011 011f 	ands.w	r1, r1, #31
 800e9d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9dc:	d10c      	bne.n	800e9f8 <rshift+0x3c>
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f100 0710 	add.w	r7, r0, #16
 800e9e4:	42b1      	cmp	r1, r6
 800e9e6:	d335      	bcc.n	800ea54 <rshift+0x98>
 800e9e8:	1a9b      	subs	r3, r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	1eea      	subs	r2, r5, #3
 800e9ee:	4296      	cmp	r6, r2
 800e9f0:	bf38      	it	cc
 800e9f2:	2300      	movcc	r3, #0
 800e9f4:	4423      	add	r3, r4
 800e9f6:	e015      	b.n	800ea24 <rshift+0x68>
 800e9f8:	46a1      	mov	r9, r4
 800e9fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9fe:	f1c1 0820 	rsb	r8, r1, #32
 800ea02:	40cf      	lsrs	r7, r1
 800ea04:	f105 0e04 	add.w	lr, r5, #4
 800ea08:	4576      	cmp	r6, lr
 800ea0a:	46f4      	mov	ip, lr
 800ea0c:	d816      	bhi.n	800ea3c <rshift+0x80>
 800ea0e:	1a9a      	subs	r2, r3, r2
 800ea10:	0092      	lsls	r2, r2, #2
 800ea12:	3a04      	subs	r2, #4
 800ea14:	3501      	adds	r5, #1
 800ea16:	42ae      	cmp	r6, r5
 800ea18:	bf38      	it	cc
 800ea1a:	2200      	movcc	r2, #0
 800ea1c:	18a3      	adds	r3, r4, r2
 800ea1e:	50a7      	str	r7, [r4, r2]
 800ea20:	b107      	cbz	r7, 800ea24 <rshift+0x68>
 800ea22:	3304      	adds	r3, #4
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	eba3 0204 	sub.w	r2, r3, r4
 800ea2a:	bf08      	it	eq
 800ea2c:	2300      	moveq	r3, #0
 800ea2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea32:	6102      	str	r2, [r0, #16]
 800ea34:	bf08      	it	eq
 800ea36:	6143      	streq	r3, [r0, #20]
 800ea38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea3c:	f8dc c000 	ldr.w	ip, [ip]
 800ea40:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea44:	ea4c 0707 	orr.w	r7, ip, r7
 800ea48:	f849 7b04 	str.w	r7, [r9], #4
 800ea4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea50:	40cf      	lsrs	r7, r1
 800ea52:	e7d9      	b.n	800ea08 <rshift+0x4c>
 800ea54:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea58:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea5c:	e7c2      	b.n	800e9e4 <rshift+0x28>
 800ea5e:	4623      	mov	r3, r4
 800ea60:	e7e0      	b.n	800ea24 <rshift+0x68>

0800ea62 <__hexdig_fun>:
 800ea62:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ea66:	2b09      	cmp	r3, #9
 800ea68:	d802      	bhi.n	800ea70 <__hexdig_fun+0xe>
 800ea6a:	3820      	subs	r0, #32
 800ea6c:	b2c0      	uxtb	r0, r0
 800ea6e:	4770      	bx	lr
 800ea70:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ea74:	2b05      	cmp	r3, #5
 800ea76:	d801      	bhi.n	800ea7c <__hexdig_fun+0x1a>
 800ea78:	3847      	subs	r0, #71	@ 0x47
 800ea7a:	e7f7      	b.n	800ea6c <__hexdig_fun+0xa>
 800ea7c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ea80:	2b05      	cmp	r3, #5
 800ea82:	d801      	bhi.n	800ea88 <__hexdig_fun+0x26>
 800ea84:	3827      	subs	r0, #39	@ 0x27
 800ea86:	e7f1      	b.n	800ea6c <__hexdig_fun+0xa>
 800ea88:	2000      	movs	r0, #0
 800ea8a:	4770      	bx	lr

0800ea8c <__gethex>:
 800ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea90:	468a      	mov	sl, r1
 800ea92:	4690      	mov	r8, r2
 800ea94:	b085      	sub	sp, #20
 800ea96:	9302      	str	r3, [sp, #8]
 800ea98:	680b      	ldr	r3, [r1, #0]
 800ea9a:	9001      	str	r0, [sp, #4]
 800ea9c:	1c9c      	adds	r4, r3, #2
 800ea9e:	46a1      	mov	r9, r4
 800eaa0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eaa4:	2830      	cmp	r0, #48	@ 0x30
 800eaa6:	d0fa      	beq.n	800ea9e <__gethex+0x12>
 800eaa8:	eba9 0303 	sub.w	r3, r9, r3
 800eaac:	f1a3 0b02 	sub.w	fp, r3, #2
 800eab0:	f7ff ffd7 	bl	800ea62 <__hexdig_fun>
 800eab4:	4605      	mov	r5, r0
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d168      	bne.n	800eb8c <__gethex+0x100>
 800eaba:	2201      	movs	r2, #1
 800eabc:	4648      	mov	r0, r9
 800eabe:	499f      	ldr	r1, [pc, #636]	@ (800ed3c <__gethex+0x2b0>)
 800eac0:	f7fc fe6d 	bl	800b79e <strncmp>
 800eac4:	4607      	mov	r7, r0
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d167      	bne.n	800eb9a <__gethex+0x10e>
 800eaca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eace:	4626      	mov	r6, r4
 800ead0:	f7ff ffc7 	bl	800ea62 <__hexdig_fun>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d062      	beq.n	800eb9e <__gethex+0x112>
 800ead8:	4623      	mov	r3, r4
 800eada:	7818      	ldrb	r0, [r3, #0]
 800eadc:	4699      	mov	r9, r3
 800eade:	2830      	cmp	r0, #48	@ 0x30
 800eae0:	f103 0301 	add.w	r3, r3, #1
 800eae4:	d0f9      	beq.n	800eada <__gethex+0x4e>
 800eae6:	f7ff ffbc 	bl	800ea62 <__hexdig_fun>
 800eaea:	fab0 f580 	clz	r5, r0
 800eaee:	f04f 0b01 	mov.w	fp, #1
 800eaf2:	096d      	lsrs	r5, r5, #5
 800eaf4:	464a      	mov	r2, r9
 800eaf6:	4616      	mov	r6, r2
 800eaf8:	7830      	ldrb	r0, [r6, #0]
 800eafa:	3201      	adds	r2, #1
 800eafc:	f7ff ffb1 	bl	800ea62 <__hexdig_fun>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d1f8      	bne.n	800eaf6 <__gethex+0x6a>
 800eb04:	2201      	movs	r2, #1
 800eb06:	4630      	mov	r0, r6
 800eb08:	498c      	ldr	r1, [pc, #560]	@ (800ed3c <__gethex+0x2b0>)
 800eb0a:	f7fc fe48 	bl	800b79e <strncmp>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d13f      	bne.n	800eb92 <__gethex+0x106>
 800eb12:	b944      	cbnz	r4, 800eb26 <__gethex+0x9a>
 800eb14:	1c74      	adds	r4, r6, #1
 800eb16:	4622      	mov	r2, r4
 800eb18:	4616      	mov	r6, r2
 800eb1a:	7830      	ldrb	r0, [r6, #0]
 800eb1c:	3201      	adds	r2, #1
 800eb1e:	f7ff ffa0 	bl	800ea62 <__hexdig_fun>
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d1f8      	bne.n	800eb18 <__gethex+0x8c>
 800eb26:	1ba4      	subs	r4, r4, r6
 800eb28:	00a7      	lsls	r7, r4, #2
 800eb2a:	7833      	ldrb	r3, [r6, #0]
 800eb2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb30:	2b50      	cmp	r3, #80	@ 0x50
 800eb32:	d13e      	bne.n	800ebb2 <__gethex+0x126>
 800eb34:	7873      	ldrb	r3, [r6, #1]
 800eb36:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb38:	d033      	beq.n	800eba2 <__gethex+0x116>
 800eb3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb3c:	d034      	beq.n	800eba8 <__gethex+0x11c>
 800eb3e:	2400      	movs	r4, #0
 800eb40:	1c71      	adds	r1, r6, #1
 800eb42:	7808      	ldrb	r0, [r1, #0]
 800eb44:	f7ff ff8d 	bl	800ea62 <__hexdig_fun>
 800eb48:	1e43      	subs	r3, r0, #1
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b18      	cmp	r3, #24
 800eb4e:	d830      	bhi.n	800ebb2 <__gethex+0x126>
 800eb50:	f1a0 0210 	sub.w	r2, r0, #16
 800eb54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb58:	f7ff ff83 	bl	800ea62 <__hexdig_fun>
 800eb5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb60:	fa5f fc8c 	uxtb.w	ip, ip
 800eb64:	f1bc 0f18 	cmp.w	ip, #24
 800eb68:	f04f 030a 	mov.w	r3, #10
 800eb6c:	d91e      	bls.n	800ebac <__gethex+0x120>
 800eb6e:	b104      	cbz	r4, 800eb72 <__gethex+0xe6>
 800eb70:	4252      	negs	r2, r2
 800eb72:	4417      	add	r7, r2
 800eb74:	f8ca 1000 	str.w	r1, [sl]
 800eb78:	b1ed      	cbz	r5, 800ebb6 <__gethex+0x12a>
 800eb7a:	f1bb 0f00 	cmp.w	fp, #0
 800eb7e:	bf0c      	ite	eq
 800eb80:	2506      	moveq	r5, #6
 800eb82:	2500      	movne	r5, #0
 800eb84:	4628      	mov	r0, r5
 800eb86:	b005      	add	sp, #20
 800eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	2500      	movs	r5, #0
 800eb8e:	462c      	mov	r4, r5
 800eb90:	e7b0      	b.n	800eaf4 <__gethex+0x68>
 800eb92:	2c00      	cmp	r4, #0
 800eb94:	d1c7      	bne.n	800eb26 <__gethex+0x9a>
 800eb96:	4627      	mov	r7, r4
 800eb98:	e7c7      	b.n	800eb2a <__gethex+0x9e>
 800eb9a:	464e      	mov	r6, r9
 800eb9c:	462f      	mov	r7, r5
 800eb9e:	2501      	movs	r5, #1
 800eba0:	e7c3      	b.n	800eb2a <__gethex+0x9e>
 800eba2:	2400      	movs	r4, #0
 800eba4:	1cb1      	adds	r1, r6, #2
 800eba6:	e7cc      	b.n	800eb42 <__gethex+0xb6>
 800eba8:	2401      	movs	r4, #1
 800ebaa:	e7fb      	b.n	800eba4 <__gethex+0x118>
 800ebac:	fb03 0002 	mla	r0, r3, r2, r0
 800ebb0:	e7ce      	b.n	800eb50 <__gethex+0xc4>
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	e7de      	b.n	800eb74 <__gethex+0xe8>
 800ebb6:	4629      	mov	r1, r5
 800ebb8:	eba6 0309 	sub.w	r3, r6, r9
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	2b07      	cmp	r3, #7
 800ebc0:	dc0a      	bgt.n	800ebd8 <__gethex+0x14c>
 800ebc2:	9801      	ldr	r0, [sp, #4]
 800ebc4:	f7fd fde2 	bl	800c78c <_Balloc>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	b940      	cbnz	r0, 800ebde <__gethex+0x152>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	21e4      	movs	r1, #228	@ 0xe4
 800ebd0:	4b5b      	ldr	r3, [pc, #364]	@ (800ed40 <__gethex+0x2b4>)
 800ebd2:	485c      	ldr	r0, [pc, #368]	@ (800ed44 <__gethex+0x2b8>)
 800ebd4:	f7ff fec0 	bl	800e958 <__assert_func>
 800ebd8:	3101      	adds	r1, #1
 800ebda:	105b      	asrs	r3, r3, #1
 800ebdc:	e7ef      	b.n	800ebbe <__gethex+0x132>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f100 0a14 	add.w	sl, r0, #20
 800ebe4:	4655      	mov	r5, sl
 800ebe6:	469b      	mov	fp, r3
 800ebe8:	45b1      	cmp	r9, r6
 800ebea:	d337      	bcc.n	800ec5c <__gethex+0x1d0>
 800ebec:	f845 bb04 	str.w	fp, [r5], #4
 800ebf0:	eba5 050a 	sub.w	r5, r5, sl
 800ebf4:	10ad      	asrs	r5, r5, #2
 800ebf6:	6125      	str	r5, [r4, #16]
 800ebf8:	4658      	mov	r0, fp
 800ebfa:	f7fd feb9 	bl	800c970 <__hi0bits>
 800ebfe:	016d      	lsls	r5, r5, #5
 800ec00:	f8d8 6000 	ldr.w	r6, [r8]
 800ec04:	1a2d      	subs	r5, r5, r0
 800ec06:	42b5      	cmp	r5, r6
 800ec08:	dd54      	ble.n	800ecb4 <__gethex+0x228>
 800ec0a:	1bad      	subs	r5, r5, r6
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f7fe fa3b 	bl	800d08a <__any_on>
 800ec14:	4681      	mov	r9, r0
 800ec16:	b178      	cbz	r0, 800ec38 <__gethex+0x1ac>
 800ec18:	f04f 0901 	mov.w	r9, #1
 800ec1c:	1e6b      	subs	r3, r5, #1
 800ec1e:	1159      	asrs	r1, r3, #5
 800ec20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ec24:	f003 021f 	and.w	r2, r3, #31
 800ec28:	fa09 f202 	lsl.w	r2, r9, r2
 800ec2c:	420a      	tst	r2, r1
 800ec2e:	d003      	beq.n	800ec38 <__gethex+0x1ac>
 800ec30:	454b      	cmp	r3, r9
 800ec32:	dc36      	bgt.n	800eca2 <__gethex+0x216>
 800ec34:	f04f 0902 	mov.w	r9, #2
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f7ff febe 	bl	800e9bc <rshift>
 800ec40:	442f      	add	r7, r5
 800ec42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec46:	42bb      	cmp	r3, r7
 800ec48:	da42      	bge.n	800ecd0 <__gethex+0x244>
 800ec4a:	4621      	mov	r1, r4
 800ec4c:	9801      	ldr	r0, [sp, #4]
 800ec4e:	f7fd fddd 	bl	800c80c <_Bfree>
 800ec52:	2300      	movs	r3, #0
 800ec54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec56:	25a3      	movs	r5, #163	@ 0xa3
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	e793      	b.n	800eb84 <__gethex+0xf8>
 800ec5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ec60:	2a2e      	cmp	r2, #46	@ 0x2e
 800ec62:	d012      	beq.n	800ec8a <__gethex+0x1fe>
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	d104      	bne.n	800ec72 <__gethex+0x1e6>
 800ec68:	f845 bb04 	str.w	fp, [r5], #4
 800ec6c:	f04f 0b00 	mov.w	fp, #0
 800ec70:	465b      	mov	r3, fp
 800ec72:	7830      	ldrb	r0, [r6, #0]
 800ec74:	9303      	str	r3, [sp, #12]
 800ec76:	f7ff fef4 	bl	800ea62 <__hexdig_fun>
 800ec7a:	9b03      	ldr	r3, [sp, #12]
 800ec7c:	f000 000f 	and.w	r0, r0, #15
 800ec80:	4098      	lsls	r0, r3
 800ec82:	ea4b 0b00 	orr.w	fp, fp, r0
 800ec86:	3304      	adds	r3, #4
 800ec88:	e7ae      	b.n	800ebe8 <__gethex+0x15c>
 800ec8a:	45b1      	cmp	r9, r6
 800ec8c:	d8ea      	bhi.n	800ec64 <__gethex+0x1d8>
 800ec8e:	2201      	movs	r2, #1
 800ec90:	4630      	mov	r0, r6
 800ec92:	492a      	ldr	r1, [pc, #168]	@ (800ed3c <__gethex+0x2b0>)
 800ec94:	9303      	str	r3, [sp, #12]
 800ec96:	f7fc fd82 	bl	800b79e <strncmp>
 800ec9a:	9b03      	ldr	r3, [sp, #12]
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d1e1      	bne.n	800ec64 <__gethex+0x1d8>
 800eca0:	e7a2      	b.n	800ebe8 <__gethex+0x15c>
 800eca2:	4620      	mov	r0, r4
 800eca4:	1ea9      	subs	r1, r5, #2
 800eca6:	f7fe f9f0 	bl	800d08a <__any_on>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d0c2      	beq.n	800ec34 <__gethex+0x1a8>
 800ecae:	f04f 0903 	mov.w	r9, #3
 800ecb2:	e7c1      	b.n	800ec38 <__gethex+0x1ac>
 800ecb4:	da09      	bge.n	800ecca <__gethex+0x23e>
 800ecb6:	1b75      	subs	r5, r6, r5
 800ecb8:	4621      	mov	r1, r4
 800ecba:	462a      	mov	r2, r5
 800ecbc:	9801      	ldr	r0, [sp, #4]
 800ecbe:	f7fd ffb5 	bl	800cc2c <__lshift>
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	1b7f      	subs	r7, r7, r5
 800ecc6:	f100 0a14 	add.w	sl, r0, #20
 800ecca:	f04f 0900 	mov.w	r9, #0
 800ecce:	e7b8      	b.n	800ec42 <__gethex+0x1b6>
 800ecd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ecd4:	42bd      	cmp	r5, r7
 800ecd6:	dd6f      	ble.n	800edb8 <__gethex+0x32c>
 800ecd8:	1bed      	subs	r5, r5, r7
 800ecda:	42ae      	cmp	r6, r5
 800ecdc:	dc34      	bgt.n	800ed48 <__gethex+0x2bc>
 800ecde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d022      	beq.n	800ed2c <__gethex+0x2a0>
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d024      	beq.n	800ed34 <__gethex+0x2a8>
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d115      	bne.n	800ed1a <__gethex+0x28e>
 800ecee:	42ae      	cmp	r6, r5
 800ecf0:	d113      	bne.n	800ed1a <__gethex+0x28e>
 800ecf2:	2e01      	cmp	r6, #1
 800ecf4:	d10b      	bne.n	800ed0e <__gethex+0x282>
 800ecf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ecfa:	9a02      	ldr	r2, [sp, #8]
 800ecfc:	2562      	movs	r5, #98	@ 0x62
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	2301      	movs	r3, #1
 800ed02:	6123      	str	r3, [r4, #16]
 800ed04:	f8ca 3000 	str.w	r3, [sl]
 800ed08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed0a:	601c      	str	r4, [r3, #0]
 800ed0c:	e73a      	b.n	800eb84 <__gethex+0xf8>
 800ed0e:	4620      	mov	r0, r4
 800ed10:	1e71      	subs	r1, r6, #1
 800ed12:	f7fe f9ba 	bl	800d08a <__any_on>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d1ed      	bne.n	800ecf6 <__gethex+0x26a>
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	9801      	ldr	r0, [sp, #4]
 800ed1e:	f7fd fd75 	bl	800c80c <_Bfree>
 800ed22:	2300      	movs	r3, #0
 800ed24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed26:	2550      	movs	r5, #80	@ 0x50
 800ed28:	6013      	str	r3, [r2, #0]
 800ed2a:	e72b      	b.n	800eb84 <__gethex+0xf8>
 800ed2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1f3      	bne.n	800ed1a <__gethex+0x28e>
 800ed32:	e7e0      	b.n	800ecf6 <__gethex+0x26a>
 800ed34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1dd      	bne.n	800ecf6 <__gethex+0x26a>
 800ed3a:	e7ee      	b.n	800ed1a <__gethex+0x28e>
 800ed3c:	0800f985 	.word	0x0800f985
 800ed40:	0800f91b 	.word	0x0800f91b
 800ed44:	0800f9f7 	.word	0x0800f9f7
 800ed48:	1e6f      	subs	r7, r5, #1
 800ed4a:	f1b9 0f00 	cmp.w	r9, #0
 800ed4e:	d130      	bne.n	800edb2 <__gethex+0x326>
 800ed50:	b127      	cbz	r7, 800ed5c <__gethex+0x2d0>
 800ed52:	4639      	mov	r1, r7
 800ed54:	4620      	mov	r0, r4
 800ed56:	f7fe f998 	bl	800d08a <__any_on>
 800ed5a:	4681      	mov	r9, r0
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4629      	mov	r1, r5
 800ed60:	1b76      	subs	r6, r6, r5
 800ed62:	2502      	movs	r5, #2
 800ed64:	117a      	asrs	r2, r7, #5
 800ed66:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed6a:	f007 071f 	and.w	r7, r7, #31
 800ed6e:	40bb      	lsls	r3, r7
 800ed70:	4213      	tst	r3, r2
 800ed72:	4620      	mov	r0, r4
 800ed74:	bf18      	it	ne
 800ed76:	f049 0902 	orrne.w	r9, r9, #2
 800ed7a:	f7ff fe1f 	bl	800e9bc <rshift>
 800ed7e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ed82:	f1b9 0f00 	cmp.w	r9, #0
 800ed86:	d047      	beq.n	800ee18 <__gethex+0x38c>
 800ed88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d015      	beq.n	800edbc <__gethex+0x330>
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d017      	beq.n	800edc4 <__gethex+0x338>
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d109      	bne.n	800edac <__gethex+0x320>
 800ed98:	f019 0f02 	tst.w	r9, #2
 800ed9c:	d006      	beq.n	800edac <__gethex+0x320>
 800ed9e:	f8da 3000 	ldr.w	r3, [sl]
 800eda2:	ea49 0903 	orr.w	r9, r9, r3
 800eda6:	f019 0f01 	tst.w	r9, #1
 800edaa:	d10e      	bne.n	800edca <__gethex+0x33e>
 800edac:	f045 0510 	orr.w	r5, r5, #16
 800edb0:	e032      	b.n	800ee18 <__gethex+0x38c>
 800edb2:	f04f 0901 	mov.w	r9, #1
 800edb6:	e7d1      	b.n	800ed5c <__gethex+0x2d0>
 800edb8:	2501      	movs	r5, #1
 800edba:	e7e2      	b.n	800ed82 <__gethex+0x2f6>
 800edbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edbe:	f1c3 0301 	rsb	r3, r3, #1
 800edc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800edc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0f0      	beq.n	800edac <__gethex+0x320>
 800edca:	f04f 0c00 	mov.w	ip, #0
 800edce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800edd2:	f104 0314 	add.w	r3, r4, #20
 800edd6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800edda:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800edde:	4618      	mov	r0, r3
 800ede0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ede4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ede8:	d01b      	beq.n	800ee22 <__gethex+0x396>
 800edea:	3201      	adds	r2, #1
 800edec:	6002      	str	r2, [r0, #0]
 800edee:	2d02      	cmp	r5, #2
 800edf0:	f104 0314 	add.w	r3, r4, #20
 800edf4:	d13c      	bne.n	800ee70 <__gethex+0x3e4>
 800edf6:	f8d8 2000 	ldr.w	r2, [r8]
 800edfa:	3a01      	subs	r2, #1
 800edfc:	42b2      	cmp	r2, r6
 800edfe:	d109      	bne.n	800ee14 <__gethex+0x388>
 800ee00:	2201      	movs	r2, #1
 800ee02:	1171      	asrs	r1, r6, #5
 800ee04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee08:	f006 061f 	and.w	r6, r6, #31
 800ee0c:	fa02 f606 	lsl.w	r6, r2, r6
 800ee10:	421e      	tst	r6, r3
 800ee12:	d13a      	bne.n	800ee8a <__gethex+0x3fe>
 800ee14:	f045 0520 	orr.w	r5, r5, #32
 800ee18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee1a:	601c      	str	r4, [r3, #0]
 800ee1c:	9b02      	ldr	r3, [sp, #8]
 800ee1e:	601f      	str	r7, [r3, #0]
 800ee20:	e6b0      	b.n	800eb84 <__gethex+0xf8>
 800ee22:	4299      	cmp	r1, r3
 800ee24:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee28:	d8d9      	bhi.n	800edde <__gethex+0x352>
 800ee2a:	68a3      	ldr	r3, [r4, #8]
 800ee2c:	459b      	cmp	fp, r3
 800ee2e:	db17      	blt.n	800ee60 <__gethex+0x3d4>
 800ee30:	6861      	ldr	r1, [r4, #4]
 800ee32:	9801      	ldr	r0, [sp, #4]
 800ee34:	3101      	adds	r1, #1
 800ee36:	f7fd fca9 	bl	800c78c <_Balloc>
 800ee3a:	4681      	mov	r9, r0
 800ee3c:	b918      	cbnz	r0, 800ee46 <__gethex+0x3ba>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	2184      	movs	r1, #132	@ 0x84
 800ee42:	4b19      	ldr	r3, [pc, #100]	@ (800eea8 <__gethex+0x41c>)
 800ee44:	e6c5      	b.n	800ebd2 <__gethex+0x146>
 800ee46:	6922      	ldr	r2, [r4, #16]
 800ee48:	f104 010c 	add.w	r1, r4, #12
 800ee4c:	3202      	adds	r2, #2
 800ee4e:	0092      	lsls	r2, r2, #2
 800ee50:	300c      	adds	r0, #12
 800ee52:	f7ff fd6d 	bl	800e930 <memcpy>
 800ee56:	4621      	mov	r1, r4
 800ee58:	9801      	ldr	r0, [sp, #4]
 800ee5a:	f7fd fcd7 	bl	800c80c <_Bfree>
 800ee5e:	464c      	mov	r4, r9
 800ee60:	6923      	ldr	r3, [r4, #16]
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	6122      	str	r2, [r4, #16]
 800ee66:	2201      	movs	r2, #1
 800ee68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee6c:	615a      	str	r2, [r3, #20]
 800ee6e:	e7be      	b.n	800edee <__gethex+0x362>
 800ee70:	6922      	ldr	r2, [r4, #16]
 800ee72:	455a      	cmp	r2, fp
 800ee74:	dd0b      	ble.n	800ee8e <__gethex+0x402>
 800ee76:	2101      	movs	r1, #1
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff fd9f 	bl	800e9bc <rshift>
 800ee7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee82:	3701      	adds	r7, #1
 800ee84:	42bb      	cmp	r3, r7
 800ee86:	f6ff aee0 	blt.w	800ec4a <__gethex+0x1be>
 800ee8a:	2501      	movs	r5, #1
 800ee8c:	e7c2      	b.n	800ee14 <__gethex+0x388>
 800ee8e:	f016 061f 	ands.w	r6, r6, #31
 800ee92:	d0fa      	beq.n	800ee8a <__gethex+0x3fe>
 800ee94:	4453      	add	r3, sl
 800ee96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ee9a:	f7fd fd69 	bl	800c970 <__hi0bits>
 800ee9e:	f1c6 0620 	rsb	r6, r6, #32
 800eea2:	42b0      	cmp	r0, r6
 800eea4:	dbe7      	blt.n	800ee76 <__gethex+0x3ea>
 800eea6:	e7f0      	b.n	800ee8a <__gethex+0x3fe>
 800eea8:	0800f91b 	.word	0x0800f91b

0800eeac <L_shift>:
 800eeac:	f1c2 0208 	rsb	r2, r2, #8
 800eeb0:	0092      	lsls	r2, r2, #2
 800eeb2:	b570      	push	{r4, r5, r6, lr}
 800eeb4:	f1c2 0620 	rsb	r6, r2, #32
 800eeb8:	6843      	ldr	r3, [r0, #4]
 800eeba:	6804      	ldr	r4, [r0, #0]
 800eebc:	fa03 f506 	lsl.w	r5, r3, r6
 800eec0:	432c      	orrs	r4, r5
 800eec2:	40d3      	lsrs	r3, r2
 800eec4:	6004      	str	r4, [r0, #0]
 800eec6:	f840 3f04 	str.w	r3, [r0, #4]!
 800eeca:	4288      	cmp	r0, r1
 800eecc:	d3f4      	bcc.n	800eeb8 <L_shift+0xc>
 800eece:	bd70      	pop	{r4, r5, r6, pc}

0800eed0 <__match>:
 800eed0:	b530      	push	{r4, r5, lr}
 800eed2:	6803      	ldr	r3, [r0, #0]
 800eed4:	3301      	adds	r3, #1
 800eed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeda:	b914      	cbnz	r4, 800eee2 <__match+0x12>
 800eedc:	6003      	str	r3, [r0, #0]
 800eede:	2001      	movs	r0, #1
 800eee0:	bd30      	pop	{r4, r5, pc}
 800eee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eee6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eeea:	2d19      	cmp	r5, #25
 800eeec:	bf98      	it	ls
 800eeee:	3220      	addls	r2, #32
 800eef0:	42a2      	cmp	r2, r4
 800eef2:	d0f0      	beq.n	800eed6 <__match+0x6>
 800eef4:	2000      	movs	r0, #0
 800eef6:	e7f3      	b.n	800eee0 <__match+0x10>

0800eef8 <__hexnan>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	2500      	movs	r5, #0
 800eefe:	680b      	ldr	r3, [r1, #0]
 800ef00:	4682      	mov	sl, r0
 800ef02:	115e      	asrs	r6, r3, #5
 800ef04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef08:	f013 031f 	ands.w	r3, r3, #31
 800ef0c:	bf18      	it	ne
 800ef0e:	3604      	addne	r6, #4
 800ef10:	1f37      	subs	r7, r6, #4
 800ef12:	4690      	mov	r8, r2
 800ef14:	46b9      	mov	r9, r7
 800ef16:	463c      	mov	r4, r7
 800ef18:	46ab      	mov	fp, r5
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	6801      	ldr	r1, [r0, #0]
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef24:	9502      	str	r5, [sp, #8]
 800ef26:	784a      	ldrb	r2, [r1, #1]
 800ef28:	1c4b      	adds	r3, r1, #1
 800ef2a:	9303      	str	r3, [sp, #12]
 800ef2c:	b342      	cbz	r2, 800ef80 <__hexnan+0x88>
 800ef2e:	4610      	mov	r0, r2
 800ef30:	9105      	str	r1, [sp, #20]
 800ef32:	9204      	str	r2, [sp, #16]
 800ef34:	f7ff fd95 	bl	800ea62 <__hexdig_fun>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d151      	bne.n	800efe0 <__hexnan+0xe8>
 800ef3c:	9a04      	ldr	r2, [sp, #16]
 800ef3e:	9905      	ldr	r1, [sp, #20]
 800ef40:	2a20      	cmp	r2, #32
 800ef42:	d818      	bhi.n	800ef76 <__hexnan+0x7e>
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	459b      	cmp	fp, r3
 800ef48:	dd13      	ble.n	800ef72 <__hexnan+0x7a>
 800ef4a:	454c      	cmp	r4, r9
 800ef4c:	d206      	bcs.n	800ef5c <__hexnan+0x64>
 800ef4e:	2d07      	cmp	r5, #7
 800ef50:	dc04      	bgt.n	800ef5c <__hexnan+0x64>
 800ef52:	462a      	mov	r2, r5
 800ef54:	4649      	mov	r1, r9
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7ff ffa8 	bl	800eeac <L_shift>
 800ef5c:	4544      	cmp	r4, r8
 800ef5e:	d952      	bls.n	800f006 <__hexnan+0x10e>
 800ef60:	2300      	movs	r3, #0
 800ef62:	f1a4 0904 	sub.w	r9, r4, #4
 800ef66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef6a:	461d      	mov	r5, r3
 800ef6c:	464c      	mov	r4, r9
 800ef6e:	f8cd b008 	str.w	fp, [sp, #8]
 800ef72:	9903      	ldr	r1, [sp, #12]
 800ef74:	e7d7      	b.n	800ef26 <__hexnan+0x2e>
 800ef76:	2a29      	cmp	r2, #41	@ 0x29
 800ef78:	d157      	bne.n	800f02a <__hexnan+0x132>
 800ef7a:	3102      	adds	r1, #2
 800ef7c:	f8ca 1000 	str.w	r1, [sl]
 800ef80:	f1bb 0f00 	cmp.w	fp, #0
 800ef84:	d051      	beq.n	800f02a <__hexnan+0x132>
 800ef86:	454c      	cmp	r4, r9
 800ef88:	d206      	bcs.n	800ef98 <__hexnan+0xa0>
 800ef8a:	2d07      	cmp	r5, #7
 800ef8c:	dc04      	bgt.n	800ef98 <__hexnan+0xa0>
 800ef8e:	462a      	mov	r2, r5
 800ef90:	4649      	mov	r1, r9
 800ef92:	4620      	mov	r0, r4
 800ef94:	f7ff ff8a 	bl	800eeac <L_shift>
 800ef98:	4544      	cmp	r4, r8
 800ef9a:	d936      	bls.n	800f00a <__hexnan+0x112>
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	f1a8 0204 	sub.w	r2, r8, #4
 800efa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800efa6:	429f      	cmp	r7, r3
 800efa8:	f842 1f04 	str.w	r1, [r2, #4]!
 800efac:	d2f9      	bcs.n	800efa2 <__hexnan+0xaa>
 800efae:	1b3b      	subs	r3, r7, r4
 800efb0:	f023 0303 	bic.w	r3, r3, #3
 800efb4:	3304      	adds	r3, #4
 800efb6:	3401      	adds	r4, #1
 800efb8:	3e03      	subs	r6, #3
 800efba:	42b4      	cmp	r4, r6
 800efbc:	bf88      	it	hi
 800efbe:	2304      	movhi	r3, #4
 800efc0:	2200      	movs	r2, #0
 800efc2:	4443      	add	r3, r8
 800efc4:	f843 2b04 	str.w	r2, [r3], #4
 800efc8:	429f      	cmp	r7, r3
 800efca:	d2fb      	bcs.n	800efc4 <__hexnan+0xcc>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	b91b      	cbnz	r3, 800efd8 <__hexnan+0xe0>
 800efd0:	4547      	cmp	r7, r8
 800efd2:	d128      	bne.n	800f026 <__hexnan+0x12e>
 800efd4:	2301      	movs	r3, #1
 800efd6:	603b      	str	r3, [r7, #0]
 800efd8:	2005      	movs	r0, #5
 800efda:	b007      	add	sp, #28
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe0:	3501      	adds	r5, #1
 800efe2:	2d08      	cmp	r5, #8
 800efe4:	f10b 0b01 	add.w	fp, fp, #1
 800efe8:	dd06      	ble.n	800eff8 <__hexnan+0x100>
 800efea:	4544      	cmp	r4, r8
 800efec:	d9c1      	bls.n	800ef72 <__hexnan+0x7a>
 800efee:	2300      	movs	r3, #0
 800eff0:	2501      	movs	r5, #1
 800eff2:	f844 3c04 	str.w	r3, [r4, #-4]
 800eff6:	3c04      	subs	r4, #4
 800eff8:	6822      	ldr	r2, [r4, #0]
 800effa:	f000 000f 	and.w	r0, r0, #15
 800effe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f002:	6020      	str	r0, [r4, #0]
 800f004:	e7b5      	b.n	800ef72 <__hexnan+0x7a>
 800f006:	2508      	movs	r5, #8
 800f008:	e7b3      	b.n	800ef72 <__hexnan+0x7a>
 800f00a:	9b01      	ldr	r3, [sp, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d0dd      	beq.n	800efcc <__hexnan+0xd4>
 800f010:	f04f 32ff 	mov.w	r2, #4294967295
 800f014:	f1c3 0320 	rsb	r3, r3, #32
 800f018:	40da      	lsrs	r2, r3
 800f01a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f01e:	4013      	ands	r3, r2
 800f020:	f846 3c04 	str.w	r3, [r6, #-4]
 800f024:	e7d2      	b.n	800efcc <__hexnan+0xd4>
 800f026:	3f04      	subs	r7, #4
 800f028:	e7d0      	b.n	800efcc <__hexnan+0xd4>
 800f02a:	2004      	movs	r0, #4
 800f02c:	e7d5      	b.n	800efda <__hexnan+0xe2>

0800f02e <__ascii_mbtowc>:
 800f02e:	b082      	sub	sp, #8
 800f030:	b901      	cbnz	r1, 800f034 <__ascii_mbtowc+0x6>
 800f032:	a901      	add	r1, sp, #4
 800f034:	b142      	cbz	r2, 800f048 <__ascii_mbtowc+0x1a>
 800f036:	b14b      	cbz	r3, 800f04c <__ascii_mbtowc+0x1e>
 800f038:	7813      	ldrb	r3, [r2, #0]
 800f03a:	600b      	str	r3, [r1, #0]
 800f03c:	7812      	ldrb	r2, [r2, #0]
 800f03e:	1e10      	subs	r0, r2, #0
 800f040:	bf18      	it	ne
 800f042:	2001      	movne	r0, #1
 800f044:	b002      	add	sp, #8
 800f046:	4770      	bx	lr
 800f048:	4610      	mov	r0, r2
 800f04a:	e7fb      	b.n	800f044 <__ascii_mbtowc+0x16>
 800f04c:	f06f 0001 	mvn.w	r0, #1
 800f050:	e7f8      	b.n	800f044 <__ascii_mbtowc+0x16>

0800f052 <_realloc_r>:
 800f052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f056:	4607      	mov	r7, r0
 800f058:	4614      	mov	r4, r2
 800f05a:	460d      	mov	r5, r1
 800f05c:	b921      	cbnz	r1, 800f068 <_realloc_r+0x16>
 800f05e:	4611      	mov	r1, r2
 800f060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f064:	f7fd bb06 	b.w	800c674 <_malloc_r>
 800f068:	b92a      	cbnz	r2, 800f076 <_realloc_r+0x24>
 800f06a:	f7fd fa91 	bl	800c590 <_free_r>
 800f06e:	4625      	mov	r5, r4
 800f070:	4628      	mov	r0, r5
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f076:	f000 f8b2 	bl	800f1de <_malloc_usable_size_r>
 800f07a:	4284      	cmp	r4, r0
 800f07c:	4606      	mov	r6, r0
 800f07e:	d802      	bhi.n	800f086 <_realloc_r+0x34>
 800f080:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f084:	d8f4      	bhi.n	800f070 <_realloc_r+0x1e>
 800f086:	4621      	mov	r1, r4
 800f088:	4638      	mov	r0, r7
 800f08a:	f7fd faf3 	bl	800c674 <_malloc_r>
 800f08e:	4680      	mov	r8, r0
 800f090:	b908      	cbnz	r0, 800f096 <_realloc_r+0x44>
 800f092:	4645      	mov	r5, r8
 800f094:	e7ec      	b.n	800f070 <_realloc_r+0x1e>
 800f096:	42b4      	cmp	r4, r6
 800f098:	4622      	mov	r2, r4
 800f09a:	4629      	mov	r1, r5
 800f09c:	bf28      	it	cs
 800f09e:	4632      	movcs	r2, r6
 800f0a0:	f7ff fc46 	bl	800e930 <memcpy>
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	f7fd fa72 	bl	800c590 <_free_r>
 800f0ac:	e7f1      	b.n	800f092 <_realloc_r+0x40>
	...

0800f0b0 <_strtoul_l.isra.0>:
 800f0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0b4:	4686      	mov	lr, r0
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	4e33      	ldr	r6, [pc, #204]	@ (800f188 <_strtoul_l.isra.0+0xd8>)
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0c0:	5d37      	ldrb	r7, [r6, r4]
 800f0c2:	f017 0708 	ands.w	r7, r7, #8
 800f0c6:	d1f8      	bne.n	800f0ba <_strtoul_l.isra.0+0xa>
 800f0c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f0ca:	d110      	bne.n	800f0ee <_strtoul_l.isra.0+0x3e>
 800f0cc:	2701      	movs	r7, #1
 800f0ce:	782c      	ldrb	r4, [r5, #0]
 800f0d0:	1c85      	adds	r5, r0, #2
 800f0d2:	f033 0010 	bics.w	r0, r3, #16
 800f0d6:	d115      	bne.n	800f104 <_strtoul_l.isra.0+0x54>
 800f0d8:	2c30      	cmp	r4, #48	@ 0x30
 800f0da:	d10d      	bne.n	800f0f8 <_strtoul_l.isra.0+0x48>
 800f0dc:	7828      	ldrb	r0, [r5, #0]
 800f0de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f0e2:	2858      	cmp	r0, #88	@ 0x58
 800f0e4:	d108      	bne.n	800f0f8 <_strtoul_l.isra.0+0x48>
 800f0e6:	786c      	ldrb	r4, [r5, #1]
 800f0e8:	3502      	adds	r5, #2
 800f0ea:	2310      	movs	r3, #16
 800f0ec:	e00a      	b.n	800f104 <_strtoul_l.isra.0+0x54>
 800f0ee:	2c2b      	cmp	r4, #43	@ 0x2b
 800f0f0:	bf04      	itt	eq
 800f0f2:	782c      	ldrbeq	r4, [r5, #0]
 800f0f4:	1c85      	addeq	r5, r0, #2
 800f0f6:	e7ec      	b.n	800f0d2 <_strtoul_l.isra.0+0x22>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1f6      	bne.n	800f0ea <_strtoul_l.isra.0+0x3a>
 800f0fc:	2c30      	cmp	r4, #48	@ 0x30
 800f0fe:	bf14      	ite	ne
 800f100:	230a      	movne	r3, #10
 800f102:	2308      	moveq	r3, #8
 800f104:	f04f 38ff 	mov.w	r8, #4294967295
 800f108:	fbb8 f8f3 	udiv	r8, r8, r3
 800f10c:	2600      	movs	r6, #0
 800f10e:	fb03 f908 	mul.w	r9, r3, r8
 800f112:	4630      	mov	r0, r6
 800f114:	ea6f 0909 	mvn.w	r9, r9
 800f118:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f11c:	f1bc 0f09 	cmp.w	ip, #9
 800f120:	d810      	bhi.n	800f144 <_strtoul_l.isra.0+0x94>
 800f122:	4664      	mov	r4, ip
 800f124:	42a3      	cmp	r3, r4
 800f126:	dd1e      	ble.n	800f166 <_strtoul_l.isra.0+0xb6>
 800f128:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f12c:	d007      	beq.n	800f13e <_strtoul_l.isra.0+0x8e>
 800f12e:	4580      	cmp	r8, r0
 800f130:	d316      	bcc.n	800f160 <_strtoul_l.isra.0+0xb0>
 800f132:	d101      	bne.n	800f138 <_strtoul_l.isra.0+0x88>
 800f134:	45a1      	cmp	r9, r4
 800f136:	db13      	blt.n	800f160 <_strtoul_l.isra.0+0xb0>
 800f138:	2601      	movs	r6, #1
 800f13a:	fb00 4003 	mla	r0, r0, r3, r4
 800f13e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f142:	e7e9      	b.n	800f118 <_strtoul_l.isra.0+0x68>
 800f144:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f148:	f1bc 0f19 	cmp.w	ip, #25
 800f14c:	d801      	bhi.n	800f152 <_strtoul_l.isra.0+0xa2>
 800f14e:	3c37      	subs	r4, #55	@ 0x37
 800f150:	e7e8      	b.n	800f124 <_strtoul_l.isra.0+0x74>
 800f152:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f156:	f1bc 0f19 	cmp.w	ip, #25
 800f15a:	d804      	bhi.n	800f166 <_strtoul_l.isra.0+0xb6>
 800f15c:	3c57      	subs	r4, #87	@ 0x57
 800f15e:	e7e1      	b.n	800f124 <_strtoul_l.isra.0+0x74>
 800f160:	f04f 36ff 	mov.w	r6, #4294967295
 800f164:	e7eb      	b.n	800f13e <_strtoul_l.isra.0+0x8e>
 800f166:	1c73      	adds	r3, r6, #1
 800f168:	d106      	bne.n	800f178 <_strtoul_l.isra.0+0xc8>
 800f16a:	2322      	movs	r3, #34	@ 0x22
 800f16c:	4630      	mov	r0, r6
 800f16e:	f8ce 3000 	str.w	r3, [lr]
 800f172:	b932      	cbnz	r2, 800f182 <_strtoul_l.isra.0+0xd2>
 800f174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f178:	b107      	cbz	r7, 800f17c <_strtoul_l.isra.0+0xcc>
 800f17a:	4240      	negs	r0, r0
 800f17c:	2a00      	cmp	r2, #0
 800f17e:	d0f9      	beq.n	800f174 <_strtoul_l.isra.0+0xc4>
 800f180:	b106      	cbz	r6, 800f184 <_strtoul_l.isra.0+0xd4>
 800f182:	1e69      	subs	r1, r5, #1
 800f184:	6011      	str	r1, [r2, #0]
 800f186:	e7f5      	b.n	800f174 <_strtoul_l.isra.0+0xc4>
 800f188:	0800fba9 	.word	0x0800fba9

0800f18c <_strtoul_r>:
 800f18c:	f7ff bf90 	b.w	800f0b0 <_strtoul_l.isra.0>

0800f190 <__ascii_wctomb>:
 800f190:	4603      	mov	r3, r0
 800f192:	4608      	mov	r0, r1
 800f194:	b141      	cbz	r1, 800f1a8 <__ascii_wctomb+0x18>
 800f196:	2aff      	cmp	r2, #255	@ 0xff
 800f198:	d904      	bls.n	800f1a4 <__ascii_wctomb+0x14>
 800f19a:	228a      	movs	r2, #138	@ 0x8a
 800f19c:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a0:	601a      	str	r2, [r3, #0]
 800f1a2:	4770      	bx	lr
 800f1a4:	2001      	movs	r0, #1
 800f1a6:	700a      	strb	r2, [r1, #0]
 800f1a8:	4770      	bx	lr
	...

0800f1ac <fiprintf>:
 800f1ac:	b40e      	push	{r1, r2, r3}
 800f1ae:	b503      	push	{r0, r1, lr}
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	ab03      	add	r3, sp, #12
 800f1b4:	4805      	ldr	r0, [pc, #20]	@ (800f1cc <fiprintf+0x20>)
 800f1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ba:	6800      	ldr	r0, [r0, #0]
 800f1bc:	9301      	str	r3, [sp, #4]
 800f1be:	f000 f83d 	bl	800f23c <_vfiprintf_r>
 800f1c2:	b002      	add	sp, #8
 800f1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1c8:	b003      	add	sp, #12
 800f1ca:	4770      	bx	lr
 800f1cc:	20000188 	.word	0x20000188

0800f1d0 <abort>:
 800f1d0:	2006      	movs	r0, #6
 800f1d2:	b508      	push	{r3, lr}
 800f1d4:	f000 fa06 	bl	800f5e4 <raise>
 800f1d8:	2001      	movs	r0, #1
 800f1da:	f7f2 fc0a 	bl	80019f2 <_exit>

0800f1de <_malloc_usable_size_r>:
 800f1de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1e2:	1f18      	subs	r0, r3, #4
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfbc      	itt	lt
 800f1e8:	580b      	ldrlt	r3, [r1, r0]
 800f1ea:	18c0      	addlt	r0, r0, r3
 800f1ec:	4770      	bx	lr

0800f1ee <__sfputc_r>:
 800f1ee:	6893      	ldr	r3, [r2, #8]
 800f1f0:	b410      	push	{r4}
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	6093      	str	r3, [r2, #8]
 800f1f8:	da07      	bge.n	800f20a <__sfputc_r+0x1c>
 800f1fa:	6994      	ldr	r4, [r2, #24]
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	db01      	blt.n	800f204 <__sfputc_r+0x16>
 800f200:	290a      	cmp	r1, #10
 800f202:	d102      	bne.n	800f20a <__sfputc_r+0x1c>
 800f204:	bc10      	pop	{r4}
 800f206:	f000 b931 	b.w	800f46c <__swbuf_r>
 800f20a:	6813      	ldr	r3, [r2, #0]
 800f20c:	1c58      	adds	r0, r3, #1
 800f20e:	6010      	str	r0, [r2, #0]
 800f210:	7019      	strb	r1, [r3, #0]
 800f212:	4608      	mov	r0, r1
 800f214:	bc10      	pop	{r4}
 800f216:	4770      	bx	lr

0800f218 <__sfputs_r>:
 800f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21a:	4606      	mov	r6, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	4614      	mov	r4, r2
 800f220:	18d5      	adds	r5, r2, r3
 800f222:	42ac      	cmp	r4, r5
 800f224:	d101      	bne.n	800f22a <__sfputs_r+0x12>
 800f226:	2000      	movs	r0, #0
 800f228:	e007      	b.n	800f23a <__sfputs_r+0x22>
 800f22a:	463a      	mov	r2, r7
 800f22c:	4630      	mov	r0, r6
 800f22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f232:	f7ff ffdc 	bl	800f1ee <__sfputc_r>
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	d1f3      	bne.n	800f222 <__sfputs_r+0xa>
 800f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f23c <_vfiprintf_r>:
 800f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f240:	460d      	mov	r5, r1
 800f242:	4614      	mov	r4, r2
 800f244:	4698      	mov	r8, r3
 800f246:	4606      	mov	r6, r0
 800f248:	b09d      	sub	sp, #116	@ 0x74
 800f24a:	b118      	cbz	r0, 800f254 <_vfiprintf_r+0x18>
 800f24c:	6a03      	ldr	r3, [r0, #32]
 800f24e:	b90b      	cbnz	r3, 800f254 <_vfiprintf_r+0x18>
 800f250:	f7fc f99e 	bl	800b590 <__sinit>
 800f254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f256:	07d9      	lsls	r1, r3, #31
 800f258:	d405      	bmi.n	800f266 <_vfiprintf_r+0x2a>
 800f25a:	89ab      	ldrh	r3, [r5, #12]
 800f25c:	059a      	lsls	r2, r3, #22
 800f25e:	d402      	bmi.n	800f266 <_vfiprintf_r+0x2a>
 800f260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f262:	f7fc fb24 	bl	800b8ae <__retarget_lock_acquire_recursive>
 800f266:	89ab      	ldrh	r3, [r5, #12]
 800f268:	071b      	lsls	r3, r3, #28
 800f26a:	d501      	bpl.n	800f270 <_vfiprintf_r+0x34>
 800f26c:	692b      	ldr	r3, [r5, #16]
 800f26e:	b99b      	cbnz	r3, 800f298 <_vfiprintf_r+0x5c>
 800f270:	4629      	mov	r1, r5
 800f272:	4630      	mov	r0, r6
 800f274:	f000 f938 	bl	800f4e8 <__swsetup_r>
 800f278:	b170      	cbz	r0, 800f298 <_vfiprintf_r+0x5c>
 800f27a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f27c:	07dc      	lsls	r4, r3, #31
 800f27e:	d504      	bpl.n	800f28a <_vfiprintf_r+0x4e>
 800f280:	f04f 30ff 	mov.w	r0, #4294967295
 800f284:	b01d      	add	sp, #116	@ 0x74
 800f286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f28a:	89ab      	ldrh	r3, [r5, #12]
 800f28c:	0598      	lsls	r0, r3, #22
 800f28e:	d4f7      	bmi.n	800f280 <_vfiprintf_r+0x44>
 800f290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f292:	f7fc fb0d 	bl	800b8b0 <__retarget_lock_release_recursive>
 800f296:	e7f3      	b.n	800f280 <_vfiprintf_r+0x44>
 800f298:	2300      	movs	r3, #0
 800f29a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f29c:	2320      	movs	r3, #32
 800f29e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2a2:	2330      	movs	r3, #48	@ 0x30
 800f2a4:	f04f 0901 	mov.w	r9, #1
 800f2a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f458 <_vfiprintf_r+0x21c>
 800f2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2b4:	4623      	mov	r3, r4
 800f2b6:	469a      	mov	sl, r3
 800f2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2bc:	b10a      	cbz	r2, 800f2c2 <_vfiprintf_r+0x86>
 800f2be:	2a25      	cmp	r2, #37	@ 0x25
 800f2c0:	d1f9      	bne.n	800f2b6 <_vfiprintf_r+0x7a>
 800f2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800f2c6:	d00b      	beq.n	800f2e0 <_vfiprintf_r+0xa4>
 800f2c8:	465b      	mov	r3, fp
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f7ff ffa2 	bl	800f218 <__sfputs_r>
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	f000 80a7 	beq.w	800f428 <_vfiprintf_r+0x1ec>
 800f2da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2dc:	445a      	add	r2, fp
 800f2de:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f000 809f 	beq.w	800f428 <_vfiprintf_r+0x1ec>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2f4:	f10a 0a01 	add.w	sl, sl, #1
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	9307      	str	r3, [sp, #28]
 800f2fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f300:	931a      	str	r3, [sp, #104]	@ 0x68
 800f302:	4654      	mov	r4, sl
 800f304:	2205      	movs	r2, #5
 800f306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f30a:	4853      	ldr	r0, [pc, #332]	@ (800f458 <_vfiprintf_r+0x21c>)
 800f30c:	f7fc fad1 	bl	800b8b2 <memchr>
 800f310:	9a04      	ldr	r2, [sp, #16]
 800f312:	b9d8      	cbnz	r0, 800f34c <_vfiprintf_r+0x110>
 800f314:	06d1      	lsls	r1, r2, #27
 800f316:	bf44      	itt	mi
 800f318:	2320      	movmi	r3, #32
 800f31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f31e:	0713      	lsls	r3, r2, #28
 800f320:	bf44      	itt	mi
 800f322:	232b      	movmi	r3, #43	@ 0x2b
 800f324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f328:	f89a 3000 	ldrb.w	r3, [sl]
 800f32c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f32e:	d015      	beq.n	800f35c <_vfiprintf_r+0x120>
 800f330:	4654      	mov	r4, sl
 800f332:	2000      	movs	r0, #0
 800f334:	f04f 0c0a 	mov.w	ip, #10
 800f338:	9a07      	ldr	r2, [sp, #28]
 800f33a:	4621      	mov	r1, r4
 800f33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f340:	3b30      	subs	r3, #48	@ 0x30
 800f342:	2b09      	cmp	r3, #9
 800f344:	d94b      	bls.n	800f3de <_vfiprintf_r+0x1a2>
 800f346:	b1b0      	cbz	r0, 800f376 <_vfiprintf_r+0x13a>
 800f348:	9207      	str	r2, [sp, #28]
 800f34a:	e014      	b.n	800f376 <_vfiprintf_r+0x13a>
 800f34c:	eba0 0308 	sub.w	r3, r0, r8
 800f350:	fa09 f303 	lsl.w	r3, r9, r3
 800f354:	4313      	orrs	r3, r2
 800f356:	46a2      	mov	sl, r4
 800f358:	9304      	str	r3, [sp, #16]
 800f35a:	e7d2      	b.n	800f302 <_vfiprintf_r+0xc6>
 800f35c:	9b03      	ldr	r3, [sp, #12]
 800f35e:	1d19      	adds	r1, r3, #4
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	9103      	str	r1, [sp, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	bfbb      	ittet	lt
 800f368:	425b      	neglt	r3, r3
 800f36a:	f042 0202 	orrlt.w	r2, r2, #2
 800f36e:	9307      	strge	r3, [sp, #28]
 800f370:	9307      	strlt	r3, [sp, #28]
 800f372:	bfb8      	it	lt
 800f374:	9204      	strlt	r2, [sp, #16]
 800f376:	7823      	ldrb	r3, [r4, #0]
 800f378:	2b2e      	cmp	r3, #46	@ 0x2e
 800f37a:	d10a      	bne.n	800f392 <_vfiprintf_r+0x156>
 800f37c:	7863      	ldrb	r3, [r4, #1]
 800f37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f380:	d132      	bne.n	800f3e8 <_vfiprintf_r+0x1ac>
 800f382:	9b03      	ldr	r3, [sp, #12]
 800f384:	3402      	adds	r4, #2
 800f386:	1d1a      	adds	r2, r3, #4
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	9203      	str	r2, [sp, #12]
 800f38c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f390:	9305      	str	r3, [sp, #20]
 800f392:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f45c <_vfiprintf_r+0x220>
 800f396:	2203      	movs	r2, #3
 800f398:	4650      	mov	r0, sl
 800f39a:	7821      	ldrb	r1, [r4, #0]
 800f39c:	f7fc fa89 	bl	800b8b2 <memchr>
 800f3a0:	b138      	cbz	r0, 800f3b2 <_vfiprintf_r+0x176>
 800f3a2:	2240      	movs	r2, #64	@ 0x40
 800f3a4:	9b04      	ldr	r3, [sp, #16]
 800f3a6:	eba0 000a 	sub.w	r0, r0, sl
 800f3aa:	4082      	lsls	r2, r0
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	3401      	adds	r4, #1
 800f3b0:	9304      	str	r3, [sp, #16]
 800f3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b6:	2206      	movs	r2, #6
 800f3b8:	4829      	ldr	r0, [pc, #164]	@ (800f460 <_vfiprintf_r+0x224>)
 800f3ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3be:	f7fc fa78 	bl	800b8b2 <memchr>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d03f      	beq.n	800f446 <_vfiprintf_r+0x20a>
 800f3c6:	4b27      	ldr	r3, [pc, #156]	@ (800f464 <_vfiprintf_r+0x228>)
 800f3c8:	bb1b      	cbnz	r3, 800f412 <_vfiprintf_r+0x1d6>
 800f3ca:	9b03      	ldr	r3, [sp, #12]
 800f3cc:	3307      	adds	r3, #7
 800f3ce:	f023 0307 	bic.w	r3, r3, #7
 800f3d2:	3308      	adds	r3, #8
 800f3d4:	9303      	str	r3, [sp, #12]
 800f3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3d8:	443b      	add	r3, r7
 800f3da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3dc:	e76a      	b.n	800f2b4 <_vfiprintf_r+0x78>
 800f3de:	460c      	mov	r4, r1
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3e6:	e7a8      	b.n	800f33a <_vfiprintf_r+0xfe>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	f04f 0c0a 	mov.w	ip, #10
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	3401      	adds	r4, #1
 800f3f2:	9305      	str	r3, [sp, #20]
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3fa:	3a30      	subs	r2, #48	@ 0x30
 800f3fc:	2a09      	cmp	r2, #9
 800f3fe:	d903      	bls.n	800f408 <_vfiprintf_r+0x1cc>
 800f400:	2b00      	cmp	r3, #0
 800f402:	d0c6      	beq.n	800f392 <_vfiprintf_r+0x156>
 800f404:	9105      	str	r1, [sp, #20]
 800f406:	e7c4      	b.n	800f392 <_vfiprintf_r+0x156>
 800f408:	4604      	mov	r4, r0
 800f40a:	2301      	movs	r3, #1
 800f40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f410:	e7f0      	b.n	800f3f4 <_vfiprintf_r+0x1b8>
 800f412:	ab03      	add	r3, sp, #12
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	462a      	mov	r2, r5
 800f418:	4630      	mov	r0, r6
 800f41a:	4b13      	ldr	r3, [pc, #76]	@ (800f468 <_vfiprintf_r+0x22c>)
 800f41c:	a904      	add	r1, sp, #16
 800f41e:	f7fb fa65 	bl	800a8ec <_printf_float>
 800f422:	4607      	mov	r7, r0
 800f424:	1c78      	adds	r0, r7, #1
 800f426:	d1d6      	bne.n	800f3d6 <_vfiprintf_r+0x19a>
 800f428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f42a:	07d9      	lsls	r1, r3, #31
 800f42c:	d405      	bmi.n	800f43a <_vfiprintf_r+0x1fe>
 800f42e:	89ab      	ldrh	r3, [r5, #12]
 800f430:	059a      	lsls	r2, r3, #22
 800f432:	d402      	bmi.n	800f43a <_vfiprintf_r+0x1fe>
 800f434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f436:	f7fc fa3b 	bl	800b8b0 <__retarget_lock_release_recursive>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	065b      	lsls	r3, r3, #25
 800f43e:	f53f af1f 	bmi.w	800f280 <_vfiprintf_r+0x44>
 800f442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f444:	e71e      	b.n	800f284 <_vfiprintf_r+0x48>
 800f446:	ab03      	add	r3, sp, #12
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	462a      	mov	r2, r5
 800f44c:	4630      	mov	r0, r6
 800f44e:	4b06      	ldr	r3, [pc, #24]	@ (800f468 <_vfiprintf_r+0x22c>)
 800f450:	a904      	add	r1, sp, #16
 800f452:	f7fb fce9 	bl	800ae28 <_printf_i>
 800f456:	e7e4      	b.n	800f422 <_vfiprintf_r+0x1e6>
 800f458:	0800f987 	.word	0x0800f987
 800f45c:	0800f98d 	.word	0x0800f98d
 800f460:	0800f991 	.word	0x0800f991
 800f464:	0800a8ed 	.word	0x0800a8ed
 800f468:	0800f219 	.word	0x0800f219

0800f46c <__swbuf_r>:
 800f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46e:	460e      	mov	r6, r1
 800f470:	4614      	mov	r4, r2
 800f472:	4605      	mov	r5, r0
 800f474:	b118      	cbz	r0, 800f47e <__swbuf_r+0x12>
 800f476:	6a03      	ldr	r3, [r0, #32]
 800f478:	b90b      	cbnz	r3, 800f47e <__swbuf_r+0x12>
 800f47a:	f7fc f889 	bl	800b590 <__sinit>
 800f47e:	69a3      	ldr	r3, [r4, #24]
 800f480:	60a3      	str	r3, [r4, #8]
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	071a      	lsls	r2, r3, #28
 800f486:	d501      	bpl.n	800f48c <__swbuf_r+0x20>
 800f488:	6923      	ldr	r3, [r4, #16]
 800f48a:	b943      	cbnz	r3, 800f49e <__swbuf_r+0x32>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 f82a 	bl	800f4e8 <__swsetup_r>
 800f494:	b118      	cbz	r0, 800f49e <__swbuf_r+0x32>
 800f496:	f04f 37ff 	mov.w	r7, #4294967295
 800f49a:	4638      	mov	r0, r7
 800f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f49e:	6823      	ldr	r3, [r4, #0]
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	b2f6      	uxtb	r6, r6
 800f4a4:	1a98      	subs	r0, r3, r2
 800f4a6:	6963      	ldr	r3, [r4, #20]
 800f4a8:	4637      	mov	r7, r6
 800f4aa:	4283      	cmp	r3, r0
 800f4ac:	dc05      	bgt.n	800f4ba <__swbuf_r+0x4e>
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f7ff f979 	bl	800e7a8 <_fflush_r>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d1ed      	bne.n	800f496 <__swbuf_r+0x2a>
 800f4ba:	68a3      	ldr	r3, [r4, #8]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	60a3      	str	r3, [r4, #8]
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	6022      	str	r2, [r4, #0]
 800f4c6:	701e      	strb	r6, [r3, #0]
 800f4c8:	6962      	ldr	r2, [r4, #20]
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d004      	beq.n	800f4da <__swbuf_r+0x6e>
 800f4d0:	89a3      	ldrh	r3, [r4, #12]
 800f4d2:	07db      	lsls	r3, r3, #31
 800f4d4:	d5e1      	bpl.n	800f49a <__swbuf_r+0x2e>
 800f4d6:	2e0a      	cmp	r6, #10
 800f4d8:	d1df      	bne.n	800f49a <__swbuf_r+0x2e>
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f7ff f963 	bl	800e7a8 <_fflush_r>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d0d9      	beq.n	800f49a <__swbuf_r+0x2e>
 800f4e6:	e7d6      	b.n	800f496 <__swbuf_r+0x2a>

0800f4e8 <__swsetup_r>:
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4b29      	ldr	r3, [pc, #164]	@ (800f590 <__swsetup_r+0xa8>)
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	b118      	cbz	r0, 800f4fc <__swsetup_r+0x14>
 800f4f4:	6a03      	ldr	r3, [r0, #32]
 800f4f6:	b90b      	cbnz	r3, 800f4fc <__swsetup_r+0x14>
 800f4f8:	f7fc f84a 	bl	800b590 <__sinit>
 800f4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f500:	0719      	lsls	r1, r3, #28
 800f502:	d422      	bmi.n	800f54a <__swsetup_r+0x62>
 800f504:	06da      	lsls	r2, r3, #27
 800f506:	d407      	bmi.n	800f518 <__swsetup_r+0x30>
 800f508:	2209      	movs	r2, #9
 800f50a:	602a      	str	r2, [r5, #0]
 800f50c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f510:	f04f 30ff 	mov.w	r0, #4294967295
 800f514:	81a3      	strh	r3, [r4, #12]
 800f516:	e033      	b.n	800f580 <__swsetup_r+0x98>
 800f518:	0758      	lsls	r0, r3, #29
 800f51a:	d512      	bpl.n	800f542 <__swsetup_r+0x5a>
 800f51c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f51e:	b141      	cbz	r1, 800f532 <__swsetup_r+0x4a>
 800f520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f524:	4299      	cmp	r1, r3
 800f526:	d002      	beq.n	800f52e <__swsetup_r+0x46>
 800f528:	4628      	mov	r0, r5
 800f52a:	f7fd f831 	bl	800c590 <_free_r>
 800f52e:	2300      	movs	r3, #0
 800f530:	6363      	str	r3, [r4, #52]	@ 0x34
 800f532:	89a3      	ldrh	r3, [r4, #12]
 800f534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f538:	81a3      	strh	r3, [r4, #12]
 800f53a:	2300      	movs	r3, #0
 800f53c:	6063      	str	r3, [r4, #4]
 800f53e:	6923      	ldr	r3, [r4, #16]
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	89a3      	ldrh	r3, [r4, #12]
 800f544:	f043 0308 	orr.w	r3, r3, #8
 800f548:	81a3      	strh	r3, [r4, #12]
 800f54a:	6923      	ldr	r3, [r4, #16]
 800f54c:	b94b      	cbnz	r3, 800f562 <__swsetup_r+0x7a>
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f558:	d003      	beq.n	800f562 <__swsetup_r+0x7a>
 800f55a:	4621      	mov	r1, r4
 800f55c:	4628      	mov	r0, r5
 800f55e:	f000 f882 	bl	800f666 <__smakebuf_r>
 800f562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f566:	f013 0201 	ands.w	r2, r3, #1
 800f56a:	d00a      	beq.n	800f582 <__swsetup_r+0x9a>
 800f56c:	2200      	movs	r2, #0
 800f56e:	60a2      	str	r2, [r4, #8]
 800f570:	6962      	ldr	r2, [r4, #20]
 800f572:	4252      	negs	r2, r2
 800f574:	61a2      	str	r2, [r4, #24]
 800f576:	6922      	ldr	r2, [r4, #16]
 800f578:	b942      	cbnz	r2, 800f58c <__swsetup_r+0xa4>
 800f57a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f57e:	d1c5      	bne.n	800f50c <__swsetup_r+0x24>
 800f580:	bd38      	pop	{r3, r4, r5, pc}
 800f582:	0799      	lsls	r1, r3, #30
 800f584:	bf58      	it	pl
 800f586:	6962      	ldrpl	r2, [r4, #20]
 800f588:	60a2      	str	r2, [r4, #8]
 800f58a:	e7f4      	b.n	800f576 <__swsetup_r+0x8e>
 800f58c:	2000      	movs	r0, #0
 800f58e:	e7f7      	b.n	800f580 <__swsetup_r+0x98>
 800f590:	20000188 	.word	0x20000188

0800f594 <_raise_r>:
 800f594:	291f      	cmp	r1, #31
 800f596:	b538      	push	{r3, r4, r5, lr}
 800f598:	4605      	mov	r5, r0
 800f59a:	460c      	mov	r4, r1
 800f59c:	d904      	bls.n	800f5a8 <_raise_r+0x14>
 800f59e:	2316      	movs	r3, #22
 800f5a0:	6003      	str	r3, [r0, #0]
 800f5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a6:	bd38      	pop	{r3, r4, r5, pc}
 800f5a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f5aa:	b112      	cbz	r2, 800f5b2 <_raise_r+0x1e>
 800f5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5b0:	b94b      	cbnz	r3, 800f5c6 <_raise_r+0x32>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f000 f830 	bl	800f618 <_getpid_r>
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	4628      	mov	r0, r5
 800f5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5c2:	f000 b817 	b.w	800f5f4 <_kill_r>
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d00a      	beq.n	800f5e0 <_raise_r+0x4c>
 800f5ca:	1c59      	adds	r1, r3, #1
 800f5cc:	d103      	bne.n	800f5d6 <_raise_r+0x42>
 800f5ce:	2316      	movs	r3, #22
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	e7e7      	b.n	800f5a6 <_raise_r+0x12>
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f5de:	4798      	blx	r3
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	e7e0      	b.n	800f5a6 <_raise_r+0x12>

0800f5e4 <raise>:
 800f5e4:	4b02      	ldr	r3, [pc, #8]	@ (800f5f0 <raise+0xc>)
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	6818      	ldr	r0, [r3, #0]
 800f5ea:	f7ff bfd3 	b.w	800f594 <_raise_r>
 800f5ee:	bf00      	nop
 800f5f0:	20000188 	.word	0x20000188

0800f5f4 <_kill_r>:
 800f5f4:	b538      	push	{r3, r4, r5, lr}
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	4d06      	ldr	r5, [pc, #24]	@ (800f614 <_kill_r+0x20>)
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	4608      	mov	r0, r1
 800f5fe:	4611      	mov	r1, r2
 800f600:	602b      	str	r3, [r5, #0]
 800f602:	f7f2 f9e6 	bl	80019d2 <_kill>
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	d102      	bne.n	800f610 <_kill_r+0x1c>
 800f60a:	682b      	ldr	r3, [r5, #0]
 800f60c:	b103      	cbz	r3, 800f610 <_kill_r+0x1c>
 800f60e:	6023      	str	r3, [r4, #0]
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	bf00      	nop
 800f614:	200017a8 	.word	0x200017a8

0800f618 <_getpid_r>:
 800f618:	f7f2 b9d4 	b.w	80019c4 <_getpid>

0800f61c <__swhatbuf_r>:
 800f61c:	b570      	push	{r4, r5, r6, lr}
 800f61e:	460c      	mov	r4, r1
 800f620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f624:	4615      	mov	r5, r2
 800f626:	2900      	cmp	r1, #0
 800f628:	461e      	mov	r6, r3
 800f62a:	b096      	sub	sp, #88	@ 0x58
 800f62c:	da0c      	bge.n	800f648 <__swhatbuf_r+0x2c>
 800f62e:	89a3      	ldrh	r3, [r4, #12]
 800f630:	2100      	movs	r1, #0
 800f632:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f636:	bf14      	ite	ne
 800f638:	2340      	movne	r3, #64	@ 0x40
 800f63a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f63e:	2000      	movs	r0, #0
 800f640:	6031      	str	r1, [r6, #0]
 800f642:	602b      	str	r3, [r5, #0]
 800f644:	b016      	add	sp, #88	@ 0x58
 800f646:	bd70      	pop	{r4, r5, r6, pc}
 800f648:	466a      	mov	r2, sp
 800f64a:	f000 f849 	bl	800f6e0 <_fstat_r>
 800f64e:	2800      	cmp	r0, #0
 800f650:	dbed      	blt.n	800f62e <__swhatbuf_r+0x12>
 800f652:	9901      	ldr	r1, [sp, #4]
 800f654:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f658:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f65c:	4259      	negs	r1, r3
 800f65e:	4159      	adcs	r1, r3
 800f660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f664:	e7eb      	b.n	800f63e <__swhatbuf_r+0x22>

0800f666 <__smakebuf_r>:
 800f666:	898b      	ldrh	r3, [r1, #12]
 800f668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f66a:	079d      	lsls	r5, r3, #30
 800f66c:	4606      	mov	r6, r0
 800f66e:	460c      	mov	r4, r1
 800f670:	d507      	bpl.n	800f682 <__smakebuf_r+0x1c>
 800f672:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f676:	6023      	str	r3, [r4, #0]
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	2301      	movs	r3, #1
 800f67c:	6163      	str	r3, [r4, #20]
 800f67e:	b003      	add	sp, #12
 800f680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f682:	466a      	mov	r2, sp
 800f684:	ab01      	add	r3, sp, #4
 800f686:	f7ff ffc9 	bl	800f61c <__swhatbuf_r>
 800f68a:	9f00      	ldr	r7, [sp, #0]
 800f68c:	4605      	mov	r5, r0
 800f68e:	4639      	mov	r1, r7
 800f690:	4630      	mov	r0, r6
 800f692:	f7fc ffef 	bl	800c674 <_malloc_r>
 800f696:	b948      	cbnz	r0, 800f6ac <__smakebuf_r+0x46>
 800f698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f69c:	059a      	lsls	r2, r3, #22
 800f69e:	d4ee      	bmi.n	800f67e <__smakebuf_r+0x18>
 800f6a0:	f023 0303 	bic.w	r3, r3, #3
 800f6a4:	f043 0302 	orr.w	r3, r3, #2
 800f6a8:	81a3      	strh	r3, [r4, #12]
 800f6aa:	e7e2      	b.n	800f672 <__smakebuf_r+0xc>
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	9b01      	ldr	r3, [sp, #4]
 800f6ba:	6020      	str	r0, [r4, #0]
 800f6bc:	b15b      	cbz	r3, 800f6d6 <__smakebuf_r+0x70>
 800f6be:	4630      	mov	r0, r6
 800f6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6c4:	f000 f81e 	bl	800f704 <_isatty_r>
 800f6c8:	b128      	cbz	r0, 800f6d6 <__smakebuf_r+0x70>
 800f6ca:	89a3      	ldrh	r3, [r4, #12]
 800f6cc:	f023 0303 	bic.w	r3, r3, #3
 800f6d0:	f043 0301 	orr.w	r3, r3, #1
 800f6d4:	81a3      	strh	r3, [r4, #12]
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	431d      	orrs	r5, r3
 800f6da:	81a5      	strh	r5, [r4, #12]
 800f6dc:	e7cf      	b.n	800f67e <__smakebuf_r+0x18>
	...

0800f6e0 <_fstat_r>:
 800f6e0:	b538      	push	{r3, r4, r5, lr}
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	4d06      	ldr	r5, [pc, #24]	@ (800f700 <_fstat_r+0x20>)
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	4608      	mov	r0, r1
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	602b      	str	r3, [r5, #0]
 800f6ee:	f7f2 f9cf 	bl	8001a90 <_fstat>
 800f6f2:	1c43      	adds	r3, r0, #1
 800f6f4:	d102      	bne.n	800f6fc <_fstat_r+0x1c>
 800f6f6:	682b      	ldr	r3, [r5, #0]
 800f6f8:	b103      	cbz	r3, 800f6fc <_fstat_r+0x1c>
 800f6fa:	6023      	str	r3, [r4, #0]
 800f6fc:	bd38      	pop	{r3, r4, r5, pc}
 800f6fe:	bf00      	nop
 800f700:	200017a8 	.word	0x200017a8

0800f704 <_isatty_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	2300      	movs	r3, #0
 800f708:	4d05      	ldr	r5, [pc, #20]	@ (800f720 <_isatty_r+0x1c>)
 800f70a:	4604      	mov	r4, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	f7f2 f9cd 	bl	8001aae <_isatty>
 800f714:	1c43      	adds	r3, r0, #1
 800f716:	d102      	bne.n	800f71e <_isatty_r+0x1a>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	b103      	cbz	r3, 800f71e <_isatty_r+0x1a>
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	200017a8 	.word	0x200017a8

0800f724 <_init>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	bf00      	nop
 800f728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f72a:	bc08      	pop	{r3}
 800f72c:	469e      	mov	lr, r3
 800f72e:	4770      	bx	lr

0800f730 <_fini>:
 800f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f732:	bf00      	nop
 800f734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f736:	bc08      	pop	{r3}
 800f738:	469e      	mov	lr, r3
 800f73a:	4770      	bx	lr
