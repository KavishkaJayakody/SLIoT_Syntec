
Bus_Tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800f3c0  0800f3c0  000103c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f89c  0800f89c  00011348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f89c  0800f89c  0001089c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8a4  0800f8a4  00011348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a4  0800f8a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f8a8  0800f8a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800f8ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  20000348  0800fbf4  00011348  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  0800fbf4  00011720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015962  00000000  00000000  00011371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac7  00000000  00000000  00026cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0002a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed8  00000000  00000000  0002bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baeb  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001941b  00000000  00000000  000484e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009164d  00000000  00000000  000618fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006528  00000000  00000000  000f2f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f94b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f3a4 	.word	0x0800f3a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800f3a4 	.word	0x0800f3a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bda:	f000 fc19 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bde:	f000 f82d 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 f901 	bl	8000de8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000be6:	f000 f8d5 	bl	8000d94 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000bea:	f009 fbb1 	bl	800a350 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000bee:	f000 f881 	bl	8000cf4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////////////////////////////////////HAL_UART_Receive_IT(&huart1,&rxData,1);
  KEYPAD_Init(0, gu8_KeyStatesArr);
 8000bf2:	490e      	ldr	r1, [pc, #56]	@ (8000c2c <main+0x58>)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f006 fd6b 	bl	80076d0 <KEYPAD_Init>
    /* USER CODE BEGIN 3 */
	    char TxBuffer_gps[16];  // Buffer for transmission
	    int TxBufferLen_gps;

	    // Convert floats to a formatted string (e.g., "12.34,56.78\n")
	    TxBufferLen_gps = snprintf(TxBuffer_gps, sizeof(TxBuffer_gps), "%c,%.5d\n", Pressed_key /*decimalLong*/, SysTicks /*decimalLat*/);
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <main+0x5c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <main+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	1d38      	adds	r0, r7, #4
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <main+0x64>)
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	f00a ff61 	bl	800bad4 <sniprintf>
 8000c12:	6178      	str	r0, [r7, #20]

	    // Transmit via USB CDC
	    CDC_Transmit_FS((uint8_t*)TxBuffer_gps, TxBufferLen_gps);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	6979      	ldr	r1, [r7, #20]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f009 fc57 	bl	800a4cc <CDC_Transmit_FS>

	    //SysTick_CallBack();

	    Display_Handler();
 8000c1e:	f000 f953 	bl	8000ec8 <Display_Handler>
	    HAL_Delay(100);
 8000c22:	2064      	movs	r0, #100	@ 0x64
 8000c24:	f000 fc56 	bl	80014d4 <HAL_Delay>
  {
 8000c28:	bf00      	nop
 8000c2a:	e7e6      	b.n	8000bfa <main+0x26>
 8000c2c:	20000364 	.word	0x20000364
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000374 	.word	0x20000374
 8000c38:	0800f3c0 	.word	0x0800f3c0

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2228      	movs	r2, #40	@ 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00a ffdd 	bl	800bc0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fd16 	bl	80036c4 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c9e:	f000 f9dd 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 ff82 	bl	8003bc8 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cca:	f000 f9c7 	bl	800105c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 f902 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ce6:	f000 f9b9 	bl	800105c <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3750      	adds	r7, #80	@ 0x50
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d12:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <MX_TIM1_Init+0x9c>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d3c:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d3e:	f003 f987 	bl	8004050 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f988 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d5a:	f003 f9c8 	bl	80040ee <HAL_TIM_ConfigClockSource>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d64:	f000 f97a 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM1_Init+0x98>)
 8000d76:	f003 fb85 	bl	8004484 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d80:	f000 f96c 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000378 	.word	0x20000378
 8000d90:	40012c00 	.word	0x40012c00

08000d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <MX_USART1_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f003 fbb8 	bl	8004540 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f000 f941 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200003c0 	.word	0x200003c0
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e02:	f043 0320 	orr.w	r3, r3, #32
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0320 	and.w	r3, r3, #32
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0xa8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Col_0_Pin|Col_1_Pin|Col_2_Pin|Col_3_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f640 4103 	movw	r1, #3075	@ 0xc03
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <MX_GPIO_Init+0xac>)
 8000e4c:	f000 fec1 	bl	8001bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Row_0_Pin Row_1_Pin Row_2_Pin Row_3_Pin */
  GPIO_InitStruct.Pin = Row_0_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin;
 8000e50:	23f0      	movs	r3, #240	@ 0xf0
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_GPIO_Init+0xb0>)
 8000e64:	f000 fd1a 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : Col_0_Pin Col_1_Pin Col_2_Pin Col_3_Pin */
  GPIO_InitStruct.Pin = Col_0_Pin|Col_1_Pin|Col_2_Pin|Col_3_Pin;
 8000e68:	f640 4303 	movw	r3, #3075	@ 0xc03
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_GPIO_Init+0xac>)
 8000e82:	f000 fd0b 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40010800 	.word	0x40010800

08000e9c <SysTick_CallBack>:

/* USER CODE BEGIN 4 */

void SysTick_CallBack(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
    SysTicks++;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <SysTick_CallBack+0x28>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <SysTick_CallBack+0x28>)
 8000eaa:	701a      	strb	r2, [r3, #0]
    //Pressed_key++;
    if(SysTicks == 5) // Each 5msec
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SysTick_CallBack+0x28>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	d105      	bne.n	8000ec0 <SysTick_CallBack+0x24>
    {
    KEYPAD_Scan(0);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f006 fdb3 	bl	8007a20 <KEYPAD_Scan>
    SysTicks = 0;
 8000eba:	4b02      	ldr	r3, [pc, #8]	@ (8000ec4 <SysTick_CallBack+0x28>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000374 	.word	0x20000374

08000ec8 <Display_Handler>:

void Display_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	//char pressed[2];

    if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 8000ecc:	4b61      	ldr	r3, [pc, #388]	@ (8001054 <Display_Handler+0x18c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d107      	bne.n	8000ee4 <Display_Handler+0x1c>
    {
    //LCD_Write_Char('1');
    	Pressed_key= '1';
 8000ed4:	4b60      	ldr	r3, [pc, #384]	@ (8001058 <Display_Handler+0x190>)
 8000ed6:	2231      	movs	r2, #49	@ 0x31
 8000ed8:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED);
 8000eda:	bf00      	nop
 8000edc:	4b5d      	ldr	r3, [pc, #372]	@ (8001054 <Display_Handler+0x18c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d0fb      	beq.n	8000edc <Display_Handler+0x14>
    }
    if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8001054 <Display_Handler+0x18c>)
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d107      	bne.n	8000efc <Display_Handler+0x34>
    {
    //LCD_Write_Char('2');
    	Pressed_key = '2';
 8000eec:	4b5a      	ldr	r3, [pc, #360]	@ (8001058 <Display_Handler+0x190>)
 8000eee:	2232      	movs	r2, #50	@ 0x32
 8000ef0:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED);
 8000ef2:	bf00      	nop
 8000ef4:	4b57      	ldr	r3, [pc, #348]	@ (8001054 <Display_Handler+0x18c>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d0fb      	beq.n	8000ef4 <Display_Handler+0x2c>
    }
    if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED)
 8000efc:	4b55      	ldr	r3, [pc, #340]	@ (8001054 <Display_Handler+0x18c>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d107      	bne.n	8000f14 <Display_Handler+0x4c>
    {
    //LCD_Write_Char('3');
    	Pressed_key = '3';
 8000f04:	4b54      	ldr	r3, [pc, #336]	@ (8001058 <Display_Handler+0x190>)
 8000f06:	2233      	movs	r2, #51	@ 0x33
 8000f08:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED);
 8000f0a:	bf00      	nop
 8000f0c:	4b51      	ldr	r3, [pc, #324]	@ (8001054 <Display_Handler+0x18c>)
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d0fb      	beq.n	8000f0c <Display_Handler+0x44>
    }
    if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED)
 8000f14:	4b4f      	ldr	r3, [pc, #316]	@ (8001054 <Display_Handler+0x18c>)
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d107      	bne.n	8000f2c <Display_Handler+0x64>
    {
    //LCD_Write_Char('4');
    	Pressed_key = '4';
 8000f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001058 <Display_Handler+0x190>)
 8000f1e:	2234      	movs	r2, #52	@ 0x34
 8000f20:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED);
 8000f22:	bf00      	nop
 8000f24:	4b4b      	ldr	r3, [pc, #300]	@ (8001054 <Display_Handler+0x18c>)
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d0fb      	beq.n	8000f24 <Display_Handler+0x5c>
    }
    if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED)
 8000f2c:	4b49      	ldr	r3, [pc, #292]	@ (8001054 <Display_Handler+0x18c>)
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d107      	bne.n	8000f44 <Display_Handler+0x7c>
    {
    //LCD_Write_Char('5');
    	Pressed_key = '5';
 8000f34:	4b48      	ldr	r3, [pc, #288]	@ (8001058 <Display_Handler+0x190>)
 8000f36:	2235      	movs	r2, #53	@ 0x35
 8000f38:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED);
 8000f3a:	bf00      	nop
 8000f3c:	4b45      	ldr	r3, [pc, #276]	@ (8001054 <Display_Handler+0x18c>)
 8000f3e:	795b      	ldrb	r3, [r3, #5]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d0fb      	beq.n	8000f3c <Display_Handler+0x74>
    }
    if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED)
 8000f44:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <Display_Handler+0x18c>)
 8000f46:	799b      	ldrb	r3, [r3, #6]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d107      	bne.n	8000f5c <Display_Handler+0x94>
    {
    //LCD_Write_Char('6');
    	Pressed_key = '6';
 8000f4c:	4b42      	ldr	r3, [pc, #264]	@ (8001058 <Display_Handler+0x190>)
 8000f4e:	2236      	movs	r2, #54	@ 0x36
 8000f50:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED);
 8000f52:	bf00      	nop
 8000f54:	4b3f      	ldr	r3, [pc, #252]	@ (8001054 <Display_Handler+0x18c>)
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d0fb      	beq.n	8000f54 <Display_Handler+0x8c>
    }
    if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED)
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <Display_Handler+0x18c>)
 8000f5e:	7a1b      	ldrb	r3, [r3, #8]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d107      	bne.n	8000f74 <Display_Handler+0xac>
    {
    //LCD_Write_Char('7');
    	Pressed_key = '7';
 8000f64:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <Display_Handler+0x190>)
 8000f66:	2237      	movs	r2, #55	@ 0x37
 8000f68:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED);
 8000f6a:	bf00      	nop
 8000f6c:	4b39      	ldr	r3, [pc, #228]	@ (8001054 <Display_Handler+0x18c>)
 8000f6e:	7a1b      	ldrb	r3, [r3, #8]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d0fb      	beq.n	8000f6c <Display_Handler+0xa4>
    }
    if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED)
 8000f74:	4b37      	ldr	r3, [pc, #220]	@ (8001054 <Display_Handler+0x18c>)
 8000f76:	7a5b      	ldrb	r3, [r3, #9]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d107      	bne.n	8000f8c <Display_Handler+0xc4>
    {
    //LCD_Write_Char('8');
    	Pressed_key = '8';
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <Display_Handler+0x190>)
 8000f7e:	2238      	movs	r2, #56	@ 0x38
 8000f80:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED);
 8000f82:	bf00      	nop
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <Display_Handler+0x18c>)
 8000f86:	7a5b      	ldrb	r3, [r3, #9]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d0fb      	beq.n	8000f84 <Display_Handler+0xbc>
    }
    if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED)
 8000f8c:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <Display_Handler+0x18c>)
 8000f8e:	7a9b      	ldrb	r3, [r3, #10]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d107      	bne.n	8000fa4 <Display_Handler+0xdc>
    {
    //LCD_Write_Char('9');
    	Pressed_key = '9';
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <Display_Handler+0x190>)
 8000f96:	2239      	movs	r2, #57	@ 0x39
 8000f98:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED);
 8000f9a:	bf00      	nop
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <Display_Handler+0x18c>)
 8000f9e:	7a9b      	ldrb	r3, [r3, #10]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d0fb      	beq.n	8000f9c <Display_Handler+0xd4>
    }
    if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED)
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <Display_Handler+0x18c>)
 8000fa6:	7b5b      	ldrb	r3, [r3, #13]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d107      	bne.n	8000fbc <Display_Handler+0xf4>
    {
    //LCD_Write_Char('0');
    	Pressed_key = '0';
 8000fac:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <Display_Handler+0x190>)
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED);
 8000fb2:	bf00      	nop
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <Display_Handler+0x18c>)
 8000fb6:	7b5b      	ldrb	r3, [r3, #13]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d0fb      	beq.n	8000fb4 <Display_Handler+0xec>
    }
    if(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED)
 8000fbc:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <Display_Handler+0x18c>)
 8000fbe:	7b1b      	ldrb	r3, [r3, #12]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <Display_Handler+0x10c>
    {
    //LCD_Write_Char('*');
    	Pressed_key = '*';
 8000fc4:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <Display_Handler+0x190>)
 8000fc6:	222a      	movs	r2, #42	@ 0x2a
 8000fc8:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED);
 8000fca:	bf00      	nop
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <Display_Handler+0x18c>)
 8000fce:	7b1b      	ldrb	r3, [r3, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d0fb      	beq.n	8000fcc <Display_Handler+0x104>
    }
    if(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED)
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <Display_Handler+0x18c>)
 8000fd6:	7b9b      	ldrb	r3, [r3, #14]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d107      	bne.n	8000fec <Display_Handler+0x124>
    {
    //LCD_Write_Char('#');
    	Pressed_key = '#';
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <Display_Handler+0x190>)
 8000fde:	2223      	movs	r2, #35	@ 0x23
 8000fe0:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED);
 8000fe2:	bf00      	nop
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <Display_Handler+0x18c>)
 8000fe6:	7b9b      	ldrb	r3, [r3, #14]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d0fb      	beq.n	8000fe4 <Display_Handler+0x11c>
    }
    if(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED)
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <Display_Handler+0x18c>)
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d107      	bne.n	8001004 <Display_Handler+0x13c>
    {
    //LCD_SR();
    	Pressed_key = 'A';
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <Display_Handler+0x190>)
 8000ff6:	2241      	movs	r2, #65	@ 0x41
 8000ff8:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED);
 8000ffa:	bf00      	nop
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <Display_Handler+0x18c>)
 8000ffe:	78db      	ldrb	r3, [r3, #3]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d0fb      	beq.n	8000ffc <Display_Handler+0x134>
    }
    if(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <Display_Handler+0x18c>)
 8001006:	79db      	ldrb	r3, [r3, #7]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <Display_Handler+0x154>
    {
    //LCD_SL();
    	Pressed_key = 'B';
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <Display_Handler+0x190>)
 800100e:	2242      	movs	r2, #66	@ 0x42
 8001010:	701a      	strb	r2, [r3, #0]
    while(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED);
 8001012:	bf00      	nop
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <Display_Handler+0x18c>)
 8001016:	79db      	ldrb	r3, [r3, #7]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d0fb      	beq.n	8001014 <Display_Handler+0x14c>
    }
    if(gu8_KeyStatesArr[KEY_F3] == KEY_PRESSED)
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <Display_Handler+0x18c>)
 800101e:	7adb      	ldrb	r3, [r3, #11]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d107      	bne.n	8001034 <Display_Handler+0x16c>
    {
    //LCD_Clear();
    	Pressed_key = 'C';
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <Display_Handler+0x190>)
 8001026:	2243      	movs	r2, #67	@ 0x43
 8001028:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_F3] == KEY_PRESSED);
 800102a:	bf00      	nop
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <Display_Handler+0x18c>)
 800102e:	7adb      	ldrb	r3, [r3, #11]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d0fb      	beq.n	800102c <Display_Handler+0x164>
    }
    if(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED)
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <Display_Handler+0x18c>)
 8001036:	7bdb      	ldrb	r3, [r3, #15]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d107      	bne.n	800104c <Display_Handler+0x184>
    {
    //LCD_Clear();
    	Pressed_key = 'D';
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <Display_Handler+0x190>)
 800103e:	2244      	movs	r2, #68	@ 0x44
 8001040:	701a      	strb	r2, [r3, #0]

    while(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED);
 8001042:	bf00      	nop
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <Display_Handler+0x18c>)
 8001046:	7bdb      	ldrb	r3, [r3, #15]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d0fb      	beq.n	8001044 <Display_Handler+0x17c>
    }
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000364 	.word	0x20000364
 8001058:	20000000 	.word	0x20000000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x5c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x60>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_MspInit+0x60>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000

080010cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a09      	ldr	r2, [pc, #36]	@ (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_TIM_Base_MspInit+0x38>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_TIM_Base_MspInit+0x38>)
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_TIM_Base_MspInit+0x38>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40012c00 	.word	0x40012c00
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <HAL_UART_MspInit+0x9c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d139      	bne.n	800119c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a1e      	ldr	r2, [pc, #120]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <HAL_UART_MspInit+0xa0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <HAL_UART_MspInit+0xa4>)
 800116e:	f000 fb95 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <HAL_UART_MspInit+0xa4>)
 8001188:	f000 fb88 	bl	800189c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2025      	movs	r0, #37	@ 0x25
 8001192:	f000 fa9a 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001196:	2025      	movs	r0, #37	@ 0x25
 8001198:	f000 fab3 	bl	8001702 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013800 	.word	0x40013800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <NMI_Handler+0x4>

080011b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <MemManage_Handler+0x4>

080011c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f94c 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 8001204:	f7ff fe4a 	bl	8000e9c <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001212:	f000 fe12 	bl	8001e3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200010dc 	.word	0x200010dc

08001220 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <USART1_IRQHandler+0x10>)
 8001226:	f003 f9db 	bl	80045e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003c0 	.word	0x200003c0

08001234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <_kill>:

int _kill(int pid, int sig)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800124c:	f00a fd30 	bl	800bcb0 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	2216      	movs	r2, #22
 8001254:	601a      	str	r2, [r3, #0]
  return -1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_exit>:

void _exit (int status)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800126a:	f04f 31ff 	mov.w	r1, #4294967295
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffe7 	bl	8001242 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <_exit+0x12>

08001278 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e00a      	b.n	80012a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800128a:	f3af 8000 	nop.w
 800128e:	4601      	mov	r1, r0
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	b2ca      	uxtb	r2, r1
 8001298:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dbf0      	blt.n	800128a <_read+0x12>
  }

  return len;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e009      	b.n	80012d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbf1      	blt.n	80012c4 <_write+0x12>
  }
  return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_close>:

int _close(int file)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001310:	605a      	str	r2, [r3, #4]
  return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <_isatty>:

int _isatty(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <_sbrk+0x5c>)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <_sbrk+0x60>)
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <_sbrk+0x64>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <_sbrk+0x68>)
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800137c:	f00a fc98 	bl	800bcb0 <__errno>
 8001380:	4603      	mov	r3, r0
 8001382:	220c      	movs	r2, #12
 8001384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	e009      	b.n	80013a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <_sbrk+0x64>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <_sbrk+0x64>)
 800139c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20005000 	.word	0x20005000
 80013ac:	00000400 	.word	0x00000400
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20001720 	.word	0x20001720

080013b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c4:	f7ff fff8 	bl	80013b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480b      	ldr	r0, [pc, #44]	@ (80013f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ca:	490c      	ldr	r1, [pc, #48]	@ (80013fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001400 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013e0:	4c09      	ldr	r4, [pc, #36]	@ (8001408 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ee:	f00a fc65 	bl	800bcbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff fbef 	bl	8000bd4 <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001400:	0800f8ac 	.word	0x0800f8ac
  ldr r2, =_sbss
 8001404:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001408:	20001720 	.word	0x20001720

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_Init+0x28>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <HAL_Init+0x28>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 f947 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fe1c 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f95f 	bl	800171e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f927 	bl	80016ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000004 	.word	0x20000004
 8001494:	2000000c 	.word	0x2000000c
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_IncTick+0x1c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <HAL_IncTick+0x20>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a03      	ldr	r2, [pc, #12]	@ (80014bc <HAL_IncTick+0x20>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	2000040c 	.word	0x2000040c

080014c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b02      	ldr	r3, [pc, #8]	@ (80014d0 <HAL_GetTick+0x10>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	2000040c 	.word	0x2000040c

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff fff0 	bl	80014c0 <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffe0 	bl	80014c0 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000000c 	.word	0x2000000c

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	@ (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4906      	ldr	r1, [pc, #24]	@ (80015b4 <__NVIC_EnableIRQ+0x34>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	@ (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	@ 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff90 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff2d 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff42 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff35 	bl	8001580 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d008      	beq.n	8001760 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e020      	b.n	80017a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020e 	bic.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d005      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e051      	b.n	8001874 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 020e 	bic.w	r2, r2, #14
 80017de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_DMA_Abort_IT+0xd4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d029      	beq.n	800184e <HAL_DMA_Abort_IT+0xa2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_DMA_Abort_IT+0xd8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_Abort_IT+0x9e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_DMA_Abort_IT+0xdc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_Abort_IT+0x98>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_DMA_Abort_IT+0xe0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d012      	beq.n	800183e <HAL_DMA_Abort_IT+0x92>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <HAL_DMA_Abort_IT+0xe4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00a      	beq.n	8001838 <HAL_DMA_Abort_IT+0x8c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_DMA_Abort_IT+0xe8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d102      	bne.n	8001832 <HAL_DMA_Abort_IT+0x86>
 800182c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001830:	e00e      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001836:	e00b      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001838:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800183c:	e008      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800183e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001842:	e005      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 8001844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001848:	e002      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800184a:	2310      	movs	r3, #16
 800184c:	e000      	b.n	8001850 <HAL_DMA_Abort_IT+0xa4>
 800184e:	2301      	movs	r3, #1
 8001850:	4a11      	ldr	r2, [pc, #68]	@ (8001898 <HAL_DMA_Abort_IT+0xec>)
 8001852:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
    } 
  }
  return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40020008 	.word	0x40020008
 8001884:	4002001c 	.word	0x4002001c
 8001888:	40020030 	.word	0x40020030
 800188c:	40020044 	.word	0x40020044
 8001890:	40020058 	.word	0x40020058
 8001894:	4002006c 	.word	0x4002006c
 8001898:	40020000 	.word	0x40020000

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	@ 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e169      	b.n	8001b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8158 	bne.w	8001b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018d8:	4a98      	ldr	r2, [pc, #608]	@ (8001b3c <HAL_GPIO_Init+0x2a0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d875      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018de:	4a98      	ldr	r2, [pc, #608]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d058      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018e4:	4a96      	ldr	r2, [pc, #600]	@ (8001b40 <HAL_GPIO_Init+0x2a4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d86f      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018ea:	4a96      	ldr	r2, [pc, #600]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d052      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018f0:	4a94      	ldr	r2, [pc, #592]	@ (8001b44 <HAL_GPIO_Init+0x2a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d869      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018f6:	4a94      	ldr	r2, [pc, #592]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04c      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018fc:	4a92      	ldr	r2, [pc, #584]	@ (8001b48 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d863      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001902:	4a92      	ldr	r2, [pc, #584]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d046      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 8001908:	4a90      	ldr	r2, [pc, #576]	@ (8001b4c <HAL_GPIO_Init+0x2b0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d85d      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d82a      	bhi.n	8001968 <HAL_GPIO_Init+0xcc>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d859      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_GPIO_Init+0x80>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001997 	.word	0x08001997
 8001920:	08001971 	.word	0x08001971
 8001924:	08001983 	.word	0x08001983
 8001928:	080019c5 	.word	0x080019c5
 800192c:	080019cb 	.word	0x080019cb
 8001930:	080019cb 	.word	0x080019cb
 8001934:	080019cb 	.word	0x080019cb
 8001938:	080019cb 	.word	0x080019cb
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019cb 	.word	0x080019cb
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cb 	.word	0x080019cb
 800194c:	080019cb 	.word	0x080019cb
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019cb 	.word	0x080019cb
 8001958:	080019cb 	.word	0x080019cb
 800195c:	080019cb 	.word	0x080019cb
 8001960:	08001979 	.word	0x08001979
 8001964:	0800198d 	.word	0x0800198d
 8001968:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <HAL_GPIO_Init+0x2b4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e029      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e024      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01f      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e01a      	b.n	80019cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e009      	b.n	80019cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x130>
          break;
 80019ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	@ 0xff
 80019d0:	d801      	bhi.n	80019d6 <HAL_GPIO_Init+0x13a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_Init+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	@ 0xff
 80019e0:	d802      	bhi.n	80019e8 <HAL_GPIO_Init+0x14c>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x152>
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	3b08      	subs	r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	210f      	movs	r1, #15
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80b1 	beq.w	8001b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b4a      	ldr	r3, [pc, #296]	@ (8001b54 <HAL_GPIO_Init+0x2b8>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a34:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <HAL_GPIO_Init+0x2c0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1ec>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_GPIO_Init+0x2c4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1e8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b64 <HAL_GPIO_Init+0x2c8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_GPIO_Init+0x2cc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1e0>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x1ee>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a9a:	492f      	ldr	r1, [pc, #188]	@ (8001b58 <HAL_GPIO_Init+0x2bc>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	492c      	ldr	r1, [pc, #176]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4928      	ldr	r1, [pc, #160]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	491e      	ldr	r1, [pc, #120]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4918      	ldr	r1, [pc, #96]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4914      	ldr	r1, [pc, #80]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	490e      	ldr	r1, [pc, #56]	@ (8001b6c <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e021      	b.n	8001b7e <HAL_GPIO_Init+0x2e2>
 8001b3a:	bf00      	nop
 8001b3c:	10320000 	.word	0x10320000
 8001b40:	10310000 	.word	0x10310000
 8001b44:	10220000 	.word	0x10220000
 8001b48:	10210000 	.word	0x10210000
 8001b4c:	10120000 	.word	0x10120000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	40010800 	.word	0x40010800
 8001b60:	40010c00 	.word	0x40010c00
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40011400 	.word	0x40011400
 8001b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	4909      	ldr	r1, [pc, #36]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f47f ae8e 	bne.w	80018b0 <HAL_GPIO_Init+0x14>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	372c      	adds	r7, #44	@ 0x2c
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e001      	b.n	8001bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]
 8001bde:	4613      	mov	r3, r2
 8001be0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be2:	787b      	ldrb	r3, [r7, #1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bee:	e003      	b.n	8001bf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	611a      	str	r2, [r3, #16]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0e8      	b.n	8001de6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f008 fd83 	bl	800a734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 f9d2 	bl	8004fea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c50:	f003 f9a8 	bl	8004fa4 <USB_CoreInit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0bf      	b.n	8001de6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 f9d6 	bl	800501e <USB_SetCurrentMode>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b0      	b.n	8001de6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e03e      	b.n	8001d08 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3311      	adds	r3, #17
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3310      	adds	r3, #16
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3313      	adds	r3, #19
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3324      	adds	r3, #36	@ 0x24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	3301      	adds	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	791b      	ldrb	r3, [r3, #4]
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d3bb      	bcc.n	8001c8a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	e044      	b.n	8001da2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3b5      	bcc.n	8001d18 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db6:	f003 f93e 	bl	8005036 <USB_DevInit>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e00c      	b.n	8001de6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f005 fbbd 	bl	800755e <USB_DevDisconnect>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_Start+0x16>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e016      	b.n	8001e32 <HAL_PCD_Start+0x44>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f8d4 	bl	8004fbe <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e16:	2101      	movs	r1, #1
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f008 fefe 	bl	800ac1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fb91 	bl	800754a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fb93 	bl	8007572 <USB_ReadInterrupts>
 8001e4c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb1a 	bl	8002492 <PCD_EP_ISR_Handler>

    return;
 8001e5e:	e119      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f008 fcd1 	bl	800a82a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f905 	bl	800209a <HAL_PCD_SetAddress>

    return;
 8001e90:	e100      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001eb4:	e0ee      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ed8:	e0dc      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d027      	beq.n	8001f34 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0208 	bic.w	r2, r2, #8
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f008 fcc1 	bl	800a89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001f32:	e0af      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8083 	beq.w	8002046 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	77fb      	strb	r3, [r7, #31]
 8001f44:	e010      	b.n	8001f68 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	b292      	uxth	r2, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	443b      	add	r3, r7
 8001f5e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
 8001f64:	3301      	adds	r3, #1
 8001f66:	77fb      	strb	r3, [r7, #31]
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
 8001f6a:	2b07      	cmp	r3, #7
 8001f6c:	d9eb      	bls.n	8001f46 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	b292      	uxth	r2, r2
 8001f82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f9e:	bf00      	nop
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f6      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	e00f      	b.n	8001ff0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	7ffa      	ldrb	r2, [r7, #31]
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	440a      	add	r2, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	3320      	adds	r3, #32
 8001fe2:	443b      	add	r3, r7
 8001fe4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fe8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	3301      	adds	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b07      	cmp	r3, #7
 8001ff4:	d9ec      	bls.n	8001fd0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	b292      	uxth	r2, r2
 800200a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002016:	b29a      	uxth	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002020:	b292      	uxth	r2, r2
 8002022:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0204 	orr.w	r2, r2, #4
 8002038:	b292      	uxth	r2, r2
 800203a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f008 fc12 	bl	800a868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002044:	e026      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00f      	beq.n	8002070 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f008 fbd0 	bl	800a80e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800206e:	e011      	b.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800208c:	b292      	uxth	r2, r2
 800208e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002092:	bf00      	nop
  }
}
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_PCD_SetAddress+0x1a>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e012      	b.n	80020da <HAL_PCD_SetAddress+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 fa2a 	bl	8007524 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	4608      	mov	r0, r1
 80020ec:	4611      	mov	r1, r2
 80020ee:	461a      	mov	r2, r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	70fb      	strb	r3, [r7, #3]
 80020f4:	460b      	mov	r3, r1
 80020f6:	803b      	strh	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da0e      	bge.n	8002126 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	f003 0207 	and.w	r2, r3, #7
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	3310      	adds	r3, #16
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	705a      	strb	r2, [r3, #1]
 8002124:	e00e      	b.n	8002144 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 0207 	and.w	r2, r3, #7
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	b2da      	uxtb	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002150:	883a      	ldrh	r2, [r7, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	78ba      	ldrb	r2, [r7, #2]
 800215a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800215c:	78bb      	ldrb	r3, [r7, #2]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d102      	bne.n	8002168 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_PCD_EP_Open+0x94>
 8002172:	2302      	movs	r3, #2
 8002174:	e00e      	b.n	8002194 <HAL_PCD_EP_Open+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 ff73 	bl	8005070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002192:	7afb      	ldrb	r3, [r7, #11]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da0e      	bge.n	80021ce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 0207 	and.w	r2, r3, #7
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	3310      	adds	r3, #16
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	705a      	strb	r2, [r3, #1]
 80021cc:	e00e      	b.n	80021ec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 0207 	and.w	r2, r3, #7
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_PCD_EP_Close+0x6a>
 8002202:	2302      	movs	r3, #2
 8002204:	e00e      	b.n	8002224 <HAL_PCD_EP_Close+0x88>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 faeb 	bl	80057f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	460b      	mov	r3, r1
 800223a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	b2da      	uxtb	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6979      	ldr	r1, [r7, #20]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fca2 	bl	8005bc8 <USB_EPStartXfer>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0207 	and.w	r2, r3, #7
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80022b0:	681b      	ldr	r3, [r3, #0]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	460b      	mov	r3, r1
 80022ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	3310      	adds	r3, #16
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2201      	movs	r2, #1
 8002306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	b2da      	uxtb	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fc54 	bl	8005bc8 <USB_EPStartXfer>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	7912      	ldrb	r2, [r2, #4]
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e04c      	b.n	80023e2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0e      	bge.n	800236e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0207 	and.w	r2, r3, #7
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	3310      	adds	r3, #16
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	705a      	strb	r2, [r3, #1]
 800236c:	e00c      	b.n	8002388 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_EP_SetStall+0x7e>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e01c      	b.n	80023e2 <HAL_PCD_EP_SetStall+0xb8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 ffb7 	bl	800732a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f005 f8dc 	bl	8007590 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7912      	ldrb	r2, [r2, #4]
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e040      	b.n	800248a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da0e      	bge.n	800242e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	3310      	adds	r3, #16
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	705a      	strb	r2, [r3, #1]
 800242c:	e00e      	b.n	800244c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	f003 0207 	and.w	r2, r3, #7
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_PCD_EP_ClrStall+0x82>
 8002468:	2302      	movs	r3, #2
 800246a:	e00e      	b.n	800248a <HAL_PCD_EP_ClrStall+0xa0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	f004 ffa5 	bl	80073ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b096      	sub	sp, #88	@ 0x58
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800249a:	e3bb      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80024b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 8175 	bne.w	80027aa <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d14e      	bne.n	800256a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024dc:	81fb      	strh	r3, [r7, #14]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3310      	adds	r3, #16
 80024f4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4413      	add	r3, r2
 800250a:	3302      	adds	r3, #2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	441a      	add	r2, r3
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f008 f951 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b5b      	ldrb	r3, [r3, #13]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8368 	beq.w	8002c14 <PCD_EP_ISR_Handler+0x782>
 8002544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 8363 	bne.w	8002c14 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7b5b      	ldrb	r3, [r3, #13]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002558:	b2da      	uxtb	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	735a      	strb	r2, [r3, #13]
 8002568:	e354      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002570:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800257c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d034      	beq.n	80025f2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	3306      	adds	r3, #6
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80025be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f005 f833 	bl	8007632 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80025d8:	4013      	ands	r3, r2
 80025da:	823b      	strh	r3, [r7, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	8a3a      	ldrh	r2, [r7, #16]
 80025e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025e6:	b292      	uxth	r2, r2
 80025e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f008 f8c8 	bl	800a780 <HAL_PCD_SetupStageCallback>
 80025f0:	e310      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025f2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f280 830c 	bge.w	8002c14 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29a      	uxth	r2, r3
 8002604:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002608:	4013      	ands	r3, r2
 800260a:	83fb      	strh	r3, [r7, #30]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	8bfa      	ldrh	r2, [r7, #30]
 8002612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002616:	b292      	uxth	r2, r2
 8002618:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3306      	adds	r3, #6
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d019      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1f0>
 800264e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265c:	6959      	ldr	r1, [r3, #20]
 800265e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002660:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002664:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002666:	b29b      	uxth	r3, r3
 8002668:	f004 ffe3 	bl	8007632 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800266c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	441a      	add	r2, r3
 8002676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002678:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f008 f891 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800268c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 82bd 	bne.w	8002c14 <PCD_EP_ISR_Handler+0x782>
 800269a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800269e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80026a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026a6:	f000 82b5 	beq.w	8002c14 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b3e      	cmp	r3, #62	@ 0x3e
 80026e0:	d91d      	bls.n	800271e <PCD_EP_ISR_Handler+0x28c>
 80026e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <PCD_EP_ISR_Handler+0x26a>
 80026f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f8:	3b01      	subs	r3, #1
 80026fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29a      	uxth	r2, r3
 8002702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002704:	b29b      	uxth	r3, r3
 8002706:	029b      	lsls	r3, r3, #10
 8002708:	b29b      	uxth	r3, r3
 800270a:	4313      	orrs	r3, r2
 800270c:	b29b      	uxth	r3, r3
 800270e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002716:	b29a      	uxth	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e026      	b.n	800276c <PCD_EP_ISR_Handler+0x2da>
 800271e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <PCD_EP_ISR_Handler+0x2aa>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29a      	uxth	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	e017      	b.n	800276c <PCD_EP_ISR_Handler+0x2da>
 800273c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	647b      	str	r3, [r7, #68]	@ 0x44
 8002744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <PCD_EP_ISR_Handler+0x2c4>
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	3301      	adds	r3, #1
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29a      	uxth	r2, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275e:	b29b      	uxth	r3, r3
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	b29b      	uxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800277c:	827b      	strh	r3, [r7, #18]
 800277e:	8a7b      	ldrh	r3, [r7, #18]
 8002780:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002784:	827b      	strh	r3, [r7, #18]
 8002786:	8a7b      	ldrh	r3, [r7, #18]
 8002788:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800278c:	827b      	strh	r3, [r7, #18]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	8a7b      	ldrh	r3, [r7, #18]
 8002794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
 80027a8:	e234      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f280 80fc 	bge.w	80029c0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80027de:	4013      	ands	r3, r2
 80027e0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80027f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027fa:	b292      	uxth	r2, r2
 80027fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027fe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002816:	7b1b      	ldrb	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d125      	bne.n	8002868 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	3306      	adds	r3, #6
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002844:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002848:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8092 	beq.w	8002976 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002858:	6959      	ldr	r1, [r3, #20]
 800285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800285c:	88da      	ldrh	r2, [r3, #6]
 800285e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002862:	f004 fee6 	bl	8007632 <USB_ReadPMA>
 8002866:	e086      	b.n	8002976 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286a:	78db      	ldrb	r3, [r3, #3]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d10a      	bne.n	8002886 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002870:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002874:	461a      	mov	r2, r3
 8002876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f9d9 	bl	8002c30 <HAL_PCD_EP_DB_Receive>
 800287e:	4603      	mov	r3, r0
 8002880:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002884:	e077      	b.n	8002976 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800289c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028a0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80028b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d024      	beq.n	800292e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	3302      	adds	r3, #2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02e      	beq.n	8002976 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291e:	6959      	ldr	r1, [r3, #20]
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	891a      	ldrh	r2, [r3, #8]
 8002924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002928:	f004 fe83 	bl	8007632 <USB_ReadPMA>
 800292c:	e023      	b.n	8002976 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	3306      	adds	r3, #6
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002956:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800295a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002968:	6959      	ldr	r1, [r3, #20]
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	895a      	ldrh	r2, [r3, #10]
 800296e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002972:	f004 fe5e 	bl	8007632 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800297e:	441a      	add	r2, r3
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800298c:	441a      	add	r2, r3
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <PCD_EP_ISR_Handler+0x514>
 800299a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800299e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d206      	bcs.n	80029b4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f007 fef9 	bl	800a7a4 <HAL_PCD_DataOutStageCallback>
 80029b2:	e005      	b.n	80029c0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f904 	bl	8005bc8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8123 	beq.w	8002c14 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80029ce:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	3310      	adds	r3, #16
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80029f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a20:	78db      	ldrb	r3, [r3, #3]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	f040 80a2 	bne.w	8002b6c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a30:	7b1b      	ldrb	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8093 	beq.w	8002b5e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d126      	bne.n	8002a9a <PCD_EP_ISR_Handler+0x608>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	4413      	add	r3, r2
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	011a      	lsls	r2, r3, #4
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	e061      	b.n	8002b5e <PCD_EP_ISR_Handler+0x6cc>
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d15d      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x6cc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	011a      	lsls	r2, r3, #4
 8002ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	2200      	movs	r2, #0
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	e045      	b.n	8002b5e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d126      	bne.n	8002b2e <PCD_EP_ISR_Handler+0x69c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	4413      	add	r3, r2
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	4413      	add	r3, r2
 8002b02:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e017      	b.n	8002b5e <PCD_EP_ISR_Handler+0x6cc>
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d113      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x6cc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b44:	4413      	add	r3, r2
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	011a      	lsls	r2, r3, #4
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b50:	4413      	add	r3, r2
 8002b52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f007 fe38 	bl	800a7da <HAL_PCD_DataInStageCallback>
 8002b6a:	e053      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d146      	bne.n	8002c06 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d907      	bls.n	8002bc0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bb8:	1ad2      	subs	r2, r2, r3
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e002      	b.n	8002bc6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f007 fe00 	bl	800a7da <HAL_PCD_DataInStageCallback>
 8002bda:	e01b      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002be4:	441a      	add	r2, r3
 8002be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bf2:	441a      	add	r2, r3
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 ffe2 	bl	8005bc8 <USB_EPStartXfer>
 8002c04:	e006      	b.n	8002c14 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f91b 	bl	8002e4a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f6ff ac3b 	blt.w	800249c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3758      	adds	r7, #88	@ 0x58
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07e      	beq.n	8002d46 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	8b7b      	ldrh	r3, [r7, #26]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d306      	bcc.n	8002c8a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	8b7b      	ldrh	r3, [r7, #26]
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	619a      	str	r2, [r3, #24]
 8002c88:	e002      	b.n	8002c90 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d123      	bne.n	8002ce0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb2:	833b      	strh	r3, [r7, #24]
 8002cb4:	8b3b      	ldrh	r3, [r7, #24]
 8002cb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002cba:	833b      	strh	r3, [r7, #24]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	8b3b      	ldrh	r3, [r7, #24]
 8002ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01f      	beq.n	8002d2a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d04:	82fb      	strh	r3, [r7, #22]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	441a      	add	r2, r3
 8002d14:	8afb      	ldrh	r3, [r7, #22]
 8002d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d2a:	8b7b      	ldrh	r3, [r7, #26]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8087 	beq.w	8002e40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6959      	ldr	r1, [r3, #20]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	891a      	ldrh	r2, [r3, #8]
 8002d3e:	8b7b      	ldrh	r3, [r7, #26]
 8002d40:	f004 fc77 	bl	8007632 <USB_ReadPMA>
 8002d44:	e07c      	b.n	8002e40 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3306      	adds	r3, #6
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	8b7b      	ldrh	r3, [r7, #26]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d306      	bcc.n	8002d88 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	8b7b      	ldrh	r3, [r7, #26]
 8002d80:	1ad2      	subs	r2, r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	619a      	str	r2, [r3, #24]
 8002d86:	e002      	b.n	8002d8e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d123      	bne.n	8002dde <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db0:	83fb      	strh	r3, [r7, #30]
 8002db2:	8bfb      	ldrh	r3, [r7, #30]
 8002db4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002db8:	83fb      	strh	r3, [r7, #30]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	8bfb      	ldrh	r3, [r7, #30]
 8002dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11f      	bne.n	8002e28 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e02:	83bb      	strh	r3, [r7, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	441a      	add	r2, r3
 8002e12:	8bbb      	ldrh	r3, [r7, #28]
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e28:	8b7b      	ldrh	r3, [r7, #26]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6959      	ldr	r1, [r3, #20]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	895a      	ldrh	r2, [r3, #10]
 8002e3a:	8b7b      	ldrh	r3, [r7, #26]
 8002e3c:	f004 fbf9 	bl	8007632 <USB_ReadPMA>
    }
  }

  return count;
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b0a4      	sub	sp, #144	@ 0x90
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	4613      	mov	r3, r2
 8002e56:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 81dd 	beq.w	800321e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e8c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d907      	bls.n	8002eac <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ea4:	1ad2      	subs	r2, r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	619a      	str	r2, [r3, #24]
 8002eaa:	e002      	b.n	8002eb2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80b9 	bne.w	800302e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d126      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	4413      	add	r3, r2
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	011a      	lsls	r2, r3, #4
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	801a      	strh	r2, [r3, #0]
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	e01a      	b.n	8002f48 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d116      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	4413      	add	r3, r2
 8002f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	011a      	lsls	r2, r3, #4
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d126      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e017      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d113      	bne.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	4413      	add	r3, r2
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f007 fbfd 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 82fc 	beq.w	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003006:	82fb      	strh	r3, [r7, #22]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	8afb      	ldrh	r3, [r7, #22]
 8003018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800301c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
 800302c:	e2da      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d021      	beq.n	800307c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003052:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003082:	2b01      	cmp	r3, #1
 8003084:	f040 82ae 	bne.w	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003090:	441a      	add	r2, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800309e:	441a      	add	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d30b      	bcc.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	e017      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d108      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80030d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80030e0:	e00a      	b.n	80030f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d165      	bne.n	80031cc <HAL_PCD_EP_DB_Transmit+0x382>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003114:	4413      	add	r3, r2
 8003116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	011a      	lsls	r2, r3, #4
 800311e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003120:	4413      	add	r3, r2
 8003122:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003132:	b29a      	uxth	r2, r3
 8003134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003136:	801a      	strh	r2, [r3, #0]
 8003138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800313c:	2b3e      	cmp	r3, #62	@ 0x3e
 800313e:	d91d      	bls.n	800317c <HAL_PCD_EP_DB_Transmit+0x332>
 8003140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_PCD_EP_DB_Transmit+0x310>
 8003154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003156:	3b01      	subs	r3, #1
 8003158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29a      	uxth	r2, r3
 8003160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003162:	b29b      	uxth	r3, r3
 8003164:	029b      	lsls	r3, r3, #10
 8003166:	b29b      	uxth	r3, r3
 8003168:	4313      	orrs	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003174:	b29a      	uxth	r2, r3
 8003176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	e044      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <HAL_PCD_EP_DB_Transmit+0x350>
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003192:	b29a      	uxth	r2, r3
 8003194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	e035      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800319a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80031ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b0:	3301      	adds	r3, #1
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031bc:	b29b      	uxth	r3, r3
 80031be:	029b      	lsls	r3, r3, #10
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4313      	orrs	r3, r2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e01c      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d118      	bne.n	8003206 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e8:	4413      	add	r3, r2
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	011a      	lsls	r2, r3, #4
 80031f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f4:	4413      	add	r3, r2
 80031f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003200:	b29a      	uxth	r2, r3
 8003202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003204:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	6959      	ldr	r1, [r3, #20]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	891a      	ldrh	r2, [r3, #8]
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003216:	b29b      	uxth	r3, r3
 8003218:	f004 f9c5 	bl	80075a6 <USB_WritePMA>
 800321c:	e1e2      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	3306      	adds	r3, #6
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003246:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003252:	429a      	cmp	r2, r3
 8003254:	d307      	bcc.n	8003266 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	619a      	str	r2, [r3, #24]
 8003264:	e002      	b.n	800326c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f040 80c0 	bne.w	80033f6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d126      	bne.n	80032cc <HAL_PCD_EP_DB_Transmit+0x482>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003292:	4413      	add	r3, r2
 8003294:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	e01a      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d116      	bne.n	8003302 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032e8:	4413      	add	r3, r2
 80032ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	011a      	lsls	r2, r3, #4
 80032f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032f4:	4413      	add	r3, r2
 80032f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80032fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032fe:	2200      	movs	r2, #0
 8003300:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	677b      	str	r3, [r7, #116]	@ 0x74
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d12b      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003324:	4413      	add	r3, r2
 8003326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	011a      	lsls	r2, r3, #4
 800332e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003330:	4413      	add	r3, r2
 8003332:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800333a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003346:	b29a      	uxth	r2, r3
 8003348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800335e:	b29a      	uxth	r2, r3
 8003360:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e017      	b.n	8003398 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d113      	bne.n	8003398 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003378:	b29b      	uxth	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800337e:	4413      	add	r3, r2
 8003380:	677b      	str	r3, [r7, #116]	@ 0x74
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	011a      	lsls	r2, r3, #4
 8003388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800338a:	4413      	add	r3, r2
 800338c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003390:	673b      	str	r3, [r7, #112]	@ 0x70
 8003392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003394:	2200      	movs	r2, #0
 8003396:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f007 fa1b 	bl	800a7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 811a 	bne.w	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	441a      	add	r2, r3
 80033dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
 80033f4:	e0f6      	b.n	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d121      	bne.n	8003444 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800343c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800344a:	2b01      	cmp	r3, #1
 800344c:	f040 80ca 	bne.w	80035e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003458:	441a      	add	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	69da      	ldr	r2, [r3, #28]
 8003462:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003466:	441a      	add	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d30b      	bcc.n	8003490 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003488:	1ad2      	subs	r2, r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	621a      	str	r2, [r3, #32]
 800348e:	e017      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800349c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034a8:	e00a      	b.n	80034c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d165      	bne.n	800359a <HAL_PCD_EP_DB_Transmit+0x750>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e2:	4413      	add	r3, r2
 80034e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	011a      	lsls	r2, r3, #4
 80034ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ee:	4413      	add	r3, r2
 80034f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003500:	b29a      	uxth	r2, r3
 8003502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800350a:	2b3e      	cmp	r3, #62	@ 0x3e
 800350c:	d91d      	bls.n	800354a <HAL_PCD_EP_DB_Transmit+0x700>
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003524:	3b01      	subs	r3, #1
 8003526:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29a      	uxth	r2, r3
 800352e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003530:	b29b      	uxth	r3, r3
 8003532:	029b      	lsls	r3, r3, #10
 8003534:	b29b      	uxth	r3, r3
 8003536:	4313      	orrs	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003542:	b29a      	uxth	r2, r3
 8003544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003546:	801a      	strh	r2, [r3, #0]
 8003548:	e041      	b.n	80035ce <HAL_PCD_EP_DB_Transmit+0x784>
 800354a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003560:	b29a      	uxth	r2, r3
 8003562:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	e032      	b.n	80035ce <HAL_PCD_EP_DB_Transmit+0x784>
 8003568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_PCD_EP_DB_Transmit+0x738>
 800357c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800357e:	3301      	adds	r3, #1
 8003580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29a      	uxth	r2, r3
 8003588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800358a:	b29b      	uxth	r3, r3
 800358c:	029b      	lsls	r3, r3, #10
 800358e:	b29b      	uxth	r3, r3
 8003590:	4313      	orrs	r3, r2
 8003592:	b29a      	uxth	r2, r3
 8003594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	e019      	b.n	80035ce <HAL_PCD_EP_DB_Transmit+0x784>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	785b      	ldrb	r3, [r3, #1]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d115      	bne.n	80035ce <HAL_PCD_EP_DB_Transmit+0x784>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	4413      	add	r3, r2
 80035b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035bc:	4413      	add	r3, r2
 80035be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6959      	ldr	r1, [r3, #20]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	895a      	ldrh	r2, [r3, #10]
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f003 ffe1 	bl	80075a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035fe:	82bb      	strh	r3, [r7, #20]
 8003600:	8abb      	ldrh	r3, [r7, #20]
 8003602:	f083 0310 	eor.w	r3, r3, #16
 8003606:	82bb      	strh	r3, [r7, #20]
 8003608:	8abb      	ldrh	r3, [r7, #20]
 800360a:	f083 0320 	eor.w	r3, r3, #32
 800360e:	82bb      	strh	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	8abb      	ldrh	r3, [r7, #20]
 8003620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003630:	b29b      	uxth	r3, r3
 8003632:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3790      	adds	r7, #144	@ 0x90
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800363e:	b480      	push	{r7}
 8003640:	b087      	sub	sp, #28
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	817b      	strh	r3, [r7, #10]
 800364c:	4613      	mov	r3, r2
 800364e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003650:	897b      	ldrh	r3, [r7, #10]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365c:	897b      	ldrh	r3, [r7, #10]
 800365e:	f003 0207 	and.w	r2, r3, #7
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	3310      	adds	r3, #16
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	e009      	b.n	8003688 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003674:	897a      	ldrh	r2, [r7, #10]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003688:	893b      	ldrh	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	b29a      	uxth	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	80da      	strh	r2, [r3, #6]
 800369c:	e00b      	b.n	80036b6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2201      	movs	r2, #1
 80036a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e272      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8087 	beq.w	80037f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e4:	4b92      	ldr	r3, [pc, #584]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d00c      	beq.n	800370a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d112      	bne.n	8003722 <HAL_RCC_OscConfig+0x5e>
 80036fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d10b      	bne.n	8003722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370a:	4b89      	ldr	r3, [pc, #548]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x12c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d168      	bne.n	80037f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e24c      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x76>
 800372c:	4b80      	ldr	r3, [pc, #512]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7f      	ldr	r2, [pc, #508]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e02e      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b7b      	ldr	r3, [pc, #492]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7a      	ldr	r2, [pc, #488]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a77      	ldr	r2, [pc, #476]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0xbc>
 8003766:	4b72      	ldr	r3, [pc, #456]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a71      	ldr	r2, [pc, #452]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6e      	ldr	r2, [pc, #440]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xd4>
 8003780:	4b6b      	ldr	r3, [pc, #428]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6a      	ldr	r2, [pc, #424]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b68      	ldr	r3, [pc, #416]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a67      	ldr	r2, [pc, #412]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd fe8e 	bl	80014c0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fd fe8a 	bl	80014c0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e200      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xe4>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd fe7a 	bl	80014c0 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fd fe76 	bl	80014c0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	@ 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1ec      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x10c>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800380a:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x18c>
 8003816:	4b46      	ldr	r3, [pc, #280]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x176>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1c0      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4939      	ldr	r1, [pc, #228]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <HAL_RCC_OscConfig+0x270>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fd fe2f 	bl	80014c0 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd fe2b 	bl	80014c0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1a1      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2d      	ldr	r3, [pc, #180]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4927      	ldr	r1, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <HAL_RCC_OscConfig+0x270>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd fe0e 	bl	80014c0 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fd fe0a 	bl	80014c0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e180      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03a      	beq.n	8003948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d019      	beq.n	800390e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b17      	ldr	r3, [pc, #92]	@ (8003938 <HAL_RCC_OscConfig+0x274>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fd fdee 	bl	80014c0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fd fdea 	bl	80014c0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e160      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003930 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003906:	2001      	movs	r0, #1
 8003908:	f000 face 	bl	8003ea8 <RCC_Delay>
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390e:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <HAL_RCC_OscConfig+0x274>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7fd fdd4 	bl	80014c0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391a:	e00f      	b.n	800393c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fd fdd0 	bl	80014c0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d908      	bls.n	800393c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e146      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	42420000 	.word	0x42420000
 8003938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b92      	ldr	r3, [pc, #584]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e9      	bne.n	800391c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a6 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4a87      	ldr	r2, [pc, #540]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003970:	61d3      	str	r3, [r2, #28]
 8003972:	4b85      	ldr	r3, [pc, #532]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003982:	4b82      	ldr	r3, [pc, #520]	@ (8003b8c <HAL_RCC_OscConfig+0x4c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d118      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b8c <HAL_RCC_OscConfig+0x4c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7e      	ldr	r2, [pc, #504]	@ (8003b8c <HAL_RCC_OscConfig+0x4c8>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399a:	f7fd fd91 	bl	80014c0 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a2:	f7fd fd8d 	bl	80014c0 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	@ 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e103      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	4b75      	ldr	r3, [pc, #468]	@ (8003b8c <HAL_RCC_OscConfig+0x4c8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x312>
 80039c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	e02d      	b.n	8003a32 <HAL_RCC_OscConfig+0x36e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x334>
 80039de:	4b6a      	ldr	r3, [pc, #424]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a69      	ldr	r2, [pc, #420]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	6213      	str	r3, [r2, #32]
 80039ea:	4b67      	ldr	r3, [pc, #412]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a66      	ldr	r2, [pc, #408]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 0304 	bic.w	r3, r3, #4
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	e01c      	b.n	8003a32 <HAL_RCC_OscConfig+0x36e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d10c      	bne.n	8003a1a <HAL_RCC_OscConfig+0x356>
 8003a00:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a60      	ldr	r2, [pc, #384]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a5d      	ldr	r2, [pc, #372]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	e00b      	b.n	8003a32 <HAL_RCC_OscConfig+0x36e>
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	4b58      	ldr	r3, [pc, #352]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a57      	ldr	r2, [pc, #348]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fd41 	bl	80014c0 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a40:	e00a      	b.n	8003a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a42:	f7fd fd3d 	bl	80014c0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0b1      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a58:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ee      	beq.n	8003a42 <HAL_RCC_OscConfig+0x37e>
 8003a64:	e014      	b.n	8003a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fd fd2b 	bl	80014c0 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd fd27 	bl	80014c0 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e09b      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ee      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aac:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d061      	beq.n	8003b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d146      	bne.n	8003b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac0:	4b33      	ldr	r3, [pc, #204]	@ (8003b90 <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fcfb 	bl	80014c0 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fd fcf7 	bl	80014c0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e06d      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af4:	d108      	bne.n	8003b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003af6:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	4921      	ldr	r1, [pc, #132]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b08:	4b1f      	ldr	r3, [pc, #124]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a19      	ldr	r1, [r3, #32]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	491b      	ldr	r1, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fd fccb 	bl	80014c0 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fd fcc7 	bl	80014c0 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e03d      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x46a>
 8003b4c:	e035      	b.n	8003bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <HAL_RCC_OscConfig+0x4cc>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd fcb4 	bl	80014c0 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd fcb0 	bl	80014c0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e026      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x498>
 8003b7a:	e01e      	b.n	8003bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e019      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCC_OscConfig+0x500>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000

08003bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0d0      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d910      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b67      	ldr	r3, [pc, #412]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 0207 	bic.w	r2, r3, #7
 8003bf2:	4965      	ldr	r1, [pc, #404]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b63      	ldr	r3, [pc, #396]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	4b59      	ldr	r3, [pc, #356]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a58      	ldr	r2, [pc, #352]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3c:	4b53      	ldr	r3, [pc, #332]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a52      	ldr	r2, [pc, #328]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b50      	ldr	r3, [pc, #320]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	494d      	ldr	r1, [pc, #308]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d040      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d115      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b41      	ldr	r3, [pc, #260]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e073      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b3d      	ldr	r3, [pc, #244]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b39      	ldr	r3, [pc, #228]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4936      	ldr	r1, [pc, #216]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fc02 	bl	80014c0 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fd fbfe 	bl	80014c0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e053      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d210      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b24      	ldr	r3, [pc, #144]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0207 	bic.w	r2, r3, #7
 8003cfe:	4922      	ldr	r1, [pc, #136]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b20      	ldr	r3, [pc, #128]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e032      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4916      	ldr	r1, [pc, #88]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	490e      	ldr	r1, [pc, #56]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d56:	f000 f821 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a09      	ldr	r2, [pc, #36]	@ (8003d94 <HAL_RCC_ClockConfig+0x1cc>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <HAL_RCC_ClockConfig+0x1d0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fd fb60 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40022000 	.word	0x40022000
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	0800f414 	.word	0x0800f414
 8003d94:	20000004 	.word	0x20000004
 8003d98:	20000008 	.word	0x20000008

08003d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d002      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x30>
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8003dca:	e027      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dce:	613b      	str	r3, [r7, #16]
      break;
 8003dd0:	e027      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0c9b      	lsrs	r3, r3, #18
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	4a17      	ldr	r2, [pc, #92]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dea:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0c5b      	lsrs	r3, r3, #17
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dfe:	fb03 f202 	mul.w	r2, r3, r2
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e004      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	613b      	str	r3, [r7, #16]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e1e:	613b      	str	r3, [r7, #16]
      break;
 8003e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e22:	693b      	ldr	r3, [r7, #16]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	0800f42c 	.word	0x0800f42c
 8003e3c:	0800f43c 	.word	0x0800f43c
 8003e40:	003d0900 	.word	0x003d0900

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b02      	ldr	r3, [pc, #8]	@ (8003e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20000004 	.word	0x20000004

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff2 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	0800f424 	.word	0x0800f424

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	0adb      	lsrs	r3, r3, #11
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	@ (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	0800f424 	.word	0x0800f424

08003ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <RCC_Delay+0x34>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <RCC_Delay+0x38>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0a5b      	lsrs	r3, r3, #9
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ec4:	bf00      	nop
  }
  while (Delay --);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f9      	bne.n	8003ec4 <RCC_Delay+0x1c>
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	20000004 	.word	0x20000004
 8003ee0:	10624dd3 	.word	0x10624dd3

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d07d      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f04:	4b4f      	ldr	r3, [pc, #316]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b4c      	ldr	r3, [pc, #304]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b49      	ldr	r3, [pc, #292]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	4b46      	ldr	r3, [pc, #280]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d118      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f38:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f44:	f7fd fabc 	bl	80014c0 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	e008      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4c:	f7fd fab8 	bl	80014c0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e06d      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f6a:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02e      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d027      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f88:	4b2e      	ldr	r3, [pc, #184]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f92:	4b2e      	ldr	r3, [pc, #184]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f98:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f9e:	4a29      	ldr	r2, [pc, #164]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fd fa87 	bl	80014c0 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd fa83 	bl	80014c0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e036      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0ee      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4917      	ldr	r1, [pc, #92]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004008:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	490b      	ldr	r1, [pc, #44]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004026:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	4904      	ldr	r1, [pc, #16]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000
 8004048:	40007000 	.word	0x40007000
 800404c:	42420440 	.word	0x42420440

08004050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e041      	b.n	80040e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd f828 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 f8f4 	bl	800427c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_TIM_ConfigClockSource+0x1c>
 8004106:	2302      	movs	r3, #2
 8004108:	e0b4      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x186>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004128:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004130:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004142:	d03e      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0xd4>
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004148:	f200 8087 	bhi.w	800425a <HAL_TIM_ConfigClockSource+0x16c>
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	f000 8086 	beq.w	8004260 <HAL_TIM_ConfigClockSource+0x172>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d87f      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 800415a:	2b70      	cmp	r3, #112	@ 0x70
 800415c:	d01a      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0xa6>
 800415e:	2b70      	cmp	r3, #112	@ 0x70
 8004160:	d87b      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 8004162:	2b60      	cmp	r3, #96	@ 0x60
 8004164:	d050      	beq.n	8004208 <HAL_TIM_ConfigClockSource+0x11a>
 8004166:	2b60      	cmp	r3, #96	@ 0x60
 8004168:	d877      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 800416a:	2b50      	cmp	r3, #80	@ 0x50
 800416c:	d03c      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xfa>
 800416e:	2b50      	cmp	r3, #80	@ 0x50
 8004170:	d873      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d058      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0x13a>
 8004176:	2b40      	cmp	r3, #64	@ 0x40
 8004178:	d86f      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 800417a:	2b30      	cmp	r3, #48	@ 0x30
 800417c:	d064      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x15a>
 800417e:	2b30      	cmp	r3, #48	@ 0x30
 8004180:	d86b      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 8004182:	2b20      	cmp	r3, #32
 8004184:	d060      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x15a>
 8004186:	2b20      	cmp	r3, #32
 8004188:	d867      	bhi.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d05c      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x15a>
 800418e:	2b10      	cmp	r3, #16
 8004190:	d05a      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x15a>
 8004192:	e062      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a4:	f000 f94f 	bl	8004446 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e04f      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d2:	f000 f938 	bl	8004446 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e03c      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f4:	461a      	mov	r2, r3
 80041f6:	f000 f8af 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2150      	movs	r1, #80	@ 0x50
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f906 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8004206:	e02c      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004214:	461a      	mov	r2, r3
 8004216:	f000 f8cd 	bl	80043b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2160      	movs	r1, #96	@ 0x60
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f8f6 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8004226:	e01c      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004234:	461a      	mov	r2, r3
 8004236:	f000 f88f 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2140      	movs	r1, #64	@ 0x40
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f8e6 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8004246:	e00c      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f000 f8dd 	bl	8004412 <TIM_ITRx_SetConfig>
      break;
 8004258:	e003      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
      break;
 800425e:	e000      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004260:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a2f      	ldr	r2, [pc, #188]	@ (800434c <TIM_Base_SetConfig+0xd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00b      	beq.n	80042ac <TIM_Base_SetConfig+0x30>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429a:	d007      	beq.n	80042ac <TIM_Base_SetConfig+0x30>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a2c      	ldr	r2, [pc, #176]	@ (8004350 <TIM_Base_SetConfig+0xd4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_Base_SetConfig+0x30>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004354 <TIM_Base_SetConfig+0xd8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d108      	bne.n	80042be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a22      	ldr	r2, [pc, #136]	@ (800434c <TIM_Base_SetConfig+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00b      	beq.n	80042de <TIM_Base_SetConfig+0x62>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042cc:	d007      	beq.n	80042de <TIM_Base_SetConfig+0x62>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <TIM_Base_SetConfig+0xd4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_Base_SetConfig+0x62>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <TIM_Base_SetConfig+0xd8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d108      	bne.n	80042f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a0d      	ldr	r2, [pc, #52]	@ (800434c <TIM_Base_SetConfig+0xd0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d103      	bne.n	8004324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	611a      	str	r2, [r3, #16]
  }
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800

08004358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f023 0210 	bic.w	r2, r3, #16
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	031b      	lsls	r3, r3, #12
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	f043 0307 	orr.w	r3, r3, #7
 8004434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004460:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	431a      	orrs	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4313      	orrs	r3, r2
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	609a      	str	r2, [r3, #8]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004498:	2302      	movs	r3, #2
 800449a:	e046      	b.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a16      	ldr	r2, [pc, #88]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e8:	d009      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a12      	ldr	r2, [pc, #72]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a10      	ldr	r2, [pc, #64]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d10c      	bne.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800

08004540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e042      	b.n	80045d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fdce 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	@ 0x24
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fc7f 	bl	8004e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b0ba      	sub	sp, #232	@ 0xe8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800461e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_UART_IRQHandler+0x66>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb63 	bl	8004d0a <UART_Receive_IT>
      return;
 8004644:	e25b      	b.n	8004afe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80de 	beq.w	800480c <HAL_UART_IRQHandler+0x22c>
 8004650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004660:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80d1 	beq.w	800480c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_UART_IRQHandler+0xae>
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <HAL_UART_IRQHandler+0xd2>
 800469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	f043 0202 	orr.w	r2, r3, #2
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xf6>
 80046be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d011      	beq.n	8004706 <HAL_UART_IRQHandler+0x126>
 80046e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fe:	f043 0208 	orr.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 81f2 	beq.w	8004af4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_UART_IRQHandler+0x14e>
 800471c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 faee 	bl	8004d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <HAL_UART_IRQHandler+0x17a>
 8004752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d04f      	beq.n	80047fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9f8 	bl	8004b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d041      	beq.n	80047f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800478c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3314      	adds	r3, #20
 8004796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800479a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800479e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1d9      	bne.n	800476e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d013      	beq.n	80047ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	4a7e      	ldr	r2, [pc, #504]	@ (80049c0 <HAL_UART_IRQHandler+0x3e0>)
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc ffec 	bl	80017ac <HAL_DMA_Abort_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047e4:	4610      	mov	r0, r2
 80047e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e00e      	b.n	8004808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f99c 	bl	8004b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00a      	b.n	8004808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f998 	bl	8004b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e006      	b.n	8004808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f994 	bl	8004b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004806:	e175      	b.n	8004af4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	bf00      	nop
    return;
 800480a:	e173      	b.n	8004af4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	2b01      	cmp	r3, #1
 8004812:	f040 814f 	bne.w	8004ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8148 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004828:	f003 0310 	and.w	r3, r3, #16
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8141 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004832:	2300      	movs	r3, #0
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80b6 	beq.w	80049c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8145 	beq.w	8004af8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004876:	429a      	cmp	r2, r3
 8004878:	f080 813e 	bcs.w	8004af8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004882:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b20      	cmp	r3, #32
 800488c:	f000 8088 	beq.w	80049a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1d9      	bne.n	8004890 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004900:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004904:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004908:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e1      	bne.n	80048dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800493c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800493e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800494a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e3      	bne.n	8004918 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800496e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004982:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004984:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e3      	bne.n	800495e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc fecb 	bl	8001736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8bf 	bl	8004b3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049bc:	e09c      	b.n	8004af8 <HAL_UART_IRQHandler+0x518>
 80049be:	bf00      	nop
 80049c0:	08004c15 	.word	0x08004c15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 808e 	beq.w	8004afc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8089 	beq.w	8004afc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e3      	bne.n	80049ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	623b      	str	r3, [r7, #32]
   return(result);
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a46:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a8c:	61fa      	str	r2, [r7, #28]
 8004a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	617b      	str	r3, [r7, #20]
   return(result);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e3      	bne.n	8004a68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f844 	bl	8004b3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ab2:	e023      	b.n	8004afc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x4f4>
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8b5 	bl	8004c3c <UART_Transmit_IT>
    return;
 8004ad2:	e014      	b.n	8004afe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <HAL_UART_IRQHandler+0x51e>
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f8f4 	bl	8004cda <UART_EndTransmit_IT>
    return;
 8004af2:	e004      	b.n	8004afe <HAL_UART_IRQHandler+0x51e>
    return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_UART_IRQHandler+0x51e>
      return;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_UART_IRQHandler+0x51e>
      return;
 8004afc:	bf00      	nop
  }
}
 8004afe:	37e8      	adds	r7, #232	@ 0xe8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b095      	sub	sp, #84	@ 0x54
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b78:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3314      	adds	r3, #20
 8004b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d119      	bne.n	8004bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0310 	bic.w	r3, r3, #16
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004be8:	61ba      	str	r2, [r7, #24]
 8004bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6979      	ldr	r1, [r7, #20]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e5      	bne.n	8004bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c0a:	bf00      	nop
 8004c0c:	3754      	adds	r7, #84	@ 0x54
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff ff7a 	bl	8004b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b21      	cmp	r3, #33	@ 0x21
 8004c4e:	d13e      	bne.n	8004cce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c58:	d114      	bne.n	8004c84 <UART_Transmit_IT+0x48>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d110      	bne.n	8004c84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	1c9a      	adds	r2, r3, #2
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]
 8004c82:	e008      	b.n	8004c96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6211      	str	r1, [r2, #32]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e000      	b.n	8004cd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
  }
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff02 	bl	8004b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08c      	sub	sp, #48	@ 0x30
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b22      	cmp	r3, #34	@ 0x22
 8004d1c:	f040 80ae 	bne.w	8004e7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d28:	d117      	bne.n	8004d5a <UART_Receive_IT+0x50>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d58:	e026      	b.n	8004da8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6c:	d007      	beq.n	8004d7e <UART_Receive_IT+0x74>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <UART_Receive_IT+0x82>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	e008      	b.n	8004d9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d15d      	bne.n	8004e78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0220 	bic.w	r2, r2, #32
 8004dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d135      	bne.n	8004e6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e28:	623a      	str	r2, [r7, #32]
 8004e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d10a      	bne.n	8004e60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe67 	bl	8004b3a <HAL_UARTEx_RxEventCallback>
 8004e6c:	e002      	b.n	8004e74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fe51 	bl	8004b16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e002      	b.n	8004e7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3730      	adds	r7, #48	@ 0x30
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ec2:	f023 030c 	bic.w	r3, r3, #12
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	@ (8004f9c <UART_SetConfig+0x114>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ef0:	f7fe ffc6 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	e002      	b.n	8004efe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe ffae 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8004efc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009a      	lsls	r2, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	4a22      	ldr	r2, [pc, #136]	@ (8004fa0 <UART_SetConfig+0x118>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	0119      	lsls	r1, r3, #4
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009a      	lsls	r2, r3, #2
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f34:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <UART_SetConfig+0x118>)
 8004f36:	fba3 0302 	umull	r0, r3, r3, r2
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2064      	movs	r0, #100	@ 0x64
 8004f3e:	fb00 f303 	mul.w	r3, r0, r3
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	3332      	adds	r3, #50	@ 0x32
 8004f48:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <UART_SetConfig+0x118>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f54:	4419      	add	r1, r3
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009a      	lsls	r2, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <UART_SetConfig+0x118>)
 8004f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2064      	movs	r0, #100	@ 0x64
 8004f76:	fb00 f303 	mul.w	r3, r0, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	3332      	adds	r3, #50	@ 0x32
 8004f80:	4a07      	ldr	r2, [pc, #28]	@ (8004fa0 <UART_SetConfig+0x118>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	440a      	add	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40013800 	.word	0x40013800
 8004fa0:	51eb851f 	.word	0x51eb851f

08004fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4638      	mov	r0, r7
 8004fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fce:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004fd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ff2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004ff6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	b29b      	uxth	r3, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	b29b      	uxth	r3, r3
 8005008:	4013      	ands	r3, r2
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	4638      	mov	r0, r7
 8005040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005070:	b480      	push	{r7}
 8005072:	b09d      	sub	sp, #116	@ 0x74
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d81f      	bhi.n	80050e2 <USB_ActivateEndpoint+0x72>
 80050a2:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <USB_ActivateEndpoint+0x38>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050eb 	.word	0x080050eb
 80050b4:	080050c7 	.word	0x080050c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050c4:	e012      	b.n	80050ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050ca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80050ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050d2:	e00b      	b.n	80050ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80050e0:	e004      	b.n	80050ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80050e8:	e000      	b.n	80050ec <USB_ActivateEndpoint+0x7c>
      break;
 80050ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005124:	b29b      	uxth	r3, r3
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800513e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	b29b      	uxth	r3, r3
 8005150:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 8178 	bne.w	800544c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8084 	beq.w	800526e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005170:	b29b      	uxth	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	4413      	add	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	88db      	ldrh	r3, [r3, #6]
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	b29b      	uxth	r3, r3
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	827b      	strh	r3, [r7, #18]
 80051a8:	8a7b      	ldrh	r3, [r7, #18]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01b      	beq.n	80051ea <USB_ActivateEndpoint+0x17a>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c8:	823b      	strh	r3, [r7, #16]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	8a3b      	ldrh	r3, [r7, #16]
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	78db      	ldrb	r3, [r3, #3]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d020      	beq.n	8005234 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005208:	81bb      	strh	r3, [r7, #12]
 800520a:	89bb      	ldrh	r3, [r7, #12]
 800520c:	f083 0320 	eor.w	r3, r3, #32
 8005210:	81bb      	strh	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	89bb      	ldrh	r3, [r7, #12]
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
 8005232:	e2d5      	b.n	80057e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800524a:	81fb      	strh	r3, [r7, #14]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
 800526c:	e2b8      	b.n	80057e0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	4413      	add	r3, r2
 8005280:	633b      	str	r3, [r7, #48]	@ 0x30
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	011a      	lsls	r2, r3, #4
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	4413      	add	r3, r2
 800528c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	88db      	ldrh	r3, [r3, #6]
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	4413      	add	r3, r2
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	4413      	add	r3, r2
 80052c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b3e      	cmp	r3, #62	@ 0x3e
 80052dc:	d91d      	bls.n	800531a <USB_ActivateEndpoint+0x2aa>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <USB_ActivateEndpoint+0x288>
 80052f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052f4:	3b01      	subs	r3, #1
 80052f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005300:	b29b      	uxth	r3, r3
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	b29b      	uxth	r3, r3
 8005306:	4313      	orrs	r3, r2
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e026      	b.n	8005368 <USB_ActivateEndpoint+0x2f8>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <USB_ActivateEndpoint+0x2c8>
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005330:	b29a      	uxth	r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e017      	b.n	8005368 <USB_ActivateEndpoint+0x2f8>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <USB_ActivateEndpoint+0x2e2>
 800534c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800534e:	3301      	adds	r3, #1
 8005350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800535a:	b29b      	uxth	r3, r3
 800535c:	029b      	lsls	r3, r3, #10
 800535e:	b29b      	uxth	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b29a      	uxth	r2, r3
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005376:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <USB_ActivateEndpoint+0x348>
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005396:	843b      	strh	r3, [r7, #32]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	8c3b      	ldrh	r3, [r7, #32]
 80053a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d124      	bne.n	800540a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d6:	83bb      	strh	r3, [r7, #28]
 80053d8:	8bbb      	ldrh	r3, [r7, #28]
 80053da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053de:	83bb      	strh	r3, [r7, #28]
 80053e0:	8bbb      	ldrh	r3, [r7, #28]
 80053e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053e6:	83bb      	strh	r3, [r7, #28]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	441a      	add	r2, r3
 80053f2:	8bbb      	ldrh	r3, [r7, #28]
 80053f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005404:	b29b      	uxth	r3, r3
 8005406:	8013      	strh	r3, [r2, #0]
 8005408:	e1ea      	b.n	80057e0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005420:	83fb      	strh	r3, [r7, #30]
 8005422:	8bfb      	ldrh	r3, [r7, #30]
 8005424:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005428:	83fb      	strh	r3, [r7, #30]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8bfb      	ldrh	r3, [r7, #30]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
 800544a:	e1c9      	b.n	80057e0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	78db      	ldrb	r3, [r3, #3]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11e      	bne.n	8005492 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800547c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005484:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548c:	b29b      	uxth	r3, r3
 800548e:	8013      	strh	r3, [r2, #0]
 8005490:	e01d      	b.n	80054ce <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80054ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054de:	4413      	add	r3, r2
 80054e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	011a      	lsls	r2, r3, #4
 80054e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	891b      	ldrh	r3, [r3, #8]
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	657b      	str	r3, [r7, #84]	@ 0x54
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800550c:	b29b      	uxth	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005512:	4413      	add	r3, r2
 8005514:	657b      	str	r3, [r7, #84]	@ 0x54
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	011a      	lsls	r2, r3, #4
 800551c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551e:	4413      	add	r3, r2
 8005520:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005524:	653b      	str	r3, [r7, #80]	@ 0x50
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	895b      	ldrh	r3, [r3, #10]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005534:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 8093 	bne.w	8005666 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005550:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01b      	beq.n	8005594 <USB_ActivateEndpoint+0x524>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005588:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800558c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80055a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01b      	beq.n	80055e4 <USB_ActivateEndpoint+0x574>
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	441a      	add	r2, r3
 80055ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80055d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80055fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80055fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005602:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005604:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005606:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800560a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800563e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005642:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
 8005664:	e0bc      	b.n	80057e0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800567a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01d      	beq.n	80056be <USB_ActivateEndpoint+0x64e>
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80056ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01d      	beq.n	8005716 <USB_ActivateEndpoint+0x6a6>
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d024      	beq.n	8005768 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005734:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005738:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800573c:	f083 0320 	eor.w	r3, r3, #32
 8005740:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	441a      	add	r2, r3
 800574e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800575e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
 8005766:	e01d      	b.n	80057a4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800577e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80057e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3774      	adds	r7, #116	@ 0x74
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b08d      	sub	sp, #52	@ 0x34
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	7b1b      	ldrb	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f040 808e 	bne.w	8005920 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d044      	beq.n	8005896 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	81bb      	strh	r3, [r7, #12]
 800581a:	89bb      	ldrh	r3, [r7, #12]
 800581c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <USB_DeactivateEndpoint+0x6c>
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	817b      	strh	r3, [r7, #10]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	897b      	ldrh	r3, [r7, #10]
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005854:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005872:	813b      	strh	r3, [r7, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	893b      	ldrh	r3, [r7, #8]
 8005880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]
 8005894:	e192      	b.n	8005bbc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	827b      	strh	r3, [r7, #18]
 80058a4:	8a7b      	ldrh	r3, [r7, #18]
 80058a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01b      	beq.n	80058e6 <USB_DeactivateEndpoint+0xf6>
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c4:	823b      	strh	r3, [r7, #16]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8a3b      	ldrh	r3, [r7, #16]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fc:	81fb      	strh	r3, [r7, #14]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	89fb      	ldrh	r3, [r7, #14]
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]
 800591e:	e14d      	b.n	8005bbc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 80a5 	bne.w	8005a74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	843b      	strh	r3, [r7, #32]
 8005938:	8c3b      	ldrh	r3, [r7, #32]
 800593a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01b      	beq.n	800597a <USB_DeactivateEndpoint+0x18a>
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005958:	83fb      	strh	r3, [r7, #30]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	8bfb      	ldrh	r3, [r7, #30]
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	83bb      	strh	r3, [r7, #28]
 8005988:	8bbb      	ldrh	r3, [r7, #28]
 800598a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01b      	beq.n	80059ca <USB_DeactivateEndpoint+0x1da>
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a8:	837b      	strh	r3, [r7, #26]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	8b7b      	ldrh	r3, [r7, #26]
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e0:	833b      	strh	r3, [r7, #24]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	8b3b      	ldrh	r3, [r7, #24]
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a18:	82fb      	strh	r3, [r7, #22]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8afb      	ldrh	r3, [r7, #22]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a50:	82bb      	strh	r3, [r7, #20]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8abb      	ldrh	r3, [r7, #20]
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
 8005a72:	e0a3      	b.n	8005bbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005a82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <USB_DeactivateEndpoint+0x2d4>
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	441a      	add	r2, r3
 8005aae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005ad2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01b      	beq.n	8005b14 <USB_DeactivateEndpoint+0x324>
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3734      	adds	r7, #52	@ 0x34
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b0c2      	sub	sp, #264	@ 0x108
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd6:	6018      	str	r0, [r3, #0]
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	785b      	ldrb	r3, [r3, #1]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	f040 86b7 	bne.w	8006962 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d908      	bls.n	8005c22 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c20:	e007      	b.n	8005c32 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	7b1b      	ldrb	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d13a      	bne.n	8005cb8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6959      	ldr	r1, [r3, #20]
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	88da      	ldrh	r2, [r3, #6]
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	f001 fc9c 	bl	80075a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4413      	add	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	011a      	lsls	r2, r3, #4
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	f000 be1f 	b.w	80068f6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	78db      	ldrb	r3, [r3, #3]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	f040 8462 	bne.w	800658e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	f240 83df 	bls.w	80064a6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 81c7 	beq.w	8006118 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d177      	bne.n	8005e96 <USB_EPStartXfer+0x2ce>
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	4413      	add	r3, r2
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	4413      	add	r3, r2
 8005ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005df8:	d921      	bls.n	8005e3e <USB_EPStartXfer+0x276>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <USB_EPStartXfer+0x252>
 8005e10:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e14:	3b01      	subs	r3, #1
 8005e16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e050      	b.n	8005ee0 <USB_EPStartXfer+0x318>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <USB_EPStartXfer+0x294>
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e041      	b.n	8005ee0 <USB_EPStartXfer+0x318>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <USB_EPStartXfer+0x2b4>
 8005e72:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e024      	b.n	8005ee0 <USB_EPStartXfer+0x318>
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	785b      	ldrb	r3, [r3, #1]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11c      	bne.n	8005ee0 <USB_EPStartXfer+0x318>
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	4413      	add	r3, r2
 8005ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	4413      	add	r3, r2
 8005ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6959      	ldr	r1, [r3, #20]
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f0e:	6800      	ldr	r0, [r0, #0]
 8005f10:	f001 fb49 	bl	80075a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	441a      	add	r2, r3
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d90f      	bls.n	8005f6e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	621a      	str	r2, [r3, #32]
 8005f6c:	e00e      	b.n	8005f8c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d177      	bne.n	800608c <USB_EPStartXfer+0x4c4>
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fee:	d921      	bls.n	8006034 <USB_EPStartXfer+0x46c>
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <USB_EPStartXfer+0x448>
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600a:	3b01      	subs	r3, #1
 800600c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601a:	b29b      	uxth	r3, r3
 800601c:	029b      	lsls	r3, r3, #10
 800601e:	b29b      	uxth	r3, r3
 8006020:	4313      	orrs	r3, r2
 8006022:	b29b      	uxth	r3, r3
 8006024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602c:	b29a      	uxth	r2, r3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e056      	b.n	80060e2 <USB_EPStartXfer+0x51a>
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <USB_EPStartXfer+0x48a>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e047      	b.n	80060e2 <USB_EPStartXfer+0x51a>
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <USB_EPStartXfer+0x4aa>
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606c:	3301      	adds	r3, #1
 800606e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29b      	uxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e02a      	b.n	80060e2 <USB_EPStartXfer+0x51a>
 800608c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d122      	bne.n	80060e2 <USB_EPStartXfer+0x51a>
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	4413      	add	r3, r2
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	011a      	lsls	r2, r3, #4
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	b29a      	uxth	r2, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	891b      	ldrh	r3, [r3, #8]
 80060ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6959      	ldr	r1, [r3, #20]
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	b29b      	uxth	r3, r3
 8006104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006108:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800610c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006110:	6800      	ldr	r0, [r0, #0]
 8006112:	f001 fa48 	bl	80075a6 <USB_WritePMA>
 8006116:	e3ee      	b.n	80068f6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d177      	bne.n	8006218 <USB_EPStartXfer+0x650>
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006148:	4413      	add	r3, r2
 800614a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	011a      	lsls	r2, r3, #4
 800615a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615c:	4413      	add	r3, r2
 800615e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006162:	647b      	str	r3, [r7, #68]	@ 0x44
 8006164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800616e:	b29a      	uxth	r2, r3
 8006170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006172:	801a      	strh	r2, [r3, #0]
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	2b3e      	cmp	r3, #62	@ 0x3e
 800617a:	d921      	bls.n	80061c0 <USB_EPStartXfer+0x5f8>
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <USB_EPStartXfer+0x5d4>
 8006192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006196:	3b01      	subs	r3, #1
 8006198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800619c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	029b      	lsls	r3, r3, #10
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e056      	b.n	800626e <USB_EPStartXfer+0x6a6>
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <USB_EPStartXfer+0x616>
 80061c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e047      	b.n	800626e <USB_EPStartXfer+0x6a6>
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <USB_EPStartXfer+0x636>
 80061f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80061fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29a      	uxth	r2, r3
 8006204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006208:	b29b      	uxth	r3, r3
 800620a:	029b      	lsls	r3, r3, #10
 800620c:	b29b      	uxth	r3, r3
 800620e:	4313      	orrs	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e02a      	b.n	800626e <USB_EPStartXfer+0x6a6>
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d122      	bne.n	800626e <USB_EPStartXfer+0x6a6>
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	653b      	str	r3, [r7, #80]	@ 0x50
 8006234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006248:	4413      	add	r3, r2
 800624a:	653b      	str	r3, [r7, #80]	@ 0x50
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	011a      	lsls	r2, r3, #4
 800625a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800625c:	4413      	add	r3, r2
 800625e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006262:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	b29a      	uxth	r2, r3
 800626a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800626c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	891b      	ldrh	r3, [r3, #8]
 800627a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6959      	ldr	r1, [r3, #20]
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	b29b      	uxth	r3, r3
 8006290:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006294:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006298:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f001 f982 	bl	80075a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	441a      	add	r2, r3
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d90f      	bls.n	80062fc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ec:	1ad2      	subs	r2, r2, r3
 80062ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	621a      	str	r2, [r3, #32]
 80062fa:	e00e      	b.n	800631a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2200      	movs	r2, #0
 8006318:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d177      	bne.n	8006426 <USB_EPStartXfer+0x85e>
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	4413      	add	r3, r2
 8006358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	011a      	lsls	r2, r3, #4
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	4413      	add	r3, r2
 800636c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006370:	637b      	str	r3, [r7, #52]	@ 0x34
 8006372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637c:	b29a      	uxth	r2, r3
 800637e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006380:	801a      	strh	r2, [r3, #0]
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	2b3e      	cmp	r3, #62	@ 0x3e
 8006388:	d921      	bls.n	80063ce <USB_EPStartXfer+0x806>
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USB_EPStartXfer+0x7e2>
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	3b01      	subs	r3, #1
 80063a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b29b      	uxth	r3, r3
 80063be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e050      	b.n	8006470 <USB_EPStartXfer+0x8a8>
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <USB_EPStartXfer+0x824>
 80063d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e041      	b.n	8006470 <USB_EPStartXfer+0x8a8>
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <USB_EPStartXfer+0x844>
 8006402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006406:	3301      	adds	r3, #1
 8006408:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	4313      	orrs	r3, r2
 800641e:	b29a      	uxth	r2, r3
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e024      	b.n	8006470 <USB_EPStartXfer+0x8a8>
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d11c      	bne.n	8006470 <USB_EPStartXfer+0x8a8>
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644a:	4413      	add	r3, r2
 800644c:	643b      	str	r3, [r7, #64]	@ 0x40
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645e:	4413      	add	r3, r2
 8006460:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646a:	b29a      	uxth	r2, r3
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	895b      	ldrh	r3, [r3, #10]
 800647c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6959      	ldr	r1, [r3, #20]
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	b29b      	uxth	r3, r3
 8006492:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006496:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800649a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800649e:	6800      	ldr	r0, [r0, #0]
 80064a0:	f001 f881 	bl	80075a6 <USB_WritePMA>
 80064a4:	e227      	b.n	80068f6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800651e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006532:	4413      	add	r3, r2
 8006534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006546:	4413      	add	r3, r2
 8006548:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800654c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006552:	b29a      	uxth	r2, r3
 8006554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006556:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	891b      	ldrh	r3, [r3, #8]
 8006564:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6959      	ldr	r1, [r3, #20]
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	b29b      	uxth	r3, r3
 800657a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800657e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006582:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	f001 f80d 	bl	80075a6 <USB_WritePMA>
 800658c:	e1b3      	b.n	80068f6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800658e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659e:	1ad2      	subs	r2, r2, r3
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80c6 	beq.w	8006760 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	673b      	str	r3, [r7, #112]	@ 0x70
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d177      	bne.n	80066e0 <USB_EPStartXfer+0xb18>
 80065f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660a:	b29b      	uxth	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006610:	4413      	add	r3, r2
 8006612:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	011a      	lsls	r2, r3, #4
 8006622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006624:	4413      	add	r3, r2
 8006626:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800662a:	667b      	str	r3, [r7, #100]	@ 0x64
 800662c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006636:	b29a      	uxth	r2, r3
 8006638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	2b3e      	cmp	r3, #62	@ 0x3e
 8006642:	d921      	bls.n	8006688 <USB_EPStartXfer+0xac0>
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <USB_EPStartXfer+0xa9c>
 800665a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800665e:	3b01      	subs	r3, #1
 8006660:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29a      	uxth	r2, r3
 800666a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29b      	uxth	r3, r3
 8006674:	4313      	orrs	r3, r2
 8006676:	b29b      	uxth	r3, r3
 8006678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006680:	b29a      	uxth	r2, r3
 8006682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e050      	b.n	800672a <USB_EPStartXfer+0xb62>
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <USB_EPStartXfer+0xade>
 8006690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e041      	b.n	800672a <USB_EPStartXfer+0xb62>
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <USB_EPStartXfer+0xafe>
 80066bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066c0:	3301      	adds	r3, #1
 80066c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80066c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e024      	b.n	800672a <USB_EPStartXfer+0xb62>
 80066e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d11c      	bne.n	800672a <USB_EPStartXfer+0xb62>
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006704:	4413      	add	r3, r2
 8006706:	673b      	str	r3, [r7, #112]	@ 0x70
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	011a      	lsls	r2, r3, #4
 8006716:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006718:	4413      	add	r3, r2
 800671a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800671e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006724:	b29a      	uxth	r2, r3
 8006726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006728:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	895b      	ldrh	r3, [r3, #10]
 8006736:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6959      	ldr	r1, [r3, #20]
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	b29b      	uxth	r3, r3
 800674c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006750:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006754:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006758:	6800      	ldr	r0, [r0, #0]
 800675a:	f000 ff24 	bl	80075a6 <USB_WritePMA>
 800675e:	e0ca      	b.n	80068f6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	785b      	ldrb	r3, [r3, #1]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d177      	bne.n	8006860 <USB_EPStartXfer+0xc98>
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006790:	4413      	add	r3, r2
 8006792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	011a      	lsls	r2, r3, #4
 80067a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067a4:	4413      	add	r3, r2
 80067a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80067c2:	d921      	bls.n	8006808 <USB_EPStartXfer+0xc40>
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <USB_EPStartXfer+0xc1c>
 80067da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067de:	3b01      	subs	r3, #1
 80067e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80067e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	4313      	orrs	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006800:	b29a      	uxth	r2, r3
 8006802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006804:	801a      	strh	r2, [r3, #0]
 8006806:	e05c      	b.n	80068c2 <USB_EPStartXfer+0xcfa>
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <USB_EPStartXfer+0xc5e>
 8006810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e04d      	b.n	80068c2 <USB_EPStartXfer+0xcfa>
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <USB_EPStartXfer+0xc7e>
 800683c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006840:	3301      	adds	r3, #1
 8006842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006850:	b29b      	uxth	r3, r3
 8006852:	029b      	lsls	r3, r3, #10
 8006854:	b29b      	uxth	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	e030      	b.n	80068c2 <USB_EPStartXfer+0xcfa>
 8006860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d128      	bne.n	80068c2 <USB_EPStartXfer+0xcfa>
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800687e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006894:	4413      	add	r3, r2
 8006896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	011a      	lsls	r2, r3, #4
 80068a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80068c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	891b      	ldrh	r3, [r3, #8]
 80068ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6959      	ldr	r1, [r3, #20]
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068f0:	6800      	ldr	r0, [r0, #0]
 80068f2:	f000 fe58 	bl	80075a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691c:	817b      	strh	r3, [r7, #10]
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	f083 0310 	eor.w	r3, r3, #16
 8006924:	817b      	strh	r3, [r7, #10]
 8006926:	897b      	ldrh	r3, [r7, #10]
 8006928:	f083 0320 	eor.w	r3, r3, #32
 800692c:	817b      	strh	r3, [r7, #10]
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	897b      	ldrh	r3, [r7, #10]
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
 800695e:	f000 bcde 	b.w	800731e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 80bb 	bne.w	8006aea <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d917      	bls.n	80069c0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	1ad2      	subs	r2, r2, r3
 80069b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	619a      	str	r2, [r3, #24]
 80069be:	e00e      	b.n	80069de <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80069d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a3e:	d924      	bls.n	8006a8a <USB_EPStartXfer+0xec2>
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <USB_EPStartXfer+0xe98>
 8006a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	f000 bc10 	b.w	80072aa <USB_EPStartXfer+0x16e2>
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <USB_EPStartXfer+0xee4>
 8006a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aa8:	801a      	strh	r2, [r3, #0]
 8006aaa:	e3fe      	b.n	80072aa <USB_EPStartXfer+0x16e2>
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <USB_EPStartXfer+0xf04>
 8006ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	e3df      	b.n	80072aa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	78db      	ldrb	r3, [r3, #3]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	f040 8218 	bne.w	8006f2c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 809d 	bne.w	8006c48 <USB_EPStartXfer+0x1080>
 8006b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	011a      	lsls	r2, r3, #4
 8006b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b76:	d92b      	bls.n	8006bd0 <USB_EPStartXfer+0x1008>
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <USB_EPStartXfer+0xfe0>
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	029b      	lsls	r3, r3, #10
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	e070      	b.n	8006cb2 <USB_EPStartXfer+0x10ea>
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <USB_EPStartXfer+0x1032>
 8006be0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e05b      	b.n	8006cb2 <USB_EPStartXfer+0x10ea>
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <USB_EPStartXfer+0x1062>
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c24:	3301      	adds	r3, #1
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e034      	b.n	8006cb2 <USB_EPStartXfer+0x10ea>
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d12c      	bne.n	8006cb2 <USB_EPStartXfer+0x10ea>
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	011a      	lsls	r2, r3, #4
 8006c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 809d 	bne.w	8006e0c <USB_EPStartXfer+0x1244>
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	011a      	lsls	r2, r3, #4
 8006d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d3a:	d92b      	bls.n	8006d94 <USB_EPStartXfer+0x11cc>
 8006d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USB_EPStartXfer+0x11a4>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d66:	3b01      	subs	r3, #1
 8006d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	029b      	lsls	r3, r3, #10
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	e069      	b.n	8006e68 <USB_EPStartXfer+0x12a0>
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <USB_EPStartXfer+0x11f6>
 8006da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e054      	b.n	8006e68 <USB_EPStartXfer+0x12a0>
 8006dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <USB_EPStartXfer+0x1226>
 8006de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de8:	3301      	adds	r3, #1
 8006dea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4313      	orrs	r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e08:	801a      	strh	r2, [r3, #0]
 8006e0a:	e02d      	b.n	8006e68 <USB_EPStartXfer+0x12a0>
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d125      	bne.n	8006e68 <USB_EPStartXfer+0x12a0>
 8006e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e32:	4413      	add	r3, r2
 8006e34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	011a      	lsls	r2, r3, #4
 8006e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e66:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8218 	beq.w	80072aa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <USB_EPStartXfer+0x12ea>
 8006ea6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006eb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 81f5 	bne.w	80072aa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ec0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 81ee 	bne.w	80072aa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	441a      	add	r2, r3
 8006f12:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e1be      	b.n	80072aa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	f040 81b4 	bne.w	80072a6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d917      	bls.n	8006f8a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	1ad2      	subs	r2, r2, r3
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	619a      	str	r2, [r3, #24]
 8006f88:	e00e      	b.n	8006fa8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 8085 	bne.w	80070c4 <USB_EPStartXfer+0x14fc>
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fde:	4413      	add	r3, r2
 8006fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	011a      	lsls	r2, r3, #4
 8006ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007000:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800700c:	b29a      	uxth	r2, r3
 800700e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007018:	2b3e      	cmp	r3, #62	@ 0x3e
 800701a:	d923      	bls.n	8007064 <USB_EPStartXfer+0x149c>
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <USB_EPStartXfer+0x1474>
 8007032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007036:	3b01      	subs	r3, #1
 8007038:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800703c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29a      	uxth	r2, r3
 8007044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29b      	uxth	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	b29b      	uxth	r3, r3
 8007052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705a:	b29a      	uxth	r2, r3
 800705c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007060:	801a      	strh	r2, [r3, #0]
 8007062:	e060      	b.n	8007126 <USB_EPStartXfer+0x155e>
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <USB_EPStartXfer+0x14be>
 800706c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e04f      	b.n	8007126 <USB_EPStartXfer+0x155e>
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <USB_EPStartXfer+0x14de>
 800709c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a0:	3301      	adds	r3, #1
 80070a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80070a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	e030      	b.n	8007126 <USB_EPStartXfer+0x155e>
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d128      	bne.n	8007126 <USB_EPStartXfer+0x155e>
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070f8:	4413      	add	r3, r2
 80070fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	011a      	lsls	r2, r3, #4
 800710c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007110:	4413      	add	r3, r2
 8007112:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007116:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800711a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8085 	bne.w	8007250 <USB_EPStartXfer+0x1688>
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007162:	b29b      	uxth	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800716a:	4413      	add	r3, r2
 800716c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	011a      	lsls	r2, r3, #4
 800717e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007182:	4413      	add	r3, r2
 8007184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800718c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a6:	d923      	bls.n	80071f0 <USB_EPStartXfer+0x1628>
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <USB_EPStartXfer+0x1600>
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071c2:	3b01      	subs	r3, #1
 80071c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	e05c      	b.n	80072aa <USB_EPStartXfer+0x16e2>
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <USB_EPStartXfer+0x164a>
 80071f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e04b      	b.n	80072aa <USB_EPStartXfer+0x16e2>
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <USB_EPStartXfer+0x166a>
 8007228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800722c:	3301      	adds	r3, #1
 800722e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29b      	uxth	r3, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	e02c      	b.n	80072aa <USB_EPStartXfer+0x16e2>
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d124      	bne.n	80072aa <USB_EPStartXfer+0x16e2>
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007276:	4413      	add	r3, r2
 8007278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	011a      	lsls	r2, r3, #4
 800728a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800728e:	4413      	add	r3, r2
 8007290:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e001      	b.n	80072aa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e03a      	b.n	8007320 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80072e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80072e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800730a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731a:	b29b      	uxth	r3, r3
 800731c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007352:	81bb      	strh	r3, [r7, #12]
 8007354:	89bb      	ldrh	r3, [r7, #12]
 8007356:	f083 0310 	eor.w	r3, r3, #16
 800735a:	81bb      	strh	r3, [r7, #12]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	89bb      	ldrh	r3, [r7, #12]
 8007368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800736c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007378:	b29b      	uxth	r3, r3
 800737a:	8013      	strh	r3, [r2, #0]
 800737c:	e01f      	b.n	80073be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007394:	81fb      	strh	r3, [r7, #14]
 8007396:	89fb      	ldrh	r3, [r7, #14]
 8007398:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800739c:	81fb      	strh	r3, [r7, #14]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	441a      	add	r2, r3
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b087      	sub	sp, #28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	7b1b      	ldrb	r3, [r3, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 809d 	bne.w	8007518 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d04c      	beq.n	8007480 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	823b      	strh	r3, [r7, #16]
 80073f4:	8a3b      	ldrh	r3, [r7, #16]
 80073f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <USB_EPClearStall+0x6c>
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	81fb      	strh	r3, [r7, #14]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	89fb      	ldrh	r3, [r7, #14]
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	78db      	ldrb	r3, [r3, #3]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d06c      	beq.n	8007518 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007454:	81bb      	strh	r3, [r7, #12]
 8007456:	89bb      	ldrh	r3, [r7, #12]
 8007458:	f083 0320 	eor.w	r3, r3, #32
 800745c:	81bb      	strh	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	441a      	add	r2, r3
 8007468:	89bb      	ldrh	r3, [r7, #12]
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
 800747e:	e04b      	b.n	8007518 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	82fb      	strh	r3, [r7, #22]
 800748e:	8afb      	ldrh	r3, [r7, #22]
 8007490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01b      	beq.n	80074d0 <USB_EPClearStall+0x106>
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ae:	82bb      	strh	r3, [r7, #20]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	441a      	add	r2, r3
 80074ba:	8abb      	ldrh	r3, [r7, #20]
 80074bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e6:	827b      	strh	r3, [r7, #18]
 80074e8:	8a7b      	ldrh	r3, [r7, #18]
 80074ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074ee:	827b      	strh	r3, [r7, #18]
 80074f0:	8a7b      	ldrh	r3, [r7, #18]
 80074f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80074f6:	827b      	strh	r3, [r7, #18]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	441a      	add	r2, r3
 8007502:	8a7b      	ldrh	r3, [r7, #18]
 8007504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007514:	b29b      	uxth	r3, r3
 8007516:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2280      	movs	r2, #128	@ 0x80
 800753a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	4770      	bx	lr

0800755e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr

08007572 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007580:	b29b      	uxth	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b08b      	sub	sp, #44	@ 0x2c
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	4611      	mov	r1, r2
 80075b2:	461a      	mov	r2, r3
 80075b4:	460b      	mov	r3, r1
 80075b6:	80fb      	strh	r3, [r7, #6]
 80075b8:	4613      	mov	r3, r2
 80075ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80075bc:	88bb      	ldrh	r3, [r7, #4]
 80075be:	3301      	adds	r3, #1
 80075c0:	085b      	lsrs	r3, r3, #1
 80075c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	005a      	lsls	r2, r3, #1
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075de:	e01f      	b.n	8007620 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	3301      	adds	r3, #1
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	b21a      	sxth	r2, r3
 80075f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b21b      	sxth	r3, r3
 80075fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	8a7a      	ldrh	r2, [r7, #18]
 8007600:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	3302      	adds	r3, #2
 8007606:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	3302      	adds	r3, #2
 800760c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	3301      	adds	r3, #1
 8007612:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	3b01      	subs	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1dc      	bne.n	80075e0 <USB_WritePMA+0x3a>
  }
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	372c      	adds	r7, #44	@ 0x2c
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007632:	b480      	push	{r7}
 8007634:	b08b      	sub	sp, #44	@ 0x2c
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	4611      	mov	r1, r2
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	80fb      	strh	r3, [r7, #6]
 8007644:	4613      	mov	r3, r2
 8007646:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007648:	88bb      	ldrh	r3, [r7, #4]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	b29b      	uxth	r3, r3
 800764e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	005a      	lsls	r2, r3, #1
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007664:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
 800766a:	e01b      	b.n	80076a4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	3302      	adds	r3, #2
 8007678:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	b2da      	uxtb	r2, r3
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	3301      	adds	r3, #1
 8007686:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b2da      	uxtb	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	3302      	adds	r3, #2
 800769c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	3b01      	subs	r3, #1
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e0      	bne.n	800766c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80076aa:	88bb      	ldrh	r3, [r7, #4]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	701a      	strb	r2, [r3, #0]
  }
}
 80076c6:	bf00      	nop
 80076c8:	372c      	adds	r7, #44	@ 0x2c
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b092      	sub	sp, #72	@ 0x48
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	6039      	str	r1, [r7, #0]
 80076da:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	605a      	str	r2, [r3, #4]
 80076ec:	609a      	str	r2, [r3, #8]
 80076ee:	60da      	str	r2, [r3, #12]

	if(au8_KeyStates != NULL)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 8189 	beq.w	8007a0a <KEYPAD_Init+0x33a>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 80076f8:	88fb      	ldrh	r3, [r7, #6]
 80076fa:	4997      	ldr	r1, [pc, #604]	@ (8007958 <KEYPAD_Init+0x288>)
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8007702:	2300      	movs	r3, #0
 8007704:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007708:	e0ac      	b.n	8007864 <KEYPAD_Init+0x194>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007710:	4892      	ldr	r0, [pc, #584]	@ (800795c <KEYPAD_Init+0x28c>)
 8007712:	4613      	mov	r3, r2
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007720:	4a8f      	ldr	r2, [pc, #572]	@ (8007960 <KEYPAD_Init+0x290>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d10c      	bne.n	8007740 <KEYPAD_Init+0x70>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8007726:	4b8f      	ldr	r3, [pc, #572]	@ (8007964 <KEYPAD_Init+0x294>)
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4a8e      	ldr	r2, [pc, #568]	@ (8007964 <KEYPAD_Init+0x294>)
 800772c:	f043 0304 	orr.w	r3, r3, #4
 8007730:	6193      	str	r3, [r2, #24]
 8007732:	4b8c      	ldr	r3, [pc, #560]	@ (8007964 <KEYPAD_Init+0x294>)
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	633b      	str	r3, [r7, #48]	@ 0x30
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	e06a      	b.n	8007816 <KEYPAD_Init+0x146>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007746:	4885      	ldr	r0, [pc, #532]	@ (800795c <KEYPAD_Init+0x28c>)
 8007748:	4613      	mov	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007756:	4a84      	ldr	r2, [pc, #528]	@ (8007968 <KEYPAD_Init+0x298>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10c      	bne.n	8007776 <KEYPAD_Init+0xa6>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 800775c:	4b81      	ldr	r3, [pc, #516]	@ (8007964 <KEYPAD_Init+0x294>)
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	4a80      	ldr	r2, [pc, #512]	@ (8007964 <KEYPAD_Init+0x294>)
 8007762:	f043 0308 	orr.w	r3, r3, #8
 8007766:	6193      	str	r3, [r2, #24]
 8007768:	4b7e      	ldr	r3, [pc, #504]	@ (8007964 <KEYPAD_Init+0x294>)
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	e04f      	b.n	8007816 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800777c:	4877      	ldr	r0, [pc, #476]	@ (800795c <KEYPAD_Init+0x28c>)
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800778c:	4a77      	ldr	r2, [pc, #476]	@ (800796c <KEYPAD_Init+0x29c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d10c      	bne.n	80077ac <KEYPAD_Init+0xdc>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8007792:	4b74      	ldr	r3, [pc, #464]	@ (8007964 <KEYPAD_Init+0x294>)
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4a73      	ldr	r2, [pc, #460]	@ (8007964 <KEYPAD_Init+0x294>)
 8007798:	f043 0310 	orr.w	r3, r3, #16
 800779c:	6193      	str	r3, [r2, #24]
 800779e:	4b71      	ldr	r3, [pc, #452]	@ (8007964 <KEYPAD_Init+0x294>)
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	e034      	b.n	8007816 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80077b2:	486a      	ldr	r0, [pc, #424]	@ (800795c <KEYPAD_Init+0x28c>)
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80077c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007970 <KEYPAD_Init+0x2a0>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d10c      	bne.n	80077e2 <KEYPAD_Init+0x112>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80077c8:	4b66      	ldr	r3, [pc, #408]	@ (8007964 <KEYPAD_Init+0x294>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	4a65      	ldr	r2, [pc, #404]	@ (8007964 <KEYPAD_Init+0x294>)
 80077ce:	f043 0320 	orr.w	r3, r3, #32
 80077d2:	6193      	str	r3, [r2, #24]
 80077d4:	4b63      	ldr	r3, [pc, #396]	@ (8007964 <KEYPAD_Init+0x294>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	e019      	b.n	8007816 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80077e8:	485c      	ldr	r0, [pc, #368]	@ (800795c <KEYPAD_Init+0x28c>)
 80077ea:	4613      	mov	r3, r2
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80077f8:	4a5e      	ldr	r2, [pc, #376]	@ (8007974 <KEYPAD_Init+0x2a4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10b      	bne.n	8007816 <KEYPAD_Init+0x146>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80077fe:	4b59      	ldr	r3, [pc, #356]	@ (8007964 <KEYPAD_Init+0x294>)
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	4a58      	ldr	r2, [pc, #352]	@ (8007964 <KEYPAD_Init+0x294>)
 8007804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007808:	6193      	str	r3, [r2, #24]
 800780a:	4b56      	ldr	r3, [pc, #344]	@ (8007964 <KEYPAD_Init+0x294>)
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007812:	623b      	str	r3, [r7, #32]
 8007814:	6a3b      	ldr	r3, [r7, #32]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800781c:	484f      	ldr	r0, [pc, #316]	@ (800795c <KEYPAD_Init+0x28c>)
 800781e:	4613      	mov	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4413      	add	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	440b      	add	r3, r1
 8007828:	3308      	adds	r3, #8
 800782a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007830:	2300      	movs	r3, #0
 8007832:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007834:	2302      	movs	r3, #2
 8007836:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800783e:	4847      	ldr	r0, [pc, #284]	@ (800795c <KEYPAD_Init+0x28c>)
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800784e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f7fa f821 	bl	800189c <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 800785a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800785e:	3301      	adds	r3, #1
 8007860:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007864:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007868:	2b03      	cmp	r3, #3
 800786a:	f67f af4e 	bls.w	800770a <KEYPAD_Init+0x3a>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 800786e:	2300      	movs	r3, #0
 8007870:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007874:	e0c3      	b.n	80079fe <KEYPAD_Init+0x32e>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800787c:	4837      	ldr	r0, [pc, #220]	@ (800795c <KEYPAD_Init+0x28c>)
 800787e:	4613      	mov	r3, r2
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	3306      	adds	r3, #6
 800788a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800788e:	4a34      	ldr	r2, [pc, #208]	@ (8007960 <KEYPAD_Init+0x290>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10c      	bne.n	80078ae <KEYPAD_Init+0x1de>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8007894:	4b33      	ldr	r3, [pc, #204]	@ (8007964 <KEYPAD_Init+0x294>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	4a32      	ldr	r2, [pc, #200]	@ (8007964 <KEYPAD_Init+0x294>)
 800789a:	f043 0304 	orr.w	r3, r3, #4
 800789e:	6193      	str	r3, [r2, #24]
 80078a0:	4b30      	ldr	r3, [pc, #192]	@ (8007964 <KEYPAD_Init+0x294>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	e07f      	b.n	80079ae <KEYPAD_Init+0x2de>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80078ae:	88fa      	ldrh	r2, [r7, #6]
 80078b0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80078b4:	4829      	ldr	r0, [pc, #164]	@ (800795c <KEYPAD_Init+0x28c>)
 80078b6:	4613      	mov	r3, r2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	3306      	adds	r3, #6
 80078c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80078c6:	4a28      	ldr	r2, [pc, #160]	@ (8007968 <KEYPAD_Init+0x298>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10c      	bne.n	80078e6 <KEYPAD_Init+0x216>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80078cc:	4b25      	ldr	r3, [pc, #148]	@ (8007964 <KEYPAD_Init+0x294>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	4a24      	ldr	r2, [pc, #144]	@ (8007964 <KEYPAD_Init+0x294>)
 80078d2:	f043 0308 	orr.w	r3, r3, #8
 80078d6:	6193      	str	r3, [r2, #24]
 80078d8:	4b22      	ldr	r3, [pc, #136]	@ (8007964 <KEYPAD_Init+0x294>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	e063      	b.n	80079ae <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80078ec:	481b      	ldr	r0, [pc, #108]	@ (800795c <KEYPAD_Init+0x28c>)
 80078ee:	4613      	mov	r3, r2
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3306      	adds	r3, #6
 80078fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80078fe:	4a1b      	ldr	r2, [pc, #108]	@ (800796c <KEYPAD_Init+0x29c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10c      	bne.n	800791e <KEYPAD_Init+0x24e>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8007904:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <KEYPAD_Init+0x294>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4a16      	ldr	r2, [pc, #88]	@ (8007964 <KEYPAD_Init+0x294>)
 800790a:	f043 0310 	orr.w	r3, r3, #16
 800790e:	6193      	str	r3, [r2, #24]
 8007910:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <KEYPAD_Init+0x294>)
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	e047      	b.n	80079ae <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007924:	480d      	ldr	r0, [pc, #52]	@ (800795c <KEYPAD_Init+0x28c>)
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	3306      	adds	r3, #6
 8007932:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007936:	4a0e      	ldr	r2, [pc, #56]	@ (8007970 <KEYPAD_Init+0x2a0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d11d      	bne.n	8007978 <KEYPAD_Init+0x2a8>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800793c:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <KEYPAD_Init+0x294>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	4a08      	ldr	r2, [pc, #32]	@ (8007964 <KEYPAD_Init+0x294>)
 8007942:	f043 0320 	orr.w	r3, r3, #32
 8007946:	6193      	str	r3, [r2, #24]
 8007948:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <KEYPAD_Init+0x294>)
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	e02b      	b.n	80079ae <KEYPAD_Init+0x2de>
 8007956:	bf00      	nop
 8007958:	20000410 	.word	0x20000410
 800795c:	0800f440 	.word	0x0800f440
 8007960:	40010800 	.word	0x40010800
 8007964:	40021000 	.word	0x40021000
 8007968:	40010c00 	.word	0x40010c00
 800796c:	40011000 	.word	0x40011000
 8007970:	40011400 	.word	0x40011400
 8007974:	40011800 	.word	0x40011800
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800797e:	4825      	ldr	r0, [pc, #148]	@ (8007a14 <KEYPAD_Init+0x344>)
 8007980:	4613      	mov	r3, r2
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	3306      	adds	r3, #6
 800798c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007990:	4a21      	ldr	r2, [pc, #132]	@ (8007a18 <KEYPAD_Init+0x348>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d10b      	bne.n	80079ae <KEYPAD_Init+0x2de>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8007996:	4b21      	ldr	r3, [pc, #132]	@ (8007a1c <KEYPAD_Init+0x34c>)
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	4a20      	ldr	r2, [pc, #128]	@ (8007a1c <KEYPAD_Init+0x34c>)
 800799c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a0:	6193      	str	r3, [r2, #24]
 80079a2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a1c <KEYPAD_Init+0x34c>)
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80079b4:	4817      	ldr	r0, [pc, #92]	@ (8007a14 <KEYPAD_Init+0x344>)
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	440b      	add	r3, r1
 80079c0:	3314      	adds	r3, #20
 80079c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079c8:	2301      	movs	r3, #1
 80079ca:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80079cc:	2301      	movs	r3, #1
 80079ce:	643b      	str	r3, [r7, #64]	@ 0x40
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80079d6:	480f      	ldr	r0, [pc, #60]	@ (8007a14 <KEYPAD_Init+0x344>)
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	3306      	adds	r3, #6
 80079e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80079e8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f9 ff54 	bl	800189c <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80079f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80079f8:	3301      	adds	r3, #1
 80079fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80079fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	f67f af37 	bls.w	8007876 <KEYPAD_Init+0x1a6>
 8007a08:	e000      	b.n	8007a0c <KEYPAD_Init+0x33c>
		return;
 8007a0a:	bf00      	nop
	}
}
 8007a0c:	3748      	adds	r7, #72	@ 0x48
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	0800f440 	.word	0x0800f440
 8007a18:	40011800 	.word	0x40011800
 8007a1c:	40021000 	.word	0x40021000

08007a20 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
 8007a36:	e01c      	b.n	8007a72 <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	7bf9      	ldrb	r1, [r7, #15]
 8007a3c:	48a7      	ldr	r0, [pc, #668]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007a3e:	4613      	mov	r3, r2
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	3306      	adds	r3, #6
 8007a4a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	7bf9      	ldrb	r1, [r7, #15]
 8007a52:	4ca2      	ldr	r4, [pc, #648]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3314      	adds	r3, #20
 8007a60:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8007a64:	2201      	movs	r2, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7fa f8b3 	bl	8001bd2 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d9df      	bls.n	8007a38 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
 8007a7c:	e022      	b.n	8007ac4 <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	7bf9      	ldrb	r1, [r7, #15]
 8007a82:	4896      	ldr	r0, [pc, #600]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007a84:	4613      	mov	r3, r2
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	7bf9      	ldrb	r1, [r7, #15]
 8007a96:	4c91      	ldr	r4, [pc, #580]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	440b      	add	r3, r1
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8007aa8:	7bfc      	ldrb	r4, [r7, #15]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f7fa f87a 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f104 0310 	add.w	r3, r4, #16
 8007ab8:	443b      	add	r3, r7
 8007aba:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d9d9      	bls.n	8007a7e <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8007aca:	7a3a      	ldrb	r2, [r7, #8]
 8007acc:	7a7b      	ldrb	r3, [r7, #9]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7abb      	ldrb	r3, [r7, #10]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f001 808d 	beq.w	8008bfe <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 8007ae4:	7a3b      	ldrb	r3, [r7, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8200 	beq.w	8007eec <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8007aec:	88fa      	ldrh	r2, [r7, #6]
 8007aee:	497b      	ldr	r1, [pc, #492]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007af0:	4613      	mov	r3, r2
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	440b      	add	r3, r1
 8007afa:	3318      	adds	r3, #24
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	4976      	ldr	r1, [pc, #472]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b02:	4613      	mov	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	4413      	add	r3, r2
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3328      	adds	r3, #40	@ 0x28
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	2201      	movs	r2, #1
 8007b12:	4619      	mov	r1, r3
 8007b14:	f7fa f85d 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	4970      	ldr	r1, [pc, #448]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	4413      	add	r3, r2
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	440b      	add	r3, r1
 8007b26:	331c      	adds	r3, #28
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	496b      	ldr	r1, [pc, #428]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b2e:	4613      	mov	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4413      	add	r3, r2
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	440b      	add	r3, r1
 8007b38:	332a      	adds	r3, #42	@ 0x2a
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4619      	mov	r1, r3
 8007b40:	f7fa f847 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8007b44:	88fa      	ldrh	r2, [r7, #6]
 8007b46:	4965      	ldr	r1, [pc, #404]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b48:	4613      	mov	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	440b      	add	r3, r1
 8007b52:	3320      	adds	r3, #32
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	4960      	ldr	r1, [pc, #384]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	4413      	add	r3, r2
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	440b      	add	r3, r1
 8007b64:	332c      	adds	r3, #44	@ 0x2c
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f7fa f831 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8007b70:	88fa      	ldrh	r2, [r7, #6]
 8007b72:	495a      	ldr	r1, [pc, #360]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b74:	4613      	mov	r3, r2
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	4413      	add	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	440b      	add	r3, r1
 8007b7e:	3324      	adds	r3, #36	@ 0x24
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	4955      	ldr	r1, [pc, #340]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007b86:	4613      	mov	r3, r2
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	440b      	add	r3, r1
 8007b90:	332e      	adds	r3, #46	@ 0x2e
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	4619      	mov	r1, r3
 8007b98:	f7fa f81b 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	494f      	ldr	r1, [pc, #316]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	011b      	lsls	r3, r3, #4
 8007ba8:	440b      	add	r3, r1
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	494b      	ldr	r1, [pc, #300]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	4413      	add	r3, r2
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	440b      	add	r3, r1
 8007bba:	3310      	adds	r3, #16
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f7f9 fff0 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	4a43      	ldr	r2, [pc, #268]	@ (8007ce0 <KEYPAD_Scan+0x2c0>)
 8007bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e005      	b.n	8007be8 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	4a40      	ldr	r2, [pc, #256]	@ (8007ce0 <KEYPAD_Scan+0x2c0>)
 8007be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	493c      	ldr	r1, [pc, #240]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	440b      	add	r3, r1
 8007bf6:	3318      	adds	r3, #24
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	4937      	ldr	r1, [pc, #220]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007bfe:	4613      	mov	r3, r2
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	4413      	add	r3, r2
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	440b      	add	r3, r1
 8007c08:	3328      	adds	r3, #40	@ 0x28
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f7f9 ffdf 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	4931      	ldr	r1, [pc, #196]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c18:	4613      	mov	r3, r2
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	4413      	add	r3, r2
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	440b      	add	r3, r1
 8007c22:	331c      	adds	r3, #28
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	88fa      	ldrh	r2, [r7, #6]
 8007c28:	492c      	ldr	r1, [pc, #176]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4413      	add	r3, r2
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	440b      	add	r3, r1
 8007c34:	332a      	adds	r3, #42	@ 0x2a
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	f7f9 ffc9 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8007c40:	88fa      	ldrh	r2, [r7, #6]
 8007c42:	4926      	ldr	r1, [pc, #152]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	4413      	add	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	440b      	add	r3, r1
 8007c4e:	3320      	adds	r3, #32
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	4921      	ldr	r1, [pc, #132]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	440b      	add	r3, r1
 8007c60:	332c      	adds	r3, #44	@ 0x2c
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	2200      	movs	r2, #0
 8007c66:	4619      	mov	r1, r3
 8007c68:	f7f9 ffb3 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	491b      	ldr	r1, [pc, #108]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c70:	4613      	mov	r3, r2
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	4413      	add	r3, r2
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	440b      	add	r3, r1
 8007c7a:	3324      	adds	r3, #36	@ 0x24
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	88fa      	ldrh	r2, [r7, #6]
 8007c80:	4916      	ldr	r1, [pc, #88]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c82:	4613      	mov	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	440b      	add	r3, r1
 8007c8c:	332e      	adds	r3, #46	@ 0x2e
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2200      	movs	r2, #0
 8007c92:	4619      	mov	r1, r3
 8007c94:	f7f9 ff9d 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8007c98:	88fa      	ldrh	r2, [r7, #6]
 8007c9a:	4910      	ldr	r1, [pc, #64]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	4413      	add	r3, r2
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	440b      	add	r3, r1
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	490c      	ldr	r1, [pc, #48]	@ (8007cdc <KEYPAD_Scan+0x2bc>)
 8007cac:	4613      	mov	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3310      	adds	r3, #16
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f7f9 ff72 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	4a04      	ldr	r2, [pc, #16]	@ (8007ce0 <KEYPAD_Scan+0x2c0>)
 8007cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e00b      	b.n	8007cf2 <KEYPAD_Scan+0x2d2>
 8007cda:	bf00      	nop
 8007cdc:	0800f440 	.word	0x0800f440
 8007ce0:	20000410 	.word	0x20000410
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	4a7f      	ldr	r2, [pc, #508]	@ (8007ee4 <KEYPAD_Scan+0x4c4>)
 8007ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cec:	3301      	adds	r3, #1
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8007cf2:	88fa      	ldrh	r2, [r7, #6]
 8007cf4:	497c      	ldr	r1, [pc, #496]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	4413      	add	r3, r2
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	440b      	add	r3, r1
 8007d00:	3318      	adds	r3, #24
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	4978      	ldr	r1, [pc, #480]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d08:	4613      	mov	r3, r2
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	4413      	add	r3, r2
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	440b      	add	r3, r1
 8007d12:	3328      	adds	r3, #40	@ 0x28
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f7f9 ff5a 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	4971      	ldr	r1, [pc, #452]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d22:	4613      	mov	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4413      	add	r3, r2
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	440b      	add	r3, r1
 8007d2c:	331c      	adds	r3, #28
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	496d      	ldr	r1, [pc, #436]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d34:	4613      	mov	r3, r2
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	4413      	add	r3, r2
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	440b      	add	r3, r1
 8007d3e:	332a      	adds	r3, #42	@ 0x2a
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	4619      	mov	r1, r3
 8007d46:	f7f9 ff44 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8007d4a:	88fa      	ldrh	r2, [r7, #6]
 8007d4c:	4966      	ldr	r1, [pc, #408]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d4e:	4613      	mov	r3, r2
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4413      	add	r3, r2
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	440b      	add	r3, r1
 8007d58:	3320      	adds	r3, #32
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	4962      	ldr	r1, [pc, #392]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	440b      	add	r3, r1
 8007d6a:	332c      	adds	r3, #44	@ 0x2c
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7f9 ff2e 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	495b      	ldr	r1, [pc, #364]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	4413      	add	r3, r2
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	440b      	add	r3, r1
 8007d84:	3324      	adds	r3, #36	@ 0x24
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	88fa      	ldrh	r2, [r7, #6]
 8007d8a:	4957      	ldr	r1, [pc, #348]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	440b      	add	r3, r1
 8007d96:	332e      	adds	r3, #46	@ 0x2e
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7f9 ff18 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	4950      	ldr	r1, [pc, #320]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007da6:	4613      	mov	r3, r2
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	440b      	add	r3, r1
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	494c      	ldr	r1, [pc, #304]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7f9 feed 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	4a43      	ldr	r2, [pc, #268]	@ (8007ee4 <KEYPAD_Scan+0x4c4>)
 8007dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	2201      	movs	r2, #1
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e006      	b.n	8007df2 <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ee4 <KEYPAD_Scan+0x4c4>)
 8007de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dec:	3302      	adds	r3, #2
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	493c      	ldr	r1, [pc, #240]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	440b      	add	r3, r1
 8007e00:	3318      	adds	r3, #24
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	88fa      	ldrh	r2, [r7, #6]
 8007e06:	4938      	ldr	r1, [pc, #224]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e08:	4613      	mov	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	440b      	add	r3, r1
 8007e12:	3328      	adds	r3, #40	@ 0x28
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	2200      	movs	r2, #0
 8007e18:	4619      	mov	r1, r3
 8007e1a:	f7f9 feda 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	4931      	ldr	r1, [pc, #196]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e22:	4613      	mov	r3, r2
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4413      	add	r3, r2
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	440b      	add	r3, r1
 8007e2c:	331c      	adds	r3, #28
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	492d      	ldr	r1, [pc, #180]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e34:	4613      	mov	r3, r2
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	440b      	add	r3, r1
 8007e3e:	332a      	adds	r3, #42	@ 0x2a
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	4619      	mov	r1, r3
 8007e46:	f7f9 fec4 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8007e4a:	88fa      	ldrh	r2, [r7, #6]
 8007e4c:	4926      	ldr	r1, [pc, #152]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e4e:	4613      	mov	r3, r2
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	4413      	add	r3, r2
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	440b      	add	r3, r1
 8007e58:	3320      	adds	r3, #32
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	4922      	ldr	r1, [pc, #136]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e60:	4613      	mov	r3, r2
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	4413      	add	r3, r2
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	440b      	add	r3, r1
 8007e6a:	332c      	adds	r3, #44	@ 0x2c
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4619      	mov	r1, r3
 8007e72:	f7f9 feae 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	491b      	ldr	r1, [pc, #108]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	4413      	add	r3, r2
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	440b      	add	r3, r1
 8007e84:	3324      	adds	r3, #36	@ 0x24
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	88fa      	ldrh	r2, [r7, #6]
 8007e8a:	4917      	ldr	r1, [pc, #92]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	4413      	add	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	440b      	add	r3, r1
 8007e96:	332e      	adds	r3, #46	@ 0x2e
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f7f9 fe98 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8007ea2:	88fa      	ldrh	r2, [r7, #6]
 8007ea4:	4910      	ldr	r1, [pc, #64]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	4413      	add	r3, r2
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	440b      	add	r3, r1
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	490c      	ldr	r1, [pc, #48]	@ (8007ee8 <KEYPAD_Scan+0x4c8>)
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	4413      	add	r3, r2
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	440b      	add	r3, r1
 8007ec0:	3310      	adds	r3, #16
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f7f9 fe6d 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d026      	beq.n	8007f22 <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	4a03      	ldr	r2, [pc, #12]	@ (8007ee4 <KEYPAD_Scan+0x4c4>)
 8007ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007edc:	3303      	adds	r3, #3
 8007ede:	2201      	movs	r2, #1
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	e01e      	b.n	8007f22 <KEYPAD_Scan+0x502>
 8007ee4:	20000410 	.word	0x20000410
 8007ee8:	0800f440 	.word	0x0800f440
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	4a8c      	ldr	r2, [pc, #560]	@ (8008120 <KEYPAD_Scan+0x700>)
 8007ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	4a89      	ldr	r2, [pc, #548]	@ (8008120 <KEYPAD_Scan+0x700>)
 8007efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f00:	3301      	adds	r3, #1
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	4a85      	ldr	r2, [pc, #532]	@ (8008120 <KEYPAD_Scan+0x700>)
 8007f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0e:	3302      	adds	r3, #2
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	4a82      	ldr	r2, [pc, #520]	@ (8008120 <KEYPAD_Scan+0x700>)
 8007f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1c:	3303      	adds	r3, #3
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 8007f22:	7a7b      	ldrb	r3, [r7, #9]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8205 	beq.w	8008334 <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	497d      	ldr	r1, [pc, #500]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f2e:	4613      	mov	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	4413      	add	r3, r2
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	440b      	add	r3, r1
 8007f38:	3318      	adds	r3, #24
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	4979      	ldr	r1, [pc, #484]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f40:	4613      	mov	r3, r2
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	4413      	add	r3, r2
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	440b      	add	r3, r1
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4619      	mov	r1, r3
 8007f52:	f7f9 fe3e 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8007f56:	88fa      	ldrh	r2, [r7, #6]
 8007f58:	4972      	ldr	r1, [pc, #456]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	440b      	add	r3, r1
 8007f64:	331c      	adds	r3, #28
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	496e      	ldr	r1, [pc, #440]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	4413      	add	r3, r2
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	440b      	add	r3, r1
 8007f76:	332a      	adds	r3, #42	@ 0x2a
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	f7f9 fe28 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	4967      	ldr	r1, [pc, #412]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f86:	4613      	mov	r3, r2
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	4413      	add	r3, r2
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	440b      	add	r3, r1
 8007f90:	3320      	adds	r3, #32
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	4963      	ldr	r1, [pc, #396]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	440b      	add	r3, r1
 8007fa2:	332c      	adds	r3, #44	@ 0x2c
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4619      	mov	r1, r3
 8007faa:	f7f9 fe12 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	495c      	ldr	r1, [pc, #368]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	440b      	add	r3, r1
 8007fbc:	3324      	adds	r3, #36	@ 0x24
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	4958      	ldr	r1, [pc, #352]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4413      	add	r3, r2
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	440b      	add	r3, r1
 8007fce:	332e      	adds	r3, #46	@ 0x2e
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f7f9 fdfc 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	4951      	ldr	r1, [pc, #324]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007fde:	4613      	mov	r3, r2
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	4413      	add	r3, r2
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3304      	adds	r3, #4
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	494d      	ldr	r1, [pc, #308]	@ (8008124 <KEYPAD_Scan+0x704>)
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	440b      	add	r3, r1
 8007ffa:	3312      	adds	r3, #18
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	f7f9 fdd0 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	4a43      	ldr	r2, [pc, #268]	@ (8008120 <KEYPAD_Scan+0x700>)
 8008012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008016:	3304      	adds	r3, #4
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	e006      	b.n	800802c <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	4a3f      	ldr	r2, [pc, #252]	@ (8008120 <KEYPAD_Scan+0x700>)
 8008022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008026:	3304      	adds	r3, #4
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800802c:	88fa      	ldrh	r2, [r7, #6]
 800802e:	493d      	ldr	r1, [pc, #244]	@ (8008124 <KEYPAD_Scan+0x704>)
 8008030:	4613      	mov	r3, r2
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	4413      	add	r3, r2
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	440b      	add	r3, r1
 800803a:	3318      	adds	r3, #24
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	4938      	ldr	r1, [pc, #224]	@ (8008124 <KEYPAD_Scan+0x704>)
 8008042:	4613      	mov	r3, r2
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4413      	add	r3, r2
 8008048:	011b      	lsls	r3, r3, #4
 800804a:	440b      	add	r3, r1
 800804c:	3328      	adds	r3, #40	@ 0x28
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	2200      	movs	r2, #0
 8008052:	4619      	mov	r1, r3
 8008054:	f7f9 fdbd 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8008058:	88fa      	ldrh	r2, [r7, #6]
 800805a:	4932      	ldr	r1, [pc, #200]	@ (8008124 <KEYPAD_Scan+0x704>)
 800805c:	4613      	mov	r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	4413      	add	r3, r2
 8008062:	011b      	lsls	r3, r3, #4
 8008064:	440b      	add	r3, r1
 8008066:	331c      	adds	r3, #28
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	88fa      	ldrh	r2, [r7, #6]
 800806c:	492d      	ldr	r1, [pc, #180]	@ (8008124 <KEYPAD_Scan+0x704>)
 800806e:	4613      	mov	r3, r2
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	4413      	add	r3, r2
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	440b      	add	r3, r1
 8008078:	332a      	adds	r3, #42	@ 0x2a
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	2201      	movs	r2, #1
 800807e:	4619      	mov	r1, r3
 8008080:	f7f9 fda7 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	4927      	ldr	r1, [pc, #156]	@ (8008124 <KEYPAD_Scan+0x704>)
 8008088:	4613      	mov	r3, r2
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	4413      	add	r3, r2
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	440b      	add	r3, r1
 8008092:	3320      	adds	r3, #32
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	4922      	ldr	r1, [pc, #136]	@ (8008124 <KEYPAD_Scan+0x704>)
 800809a:	4613      	mov	r3, r2
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4413      	add	r3, r2
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	440b      	add	r3, r1
 80080a4:	332c      	adds	r3, #44	@ 0x2c
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	4619      	mov	r1, r3
 80080ac:	f7f9 fd91 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80080b0:	88fa      	ldrh	r2, [r7, #6]
 80080b2:	491c      	ldr	r1, [pc, #112]	@ (8008124 <KEYPAD_Scan+0x704>)
 80080b4:	4613      	mov	r3, r2
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	440b      	add	r3, r1
 80080be:	3324      	adds	r3, #36	@ 0x24
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	88fa      	ldrh	r2, [r7, #6]
 80080c4:	4917      	ldr	r1, [pc, #92]	@ (8008124 <KEYPAD_Scan+0x704>)
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	440b      	add	r3, r1
 80080d0:	332e      	adds	r3, #46	@ 0x2e
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	2200      	movs	r2, #0
 80080d6:	4619      	mov	r1, r3
 80080d8:	f7f9 fd7b 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80080dc:	88fa      	ldrh	r2, [r7, #6]
 80080de:	4911      	ldr	r1, [pc, #68]	@ (8008124 <KEYPAD_Scan+0x704>)
 80080e0:	4613      	mov	r3, r2
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	4413      	add	r3, r2
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	440b      	add	r3, r1
 80080ea:	3304      	adds	r3, #4
 80080ec:	6818      	ldr	r0, [r3, #0]
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	490c      	ldr	r1, [pc, #48]	@ (8008124 <KEYPAD_Scan+0x704>)
 80080f2:	4613      	mov	r3, r2
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4413      	add	r3, r2
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	440b      	add	r3, r1
 80080fc:	3312      	adds	r3, #18
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	4619      	mov	r1, r3
 8008102:	f7f9 fd4f 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	4a03      	ldr	r2, [pc, #12]	@ (8008120 <KEYPAD_Scan+0x700>)
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	3305      	adds	r3, #5
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e00a      	b.n	8008136 <KEYPAD_Scan+0x716>
 8008120:	20000410 	.word	0x20000410
 8008124:	0800f440 	.word	0x0800f440
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	4a80      	ldr	r2, [pc, #512]	@ (800832c <KEYPAD_Scan+0x90c>)
 800812c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008130:	3305      	adds	r3, #5
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008136:	88fa      	ldrh	r2, [r7, #6]
 8008138:	497d      	ldr	r1, [pc, #500]	@ (8008330 <KEYPAD_Scan+0x910>)
 800813a:	4613      	mov	r3, r2
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4413      	add	r3, r2
 8008140:	011b      	lsls	r3, r3, #4
 8008142:	440b      	add	r3, r1
 8008144:	3318      	adds	r3, #24
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	4979      	ldr	r1, [pc, #484]	@ (8008330 <KEYPAD_Scan+0x910>)
 800814c:	4613      	mov	r3, r2
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4413      	add	r3, r2
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	440b      	add	r3, r1
 8008156:	3328      	adds	r3, #40	@ 0x28
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	2200      	movs	r2, #0
 800815c:	4619      	mov	r1, r3
 800815e:	f7f9 fd38 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	4972      	ldr	r1, [pc, #456]	@ (8008330 <KEYPAD_Scan+0x910>)
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	440b      	add	r3, r1
 8008170:	331c      	adds	r3, #28
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	88fa      	ldrh	r2, [r7, #6]
 8008176:	496e      	ldr	r1, [pc, #440]	@ (8008330 <KEYPAD_Scan+0x910>)
 8008178:	4613      	mov	r3, r2
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4413      	add	r3, r2
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	440b      	add	r3, r1
 8008182:	332a      	adds	r3, #42	@ 0x2a
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	2200      	movs	r2, #0
 8008188:	4619      	mov	r1, r3
 800818a:	f7f9 fd22 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	4967      	ldr	r1, [pc, #412]	@ (8008330 <KEYPAD_Scan+0x910>)
 8008192:	4613      	mov	r3, r2
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	4413      	add	r3, r2
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	440b      	add	r3, r1
 800819c:	3320      	adds	r3, #32
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	88fa      	ldrh	r2, [r7, #6]
 80081a2:	4963      	ldr	r1, [pc, #396]	@ (8008330 <KEYPAD_Scan+0x910>)
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	440b      	add	r3, r1
 80081ae:	332c      	adds	r3, #44	@ 0x2c
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	4619      	mov	r1, r3
 80081b6:	f7f9 fd0c 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	495c      	ldr	r1, [pc, #368]	@ (8008330 <KEYPAD_Scan+0x910>)
 80081be:	4613      	mov	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4413      	add	r3, r2
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	440b      	add	r3, r1
 80081c8:	3324      	adds	r3, #36	@ 0x24
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	4958      	ldr	r1, [pc, #352]	@ (8008330 <KEYPAD_Scan+0x910>)
 80081d0:	4613      	mov	r3, r2
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	4413      	add	r3, r2
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	440b      	add	r3, r1
 80081da:	332e      	adds	r3, #46	@ 0x2e
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	4619      	mov	r1, r3
 80081e2:	f7f9 fcf6 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	4951      	ldr	r1, [pc, #324]	@ (8008330 <KEYPAD_Scan+0x910>)
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	440b      	add	r3, r1
 80081f4:	3304      	adds	r3, #4
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	88fa      	ldrh	r2, [r7, #6]
 80081fa:	494d      	ldr	r1, [pc, #308]	@ (8008330 <KEYPAD_Scan+0x910>)
 80081fc:	4613      	mov	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	4413      	add	r3, r2
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	440b      	add	r3, r1
 8008206:	3312      	adds	r3, #18
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	4619      	mov	r1, r3
 800820c:	f7f9 fcca 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008210:	4603      	mov	r3, r0
 8008212:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	4a43      	ldr	r2, [pc, #268]	@ (800832c <KEYPAD_Scan+0x90c>)
 800821e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008222:	3306      	adds	r3, #6
 8008224:	2201      	movs	r2, #1
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	e006      	b.n	8008238 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	4a3f      	ldr	r2, [pc, #252]	@ (800832c <KEYPAD_Scan+0x90c>)
 800822e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008232:	3306      	adds	r3, #6
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	493d      	ldr	r1, [pc, #244]	@ (8008330 <KEYPAD_Scan+0x910>)
 800823c:	4613      	mov	r3, r2
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	4413      	add	r3, r2
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	440b      	add	r3, r1
 8008246:	3318      	adds	r3, #24
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	88fa      	ldrh	r2, [r7, #6]
 800824c:	4938      	ldr	r1, [pc, #224]	@ (8008330 <KEYPAD_Scan+0x910>)
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	440b      	add	r3, r1
 8008258:	3328      	adds	r3, #40	@ 0x28
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	2200      	movs	r2, #0
 800825e:	4619      	mov	r1, r3
 8008260:	f7f9 fcb7 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	4932      	ldr	r1, [pc, #200]	@ (8008330 <KEYPAD_Scan+0x910>)
 8008268:	4613      	mov	r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	4413      	add	r3, r2
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	440b      	add	r3, r1
 8008272:	331c      	adds	r3, #28
 8008274:	6818      	ldr	r0, [r3, #0]
 8008276:	88fa      	ldrh	r2, [r7, #6]
 8008278:	492d      	ldr	r1, [pc, #180]	@ (8008330 <KEYPAD_Scan+0x910>)
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	440b      	add	r3, r1
 8008284:	332a      	adds	r3, #42	@ 0x2a
 8008286:	881b      	ldrh	r3, [r3, #0]
 8008288:	2200      	movs	r2, #0
 800828a:	4619      	mov	r1, r3
 800828c:	f7f9 fca1 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	4927      	ldr	r1, [pc, #156]	@ (8008330 <KEYPAD_Scan+0x910>)
 8008294:	4613      	mov	r3, r2
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4413      	add	r3, r2
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	440b      	add	r3, r1
 800829e:	3320      	adds	r3, #32
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	88fa      	ldrh	r2, [r7, #6]
 80082a4:	4922      	ldr	r1, [pc, #136]	@ (8008330 <KEYPAD_Scan+0x910>)
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	440b      	add	r3, r1
 80082b0:	332c      	adds	r3, #44	@ 0x2c
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	2200      	movs	r2, #0
 80082b6:	4619      	mov	r1, r3
 80082b8:	f7f9 fc8b 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	491c      	ldr	r1, [pc, #112]	@ (8008330 <KEYPAD_Scan+0x910>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	4413      	add	r3, r2
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	440b      	add	r3, r1
 80082ca:	3324      	adds	r3, #36	@ 0x24
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	4917      	ldr	r1, [pc, #92]	@ (8008330 <KEYPAD_Scan+0x910>)
 80082d2:	4613      	mov	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	440b      	add	r3, r1
 80082dc:	332e      	adds	r3, #46	@ 0x2e
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	2201      	movs	r2, #1
 80082e2:	4619      	mov	r1, r3
 80082e4:	f7f9 fc75 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	4911      	ldr	r1, [pc, #68]	@ (8008330 <KEYPAD_Scan+0x910>)
 80082ec:	4613      	mov	r3, r2
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	4413      	add	r3, r2
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	440b      	add	r3, r1
 80082f6:	3304      	adds	r3, #4
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	490c      	ldr	r1, [pc, #48]	@ (8008330 <KEYPAD_Scan+0x910>)
 80082fe:	4613      	mov	r3, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	011b      	lsls	r3, r3, #4
 8008306:	440b      	add	r3, r1
 8008308:	3312      	adds	r3, #18
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	4619      	mov	r1, r3
 800830e:	f7f9 fc49 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008312:	4603      	mov	r3, r0
 8008314:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d027      	beq.n	800836c <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	4a03      	ldr	r2, [pc, #12]	@ (800832c <KEYPAD_Scan+0x90c>)
 8008320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008324:	3307      	adds	r3, #7
 8008326:	2201      	movs	r2, #1
 8008328:	701a      	strb	r2, [r3, #0]
 800832a:	e01f      	b.n	800836c <KEYPAD_Scan+0x94c>
 800832c:	20000410 	.word	0x20000410
 8008330:	0800f440 	.word	0x0800f440
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	4a8d      	ldr	r2, [pc, #564]	@ (800856c <KEYPAD_Scan+0xb4c>)
 8008338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833c:	3304      	adds	r3, #4
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8008342:	88fb      	ldrh	r3, [r7, #6]
 8008344:	4a89      	ldr	r2, [pc, #548]	@ (800856c <KEYPAD_Scan+0xb4c>)
 8008346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800834a:	3305      	adds	r3, #5
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	4a86      	ldr	r2, [pc, #536]	@ (800856c <KEYPAD_Scan+0xb4c>)
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	3306      	adds	r3, #6
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	4a82      	ldr	r2, [pc, #520]	@ (800856c <KEYPAD_Scan+0xb4c>)
 8008362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008366:	3307      	adds	r3, #7
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 800836c:	7abb      	ldrb	r3, [r7, #10]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8206 	beq.w	8008780 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8008374:	88fa      	ldrh	r2, [r7, #6]
 8008376:	497e      	ldr	r1, [pc, #504]	@ (8008570 <KEYPAD_Scan+0xb50>)
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	440b      	add	r3, r1
 8008382:	3318      	adds	r3, #24
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	4979      	ldr	r1, [pc, #484]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800838a:	4613      	mov	r3, r2
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4413      	add	r3, r2
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	440b      	add	r3, r1
 8008394:	3328      	adds	r3, #40	@ 0x28
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	2201      	movs	r2, #1
 800839a:	4619      	mov	r1, r3
 800839c:	f7f9 fc19 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80083a0:	88fa      	ldrh	r2, [r7, #6]
 80083a2:	4973      	ldr	r1, [pc, #460]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80083a4:	4613      	mov	r3, r2
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	4413      	add	r3, r2
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	440b      	add	r3, r1
 80083ae:	331c      	adds	r3, #28
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	496e      	ldr	r1, [pc, #440]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80083b6:	4613      	mov	r3, r2
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	4413      	add	r3, r2
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	440b      	add	r3, r1
 80083c0:	332a      	adds	r3, #42	@ 0x2a
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	2200      	movs	r2, #0
 80083c6:	4619      	mov	r1, r3
 80083c8:	f7f9 fc03 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80083cc:	88fa      	ldrh	r2, [r7, #6]
 80083ce:	4968      	ldr	r1, [pc, #416]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80083d0:	4613      	mov	r3, r2
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	4413      	add	r3, r2
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	440b      	add	r3, r1
 80083da:	3320      	adds	r3, #32
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	88fa      	ldrh	r2, [r7, #6]
 80083e0:	4963      	ldr	r1, [pc, #396]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	440b      	add	r3, r1
 80083ec:	332c      	adds	r3, #44	@ 0x2c
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	4619      	mov	r1, r3
 80083f4:	f7f9 fbed 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	495d      	ldr	r1, [pc, #372]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80083fc:	4613      	mov	r3, r2
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	4413      	add	r3, r2
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	440b      	add	r3, r1
 8008406:	3324      	adds	r3, #36	@ 0x24
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	88fa      	ldrh	r2, [r7, #6]
 800840c:	4958      	ldr	r1, [pc, #352]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800840e:	4613      	mov	r3, r2
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4413      	add	r3, r2
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	440b      	add	r3, r1
 8008418:	332e      	adds	r3, #46	@ 0x2e
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	4619      	mov	r1, r3
 8008420:	f7f9 fbd7 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8008424:	88fa      	ldrh	r2, [r7, #6]
 8008426:	4952      	ldr	r1, [pc, #328]	@ (8008570 <KEYPAD_Scan+0xb50>)
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	440b      	add	r3, r1
 8008432:	3308      	adds	r3, #8
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	494d      	ldr	r1, [pc, #308]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800843a:	4613      	mov	r3, r2
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4413      	add	r3, r2
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	440b      	add	r3, r1
 8008444:	3314      	adds	r3, #20
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	4619      	mov	r1, r3
 800844a:	f7f9 fbab 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	4a44      	ldr	r2, [pc, #272]	@ (800856c <KEYPAD_Scan+0xb4c>)
 800845c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008460:	3308      	adds	r3, #8
 8008462:	2201      	movs	r2, #1
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e006      	b.n	8008476 <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	4a40      	ldr	r2, [pc, #256]	@ (800856c <KEYPAD_Scan+0xb4c>)
 800846c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008470:	3308      	adds	r3, #8
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	493d      	ldr	r1, [pc, #244]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800847a:	4613      	mov	r3, r2
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	4413      	add	r3, r2
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	440b      	add	r3, r1
 8008484:	3318      	adds	r3, #24
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	4939      	ldr	r1, [pc, #228]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800848c:	4613      	mov	r3, r2
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	4413      	add	r3, r2
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	440b      	add	r3, r1
 8008496:	3328      	adds	r3, #40	@ 0x28
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	2200      	movs	r2, #0
 800849c:	4619      	mov	r1, r3
 800849e:	f7f9 fb98 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	4932      	ldr	r1, [pc, #200]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	440b      	add	r3, r1
 80084b0:	331c      	adds	r3, #28
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	492e      	ldr	r1, [pc, #184]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80084b8:	4613      	mov	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	4413      	add	r3, r2
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	440b      	add	r3, r1
 80084c2:	332a      	adds	r3, #42	@ 0x2a
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	4619      	mov	r1, r3
 80084ca:	f7f9 fb82 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80084ce:	88fa      	ldrh	r2, [r7, #6]
 80084d0:	4927      	ldr	r1, [pc, #156]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80084d2:	4613      	mov	r3, r2
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	4413      	add	r3, r2
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	440b      	add	r3, r1
 80084dc:	3320      	adds	r3, #32
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	88fa      	ldrh	r2, [r7, #6]
 80084e2:	4923      	ldr	r1, [pc, #140]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	440b      	add	r3, r1
 80084ee:	332c      	adds	r3, #44	@ 0x2c
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	2200      	movs	r2, #0
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7f9 fb6c 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80084fa:	88fa      	ldrh	r2, [r7, #6]
 80084fc:	491c      	ldr	r1, [pc, #112]	@ (8008570 <KEYPAD_Scan+0xb50>)
 80084fe:	4613      	mov	r3, r2
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	4413      	add	r3, r2
 8008504:	011b      	lsls	r3, r3, #4
 8008506:	440b      	add	r3, r1
 8008508:	3324      	adds	r3, #36	@ 0x24
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	88fa      	ldrh	r2, [r7, #6]
 800850e:	4918      	ldr	r1, [pc, #96]	@ (8008570 <KEYPAD_Scan+0xb50>)
 8008510:	4613      	mov	r3, r2
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	4413      	add	r3, r2
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	440b      	add	r3, r1
 800851a:	332e      	adds	r3, #46	@ 0x2e
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	4619      	mov	r1, r3
 8008522:	f7f9 fb56 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8008526:	88fa      	ldrh	r2, [r7, #6]
 8008528:	4911      	ldr	r1, [pc, #68]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800852a:	4613      	mov	r3, r2
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	4413      	add	r3, r2
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	440b      	add	r3, r1
 8008534:	3308      	adds	r3, #8
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	490d      	ldr	r1, [pc, #52]	@ (8008570 <KEYPAD_Scan+0xb50>)
 800853c:	4613      	mov	r3, r2
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	4413      	add	r3, r2
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	440b      	add	r3, r1
 8008546:	3314      	adds	r3, #20
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	4619      	mov	r1, r3
 800854c:	f7f9 fb2a 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	4a03      	ldr	r2, [pc, #12]	@ (800856c <KEYPAD_Scan+0xb4c>)
 800855e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008562:	3309      	adds	r3, #9
 8008564:	2201      	movs	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e00b      	b.n	8008582 <KEYPAD_Scan+0xb62>
 800856a:	bf00      	nop
 800856c:	20000410 	.word	0x20000410
 8008570:	0800f440 	.word	0x0800f440
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	4a80      	ldr	r2, [pc, #512]	@ (8008778 <KEYPAD_Scan+0xd58>)
 8008578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857c:	3309      	adds	r3, #9
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	497d      	ldr	r1, [pc, #500]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	440b      	add	r3, r1
 8008590:	3318      	adds	r3, #24
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	88fa      	ldrh	r2, [r7, #6]
 8008596:	4979      	ldr	r1, [pc, #484]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008598:	4613      	mov	r3, r2
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	4413      	add	r3, r2
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	440b      	add	r3, r1
 80085a2:	3328      	adds	r3, #40	@ 0x28
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	4619      	mov	r1, r3
 80085aa:	f7f9 fb12 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	4972      	ldr	r1, [pc, #456]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	440b      	add	r3, r1
 80085bc:	331c      	adds	r3, #28
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	496e      	ldr	r1, [pc, #440]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	440b      	add	r3, r1
 80085ce:	332a      	adds	r3, #42	@ 0x2a
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	4619      	mov	r1, r3
 80085d6:	f7f9 fafc 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	4967      	ldr	r1, [pc, #412]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	440b      	add	r3, r1
 80085e8:	3320      	adds	r3, #32
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	4963      	ldr	r1, [pc, #396]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80085f0:	4613      	mov	r3, r2
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	4413      	add	r3, r2
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	440b      	add	r3, r1
 80085fa:	332c      	adds	r3, #44	@ 0x2c
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	2201      	movs	r2, #1
 8008600:	4619      	mov	r1, r3
 8008602:	f7f9 fae6 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8008606:	88fa      	ldrh	r2, [r7, #6]
 8008608:	495c      	ldr	r1, [pc, #368]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800860a:	4613      	mov	r3, r2
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	4413      	add	r3, r2
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	440b      	add	r3, r1
 8008614:	3324      	adds	r3, #36	@ 0x24
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	88fa      	ldrh	r2, [r7, #6]
 800861a:	4958      	ldr	r1, [pc, #352]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	440b      	add	r3, r1
 8008626:	332e      	adds	r3, #46	@ 0x2e
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	4619      	mov	r1, r3
 800862e:	f7f9 fad0 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	4951      	ldr	r1, [pc, #324]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008636:	4613      	mov	r3, r2
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	4413      	add	r3, r2
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	440b      	add	r3, r1
 8008640:	3308      	adds	r3, #8
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	88fa      	ldrh	r2, [r7, #6]
 8008646:	494d      	ldr	r1, [pc, #308]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	440b      	add	r3, r1
 8008652:	3314      	adds	r3, #20
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	4619      	mov	r1, r3
 8008658:	f7f9 faa4 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800865c:	4603      	mov	r3, r0
 800865e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	4a43      	ldr	r2, [pc, #268]	@ (8008778 <KEYPAD_Scan+0xd58>)
 800866a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800866e:	330a      	adds	r3, #10
 8008670:	2201      	movs	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
 8008674:	e006      	b.n	8008684 <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	4a3f      	ldr	r2, [pc, #252]	@ (8008778 <KEYPAD_Scan+0xd58>)
 800867a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867e:	330a      	adds	r3, #10
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008684:	88fa      	ldrh	r2, [r7, #6]
 8008686:	493d      	ldr	r1, [pc, #244]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008688:	4613      	mov	r3, r2
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	4413      	add	r3, r2
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	440b      	add	r3, r1
 8008692:	3318      	adds	r3, #24
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	4938      	ldr	r1, [pc, #224]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	440b      	add	r3, r1
 80086a4:	3328      	adds	r3, #40	@ 0x28
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	2200      	movs	r2, #0
 80086aa:	4619      	mov	r1, r3
 80086ac:	f7f9 fa91 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80086b0:	88fa      	ldrh	r2, [r7, #6]
 80086b2:	4932      	ldr	r1, [pc, #200]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80086b4:	4613      	mov	r3, r2
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	4413      	add	r3, r2
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	440b      	add	r3, r1
 80086be:	331c      	adds	r3, #28
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	88fa      	ldrh	r2, [r7, #6]
 80086c4:	492d      	ldr	r1, [pc, #180]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80086c6:	4613      	mov	r3, r2
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	4413      	add	r3, r2
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	440b      	add	r3, r1
 80086d0:	332a      	adds	r3, #42	@ 0x2a
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	2200      	movs	r2, #0
 80086d6:	4619      	mov	r1, r3
 80086d8:	f7f9 fa7b 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80086dc:	88fa      	ldrh	r2, [r7, #6]
 80086de:	4927      	ldr	r1, [pc, #156]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80086e0:	4613      	mov	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	4413      	add	r3, r2
 80086e6:	011b      	lsls	r3, r3, #4
 80086e8:	440b      	add	r3, r1
 80086ea:	3320      	adds	r3, #32
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	4922      	ldr	r1, [pc, #136]	@ (800877c <KEYPAD_Scan+0xd5c>)
 80086f2:	4613      	mov	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4413      	add	r3, r2
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	440b      	add	r3, r1
 80086fc:	332c      	adds	r3, #44	@ 0x2c
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	2200      	movs	r2, #0
 8008702:	4619      	mov	r1, r3
 8008704:	f7f9 fa65 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8008708:	88fa      	ldrh	r2, [r7, #6]
 800870a:	491c      	ldr	r1, [pc, #112]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800870c:	4613      	mov	r3, r2
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	4413      	add	r3, r2
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	440b      	add	r3, r1
 8008716:	3324      	adds	r3, #36	@ 0x24
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	88fa      	ldrh	r2, [r7, #6]
 800871c:	4917      	ldr	r1, [pc, #92]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800871e:	4613      	mov	r3, r2
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4413      	add	r3, r2
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	440b      	add	r3, r1
 8008728:	332e      	adds	r3, #46	@ 0x2e
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	2201      	movs	r2, #1
 800872e:	4619      	mov	r1, r3
 8008730:	f7f9 fa4f 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	4911      	ldr	r1, [pc, #68]	@ (800877c <KEYPAD_Scan+0xd5c>)
 8008738:	4613      	mov	r3, r2
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	4413      	add	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	440b      	add	r3, r1
 8008742:	3308      	adds	r3, #8
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	490c      	ldr	r1, [pc, #48]	@ (800877c <KEYPAD_Scan+0xd5c>)
 800874a:	4613      	mov	r3, r2
 800874c:	005b      	lsls	r3, r3, #1
 800874e:	4413      	add	r3, r2
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	440b      	add	r3, r1
 8008754:	3314      	adds	r3, #20
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	4619      	mov	r1, r3
 800875a:	f7f9 fa23 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d027      	beq.n	80087b8 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	4a03      	ldr	r2, [pc, #12]	@ (8008778 <KEYPAD_Scan+0xd58>)
 800876c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008770:	330b      	adds	r3, #11
 8008772:	2201      	movs	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e01f      	b.n	80087b8 <KEYPAD_Scan+0xd98>
 8008778:	20000410 	.word	0x20000410
 800877c:	0800f440 	.word	0x0800f440
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	4a8d      	ldr	r2, [pc, #564]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 8008784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008788:	3308      	adds	r3, #8
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	4a89      	ldr	r2, [pc, #548]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 8008792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008796:	3309      	adds	r3, #9
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	4a86      	ldr	r2, [pc, #536]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 80087a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a4:	330a      	adds	r3, #10
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	4a82      	ldr	r2, [pc, #520]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 80087ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b2:	330b      	adds	r3, #11
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 8202 	beq.w	8008bc4 <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80087c0:	88fa      	ldrh	r2, [r7, #6]
 80087c2:	497e      	ldr	r1, [pc, #504]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80087c4:	4613      	mov	r3, r2
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	4413      	add	r3, r2
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	440b      	add	r3, r1
 80087ce:	3318      	adds	r3, #24
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	4979      	ldr	r1, [pc, #484]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80087d6:	4613      	mov	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4413      	add	r3, r2
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	440b      	add	r3, r1
 80087e0:	3328      	adds	r3, #40	@ 0x28
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	4619      	mov	r1, r3
 80087e8:	f7f9 f9f3 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	4973      	ldr	r1, [pc, #460]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	440b      	add	r3, r1
 80087fa:	331c      	adds	r3, #28
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	496e      	ldr	r1, [pc, #440]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008802:	4613      	mov	r3, r2
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4413      	add	r3, r2
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	440b      	add	r3, r1
 800880c:	332a      	adds	r3, #42	@ 0x2a
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	2200      	movs	r2, #0
 8008812:	4619      	mov	r1, r3
 8008814:	f7f9 f9dd 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	4968      	ldr	r1, [pc, #416]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800881c:	4613      	mov	r3, r2
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	4413      	add	r3, r2
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	440b      	add	r3, r1
 8008826:	3320      	adds	r3, #32
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	4963      	ldr	r1, [pc, #396]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800882e:	4613      	mov	r3, r2
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4413      	add	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	440b      	add	r3, r1
 8008838:	332c      	adds	r3, #44	@ 0x2c
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	4619      	mov	r1, r3
 8008840:	f7f9 f9c7 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	495d      	ldr	r1, [pc, #372]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008848:	4613      	mov	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	440b      	add	r3, r1
 8008852:	3324      	adds	r3, #36	@ 0x24
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	4958      	ldr	r1, [pc, #352]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800885a:	4613      	mov	r3, r2
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	4413      	add	r3, r2
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	440b      	add	r3, r1
 8008864:	332e      	adds	r3, #46	@ 0x2e
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	4619      	mov	r1, r3
 800886c:	f7f9 f9b1 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	4952      	ldr	r1, [pc, #328]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008874:	4613      	mov	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	4413      	add	r3, r2
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	440b      	add	r3, r1
 800887e:	330c      	adds	r3, #12
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	88fa      	ldrh	r2, [r7, #6]
 8008884:	494d      	ldr	r1, [pc, #308]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008886:	4613      	mov	r3, r2
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4413      	add	r3, r2
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	440b      	add	r3, r1
 8008890:	3316      	adds	r3, #22
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	f7f9 f985 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	4a44      	ldr	r2, [pc, #272]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 80088a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ac:	330c      	adds	r3, #12
 80088ae:	2201      	movs	r2, #1
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	e006      	b.n	80088c2 <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	4a40      	ldr	r2, [pc, #256]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 80088b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088bc:	330c      	adds	r3, #12
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	493d      	ldr	r1, [pc, #244]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80088c6:	4613      	mov	r3, r2
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	440b      	add	r3, r1
 80088d0:	3318      	adds	r3, #24
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	4939      	ldr	r1, [pc, #228]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	440b      	add	r3, r1
 80088e2:	3328      	adds	r3, #40	@ 0x28
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f9 f972 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80088ee:	88fa      	ldrh	r2, [r7, #6]
 80088f0:	4932      	ldr	r1, [pc, #200]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 80088f2:	4613      	mov	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	4413      	add	r3, r2
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	440b      	add	r3, r1
 80088fc:	331c      	adds	r3, #28
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	88fa      	ldrh	r2, [r7, #6]
 8008902:	492e      	ldr	r1, [pc, #184]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008904:	4613      	mov	r3, r2
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	4413      	add	r3, r2
 800890a:	011b      	lsls	r3, r3, #4
 800890c:	440b      	add	r3, r1
 800890e:	332a      	adds	r3, #42	@ 0x2a
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	2201      	movs	r2, #1
 8008914:	4619      	mov	r1, r3
 8008916:	f7f9 f95c 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800891a:	88fa      	ldrh	r2, [r7, #6]
 800891c:	4927      	ldr	r1, [pc, #156]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	440b      	add	r3, r1
 8008928:	3320      	adds	r3, #32
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	88fa      	ldrh	r2, [r7, #6]
 800892e:	4923      	ldr	r1, [pc, #140]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008930:	4613      	mov	r3, r2
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	4413      	add	r3, r2
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	440b      	add	r3, r1
 800893a:	332c      	adds	r3, #44	@ 0x2c
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	4619      	mov	r1, r3
 8008942:	f7f9 f946 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	491c      	ldr	r1, [pc, #112]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800894a:	4613      	mov	r3, r2
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	4413      	add	r3, r2
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	440b      	add	r3, r1
 8008954:	3324      	adds	r3, #36	@ 0x24
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	4918      	ldr	r1, [pc, #96]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 800895c:	4613      	mov	r3, r2
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	4413      	add	r3, r2
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	440b      	add	r3, r1
 8008966:	332e      	adds	r3, #46	@ 0x2e
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	2200      	movs	r2, #0
 800896c:	4619      	mov	r1, r3
 800896e:	f7f9 f930 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8008972:	88fa      	ldrh	r2, [r7, #6]
 8008974:	4911      	ldr	r1, [pc, #68]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	440b      	add	r3, r1
 8008980:	330c      	adds	r3, #12
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	490d      	ldr	r1, [pc, #52]	@ (80089bc <KEYPAD_Scan+0xf9c>)
 8008988:	4613      	mov	r3, r2
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	4413      	add	r3, r2
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	440b      	add	r3, r1
 8008992:	3316      	adds	r3, #22
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	4619      	mov	r1, r3
 8008998:	f7f9 f904 	bl	8001ba4 <HAL_GPIO_ReadPin>
 800899c:	4603      	mov	r3, r0
 800899e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00c      	beq.n	80089c0 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	4a03      	ldr	r2, [pc, #12]	@ (80089b8 <KEYPAD_Scan+0xf98>)
 80089aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ae:	330d      	adds	r3, #13
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e00b      	b.n	80089ce <KEYPAD_Scan+0xfae>
 80089b6:	bf00      	nop
 80089b8:	20000410 	.word	0x20000410
 80089bc:	0800f440 	.word	0x0800f440
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	4aab      	ldr	r2, [pc, #684]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 80089c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c8:	330d      	adds	r3, #13
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	49a8      	ldr	r1, [pc, #672]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 80089d2:	4613      	mov	r3, r2
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	4413      	add	r3, r2
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	440b      	add	r3, r1
 80089dc:	3318      	adds	r3, #24
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	49a4      	ldr	r1, [pc, #656]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 80089e4:	4613      	mov	r3, r2
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	4413      	add	r3, r2
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	440b      	add	r3, r1
 80089ee:	3328      	adds	r3, #40	@ 0x28
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7f9 f8ec 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	499d      	ldr	r1, [pc, #628]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 80089fe:	4613      	mov	r3, r2
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	4413      	add	r3, r2
 8008a04:	011b      	lsls	r3, r3, #4
 8008a06:	440b      	add	r3, r1
 8008a08:	331c      	adds	r3, #28
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	4999      	ldr	r1, [pc, #612]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a10:	4613      	mov	r3, r2
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	4413      	add	r3, r2
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	440b      	add	r3, r1
 8008a1a:	332a      	adds	r3, #42	@ 0x2a
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4619      	mov	r1, r3
 8008a22:	f7f9 f8d6 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	4992      	ldr	r1, [pc, #584]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	4413      	add	r3, r2
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	440b      	add	r3, r1
 8008a34:	3320      	adds	r3, #32
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	88fa      	ldrh	r2, [r7, #6]
 8008a3a:	498e      	ldr	r1, [pc, #568]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	4413      	add	r3, r2
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	440b      	add	r3, r1
 8008a46:	332c      	adds	r3, #44	@ 0x2c
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7f9 f8c0 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	4987      	ldr	r1, [pc, #540]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a56:	4613      	mov	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	440b      	add	r3, r1
 8008a60:	3324      	adds	r3, #36	@ 0x24
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	4983      	ldr	r1, [pc, #524]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a68:	4613      	mov	r3, r2
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	4413      	add	r3, r2
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	440b      	add	r3, r1
 8008a72:	332e      	adds	r3, #46	@ 0x2e
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f7f9 f8aa 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	497c      	ldr	r1, [pc, #496]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a82:	4613      	mov	r3, r2
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	4413      	add	r3, r2
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	440b      	add	r3, r1
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	4978      	ldr	r1, [pc, #480]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008a94:	4613      	mov	r3, r2
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	4413      	add	r3, r2
 8008a9a:	011b      	lsls	r3, r3, #4
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3316      	adds	r3, #22
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f7f9 f87e 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d007      	beq.n	8008ac2 <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aba:	330e      	adds	r3, #14
 8008abc:	2201      	movs	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e006      	b.n	8008ad0 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aca:	330e      	adds	r3, #14
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8008ad0:	88fa      	ldrh	r2, [r7, #6]
 8008ad2:	4968      	ldr	r1, [pc, #416]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	4413      	add	r3, r2
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	440b      	add	r3, r1
 8008ade:	3318      	adds	r3, #24
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	88fa      	ldrh	r2, [r7, #6]
 8008ae4:	4963      	ldr	r1, [pc, #396]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	4413      	add	r3, r2
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	440b      	add	r3, r1
 8008af0:	3328      	adds	r3, #40	@ 0x28
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	2200      	movs	r2, #0
 8008af6:	4619      	mov	r1, r3
 8008af8:	f7f9 f86b 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8008afc:	88fa      	ldrh	r2, [r7, #6]
 8008afe:	495d      	ldr	r1, [pc, #372]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b00:	4613      	mov	r3, r2
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	4413      	add	r3, r2
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	440b      	add	r3, r1
 8008b0a:	331c      	adds	r3, #28
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	88fa      	ldrh	r2, [r7, #6]
 8008b10:	4958      	ldr	r1, [pc, #352]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b12:	4613      	mov	r3, r2
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	011b      	lsls	r3, r3, #4
 8008b1a:	440b      	add	r3, r1
 8008b1c:	332a      	adds	r3, #42	@ 0x2a
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	4619      	mov	r1, r3
 8008b24:	f7f9 f855 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8008b28:	88fa      	ldrh	r2, [r7, #6]
 8008b2a:	4952      	ldr	r1, [pc, #328]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4413      	add	r3, r2
 8008b32:	011b      	lsls	r3, r3, #4
 8008b34:	440b      	add	r3, r1
 8008b36:	3320      	adds	r3, #32
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	88fa      	ldrh	r2, [r7, #6]
 8008b3c:	494d      	ldr	r1, [pc, #308]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	440b      	add	r3, r1
 8008b48:	332c      	adds	r3, #44	@ 0x2c
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f7f9 f83f 	bl	8001bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	4947      	ldr	r1, [pc, #284]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b58:	4613      	mov	r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	4413      	add	r3, r2
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	440b      	add	r3, r1
 8008b62:	3324      	adds	r3, #36	@ 0x24
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	4942      	ldr	r1, [pc, #264]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	440b      	add	r3, r1
 8008b74:	332e      	adds	r3, #46	@ 0x2e
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f7f9 f829 	bl	8001bd2 <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	493c      	ldr	r1, [pc, #240]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b84:	4613      	mov	r3, r2
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	4413      	add	r3, r2
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	440b      	add	r3, r1
 8008b8e:	330c      	adds	r3, #12
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	4937      	ldr	r1, [pc, #220]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008b96:	4613      	mov	r3, r2
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	4413      	add	r3, r2
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3316      	adds	r3, #22
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	f7f8 fffd 	bl	8001ba4 <HAL_GPIO_ReadPin>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d035      	beq.n	8008c20 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbc:	330f      	adds	r3, #15
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e02d      	b.n	8008c20 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 8008bc4:	88fb      	ldrh	r3, [r7, #6]
 8008bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	4a26      	ldr	r2, [pc, #152]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bda:	330d      	adds	r3, #13
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8008be0:	88fb      	ldrh	r3, [r7, #6]
 8008be2:	4a23      	ldr	r2, [pc, #140]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be8:	330e      	adds	r3, #14
 8008bea:	2200      	movs	r2, #0
 8008bec:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf6:	330f      	adds	r3, #15
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e010      	b.n	8008c20 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
 8008c02:	e00a      	b.n	8008c1a <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	4a1a      	ldr	r2, [pc, #104]	@ (8008c70 <KEYPAD_Scan+0x1250>)
 8008c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4413      	add	r3, r2
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	3301      	adds	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b0f      	cmp	r3, #15
 8008c1e:	d9f1      	bls.n	8008c04 <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
 8008c24:	e01c      	b.n	8008c60 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	7bf9      	ldrb	r1, [r7, #15]
 8008c2a:	4812      	ldr	r0, [pc, #72]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	3306      	adds	r3, #6
 8008c38:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	7bf9      	ldrb	r1, [r7, #15]
 8008c40:	4c0c      	ldr	r4, [pc, #48]	@ (8008c74 <KEYPAD_Scan+0x1254>)
 8008c42:	4613      	mov	r3, r2
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3314      	adds	r3, #20
 8008c4e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8008c52:	2201      	movs	r2, #1
 8008c54:	4619      	mov	r1, r3
 8008c56:	f7f8 ffbc 	bl	8001bd2 <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d9df      	bls.n	8008c26 <KEYPAD_Scan+0x1206>
	}
}
 8008c66:	bf00      	nop
 8008c68:	bf00      	nop
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd90      	pop	{r4, r7, pc}
 8008c70:	20000410 	.word	0x20000410
 8008c74:	0800f440 	.word	0x0800f440

08008c78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d115      	bne.n	8008cbc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c94:	2202      	movs	r2, #2
 8008c96:	2181      	movs	r1, #129	@ 0x81
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fe82 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ca8:	2202      	movs	r2, #2
 8008caa:	2101      	movs	r1, #1
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fe78 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008cba:	e012      	b.n	8008ce2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cbc:	2340      	movs	r3, #64	@ 0x40
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	2181      	movs	r1, #129	@ 0x81
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fe6d 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cce:	2340      	movs	r3, #64	@ 0x40
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fe64 	bl	800a9a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	2182      	movs	r1, #130	@ 0x82
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fe5a 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cf4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008cf8:	f001 ff7a 	bl	800abf0 <USBD_static_malloc>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]
 8008d12:	e026      	b.n	8008d62 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d1a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7c1b      	ldrb	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d109      	bne.n	8008d52 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 ff19 	bl	800ab82 <USBD_LL_PrepareReceive>
 8008d50:	e007      	b.n	8008d62 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d58:	2340      	movs	r3, #64	@ 0x40
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 ff10 	bl	800ab82 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d7c:	2181      	movs	r1, #129	@ 0x81
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fe35 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 fe2e 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d9a:	2182      	movs	r1, #130	@ 0x82
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fe26 	bl	800a9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 ff20 	bl	800ac08 <USBD_static_free>
    pdev->pClassData = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d039      	beq.n	8008e78 <USBD_CDC_Setup+0x9e>
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	d17f      	bne.n	8008f08 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	88db      	ldrh	r3, [r3, #6]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d029      	beq.n	8008e64 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	b25b      	sxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da11      	bge.n	8008e3e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	88d2      	ldrh	r2, [r2, #6]
 8008e2c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e2e:	6939      	ldr	r1, [r7, #16]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	88db      	ldrh	r3, [r3, #6]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fa06 	bl	800a248 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e3c:	e06b      	b.n	8008f16 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785a      	ldrb	r2, [r3, #1]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	88db      	ldrh	r3, [r3, #6]
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e54:	6939      	ldr	r1, [r7, #16]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fa21 	bl	800a2a4 <USBD_CtlPrepareRx>
      break;
 8008e62:	e058      	b.n	8008f16 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	7850      	ldrb	r0, [r2, #1]
 8008e70:	2200      	movs	r2, #0
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	4798      	blx	r3
      break;
 8008e76:	e04e      	b.n	8008f16 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b0b      	cmp	r3, #11
 8008e7e:	d02e      	beq.n	8008ede <USBD_CDC_Setup+0x104>
 8008e80:	2b0b      	cmp	r3, #11
 8008e82:	dc38      	bgt.n	8008ef6 <USBD_CDC_Setup+0x11c>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <USBD_CDC_Setup+0xb4>
 8008e88:	2b0a      	cmp	r3, #10
 8008e8a:	d014      	beq.n	8008eb6 <USBD_CDC_Setup+0xdc>
 8008e8c:	e033      	b.n	8008ef6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d107      	bne.n	8008ea8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e98:	f107 030c 	add.w	r3, r7, #12
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f9d1 	bl	800a248 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ea6:	e02e      	b.n	8008f06 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f001 f962 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	75fb      	strb	r3, [r7, #23]
          break;
 8008eb4:	e027      	b.n	8008f06 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d107      	bne.n	8008ed0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ec0:	f107 030f 	add.w	r3, r7, #15
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f9bd 	bl	800a248 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ece:	e01a      	b.n	8008f06 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 f94e 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	75fb      	strb	r3, [r7, #23]
          break;
 8008edc:	e013      	b.n	8008f06 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d00d      	beq.n	8008f04 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f942 	bl	800a174 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ef4:	e006      	b.n	8008f04 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f93b 	bl	800a174 <USBD_CtlError>
          ret = USBD_FAIL;
 8008efe:	2302      	movs	r3, #2
 8008f00:	75fb      	strb	r3, [r7, #23]
          break;
 8008f02:	e000      	b.n	8008f06 <USBD_CDC_Setup+0x12c>
          break;
 8008f04:	bf00      	nop
      }
      break;
 8008f06:	e006      	b.n	8008f16 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 f932 	bl	800a174 <USBD_CtlError>
      ret = USBD_FAIL;
 8008f10:	2302      	movs	r3, #2
 8008f12:	75fb      	strb	r3, [r7, #23]
      break;
 8008f14:	bf00      	nop
  }

  return ret;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f32:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f3a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d03a      	beq.n	8008fbc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	331c      	adds	r3, #28
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d029      	beq.n	8008fb0 <USBD_CDC_DataIn+0x90>
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	331c      	adds	r3, #28
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	78f9      	ldrb	r1, [r7, #3]
 8008f70:	68b8      	ldr	r0, [r7, #8]
 8008f72:	460b      	mov	r3, r1
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4403      	add	r3, r0
 8008f7c:	3320      	adds	r3, #32
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d110      	bne.n	8008fb0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	440b      	add	r3, r1
 8008f9c:	331c      	adds	r3, #28
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fa2:	78f9      	ldrb	r1, [r7, #3]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fdc7 	bl	800ab3c <USBD_LL_Transmit>
 8008fae:	e003      	b.n	8008fb8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e000      	b.n	8008fbe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008fbc:	2302      	movs	r3, #2
  }
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fdf2 	bl	800abc8 <USBD_LL_GetRxDataSize>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800900a:	4611      	mov	r1, r2
 800900c:	4798      	blx	r3

    return USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	e000      	b.n	8009014 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009012:	2302      	movs	r3, #2
  }
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009032:	2b00      	cmp	r3, #0
 8009034:	d014      	beq.n	8009060 <USBD_CDC_EP0_RxReady+0x44>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800903c:	2bff      	cmp	r3, #255	@ 0xff
 800903e:	d00f      	beq.n	8009060 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800904e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	22ff      	movs	r2, #255	@ 0xff
 800905c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2243      	movs	r2, #67	@ 0x43
 8009078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	@ (8009088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000098 	.word	0x20000098

0800908c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2243      	movs	r2, #67	@ 0x43
 8009098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000054 	.word	0x20000054

080090ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2243      	movs	r2, #67	@ 0x43
 80090b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	@ (80090c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	200000dc 	.word	0x200000dc

080090cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	220a      	movs	r2, #10
 80090d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80090da:	4b03      	ldr	r3, [pc, #12]	@ (80090e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000010 	.word	0x20000010

080090ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80090f6:	2302      	movs	r3, #2
 80090f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800912c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009136:	88fa      	ldrh	r2, [r7, #6]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	bc80      	pop	{r7}
 8009148:	4770      	bx	lr

0800914a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800915a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800917e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01c      	beq.n	80091c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009190:	2b00      	cmp	r3, #0
 8009192:	d115      	bne.n	80091c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2181      	movs	r1, #129	@ 0x81
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 fcc0 	bl	800ab3c <USBD_LL_Transmit>

      return USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	e002      	b.n	80091c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d017      	beq.n	8009218 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7c1b      	ldrb	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d109      	bne.n	8009204 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 fcc0 	bl	800ab82 <USBD_LL_PrepareReceive>
 8009202:	e007      	b.n	8009214 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800920a:	2340      	movs	r3, #64	@ 0x40
 800920c:	2101      	movs	r1, #1
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 fcb7 	bl	800ab82 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009218:	2302      	movs	r3, #2
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009236:	2302      	movs	r3, #2
 8009238:	e01a      	b.n	8009270 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	79fa      	ldrb	r2, [r7, #7]
 8009266:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f001 fb25 	bl	800a8b8 <USBD_LL_Init>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d006      	beq.n	800929a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e001      	b.n	800929e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fb5a 	bl	800a96c <USBD_LL_Start>

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bc80      	pop	{r7}
 80092d4:	4770      	bx	lr

080092d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092e2:	2302      	movs	r3, #2
 80092e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00c      	beq.n	800930a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3

  return USBD_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fed8 	bl	800a102 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009360:	461a      	mov	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800936e:	f003 031f 	and.w	r3, r3, #31
 8009372:	2b02      	cmp	r3, #2
 8009374:	d016      	beq.n	80093a4 <USBD_LL_SetupStage+0x6a>
 8009376:	2b02      	cmp	r3, #2
 8009378:	d81c      	bhi.n	80093b4 <USBD_LL_SetupStage+0x7a>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <USBD_LL_SetupStage+0x4a>
 800937e:	2b01      	cmp	r3, #1
 8009380:	d008      	beq.n	8009394 <USBD_LL_SetupStage+0x5a>
 8009382:	e017      	b.n	80093b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9cb 	bl	8009728 <USBD_StdDevReq>
      break;
 8009392:	e01a      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa2d 	bl	80097fc <USBD_StdItfReq>
      break;
 80093a2:	e012      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa6d 	bl	800988c <USBD_StdEPReq>
      break;
 80093b2:	e00a      	b.n	80093ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80093ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f001 fb32 	bl	800aa2c <USBD_LL_StallEP>
      break;
 80093c8:	bf00      	nop
  }

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	460b      	mov	r3, r1
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d14b      	bne.n	8009480 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093f6:	2b03      	cmp	r3, #3
 80093f8:	d134      	bne.n	8009464 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	429a      	cmp	r2, r3
 8009404:	d919      	bls.n	800943a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800941c:	429a      	cmp	r2, r3
 800941e:	d203      	bcs.n	8009428 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009424:	b29b      	uxth	r3, r3
 8009426:	e002      	b.n	800942e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800942c:	b29b      	uxth	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 ff54 	bl	800a2e0 <USBD_CtlContinueRx>
 8009438:	e038      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800944c:	2b03      	cmp	r3, #3
 800944e:	d105      	bne.n	800945c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 ff51 	bl	800a304 <USBD_CtlSendStatus>
 8009462:	e023      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800946a:	2b05      	cmp	r3, #5
 800946c:	d11e      	bne.n	80094ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 fad7 	bl	800aa2c <USBD_LL_StallEP>
 800947e:	e015      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00d      	beq.n	80094a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009492:	2b03      	cmp	r3, #3
 8009494:	d108      	bne.n	80094a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	7afa      	ldrb	r2, [r7, #11]
 80094a0:	4611      	mov	r1, r2
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	4798      	blx	r3
 80094a6:	e001      	b.n	80094ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094a8:	2302      	movs	r3, #2
 80094aa:	e000      	b.n	80094ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	460b      	mov	r3, r1
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d17f      	bne.n	80095ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	3314      	adds	r3, #20
 80094ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d15c      	bne.n	8009594 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d915      	bls.n	8009512 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	461a      	mov	r2, r3
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 febe 	bl	800a280 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009504:	2300      	movs	r3, #0
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 fb39 	bl	800ab82 <USBD_LL_PrepareReceive>
 8009510:	e04e      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	6912      	ldr	r2, [r2, #16]
 800951a:	fbb3 f1f2 	udiv	r1, r3, r2
 800951e:	fb01 f202 	mul.w	r2, r1, r2
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d11c      	bne.n	8009562 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009530:	429a      	cmp	r2, r3
 8009532:	d316      	bcc.n	8009562 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800953e:	429a      	cmp	r2, r3
 8009540:	d20f      	bcs.n	8009562 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009542:	2200      	movs	r2, #0
 8009544:	2100      	movs	r1, #0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fe9a 	bl	800a280 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009554:	2300      	movs	r3, #0
 8009556:	2200      	movs	r2, #0
 8009558:	2100      	movs	r1, #0
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f001 fb11 	bl	800ab82 <USBD_LL_PrepareReceive>
 8009560:	e026      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009574:	2b03      	cmp	r3, #3
 8009576:	d105      	bne.n	8009584 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009584:	2180      	movs	r1, #128	@ 0x80
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f001 fa50 	bl	800aa2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fecc 	bl	800a32a <USBD_CtlReceiveStatus>
 8009592:	e00d      	b.n	80095b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800959a:	2b04      	cmp	r3, #4
 800959c:	d004      	beq.n	80095a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d103      	bne.n	80095b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095a8:	2180      	movs	r1, #128	@ 0x80
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f001 fa3e 	bl	800aa2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d11d      	bne.n	80095f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fe81 	bl	80092c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095c8:	e015      	b.n	80095f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00d      	beq.n	80095f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d108      	bne.n	80095f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	7afa      	ldrb	r2, [r7, #11]
 80095ea:	4611      	mov	r1, r2
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	4798      	blx	r3
 80095f0:	e001      	b.n	80095f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095f2:	2302      	movs	r3, #2
 80095f4:	e000      	b.n	80095f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009608:	2340      	movs	r3, #64	@ 0x40
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f001 f9c7 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2240      	movs	r2, #64	@ 0x40
 8009620:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009624:	2340      	movs	r3, #64	@ 0x40
 8009626:	2200      	movs	r2, #0
 8009628:	2180      	movs	r1, #128	@ 0x80
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 f9b9 	bl	800a9a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2240      	movs	r2, #64	@ 0x40
 800963a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6852      	ldr	r2, [r2, #4]
 8009670:	b2d2      	uxtb	r2, r2
 8009672:	4611      	mov	r1, r2
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	4798      	blx	r3
  }

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2204      	movs	r2, #4
 80096b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr

080096c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d105      	bne.n	80096e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009700:	2b03      	cmp	r3, #3
 8009702:	d10b      	bne.n	800971c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d005      	beq.n	800974e <USBD_StdDevReq+0x26>
 8009742:	2b40      	cmp	r3, #64	@ 0x40
 8009744:	d84f      	bhi.n	80097e6 <USBD_StdDevReq+0xbe>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <USBD_StdDevReq+0x36>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d14b      	bne.n	80097e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      break;
 800975c:	e048      	b.n	80097f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b09      	cmp	r3, #9
 8009764:	d839      	bhi.n	80097da <USBD_StdDevReq+0xb2>
 8009766:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <USBD_StdDevReq+0x44>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097d1 	.word	0x080097d1
 8009774:	080097db 	.word	0x080097db
 8009778:	080097c7 	.word	0x080097c7
 800977c:	080097db 	.word	0x080097db
 8009780:	0800979f 	.word	0x0800979f
 8009784:	08009795 	.word	0x08009795
 8009788:	080097db 	.word	0x080097db
 800978c:	080097b3 	.word	0x080097b3
 8009790:	080097a9 	.word	0x080097a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9dc 	bl	8009b54 <USBD_GetDescriptor>
          break;
 800979c:	e022      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fb3f 	bl	8009e24 <USBD_SetAddress>
          break;
 80097a6:	e01d      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb7e 	bl	8009eac <USBD_SetConfig>
          break;
 80097b0:	e018      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fc07 	bl	8009fc8 <USBD_GetConfig>
          break;
 80097ba:	e013      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc37 	bl	800a032 <USBD_GetStatus>
          break;
 80097c4:	e00e      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fc65 	bl	800a098 <USBD_SetFeature>
          break;
 80097ce:	e009      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fc74 	bl	800a0c0 <USBD_ClrFeature>
          break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fcc9 	bl	800a174 <USBD_CtlError>
          break;
 80097e2:	bf00      	nop
      }
      break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fcc3 	bl	800a174 <USBD_CtlError>
      break;
 80097ee:	bf00      	nop
  }

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009812:	2b40      	cmp	r3, #64	@ 0x40
 8009814:	d005      	beq.n	8009822 <USBD_StdItfReq+0x26>
 8009816:	2b40      	cmp	r3, #64	@ 0x40
 8009818:	d82e      	bhi.n	8009878 <USBD_StdItfReq+0x7c>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <USBD_StdItfReq+0x26>
 800981e:	2b20      	cmp	r3, #32
 8009820:	d12a      	bne.n	8009878 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009828:	3b01      	subs	r3, #1
 800982a:	2b02      	cmp	r3, #2
 800982c:	d81d      	bhi.n	800986a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b01      	cmp	r3, #1
 8009836:	d813      	bhi.n	8009860 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	88db      	ldrh	r3, [r3, #6]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d110      	bne.n	8009874 <USBD_StdItfReq+0x78>
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10d      	bne.n	8009874 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fd53 	bl	800a304 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800985e:	e009      	b.n	8009874 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fc86 	bl	800a174 <USBD_CtlError>
          break;
 8009868:	e004      	b.n	8009874 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fc81 	bl	800a174 <USBD_CtlError>
          break;
 8009872:	e000      	b.n	8009876 <USBD_StdItfReq+0x7a>
          break;
 8009874:	bf00      	nop
      }
      break;
 8009876:	e004      	b.n	8009882 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fc7a 	bl	800a174 <USBD_CtlError>
      break;
 8009880:	bf00      	nop
  }

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	889b      	ldrh	r3, [r3, #4]
 800989e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098a8:	2b40      	cmp	r3, #64	@ 0x40
 80098aa:	d007      	beq.n	80098bc <USBD_StdEPReq+0x30>
 80098ac:	2b40      	cmp	r3, #64	@ 0x40
 80098ae:	f200 8146 	bhi.w	8009b3e <USBD_StdEPReq+0x2b2>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <USBD_StdEPReq+0x40>
 80098b6:	2b20      	cmp	r3, #32
 80098b8:	f040 8141 	bne.w	8009b3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      break;
 80098ca:	e13d      	b.n	8009b48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d4:	2b20      	cmp	r3, #32
 80098d6:	d10a      	bne.n	80098ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	4798      	blx	r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	e12d      	b.n	8009b4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d007      	beq.n	8009906 <USBD_StdEPReq+0x7a>
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	f300 811b 	bgt.w	8009b32 <USBD_StdEPReq+0x2a6>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d072      	beq.n	80099e6 <USBD_StdEPReq+0x15a>
 8009900:	2b01      	cmp	r3, #1
 8009902:	d03a      	beq.n	800997a <USBD_StdEPReq+0xee>
 8009904:	e115      	b.n	8009b32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800990c:	2b02      	cmp	r3, #2
 800990e:	d002      	beq.n	8009916 <USBD_StdEPReq+0x8a>
 8009910:	2b03      	cmp	r3, #3
 8009912:	d015      	beq.n	8009940 <USBD_StdEPReq+0xb4>
 8009914:	e02b      	b.n	800996e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00c      	beq.n	8009936 <USBD_StdEPReq+0xaa>
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b80      	cmp	r3, #128	@ 0x80
 8009920:	d009      	beq.n	8009936 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009922:	7bbb      	ldrb	r3, [r7, #14]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f880 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800992c:	2180      	movs	r1, #128	@ 0x80
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 f87c 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009934:	e020      	b.n	8009978 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fc1b 	bl	800a174 <USBD_CtlError>
              break;
 800993e:	e01b      	b.n	8009978 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	885b      	ldrh	r3, [r3, #2]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10e      	bne.n	8009966 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00b      	beq.n	8009966 <USBD_StdEPReq+0xda>
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	2b80      	cmp	r3, #128	@ 0x80
 8009952:	d008      	beq.n	8009966 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	88db      	ldrh	r3, [r3, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 f863 	bl	800aa2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fccc 	bl	800a304 <USBD_CtlSendStatus>

              break;
 800996c:	e004      	b.n	8009978 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fbff 	bl	800a174 <USBD_CtlError>
              break;
 8009976:	bf00      	nop
          }
          break;
 8009978:	e0e0      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	2b02      	cmp	r3, #2
 8009982:	d002      	beq.n	800998a <USBD_StdEPReq+0xfe>
 8009984:	2b03      	cmp	r3, #3
 8009986:	d015      	beq.n	80099b4 <USBD_StdEPReq+0x128>
 8009988:	e026      	b.n	80099d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <USBD_StdEPReq+0x11e>
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b80      	cmp	r3, #128	@ 0x80
 8009994:	d009      	beq.n	80099aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 f846 	bl	800aa2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099a0:	2180      	movs	r1, #128	@ 0x80
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f842 	bl	800aa2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a8:	e01c      	b.n	80099e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fbe1 	bl	800a174 <USBD_CtlError>
              break;
 80099b2:	e017      	b.n	80099e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	885b      	ldrh	r3, [r3, #2]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d112      	bne.n	80099e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 f84d 	bl	800aa6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc97 	bl	800a304 <USBD_CtlSendStatus>
              }
              break;
 80099d6:	e004      	b.n	80099e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fbca 	bl	800a174 <USBD_CtlError>
              break;
 80099e0:	e000      	b.n	80099e4 <USBD_StdEPReq+0x158>
              break;
 80099e2:	bf00      	nop
          }
          break;
 80099e4:	e0aa      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d002      	beq.n	80099f6 <USBD_StdEPReq+0x16a>
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d032      	beq.n	8009a5a <USBD_StdEPReq+0x1ce>
 80099f4:	e097      	b.n	8009b26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <USBD_StdEPReq+0x180>
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b80      	cmp	r3, #128	@ 0x80
 8009a00:	d004      	beq.n	8009a0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fbb5 	bl	800a174 <USBD_CtlError>
                break;
 8009a0a:	e091      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da0b      	bge.n	8009a2c <USBD_StdEPReq+0x1a0>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	3310      	adds	r3, #16
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	e00b      	b.n	8009a44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	3304      	adds	r3, #4
 8009a44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	4619      	mov	r1, r3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fbf8 	bl	800a248 <USBD_CtlSendData>
              break;
 8009a58:	e06a      	b.n	8009b30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da11      	bge.n	8009a86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	f003 020f 	and.w	r2, r3, #15
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	3318      	adds	r3, #24
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d117      	bne.n	8009aac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fb78 	bl	800a174 <USBD_CtlError>
                  break;
 8009a84:	e054      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	440b      	add	r3, r1
 8009a98:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb65 	bl	800a174 <USBD_CtlError>
                  break;
 8009aaa:	e041      	b.n	8009b30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da0b      	bge.n	8009acc <USBD_StdEPReq+0x240>
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aba:	4613      	mov	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	3310      	adds	r3, #16
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3304      	adds	r3, #4
 8009aca:	e00b      	b.n	8009ae4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <USBD_StdEPReq+0x266>
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b80      	cmp	r3, #128	@ 0x80
 8009af0:	d103      	bne.n	8009afa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	e00e      	b.n	8009b18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 ffd2 	bl	800aaa8 <USBD_LL_IsStallEP>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e002      	b.n	8009b18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fb92 	bl	800a248 <USBD_CtlSendData>
              break;
 8009b24:	e004      	b.n	8009b30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fb23 	bl	800a174 <USBD_CtlError>
              break;
 8009b2e:	bf00      	nop
          }
          break;
 8009b30:	e004      	b.n	8009b3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b32:	6839      	ldr	r1, [r7, #0]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 fb1d 	bl	800a174 <USBD_CtlError>
          break;
 8009b3a:	bf00      	nop
      }
      break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb17 	bl	800a174 <USBD_CtlError>
      break;
 8009b46:	bf00      	nop
  }

  return ret;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	f200 8128 	bhi.w	8009dca <USBD_GetDescriptor+0x276>
 8009b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b80 <USBD_GetDescriptor+0x2c>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009b9d 	.word	0x08009b9d
 8009b84:	08009bb5 	.word	0x08009bb5
 8009b88:	08009bf5 	.word	0x08009bf5
 8009b8c:	08009dcb 	.word	0x08009dcb
 8009b90:	08009dcb 	.word	0x08009dcb
 8009b94:	08009d6b 	.word	0x08009d6b
 8009b98:	08009d97 	.word	0x08009d97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	7c12      	ldrb	r2, [r2, #16]
 8009ba8:	f107 0108 	add.w	r1, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
      break;
 8009bb2:	e112      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7c1b      	ldrb	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10d      	bne.n	8009bd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc4:	f107 0208 	add.w	r2, r7, #8
 8009bc8:	4610      	mov	r0, r2
 8009bca:	4798      	blx	r3
 8009bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bd6:	e100      	b.n	8009dda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	f107 0208 	add.w	r2, r7, #8
 8009be4:	4610      	mov	r0, r2
 8009be6:	4798      	blx	r3
 8009be8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3301      	adds	r3, #1
 8009bee:	2202      	movs	r2, #2
 8009bf0:	701a      	strb	r2, [r3, #0]
      break;
 8009bf2:	e0f2      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	885b      	ldrh	r3, [r3, #2]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	f200 80ac 	bhi.w	8009d58 <USBD_GetDescriptor+0x204>
 8009c00:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <USBD_GetDescriptor+0xb4>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c55 	.word	0x08009c55
 8009c10:	08009c89 	.word	0x08009c89
 8009c14:	08009cbd 	.word	0x08009cbd
 8009c18:	08009cf1 	.word	0x08009cf1
 8009c1c:	08009d25 	.word	0x08009d25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00b      	beq.n	8009c44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	7c12      	ldrb	r2, [r2, #16]
 8009c38:	f107 0108 	add.w	r1, r7, #8
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c42:	e091      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa94 	bl	800a174 <USBD_CtlError>
            err++;
 8009c4c:	7afb      	ldrb	r3, [r7, #11]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	72fb      	strb	r3, [r7, #11]
          break;
 8009c52:	e089      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7c12      	ldrb	r2, [r2, #16]
 8009c6c:	f107 0108 	add.w	r1, r7, #8
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c76:	e077      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa7a 	bl	800a174 <USBD_CtlError>
            err++;
 8009c80:	7afb      	ldrb	r3, [r7, #11]
 8009c82:	3301      	adds	r3, #1
 8009c84:	72fb      	strb	r3, [r7, #11]
          break;
 8009c86:	e06f      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009caa:	e05d      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa60 	bl	800a174 <USBD_CtlError>
            err++;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cba:	e055      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cde:	e043      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa46 	bl	800a174 <USBD_CtlError>
            err++;
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	3301      	adds	r3, #1
 8009cec:	72fb      	strb	r3, [r7, #11]
          break;
 8009cee:	e03b      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d12:	e029      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa2c 	bl	800a174 <USBD_CtlError>
            err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
          break;
 8009d22:	e021      	b.n	8009d68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d46:	e00f      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa12 	bl	800a174 <USBD_CtlError>
            err++;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	3301      	adds	r3, #1
 8009d54:	72fb      	strb	r3, [r7, #11]
          break;
 8009d56:	e007      	b.n	8009d68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa0a 	bl	800a174 <USBD_CtlError>
          err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d66:	e038      	b.n	8009dda <USBD_GetDescriptor+0x286>
 8009d68:	e037      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7c1b      	ldrb	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d7a:	f107 0208 	add.w	r2, r7, #8
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4798      	blx	r3
 8009d82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d84:	e029      	b.n	8009dda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f9f3 	bl	800a174 <USBD_CtlError>
        err++;
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	3301      	adds	r3, #1
 8009d92:	72fb      	strb	r3, [r7, #11]
      break;
 8009d94:	e021      	b.n	8009dda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	7c1b      	ldrb	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10d      	bne.n	8009dba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da6:	f107 0208 	add.w	r2, r7, #8
 8009daa:	4610      	mov	r0, r2
 8009dac:	4798      	blx	r3
 8009dae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3301      	adds	r3, #1
 8009db4:	2207      	movs	r2, #7
 8009db6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009db8:	e00f      	b.n	8009dda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f9d9 	bl	800a174 <USBD_CtlError>
        err++;
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc8:	e007      	b.n	8009dda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9d1 	bl	800a174 <USBD_CtlError>
      err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	bf00      	nop
  }

  if (err != 0U)
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d11c      	bne.n	8009e1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009de0:	893b      	ldrh	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d011      	beq.n	8009e0a <USBD_GetDescriptor+0x2b6>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	88db      	ldrh	r3, [r3, #6]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88da      	ldrh	r2, [r3, #6]
 8009df2:	893b      	ldrh	r3, [r7, #8]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	bf28      	it	cs
 8009df8:	4613      	movcs	r3, r2
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	461a      	mov	r2, r3
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa1f 	bl	800a248 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	88db      	ldrh	r3, [r3, #6]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d104      	bne.n	8009e1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa76 	bl	800a304 <USBD_CtlSendStatus>
 8009e18:	e000      	b.n	8009e1c <USBD_GetDescriptor+0x2c8>
    return;
 8009e1a:	bf00      	nop
    }
  }
}
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop

08009e24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	889b      	ldrh	r3, [r3, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d130      	bne.n	8009e98 <USBD_SetAddress+0x74>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	88db      	ldrh	r3, [r3, #6]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d12c      	bne.n	8009e98 <USBD_SetAddress+0x74>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e44:	d828      	bhi.n	8009e98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	885b      	ldrh	r3, [r3, #2]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d104      	bne.n	8009e66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f988 	bl	800a174 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e64:	e01d      	b.n	8009ea2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7bfa      	ldrb	r2, [r7, #15]
 8009e6a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fe43 	bl	800aafe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fa43 	bl	800a304 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8c:	e009      	b.n	8009ea2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	e004      	b.n	8009ea2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f96a 	bl	800a174 <USBD_CtlError>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	4b41      	ldr	r3, [pc, #260]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ec0:	4b40      	ldr	r3, [pc, #256]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d904      	bls.n	8009ed2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f952 	bl	800a174 <USBD_CtlError>
 8009ed0:	e075      	b.n	8009fbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d002      	beq.n	8009ee2 <USBD_SetConfig+0x36>
 8009edc:	2b03      	cmp	r3, #3
 8009ede:	d023      	beq.n	8009f28 <USBD_SetConfig+0x7c>
 8009ee0:	e062      	b.n	8009fa8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ee2:	4b38      	ldr	r3, [pc, #224]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01a      	beq.n	8009f20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009eea:	4b36      	ldr	r3, [pc, #216]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009efc:	4b31      	ldr	r3, [pc, #196]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff f9e7 	bl	80092d6 <USBD_SetClassConfig>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d104      	bne.n	8009f18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f92f 	bl	800a174 <USBD_CtlError>
            return;
 8009f16:	e052      	b.n	8009fbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f9f3 	bl	800a304 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f1e:	e04e      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9ef 	bl	800a304 <USBD_CtlSendStatus>
        break;
 8009f26:	e04a      	b.n	8009fbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f28:	4b26      	ldr	r3, [pc, #152]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d112      	bne.n	8009f56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f38:	4b22      	ldr	r3, [pc, #136]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f42:	4b20      	ldr	r3, [pc, #128]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff f9e3 	bl	8009314 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f9d8 	bl	800a304 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f54:	e033      	b.n	8009fbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f56:	4b1b      	ldr	r3, [pc, #108]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d01d      	beq.n	8009fa0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff f9d1 	bl	8009314 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f72:	4b14      	ldr	r3, [pc, #80]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f7c:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff f9a7 	bl	80092d6 <USBD_SetClassConfig>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d104      	bne.n	8009f98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f8ef 	bl	800a174 <USBD_CtlError>
            return;
 8009f96:	e012      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f9b3 	bl	800a304 <USBD_CtlSendStatus>
        break;
 8009f9e:	e00e      	b.n	8009fbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9af 	bl	800a304 <USBD_CtlSendStatus>
        break;
 8009fa6:	e00a      	b.n	8009fbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8e2 	bl	800a174 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fb0:	4b04      	ldr	r3, [pc, #16]	@ (8009fc4 <USBD_SetConfig+0x118>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff f9ac 	bl	8009314 <USBD_ClrClassConfig>
        break;
 8009fbc:	bf00      	nop
    }
  }
}
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20000414 	.word	0x20000414

08009fc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88db      	ldrh	r3, [r3, #6]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d004      	beq.n	8009fe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f8c9 	bl	800a174 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fe2:	e022      	b.n	800a02a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	dc02      	bgt.n	8009ff4 <USBD_GetConfig+0x2c>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	dc03      	bgt.n	8009ffa <USBD_GetConfig+0x32>
 8009ff2:	e015      	b.n	800a020 <USBD_GetConfig+0x58>
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d00b      	beq.n	800a010 <USBD_GetConfig+0x48>
 8009ff8:	e012      	b.n	800a020 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3308      	adds	r3, #8
 800a004:	2201      	movs	r2, #1
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f91d 	bl	800a248 <USBD_CtlSendData>
        break;
 800a00e:	e00c      	b.n	800a02a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	2201      	movs	r2, #1
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f915 	bl	800a248 <USBD_CtlSendData>
        break;
 800a01e:	e004      	b.n	800a02a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f8a6 	bl	800a174 <USBD_CtlError>
        break;
 800a028:	bf00      	nop
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a042:	3b01      	subs	r3, #1
 800a044:	2b02      	cmp	r3, #2
 800a046:	d81e      	bhi.n	800a086 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	88db      	ldrh	r3, [r3, #6]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d004      	beq.n	800a05a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f88e 	bl	800a174 <USBD_CtlError>
        break;
 800a058:	e01a      	b.n	800a090 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a066:	2b00      	cmp	r3, #0
 800a068:	d005      	beq.n	800a076 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f043 0202 	orr.w	r2, r3, #2
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	330c      	adds	r3, #12
 800a07a:	2202      	movs	r2, #2
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f8e2 	bl	800a248 <USBD_CtlSendData>
      break;
 800a084:	e004      	b.n	800a090 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f873 	bl	800a174 <USBD_CtlError>
      break;
 800a08e:	bf00      	nop
  }
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d106      	bne.n	800a0b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f926 	bl	800a304 <USBD_CtlSendStatus>
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d80b      	bhi.n	800a0ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	885b      	ldrh	r3, [r3, #2]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d10c      	bne.n	800a0f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f90c 	bl	800a304 <USBD_CtlSendStatus>
      }
      break;
 800a0ec:	e004      	b.n	800a0f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f83f 	bl	800a174 <USBD_CtlError>
      break;
 800a0f6:	e000      	b.n	800a0fa <USBD_ClrFeature+0x3a>
      break;
 800a0f8:	bf00      	nop
  }
}
 800a0fa:	bf00      	nop
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	785a      	ldrb	r2, [r3, #1]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	3302      	adds	r3, #2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	3303      	adds	r3, #3
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	4413      	add	r3, r2
 800a130:	b29a      	uxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	3305      	adds	r3, #5
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	b29b      	uxth	r3, r3
 800a148:	4413      	add	r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	3306      	adds	r3, #6
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	3307      	adds	r3, #7
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	4413      	add	r3, r2
 800a164:	b29a      	uxth	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	80da      	strh	r2, [r3, #6]

}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr

0800a174 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a17e:	2180      	movs	r1, #128	@ 0x80
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fc53 	bl	800aa2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a186:	2100      	movs	r1, #0
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fc4f 	bl	800aa2c <USBD_LL_StallEP>
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b086      	sub	sp, #24
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d032      	beq.n	800a212 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f834 	bl	800a21a <USBD_GetLen>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	75fa      	strb	r2, [r7, #23]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	75fa      	strb	r2, [r7, #23]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	4413      	add	r3, r2
 800a1de:	2203      	movs	r2, #3
 800a1e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1e2:	e012      	b.n	800a20a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	60fa      	str	r2, [r7, #12]
 800a1ea:	7dfa      	ldrb	r2, [r7, #23]
 800a1ec:	1c51      	adds	r1, r2, #1
 800a1ee:	75f9      	strb	r1, [r7, #23]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	1c5a      	adds	r2, r3, #1
 800a1fe:	75fa      	strb	r2, [r7, #23]
 800a200:	461a      	mov	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4413      	add	r3, r2
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e8      	bne.n	800a1e4 <USBD_GetString+0x4e>
    }
  }
}
 800a212:	bf00      	nop
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a226:	e005      	b.n	800a234 <USBD_GetLen+0x1a>
  {
    len++;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	3301      	adds	r3, #1
 800a22c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3301      	adds	r3, #1
 800a232:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f5      	bne.n	800a228 <USBD_GetLen+0xe>
  }

  return len;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	bc80      	pop	{r7}
 800a246:	4770      	bx	lr

0800a248 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2202      	movs	r2, #2
 800a25a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a25e:	88fa      	ldrh	r2, [r7, #6]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a264:	88fa      	ldrh	r2, [r7, #6]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a26a:	88fb      	ldrh	r3, [r7, #6]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	2100      	movs	r1, #0
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fc63 	bl	800ab3c <USBD_LL_Transmit>

  return USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	2100      	movs	r1, #0
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 fc51 	bl	800ab3c <USBD_LL_Transmit>

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a2ba:	88fa      	ldrh	r2, [r7, #6]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fc56 	bl	800ab82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2ee:	88fb      	ldrh	r3, [r7, #6]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 fc44 	bl	800ab82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2204      	movs	r2, #4
 800a310:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a314:	2300      	movs	r3, #0
 800a316:	2200      	movs	r2, #0
 800a318:	2100      	movs	r1, #0
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fc0e 	bl	800ab3c <USBD_LL_Transmit>

  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b082      	sub	sp, #8
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2205      	movs	r2, #5
 800a336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a33a:	2300      	movs	r3, #0
 800a33c:	2200      	movs	r2, #0
 800a33e:	2100      	movs	r1, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc1e 	bl	800ab82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a354:	2200      	movs	r2, #0
 800a356:	4912      	ldr	r1, [pc, #72]	@ (800a3a0 <MX_USB_DEVICE_Init+0x50>)
 800a358:	4812      	ldr	r0, [pc, #72]	@ (800a3a4 <MX_USB_DEVICE_Init+0x54>)
 800a35a:	f7fe ff62 	bl	8009222 <USBD_Init>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a364:	f7f6 fe7a 	bl	800105c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a368:	490f      	ldr	r1, [pc, #60]	@ (800a3a8 <MX_USB_DEVICE_Init+0x58>)
 800a36a:	480e      	ldr	r0, [pc, #56]	@ (800a3a4 <MX_USB_DEVICE_Init+0x54>)
 800a36c:	f7fe ff84 	bl	8009278 <USBD_RegisterClass>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a376:	f7f6 fe71 	bl	800105c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a37a:	490c      	ldr	r1, [pc, #48]	@ (800a3ac <MX_USB_DEVICE_Init+0x5c>)
 800a37c:	4809      	ldr	r0, [pc, #36]	@ (800a3a4 <MX_USB_DEVICE_Init+0x54>)
 800a37e:	f7fe feb5 	bl	80090ec <USBD_CDC_RegisterInterface>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a388:	f7f6 fe68 	bl	800105c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a38c:	4805      	ldr	r0, [pc, #20]	@ (800a3a4 <MX_USB_DEVICE_Init+0x54>)
 800a38e:	f7fe ff8c 	bl	80092aa <USBD_Start>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a398:	f7f6 fe60 	bl	800105c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000130 	.word	0x20000130
 800a3a4:	20000418 	.word	0x20000418
 800a3a8:	2000001c 	.word	0x2000001c
 800a3ac:	20000120 	.word	0x20000120

0800a3b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4905      	ldr	r1, [pc, #20]	@ (800a3cc <CDC_Init_FS+0x1c>)
 800a3b8:	4805      	ldr	r0, [pc, #20]	@ (800a3d0 <CDC_Init_FS+0x20>)
 800a3ba:	f7fe fead 	bl	8009118 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3be:	4905      	ldr	r1, [pc, #20]	@ (800a3d4 <CDC_Init_FS+0x24>)
 800a3c0:	4803      	ldr	r0, [pc, #12]	@ (800a3d0 <CDC_Init_FS+0x20>)
 800a3c2:	f7fe fec2 	bl	800914a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20000adc 	.word	0x20000adc
 800a3d0:	20000418 	.word	0x20000418
 800a3d4:	200006dc 	.word	0x200006dc

0800a3d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	71fb      	strb	r3, [r7, #7]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	2b23      	cmp	r3, #35	@ 0x23
 800a3fc:	d84a      	bhi.n	800a494 <CDC_Control_FS+0xac>
 800a3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <CDC_Control_FS+0x1c>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a495 	.word	0x0800a495
 800a408:	0800a495 	.word	0x0800a495
 800a40c:	0800a495 	.word	0x0800a495
 800a410:	0800a495 	.word	0x0800a495
 800a414:	0800a495 	.word	0x0800a495
 800a418:	0800a495 	.word	0x0800a495
 800a41c:	0800a495 	.word	0x0800a495
 800a420:	0800a495 	.word	0x0800a495
 800a424:	0800a495 	.word	0x0800a495
 800a428:	0800a495 	.word	0x0800a495
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a495 	.word	0x0800a495
 800a434:	0800a495 	.word	0x0800a495
 800a438:	0800a495 	.word	0x0800a495
 800a43c:	0800a495 	.word	0x0800a495
 800a440:	0800a495 	.word	0x0800a495
 800a444:	0800a495 	.word	0x0800a495
 800a448:	0800a495 	.word	0x0800a495
 800a44c:	0800a495 	.word	0x0800a495
 800a450:	0800a495 	.word	0x0800a495
 800a454:	0800a495 	.word	0x0800a495
 800a458:	0800a495 	.word	0x0800a495
 800a45c:	0800a495 	.word	0x0800a495
 800a460:	0800a495 	.word	0x0800a495
 800a464:	0800a495 	.word	0x0800a495
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a495 	.word	0x0800a495
 800a478:	0800a495 	.word	0x0800a495
 800a47c:	0800a495 	.word	0x0800a495
 800a480:	0800a495 	.word	0x0800a495
 800a484:	0800a495 	.word	0x0800a495
 800a488:	0800a495 	.word	0x0800a495
 800a48c:	0800a495 	.word	0x0800a495
 800a490:	0800a495 	.word	0x0800a495
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a494:	bf00      	nop
  }

  return (USBD_OK);
 800a496:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bc80      	pop	{r7}
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop

0800a4a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	4805      	ldr	r0, [pc, #20]	@ (800a4c8 <CDC_Receive_FS+0x24>)
 800a4b2:	f7fe fe4a 	bl	800914a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4b6:	4804      	ldr	r0, [pc, #16]	@ (800a4c8 <CDC_Receive_FS+0x24>)
 800a4b8:	f7fe fe89 	bl	80091ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000418 	.word	0x20000418

0800a4cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a514 <CDC_Transmit_FS+0x48>)
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e00b      	b.n	800a50a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4f2:	887b      	ldrh	r3, [r7, #2]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	4806      	ldr	r0, [pc, #24]	@ (800a514 <CDC_Transmit_FS+0x48>)
 800a4fa:	f7fe fe0d 	bl	8009118 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4fe:	4805      	ldr	r0, [pc, #20]	@ (800a514 <CDC_Transmit_FS+0x48>)
 800a500:	f7fe fe36 	bl	8009170 <USBD_CDC_TransmitPacket>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000418 	.word	0x20000418

0800a518 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2212      	movs	r2, #18
 800a528:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a52a:	4b03      	ldr	r3, [pc, #12]	@ (800a538 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	bc80      	pop	{r7}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	2000014c 	.word	0x2000014c

0800a53c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	6039      	str	r1, [r7, #0]
 800a546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2204      	movs	r2, #4
 800a54c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a54e:	4b03      	ldr	r3, [pc, #12]	@ (800a55c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000160 	.word	0x20000160

0800a560 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	6039      	str	r1, [r7, #0]
 800a56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a56c:	79fb      	ldrb	r3, [r7, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	4907      	ldr	r1, [pc, #28]	@ (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a576:	4808      	ldr	r0, [pc, #32]	@ (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a578:	f7ff fe0d 	bl	800a196 <USBD_GetString>
 800a57c:	e004      	b.n	800a588 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4904      	ldr	r1, [pc, #16]	@ (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
 800a582:	4805      	ldr	r0, [pc, #20]	@ (800a598 <USBD_FS_ProductStrDescriptor+0x38>)
 800a584:	f7ff fe07 	bl	800a196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a588:	4b02      	ldr	r3, [pc, #8]	@ (800a594 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20000edc 	.word	0x20000edc
 800a598:	0800f3cc 	.word	0x0800f3cc

0800a59c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	4904      	ldr	r1, [pc, #16]	@ (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5ac:	4804      	ldr	r0, [pc, #16]	@ (800a5c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5ae:	f7ff fdf2 	bl	800a196 <USBD_GetString>
  return USBD_StrDesc;
 800a5b2:	4b02      	ldr	r3, [pc, #8]	@ (800a5bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000edc 	.word	0x20000edc
 800a5c0:	0800f3e4 	.word	0x0800f3e4

0800a5c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	221a      	movs	r2, #26
 800a5d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5d6:	f000 f843 	bl	800a660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5da:	4b02      	ldr	r3, [pc, #8]	@ (800a5e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000164 	.word	0x20000164

0800a5e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d105      	bne.n	800a606 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	4907      	ldr	r1, [pc, #28]	@ (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5fe:	4808      	ldr	r0, [pc, #32]	@ (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a600:	f7ff fdc9 	bl	800a196 <USBD_GetString>
 800a604:	e004      	b.n	800a610 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	4904      	ldr	r1, [pc, #16]	@ (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60a:	4805      	ldr	r0, [pc, #20]	@ (800a620 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a60c:	f7ff fdc3 	bl	800a196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a610:	4b02      	ldr	r3, [pc, #8]	@ (800a61c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000edc 	.word	0x20000edc
 800a620:	0800f3f8 	.word	0x0800f3f8

0800a624 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a630:	79fb      	ldrb	r3, [r7, #7]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d105      	bne.n	800a642 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4907      	ldr	r1, [pc, #28]	@ (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a63a:	4808      	ldr	r0, [pc, #32]	@ (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a63c:	f7ff fdab 	bl	800a196 <USBD_GetString>
 800a640:	e004      	b.n	800a64c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4904      	ldr	r1, [pc, #16]	@ (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a646:	4805      	ldr	r0, [pc, #20]	@ (800a65c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a648:	f7ff fda5 	bl	800a196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a64c:	4b02      	ldr	r3, [pc, #8]	@ (800a658 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000edc 	.word	0x20000edc
 800a65c:	0800f404 	.word	0x0800f404

0800a660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a666:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <Get_SerialNum+0x44>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a66c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <Get_SerialNum+0x48>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a672:	4b0e      	ldr	r3, [pc, #56]	@ (800a6ac <Get_SerialNum+0x4c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a686:	2208      	movs	r2, #8
 800a688:	4909      	ldr	r1, [pc, #36]	@ (800a6b0 <Get_SerialNum+0x50>)
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f814 	bl	800a6b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a690:	2204      	movs	r2, #4
 800a692:	4908      	ldr	r1, [pc, #32]	@ (800a6b4 <Get_SerialNum+0x54>)
 800a694:	68b8      	ldr	r0, [r7, #8]
 800a696:	f000 f80f 	bl	800a6b8 <IntToUnicode>
  }
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	1ffff7e8 	.word	0x1ffff7e8
 800a6a8:	1ffff7ec 	.word	0x1ffff7ec
 800a6ac:	1ffff7f0 	.word	0x1ffff7f0
 800a6b0:	20000166 	.word	0x20000166
 800a6b4:	20000176 	.word	0x20000176

0800a6b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75fb      	strb	r3, [r7, #23]
 800a6ce:	e027      	b.n	800a720 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0f1b      	lsrs	r3, r3, #28
 800a6d4:	2b09      	cmp	r3, #9
 800a6d6:	d80b      	bhi.n	800a6f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	0f1b      	lsrs	r3, r3, #28
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3230      	adds	r2, #48	@ 0x30
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	e00a      	b.n	800a706 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	0f1b      	lsrs	r3, r3, #28
 800a6f4:	b2da      	uxtb	r2, r3
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	440b      	add	r3, r1
 800a700:	3237      	adds	r2, #55	@ 0x37
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	3301      	adds	r3, #1
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	4413      	add	r3, r2
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
 800a71c:	3301      	adds	r3, #1
 800a71e:	75fb      	strb	r3, [r7, #23]
 800a720:	7dfa      	ldrb	r2, [r7, #23]
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3d3      	bcc.n	800a6d0 <IntToUnicode+0x18>
  }
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	bc80      	pop	{r7}
 800a732:	4770      	bx	lr

0800a734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0d      	ldr	r2, [pc, #52]	@ (800a778 <HAL_PCD_MspInit+0x44>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d113      	bne.n	800a76e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a746:	4b0d      	ldr	r3, [pc, #52]	@ (800a77c <HAL_PCD_MspInit+0x48>)
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	4a0c      	ldr	r2, [pc, #48]	@ (800a77c <HAL_PCD_MspInit+0x48>)
 800a74c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a750:	61d3      	str	r3, [r2, #28]
 800a752:	4b0a      	ldr	r3, [pc, #40]	@ (800a77c <HAL_PCD_MspInit+0x48>)
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	2014      	movs	r0, #20
 800a764:	f7f6 ffb1 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a768:	2014      	movs	r0, #20
 800a76a:	f7f6 ffca 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	40005c00 	.word	0x40005c00
 800a77c:	40021000 	.word	0x40021000

0800a780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f7fe fdcf 	bl	800933a <USBD_LL_SetupStage>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a7b6:	78fa      	ldrb	r2, [r7, #3]
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	440b      	add	r3, r1
 800a7c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f7fe fe01 	bl	80093d4 <USBD_LL_DataOutStage>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	6879      	ldr	r1, [r7, #4]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	440b      	add	r3, r1
 800a7fa:	3324      	adds	r3, #36	@ 0x24
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	4619      	mov	r1, r3
 800a802:	f7fe fe58 	bl	80094b6 <USBD_LL_DataInStage>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe ff68 	bl	80096f2 <USBD_LL_SOF>
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	799b      	ldrb	r3, [r3, #6]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d001      	beq.n	800a842 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a83e:	f7f6 fc0d 	bl	800105c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a848:	7bfa      	ldrb	r2, [r7, #15]
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe ff18 	bl	8009682 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fed1 	bl	8009600 <USBD_LL_Reset>
}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe ff12 	bl	80096a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7a9b      	ldrb	r3, [r3, #10]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a884:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	4a03      	ldr	r2, [pc, #12]	@ (800a898 <HAL_PCD_SuspendCallback+0x30>)
 800a88a:	f043 0306 	orr.w	r3, r3, #6
 800a88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed00 	.word	0xe000ed00

0800a89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe ff0c 	bl	80096c8 <USBD_LL_Resume>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a8c0:	4a28      	ldr	r2, [pc, #160]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a26      	ldr	r2, [pc, #152]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a8d0:	4b24      	ldr	r3, [pc, #144]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8d2:	4a25      	ldr	r2, [pc, #148]	@ (800a968 <USBD_LL_Init+0xb0>)
 800a8d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a8d6:	4b23      	ldr	r3, [pc, #140]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8d8:	2208      	movs	r2, #8
 800a8da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a8dc:	4b21      	ldr	r3, [pc, #132]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8de:	2202      	movs	r2, #2
 800a8e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a8e2:	4b20      	ldr	r3, [pc, #128]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a8e8:	4b1e      	ldr	r3, [pc, #120]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a8ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a8f4:	481b      	ldr	r0, [pc, #108]	@ (800a964 <USBD_LL_Init+0xac>)
 800a8f6:	f7f7 f984 	bl	8001c02 <HAL_PCD_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a900:	f7f6 fbac 	bl	800105c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a90a:	2318      	movs	r3, #24
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	f7f8 fe95 	bl	800363e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a91a:	2358      	movs	r3, #88	@ 0x58
 800a91c:	2200      	movs	r2, #0
 800a91e:	2180      	movs	r1, #128	@ 0x80
 800a920:	f7f8 fe8d 	bl	800363e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a92a:	23c0      	movs	r3, #192	@ 0xc0
 800a92c:	2200      	movs	r2, #0
 800a92e:	2181      	movs	r1, #129	@ 0x81
 800a930:	f7f8 fe85 	bl	800363e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a93a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a93e:	2200      	movs	r2, #0
 800a940:	2101      	movs	r1, #1
 800a942:	f7f8 fe7c 	bl	800363e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a94c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a950:	2200      	movs	r2, #0
 800a952:	2182      	movs	r1, #130	@ 0x82
 800a954:	f7f8 fe73 	bl	800363e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	200010dc 	.word	0x200010dc
 800a968:	40005c00 	.word	0x40005c00

0800a96c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a982:	4618      	mov	r0, r3
 800a984:	f7f7 fa33 	bl	8001dee <HAL_PCD_Start>
 800a988:	4603      	mov	r3, r0
 800a98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f94e 	bl	800ac30 <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a998:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	70fb      	strb	r3, [r7, #3]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70bb      	strb	r3, [r7, #2]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a9ca:	78bb      	ldrb	r3, [r7, #2]
 800a9cc:	883a      	ldrh	r2, [r7, #0]
 800a9ce:	78f9      	ldrb	r1, [r7, #3]
 800a9d0:	f7f7 fb87 	bl	80020e2 <HAL_PCD_EP_Open>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f928 	bl	800ac30 <USBD_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f7 fbc5 	bl	800219c <HAL_PCD_EP_Close>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 f909 	bl	800ac30 <USBD_Get_USB_Status>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f7 fc6d 	bl	800232a <HAL_PCD_EP_SetStall>
 800aa50:	4603      	mov	r3, r0
 800aa52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 f8ea 	bl	800ac30 <USBD_Get_USB_Status>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa84:	78fa      	ldrb	r2, [r7, #3]
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f7 fcae 	bl	80023ea <HAL_PCD_EP_ClrStall>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f8cb 	bl	800ac30 <USBD_Get_USB_Status>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aaba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aabc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da0b      	bge.n	800aadc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	4613      	mov	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	440b      	add	r3, r1
 800aad6:	3312      	adds	r3, #18
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	e00b      	b.n	800aaf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aadc:	78fb      	ldrb	r3, [r7, #3]
 800aade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aae2:	68f9      	ldr	r1, [r7, #12]
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	440b      	add	r3, r1
 800aaee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800aaf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bc80      	pop	{r7}
 800aafc:	4770      	bx	lr

0800aafe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab18:	78fa      	ldrb	r2, [r7, #3]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7f7 fabc 	bl	800209a <HAL_PCD_SetAddress>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f881 	bl	800ac30 <USBD_Get_USB_Status>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	461a      	mov	r2, r3
 800ab48:	460b      	mov	r3, r1
 800ab4a:	72fb      	strb	r3, [r7, #11]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ab5e:	893b      	ldrh	r3, [r7, #8]
 800ab60:	7af9      	ldrb	r1, [r7, #11]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	f7f7 fbaa 	bl	80022bc <HAL_PCD_EP_Transmit>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f85e 	bl	800ac30 <USBD_Get_USB_Status>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b086      	sub	sp, #24
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	607a      	str	r2, [r7, #4]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	460b      	mov	r3, r1
 800ab90:	72fb      	strb	r3, [r7, #11]
 800ab92:	4613      	mov	r3, r2
 800ab94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aba4:	893b      	ldrh	r3, [r7, #8]
 800aba6:	7af9      	ldrb	r1, [r7, #11]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	f7f7 fb3f 	bl	800222c <HAL_PCD_EP_Receive>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f83b 	bl	800ac30 <USBD_Get_USB_Status>
 800abba:	4603      	mov	r3, r0
 800abbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abbe:	7dbb      	ldrb	r3, [r7, #22]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3718      	adds	r7, #24
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abda:	78fa      	ldrb	r2, [r7, #3]
 800abdc:	4611      	mov	r1, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f7f7 fb55 	bl	800228e <HAL_PCD_EP_GetRxCount>
 800abe4:	4603      	mov	r3, r0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abf8:	4b02      	ldr	r3, [pc, #8]	@ (800ac04 <USBD_static_malloc+0x14>)
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bc80      	pop	{r7}
 800ac02:	4770      	bx	lr
 800ac04:	200013b4 	.word	0x200013b4

0800ac08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d817      	bhi.n	800ac74 <USBD_Get_USB_Status+0x44>
 800ac44:	a201      	add	r2, pc, #4	@ (adr r2, 800ac4c <USBD_Get_USB_Status+0x1c>)
 800ac46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4a:	bf00      	nop
 800ac4c:	0800ac5d 	.word	0x0800ac5d
 800ac50:	0800ac63 	.word	0x0800ac63
 800ac54:	0800ac69 	.word	0x0800ac69
 800ac58:	0800ac6f 	.word	0x0800ac6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac60:	e00b      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]
    break;
 800ac66:	e008      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac6c:	e005      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	73fb      	strb	r3, [r7, #15]
    break;
 800ac72:	e002      	b.n	800ac7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
    break;
 800ac78:	bf00      	nop
  }
  return usb_status;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <__cvt>:
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8e:	461d      	mov	r5, r3
 800ac90:	bfbb      	ittet	lt
 800ac92:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800ac96:	461d      	movlt	r5, r3
 800ac98:	2300      	movge	r3, #0
 800ac9a:	232d      	movlt	r3, #45	@ 0x2d
 800ac9c:	b088      	sub	sp, #32
 800ac9e:	4614      	mov	r4, r2
 800aca0:	bfb8      	it	lt
 800aca2:	4614      	movlt	r4, r2
 800aca4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aca6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800aca8:	7013      	strb	r3, [r2, #0]
 800acaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800acb0:	f023 0820 	bic.w	r8, r3, #32
 800acb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acb8:	d005      	beq.n	800acc6 <__cvt+0x3e>
 800acba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acbe:	d100      	bne.n	800acc2 <__cvt+0x3a>
 800acc0:	3601      	adds	r6, #1
 800acc2:	2302      	movs	r3, #2
 800acc4:	e000      	b.n	800acc8 <__cvt+0x40>
 800acc6:	2303      	movs	r3, #3
 800acc8:	aa07      	add	r2, sp, #28
 800acca:	9204      	str	r2, [sp, #16]
 800accc:	aa06      	add	r2, sp, #24
 800acce:	e9cd a202 	strd	sl, r2, [sp, #8]
 800acd2:	e9cd 3600 	strd	r3, r6, [sp]
 800acd6:	4622      	mov	r2, r4
 800acd8:	462b      	mov	r3, r5
 800acda:	f001 f8b1 	bl	800be40 <_dtoa_r>
 800acde:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ace2:	4607      	mov	r7, r0
 800ace4:	d119      	bne.n	800ad1a <__cvt+0x92>
 800ace6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ace8:	07db      	lsls	r3, r3, #31
 800acea:	d50e      	bpl.n	800ad0a <__cvt+0x82>
 800acec:	eb00 0906 	add.w	r9, r0, r6
 800acf0:	2200      	movs	r2, #0
 800acf2:	2300      	movs	r3, #0
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fe56 	bl	80009a8 <__aeabi_dcmpeq>
 800acfc:	b108      	cbz	r0, 800ad02 <__cvt+0x7a>
 800acfe:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad02:	2230      	movs	r2, #48	@ 0x30
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	454b      	cmp	r3, r9
 800ad08:	d31e      	bcc.n	800ad48 <__cvt+0xc0>
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ad10:	1bdb      	subs	r3, r3, r7
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	b008      	add	sp, #32
 800ad16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad1e:	eb00 0906 	add.w	r9, r0, r6
 800ad22:	d1e5      	bne.n	800acf0 <__cvt+0x68>
 800ad24:	7803      	ldrb	r3, [r0, #0]
 800ad26:	2b30      	cmp	r3, #48	@ 0x30
 800ad28:	d10a      	bne.n	800ad40 <__cvt+0xb8>
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4620      	mov	r0, r4
 800ad30:	4629      	mov	r1, r5
 800ad32:	f7f5 fe39 	bl	80009a8 <__aeabi_dcmpeq>
 800ad36:	b918      	cbnz	r0, 800ad40 <__cvt+0xb8>
 800ad38:	f1c6 0601 	rsb	r6, r6, #1
 800ad3c:	f8ca 6000 	str.w	r6, [sl]
 800ad40:	f8da 3000 	ldr.w	r3, [sl]
 800ad44:	4499      	add	r9, r3
 800ad46:	e7d3      	b.n	800acf0 <__cvt+0x68>
 800ad48:	1c59      	adds	r1, r3, #1
 800ad4a:	9107      	str	r1, [sp, #28]
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	e7d9      	b.n	800ad04 <__cvt+0x7c>

0800ad50 <__exponent>:
 800ad50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad52:	2900      	cmp	r1, #0
 800ad54:	bfb6      	itet	lt
 800ad56:	232d      	movlt	r3, #45	@ 0x2d
 800ad58:	232b      	movge	r3, #43	@ 0x2b
 800ad5a:	4249      	neglt	r1, r1
 800ad5c:	2909      	cmp	r1, #9
 800ad5e:	7002      	strb	r2, [r0, #0]
 800ad60:	7043      	strb	r3, [r0, #1]
 800ad62:	dd29      	ble.n	800adb8 <__exponent+0x68>
 800ad64:	f10d 0307 	add.w	r3, sp, #7
 800ad68:	461d      	mov	r5, r3
 800ad6a:	270a      	movs	r7, #10
 800ad6c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad70:	461a      	mov	r2, r3
 800ad72:	fb07 1416 	mls	r4, r7, r6, r1
 800ad76:	3430      	adds	r4, #48	@ 0x30
 800ad78:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	2c63      	cmp	r4, #99	@ 0x63
 800ad80:	4631      	mov	r1, r6
 800ad82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad86:	dcf1      	bgt.n	800ad6c <__exponent+0x1c>
 800ad88:	3130      	adds	r1, #48	@ 0x30
 800ad8a:	1e94      	subs	r4, r2, #2
 800ad8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad90:	4623      	mov	r3, r4
 800ad92:	1c41      	adds	r1, r0, #1
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	d30a      	bcc.n	800adae <__exponent+0x5e>
 800ad98:	f10d 0309 	add.w	r3, sp, #9
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	42ac      	cmp	r4, r5
 800ada0:	bf88      	it	hi
 800ada2:	2300      	movhi	r3, #0
 800ada4:	3302      	adds	r3, #2
 800ada6:	4403      	add	r3, r0
 800ada8:	1a18      	subs	r0, r3, r0
 800adaa:	b003      	add	sp, #12
 800adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adb6:	e7ed      	b.n	800ad94 <__exponent+0x44>
 800adb8:	2330      	movs	r3, #48	@ 0x30
 800adba:	3130      	adds	r1, #48	@ 0x30
 800adbc:	7083      	strb	r3, [r0, #2]
 800adbe:	70c1      	strb	r1, [r0, #3]
 800adc0:	1d03      	adds	r3, r0, #4
 800adc2:	e7f1      	b.n	800ada8 <__exponent+0x58>

0800adc4 <_printf_float>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	b091      	sub	sp, #68	@ 0x44
 800adca:	460c      	mov	r4, r1
 800adcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800add0:	4616      	mov	r6, r2
 800add2:	461f      	mov	r7, r3
 800add4:	4605      	mov	r5, r0
 800add6:	f000 ff21 	bl	800bc1c <_localeconv_r>
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	4618      	mov	r0, r3
 800adde:	9308      	str	r3, [sp, #32]
 800ade0:	f7f5 f9b6 	bl	8000150 <strlen>
 800ade4:	2300      	movs	r3, #0
 800ade6:	930e      	str	r3, [sp, #56]	@ 0x38
 800ade8:	f8d8 3000 	ldr.w	r3, [r8]
 800adec:	9009      	str	r0, [sp, #36]	@ 0x24
 800adee:	3307      	adds	r3, #7
 800adf0:	f023 0307 	bic.w	r3, r3, #7
 800adf4:	f103 0208 	add.w	r2, r3, #8
 800adf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800adfc:	f8d4 b000 	ldr.w	fp, [r4]
 800ae00:	f8c8 2000 	str.w	r2, [r8]
 800ae04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ae12:	f04f 32ff 	mov.w	r2, #4294967295
 800ae16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae1e:	4b9c      	ldr	r3, [pc, #624]	@ (800b090 <_printf_float+0x2cc>)
 800ae20:	f7f5 fdf4 	bl	8000a0c <__aeabi_dcmpun>
 800ae24:	bb70      	cbnz	r0, 800ae84 <_printf_float+0xc0>
 800ae26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2e:	4b98      	ldr	r3, [pc, #608]	@ (800b090 <_printf_float+0x2cc>)
 800ae30:	f7f5 fdce 	bl	80009d0 <__aeabi_dcmple>
 800ae34:	bb30      	cbnz	r0, 800ae84 <_printf_float+0xc0>
 800ae36:	2200      	movs	r2, #0
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	f7f5 fdbd 	bl	80009bc <__aeabi_dcmplt>
 800ae42:	b110      	cbz	r0, 800ae4a <_printf_float+0x86>
 800ae44:	232d      	movs	r3, #45	@ 0x2d
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae4a:	4a92      	ldr	r2, [pc, #584]	@ (800b094 <_printf_float+0x2d0>)
 800ae4c:	4b92      	ldr	r3, [pc, #584]	@ (800b098 <_printf_float+0x2d4>)
 800ae4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae52:	bf8c      	ite	hi
 800ae54:	4690      	movhi	r8, r2
 800ae56:	4698      	movls	r8, r3
 800ae58:	2303      	movs	r3, #3
 800ae5a:	f04f 0900 	mov.w	r9, #0
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	f02b 0304 	bic.w	r3, fp, #4
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	4633      	mov	r3, r6
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	9700      	str	r7, [sp, #0]
 800ae6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ae70:	f000 f9d4 	bl	800b21c <_printf_common>
 800ae74:	3001      	adds	r0, #1
 800ae76:	f040 8090 	bne.w	800af9a <_printf_float+0x1d6>
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7e:	b011      	add	sp, #68	@ 0x44
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	4642      	mov	r2, r8
 800ae86:	464b      	mov	r3, r9
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fdbe 	bl	8000a0c <__aeabi_dcmpun>
 800ae90:	b148      	cbz	r0, 800aea6 <_printf_float+0xe2>
 800ae92:	464b      	mov	r3, r9
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfb8      	it	lt
 800ae98:	232d      	movlt	r3, #45	@ 0x2d
 800ae9a:	4a80      	ldr	r2, [pc, #512]	@ (800b09c <_printf_float+0x2d8>)
 800ae9c:	bfb8      	it	lt
 800ae9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aea2:	4b7f      	ldr	r3, [pc, #508]	@ (800b0a0 <_printf_float+0x2dc>)
 800aea4:	e7d3      	b.n	800ae4e <_printf_float+0x8a>
 800aea6:	6863      	ldr	r3, [r4, #4]
 800aea8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	d13f      	bne.n	800af30 <_printf_float+0x16c>
 800aeb0:	2306      	movs	r3, #6
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	9206      	str	r2, [sp, #24]
 800aebe:	aa0e      	add	r2, sp, #56	@ 0x38
 800aec0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800aec4:	aa0d      	add	r2, sp, #52	@ 0x34
 800aec6:	9203      	str	r2, [sp, #12]
 800aec8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800aecc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aed0:	6863      	ldr	r3, [r4, #4]
 800aed2:	4642      	mov	r2, r8
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4628      	mov	r0, r5
 800aed8:	464b      	mov	r3, r9
 800aeda:	910a      	str	r1, [sp, #40]	@ 0x28
 800aedc:	f7ff fed4 	bl	800ac88 <__cvt>
 800aee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aee2:	4680      	mov	r8, r0
 800aee4:	2947      	cmp	r1, #71	@ 0x47
 800aee6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aee8:	d128      	bne.n	800af3c <_printf_float+0x178>
 800aeea:	1cc8      	adds	r0, r1, #3
 800aeec:	db02      	blt.n	800aef4 <_printf_float+0x130>
 800aeee:	6863      	ldr	r3, [r4, #4]
 800aef0:	4299      	cmp	r1, r3
 800aef2:	dd40      	ble.n	800af76 <_printf_float+0x1b2>
 800aef4:	f1aa 0a02 	sub.w	sl, sl, #2
 800aef8:	fa5f fa8a 	uxtb.w	sl, sl
 800aefc:	4652      	mov	r2, sl
 800aefe:	3901      	subs	r1, #1
 800af00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af04:	910d      	str	r1, [sp, #52]	@ 0x34
 800af06:	f7ff ff23 	bl	800ad50 <__exponent>
 800af0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af0c:	4681      	mov	r9, r0
 800af0e:	1813      	adds	r3, r2, r0
 800af10:	2a01      	cmp	r2, #1
 800af12:	6123      	str	r3, [r4, #16]
 800af14:	dc02      	bgt.n	800af1c <_printf_float+0x158>
 800af16:	6822      	ldr	r2, [r4, #0]
 800af18:	07d2      	lsls	r2, r2, #31
 800af1a:	d501      	bpl.n	800af20 <_printf_float+0x15c>
 800af1c:	3301      	adds	r3, #1
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800af24:	2b00      	cmp	r3, #0
 800af26:	d09e      	beq.n	800ae66 <_printf_float+0xa2>
 800af28:	232d      	movs	r3, #45	@ 0x2d
 800af2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af2e:	e79a      	b.n	800ae66 <_printf_float+0xa2>
 800af30:	2947      	cmp	r1, #71	@ 0x47
 800af32:	d1bf      	bne.n	800aeb4 <_printf_float+0xf0>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1bd      	bne.n	800aeb4 <_printf_float+0xf0>
 800af38:	2301      	movs	r3, #1
 800af3a:	e7ba      	b.n	800aeb2 <_printf_float+0xee>
 800af3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af40:	d9dc      	bls.n	800aefc <_printf_float+0x138>
 800af42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af46:	d118      	bne.n	800af7a <_printf_float+0x1b6>
 800af48:	2900      	cmp	r1, #0
 800af4a:	6863      	ldr	r3, [r4, #4]
 800af4c:	dd0b      	ble.n	800af66 <_printf_float+0x1a2>
 800af4e:	6121      	str	r1, [r4, #16]
 800af50:	b913      	cbnz	r3, 800af58 <_printf_float+0x194>
 800af52:	6822      	ldr	r2, [r4, #0]
 800af54:	07d0      	lsls	r0, r2, #31
 800af56:	d502      	bpl.n	800af5e <_printf_float+0x19a>
 800af58:	3301      	adds	r3, #1
 800af5a:	440b      	add	r3, r1
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af64:	e7dc      	b.n	800af20 <_printf_float+0x15c>
 800af66:	b913      	cbnz	r3, 800af6e <_printf_float+0x1aa>
 800af68:	6822      	ldr	r2, [r4, #0]
 800af6a:	07d2      	lsls	r2, r2, #31
 800af6c:	d501      	bpl.n	800af72 <_printf_float+0x1ae>
 800af6e:	3302      	adds	r3, #2
 800af70:	e7f4      	b.n	800af5c <_printf_float+0x198>
 800af72:	2301      	movs	r3, #1
 800af74:	e7f2      	b.n	800af5c <_printf_float+0x198>
 800af76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af7c:	4299      	cmp	r1, r3
 800af7e:	db05      	blt.n	800af8c <_printf_float+0x1c8>
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	6121      	str	r1, [r4, #16]
 800af84:	07d8      	lsls	r0, r3, #31
 800af86:	d5ea      	bpl.n	800af5e <_printf_float+0x19a>
 800af88:	1c4b      	adds	r3, r1, #1
 800af8a:	e7e7      	b.n	800af5c <_printf_float+0x198>
 800af8c:	2900      	cmp	r1, #0
 800af8e:	bfcc      	ite	gt
 800af90:	2201      	movgt	r2, #1
 800af92:	f1c1 0202 	rsble	r2, r1, #2
 800af96:	4413      	add	r3, r2
 800af98:	e7e0      	b.n	800af5c <_printf_float+0x198>
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	055a      	lsls	r2, r3, #21
 800af9e:	d407      	bmi.n	800afb0 <_printf_float+0x1ec>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	4642      	mov	r2, r8
 800afa4:	4631      	mov	r1, r6
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	d12b      	bne.n	800b006 <_printf_float+0x242>
 800afae:	e764      	b.n	800ae7a <_printf_float+0xb6>
 800afb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afb4:	f240 80dc 	bls.w	800b170 <_printf_float+0x3ac>
 800afb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	f7f5 fcf2 	bl	80009a8 <__aeabi_dcmpeq>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d033      	beq.n	800b030 <_printf_float+0x26c>
 800afc8:	2301      	movs	r3, #1
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	4a35      	ldr	r2, [pc, #212]	@ (800b0a4 <_printf_float+0x2e0>)
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	f43f af51 	beq.w	800ae7a <_printf_float+0xb6>
 800afd8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800afdc:	4543      	cmp	r3, r8
 800afde:	db02      	blt.n	800afe6 <_printf_float+0x222>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	07d8      	lsls	r0, r3, #31
 800afe4:	d50f      	bpl.n	800b006 <_printf_float+0x242>
 800afe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f af42 	beq.w	800ae7a <_printf_float+0xb6>
 800aff6:	f04f 0900 	mov.w	r9, #0
 800affa:	f108 38ff 	add.w	r8, r8, #4294967295
 800affe:	f104 0a1a 	add.w	sl, r4, #26
 800b002:	45c8      	cmp	r8, r9
 800b004:	dc09      	bgt.n	800b01a <_printf_float+0x256>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	079b      	lsls	r3, r3, #30
 800b00a:	f100 8102 	bmi.w	800b212 <_printf_float+0x44e>
 800b00e:	68e0      	ldr	r0, [r4, #12]
 800b010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b012:	4298      	cmp	r0, r3
 800b014:	bfb8      	it	lt
 800b016:	4618      	movlt	r0, r3
 800b018:	e731      	b.n	800ae7e <_printf_float+0xba>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4652      	mov	r2, sl
 800b01e:	4631      	mov	r1, r6
 800b020:	4628      	mov	r0, r5
 800b022:	47b8      	blx	r7
 800b024:	3001      	adds	r0, #1
 800b026:	f43f af28 	beq.w	800ae7a <_printf_float+0xb6>
 800b02a:	f109 0901 	add.w	r9, r9, #1
 800b02e:	e7e8      	b.n	800b002 <_printf_float+0x23e>
 800b030:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b032:	2b00      	cmp	r3, #0
 800b034:	dc38      	bgt.n	800b0a8 <_printf_float+0x2e4>
 800b036:	2301      	movs	r3, #1
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	4a19      	ldr	r2, [pc, #100]	@ (800b0a4 <_printf_float+0x2e0>)
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f af1a 	beq.w	800ae7a <_printf_float+0xb6>
 800b046:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b04a:	ea59 0303 	orrs.w	r3, r9, r3
 800b04e:	d102      	bne.n	800b056 <_printf_float+0x292>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	07d9      	lsls	r1, r3, #31
 800b054:	d5d7      	bpl.n	800b006 <_printf_float+0x242>
 800b056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	f43f af0a 	beq.w	800ae7a <_printf_float+0xb6>
 800b066:	f04f 0a00 	mov.w	sl, #0
 800b06a:	f104 0b1a 	add.w	fp, r4, #26
 800b06e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b070:	425b      	negs	r3, r3
 800b072:	4553      	cmp	r3, sl
 800b074:	dc01      	bgt.n	800b07a <_printf_float+0x2b6>
 800b076:	464b      	mov	r3, r9
 800b078:	e793      	b.n	800afa2 <_printf_float+0x1de>
 800b07a:	2301      	movs	r3, #1
 800b07c:	465a      	mov	r2, fp
 800b07e:	4631      	mov	r1, r6
 800b080:	4628      	mov	r0, r5
 800b082:	47b8      	blx	r7
 800b084:	3001      	adds	r0, #1
 800b086:	f43f aef8 	beq.w	800ae7a <_printf_float+0xb6>
 800b08a:	f10a 0a01 	add.w	sl, sl, #1
 800b08e:	e7ee      	b.n	800b06e <_printf_float+0x2aa>
 800b090:	7fefffff 	.word	0x7fefffff
 800b094:	0800f474 	.word	0x0800f474
 800b098:	0800f470 	.word	0x0800f470
 800b09c:	0800f47c 	.word	0x0800f47c
 800b0a0:	0800f478 	.word	0x0800f478
 800b0a4:	0800f480 	.word	0x0800f480
 800b0a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0aa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b0ae:	4553      	cmp	r3, sl
 800b0b0:	bfa8      	it	ge
 800b0b2:	4653      	movge	r3, sl
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	4699      	mov	r9, r3
 800b0b8:	dc36      	bgt.n	800b128 <_printf_float+0x364>
 800b0ba:	f04f 0b00 	mov.w	fp, #0
 800b0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0c2:	f104 021a 	add.w	r2, r4, #26
 800b0c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0ca:	eba3 0309 	sub.w	r3, r3, r9
 800b0ce:	455b      	cmp	r3, fp
 800b0d0:	dc31      	bgt.n	800b136 <_printf_float+0x372>
 800b0d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0d4:	459a      	cmp	sl, r3
 800b0d6:	dc3a      	bgt.n	800b14e <_printf_float+0x38a>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	07da      	lsls	r2, r3, #31
 800b0dc:	d437      	bmi.n	800b14e <_printf_float+0x38a>
 800b0de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0e0:	ebaa 0903 	sub.w	r9, sl, r3
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0e6:	ebaa 0303 	sub.w	r3, sl, r3
 800b0ea:	4599      	cmp	r9, r3
 800b0ec:	bfa8      	it	ge
 800b0ee:	4699      	movge	r9, r3
 800b0f0:	f1b9 0f00 	cmp.w	r9, #0
 800b0f4:	dc33      	bgt.n	800b15e <_printf_float+0x39a>
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fe:	f104 0b1a 	add.w	fp, r4, #26
 800b102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b104:	ebaa 0303 	sub.w	r3, sl, r3
 800b108:	eba3 0309 	sub.w	r3, r3, r9
 800b10c:	4543      	cmp	r3, r8
 800b10e:	f77f af7a 	ble.w	800b006 <_printf_float+0x242>
 800b112:	2301      	movs	r3, #1
 800b114:	465a      	mov	r2, fp
 800b116:	4631      	mov	r1, r6
 800b118:	4628      	mov	r0, r5
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	f43f aeac 	beq.w	800ae7a <_printf_float+0xb6>
 800b122:	f108 0801 	add.w	r8, r8, #1
 800b126:	e7ec      	b.n	800b102 <_printf_float+0x33e>
 800b128:	4642      	mov	r2, r8
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	d1c2      	bne.n	800b0ba <_printf_float+0x2f6>
 800b134:	e6a1      	b.n	800ae7a <_printf_float+0xb6>
 800b136:	2301      	movs	r3, #1
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b13e:	47b8      	blx	r7
 800b140:	3001      	adds	r0, #1
 800b142:	f43f ae9a 	beq.w	800ae7a <_printf_float+0xb6>
 800b146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	e7bb      	b.n	800b0c6 <_printf_float+0x302>
 800b14e:	4631      	mov	r1, r6
 800b150:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	d1c0      	bne.n	800b0de <_printf_float+0x31a>
 800b15c:	e68d      	b.n	800ae7a <_printf_float+0xb6>
 800b15e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b160:	464b      	mov	r3, r9
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	4442      	add	r2, r8
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	d1c3      	bne.n	800b0f6 <_printf_float+0x332>
 800b16e:	e684      	b.n	800ae7a <_printf_float+0xb6>
 800b170:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b174:	f1ba 0f01 	cmp.w	sl, #1
 800b178:	dc01      	bgt.n	800b17e <_printf_float+0x3ba>
 800b17a:	07db      	lsls	r3, r3, #31
 800b17c:	d536      	bpl.n	800b1ec <_printf_float+0x428>
 800b17e:	2301      	movs	r3, #1
 800b180:	4642      	mov	r2, r8
 800b182:	4631      	mov	r1, r6
 800b184:	4628      	mov	r0, r5
 800b186:	47b8      	blx	r7
 800b188:	3001      	adds	r0, #1
 800b18a:	f43f ae76 	beq.w	800ae7a <_printf_float+0xb6>
 800b18e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae6e 	beq.w	800ae7a <_printf_float+0xb6>
 800b19e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1aa:	f7f5 fbfd 	bl	80009a8 <__aeabi_dcmpeq>
 800b1ae:	b9c0      	cbnz	r0, 800b1e2 <_printf_float+0x41e>
 800b1b0:	4653      	mov	r3, sl
 800b1b2:	f108 0201 	add.w	r2, r8, #1
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d10c      	bne.n	800b1da <_printf_float+0x416>
 800b1c0:	e65b      	b.n	800ae7a <_printf_float+0xb6>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	465a      	mov	r2, fp
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f ae54 	beq.w	800ae7a <_printf_float+0xb6>
 800b1d2:	f108 0801 	add.w	r8, r8, #1
 800b1d6:	45d0      	cmp	r8, sl
 800b1d8:	dbf3      	blt.n	800b1c2 <_printf_float+0x3fe>
 800b1da:	464b      	mov	r3, r9
 800b1dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1e0:	e6e0      	b.n	800afa4 <_printf_float+0x1e0>
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	f104 0b1a 	add.w	fp, r4, #26
 800b1ea:	e7f4      	b.n	800b1d6 <_printf_float+0x412>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	e7e1      	b.n	800b1b6 <_printf_float+0x3f2>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	464a      	mov	r2, r9
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae3c 	beq.w	800ae7a <_printf_float+0xb6>
 800b202:	f108 0801 	add.w	r8, r8, #1
 800b206:	68e3      	ldr	r3, [r4, #12]
 800b208:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b20a:	1a5b      	subs	r3, r3, r1
 800b20c:	4543      	cmp	r3, r8
 800b20e:	dcf0      	bgt.n	800b1f2 <_printf_float+0x42e>
 800b210:	e6fd      	b.n	800b00e <_printf_float+0x24a>
 800b212:	f04f 0800 	mov.w	r8, #0
 800b216:	f104 0919 	add.w	r9, r4, #25
 800b21a:	e7f4      	b.n	800b206 <_printf_float+0x442>

0800b21c <_printf_common>:
 800b21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b220:	4616      	mov	r6, r2
 800b222:	4698      	mov	r8, r3
 800b224:	688a      	ldr	r2, [r1, #8]
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	4607      	mov	r7, r0
 800b22a:	4293      	cmp	r3, r2
 800b22c:	bfb8      	it	lt
 800b22e:	4613      	movlt	r3, r2
 800b230:	6033      	str	r3, [r6, #0]
 800b232:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b236:	460c      	mov	r4, r1
 800b238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b23c:	b10a      	cbz	r2, 800b242 <_printf_common+0x26>
 800b23e:	3301      	adds	r3, #1
 800b240:	6033      	str	r3, [r6, #0]
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	0699      	lsls	r1, r3, #26
 800b246:	bf42      	ittt	mi
 800b248:	6833      	ldrmi	r3, [r6, #0]
 800b24a:	3302      	addmi	r3, #2
 800b24c:	6033      	strmi	r3, [r6, #0]
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	f015 0506 	ands.w	r5, r5, #6
 800b254:	d106      	bne.n	800b264 <_printf_common+0x48>
 800b256:	f104 0a19 	add.w	sl, r4, #25
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	6832      	ldr	r2, [r6, #0]
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	42ab      	cmp	r3, r5
 800b262:	dc2b      	bgt.n	800b2bc <_printf_common+0xa0>
 800b264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	3b00      	subs	r3, #0
 800b26c:	bf18      	it	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	0692      	lsls	r2, r2, #26
 800b272:	d430      	bmi.n	800b2d6 <_printf_common+0xba>
 800b274:	4641      	mov	r1, r8
 800b276:	4638      	mov	r0, r7
 800b278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b27c:	47c8      	blx	r9
 800b27e:	3001      	adds	r0, #1
 800b280:	d023      	beq.n	800b2ca <_printf_common+0xae>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	6922      	ldr	r2, [r4, #16]
 800b286:	f003 0306 	and.w	r3, r3, #6
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	bf14      	ite	ne
 800b28e:	2500      	movne	r5, #0
 800b290:	6833      	ldreq	r3, [r6, #0]
 800b292:	f04f 0600 	mov.w	r6, #0
 800b296:	bf08      	it	eq
 800b298:	68e5      	ldreq	r5, [r4, #12]
 800b29a:	f104 041a 	add.w	r4, r4, #26
 800b29e:	bf08      	it	eq
 800b2a0:	1aed      	subeq	r5, r5, r3
 800b2a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b2a6:	bf08      	it	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfc4      	itt	gt
 800b2b0:	1a9b      	subgt	r3, r3, r2
 800b2b2:	18ed      	addgt	r5, r5, r3
 800b2b4:	42b5      	cmp	r5, r6
 800b2b6:	d11a      	bne.n	800b2ee <_printf_common+0xd2>
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e008      	b.n	800b2ce <_printf_common+0xb2>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	4652      	mov	r2, sl
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	47c8      	blx	r9
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d103      	bne.n	800b2d2 <_printf_common+0xb6>
 800b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	3501      	adds	r5, #1
 800b2d4:	e7c1      	b.n	800b25a <_printf_common+0x3e>
 800b2d6:	2030      	movs	r0, #48	@ 0x30
 800b2d8:	18e1      	adds	r1, r4, r3
 800b2da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2e4:	4422      	add	r2, r4
 800b2e6:	3302      	adds	r3, #2
 800b2e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2ec:	e7c2      	b.n	800b274 <_printf_common+0x58>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	47c8      	blx	r9
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d0e6      	beq.n	800b2ca <_printf_common+0xae>
 800b2fc:	3601      	adds	r6, #1
 800b2fe:	e7d9      	b.n	800b2b4 <_printf_common+0x98>

0800b300 <_printf_i>:
 800b300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b304:	7e0f      	ldrb	r7, [r1, #24]
 800b306:	4691      	mov	r9, r2
 800b308:	2f78      	cmp	r7, #120	@ 0x78
 800b30a:	4680      	mov	r8, r0
 800b30c:	460c      	mov	r4, r1
 800b30e:	469a      	mov	sl, r3
 800b310:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b316:	d807      	bhi.n	800b328 <_printf_i+0x28>
 800b318:	2f62      	cmp	r7, #98	@ 0x62
 800b31a:	d80a      	bhi.n	800b332 <_printf_i+0x32>
 800b31c:	2f00      	cmp	r7, #0
 800b31e:	f000 80d1 	beq.w	800b4c4 <_printf_i+0x1c4>
 800b322:	2f58      	cmp	r7, #88	@ 0x58
 800b324:	f000 80b8 	beq.w	800b498 <_printf_i+0x198>
 800b328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b32c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b330:	e03a      	b.n	800b3a8 <_printf_i+0xa8>
 800b332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b336:	2b15      	cmp	r3, #21
 800b338:	d8f6      	bhi.n	800b328 <_printf_i+0x28>
 800b33a:	a101      	add	r1, pc, #4	@ (adr r1, 800b340 <_printf_i+0x40>)
 800b33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b340:	0800b399 	.word	0x0800b399
 800b344:	0800b3ad 	.word	0x0800b3ad
 800b348:	0800b329 	.word	0x0800b329
 800b34c:	0800b329 	.word	0x0800b329
 800b350:	0800b329 	.word	0x0800b329
 800b354:	0800b329 	.word	0x0800b329
 800b358:	0800b3ad 	.word	0x0800b3ad
 800b35c:	0800b329 	.word	0x0800b329
 800b360:	0800b329 	.word	0x0800b329
 800b364:	0800b329 	.word	0x0800b329
 800b368:	0800b329 	.word	0x0800b329
 800b36c:	0800b4ab 	.word	0x0800b4ab
 800b370:	0800b3d7 	.word	0x0800b3d7
 800b374:	0800b465 	.word	0x0800b465
 800b378:	0800b329 	.word	0x0800b329
 800b37c:	0800b329 	.word	0x0800b329
 800b380:	0800b4cd 	.word	0x0800b4cd
 800b384:	0800b329 	.word	0x0800b329
 800b388:	0800b3d7 	.word	0x0800b3d7
 800b38c:	0800b329 	.word	0x0800b329
 800b390:	0800b329 	.word	0x0800b329
 800b394:	0800b46d 	.word	0x0800b46d
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6032      	str	r2, [r6, #0]
 800b3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e09c      	b.n	800b4e6 <_printf_i+0x1e6>
 800b3ac:	6833      	ldr	r3, [r6, #0]
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	1d19      	adds	r1, r3, #4
 800b3b2:	6031      	str	r1, [r6, #0]
 800b3b4:	0606      	lsls	r6, r0, #24
 800b3b6:	d501      	bpl.n	800b3bc <_printf_i+0xbc>
 800b3b8:	681d      	ldr	r5, [r3, #0]
 800b3ba:	e003      	b.n	800b3c4 <_printf_i+0xc4>
 800b3bc:	0645      	lsls	r5, r0, #25
 800b3be:	d5fb      	bpl.n	800b3b8 <_printf_i+0xb8>
 800b3c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3c4:	2d00      	cmp	r5, #0
 800b3c6:	da03      	bge.n	800b3d0 <_printf_i+0xd0>
 800b3c8:	232d      	movs	r3, #45	@ 0x2d
 800b3ca:	426d      	negs	r5, r5
 800b3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d0:	230a      	movs	r3, #10
 800b3d2:	4858      	ldr	r0, [pc, #352]	@ (800b534 <_printf_i+0x234>)
 800b3d4:	e011      	b.n	800b3fa <_printf_i+0xfa>
 800b3d6:	6821      	ldr	r1, [r4, #0]
 800b3d8:	6833      	ldr	r3, [r6, #0]
 800b3da:	0608      	lsls	r0, r1, #24
 800b3dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3e0:	d402      	bmi.n	800b3e8 <_printf_i+0xe8>
 800b3e2:	0649      	lsls	r1, r1, #25
 800b3e4:	bf48      	it	mi
 800b3e6:	b2ad      	uxthmi	r5, r5
 800b3e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3ea:	6033      	str	r3, [r6, #0]
 800b3ec:	bf14      	ite	ne
 800b3ee:	230a      	movne	r3, #10
 800b3f0:	2308      	moveq	r3, #8
 800b3f2:	4850      	ldr	r0, [pc, #320]	@ (800b534 <_printf_i+0x234>)
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3fa:	6866      	ldr	r6, [r4, #4]
 800b3fc:	2e00      	cmp	r6, #0
 800b3fe:	60a6      	str	r6, [r4, #8]
 800b400:	db05      	blt.n	800b40e <_printf_i+0x10e>
 800b402:	6821      	ldr	r1, [r4, #0]
 800b404:	432e      	orrs	r6, r5
 800b406:	f021 0104 	bic.w	r1, r1, #4
 800b40a:	6021      	str	r1, [r4, #0]
 800b40c:	d04b      	beq.n	800b4a6 <_printf_i+0x1a6>
 800b40e:	4616      	mov	r6, r2
 800b410:	fbb5 f1f3 	udiv	r1, r5, r3
 800b414:	fb03 5711 	mls	r7, r3, r1, r5
 800b418:	5dc7      	ldrb	r7, [r0, r7]
 800b41a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b41e:	462f      	mov	r7, r5
 800b420:	42bb      	cmp	r3, r7
 800b422:	460d      	mov	r5, r1
 800b424:	d9f4      	bls.n	800b410 <_printf_i+0x110>
 800b426:	2b08      	cmp	r3, #8
 800b428:	d10b      	bne.n	800b442 <_printf_i+0x142>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	07df      	lsls	r7, r3, #31
 800b42e:	d508      	bpl.n	800b442 <_printf_i+0x142>
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	6861      	ldr	r1, [r4, #4]
 800b434:	4299      	cmp	r1, r3
 800b436:	bfde      	ittt	le
 800b438:	2330      	movle	r3, #48	@ 0x30
 800b43a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b43e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b442:	1b92      	subs	r2, r2, r6
 800b444:	6122      	str	r2, [r4, #16]
 800b446:	464b      	mov	r3, r9
 800b448:	4621      	mov	r1, r4
 800b44a:	4640      	mov	r0, r8
 800b44c:	f8cd a000 	str.w	sl, [sp]
 800b450:	aa03      	add	r2, sp, #12
 800b452:	f7ff fee3 	bl	800b21c <_printf_common>
 800b456:	3001      	adds	r0, #1
 800b458:	d14a      	bne.n	800b4f0 <_printf_i+0x1f0>
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	b004      	add	sp, #16
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	f043 0320 	orr.w	r3, r3, #32
 800b46a:	6023      	str	r3, [r4, #0]
 800b46c:	2778      	movs	r7, #120	@ 0x78
 800b46e:	4832      	ldr	r0, [pc, #200]	@ (800b538 <_printf_i+0x238>)
 800b470:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b474:	6823      	ldr	r3, [r4, #0]
 800b476:	6831      	ldr	r1, [r6, #0]
 800b478:	061f      	lsls	r7, r3, #24
 800b47a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b47e:	d402      	bmi.n	800b486 <_printf_i+0x186>
 800b480:	065f      	lsls	r7, r3, #25
 800b482:	bf48      	it	mi
 800b484:	b2ad      	uxthmi	r5, r5
 800b486:	6031      	str	r1, [r6, #0]
 800b488:	07d9      	lsls	r1, r3, #31
 800b48a:	bf44      	itt	mi
 800b48c:	f043 0320 	orrmi.w	r3, r3, #32
 800b490:	6023      	strmi	r3, [r4, #0]
 800b492:	b11d      	cbz	r5, 800b49c <_printf_i+0x19c>
 800b494:	2310      	movs	r3, #16
 800b496:	e7ad      	b.n	800b3f4 <_printf_i+0xf4>
 800b498:	4826      	ldr	r0, [pc, #152]	@ (800b534 <_printf_i+0x234>)
 800b49a:	e7e9      	b.n	800b470 <_printf_i+0x170>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	f023 0320 	bic.w	r3, r3, #32
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	e7f6      	b.n	800b494 <_printf_i+0x194>
 800b4a6:	4616      	mov	r6, r2
 800b4a8:	e7bd      	b.n	800b426 <_printf_i+0x126>
 800b4aa:	6833      	ldr	r3, [r6, #0]
 800b4ac:	6825      	ldr	r5, [r4, #0]
 800b4ae:	1d18      	adds	r0, r3, #4
 800b4b0:	6961      	ldr	r1, [r4, #20]
 800b4b2:	6030      	str	r0, [r6, #0]
 800b4b4:	062e      	lsls	r6, r5, #24
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	d501      	bpl.n	800b4be <_printf_i+0x1be>
 800b4ba:	6019      	str	r1, [r3, #0]
 800b4bc:	e002      	b.n	800b4c4 <_printf_i+0x1c4>
 800b4be:	0668      	lsls	r0, r5, #25
 800b4c0:	d5fb      	bpl.n	800b4ba <_printf_i+0x1ba>
 800b4c2:	8019      	strh	r1, [r3, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4616      	mov	r6, r2
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	e7bc      	b.n	800b446 <_printf_i+0x146>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	1d1a      	adds	r2, r3, #4
 800b4d2:	6032      	str	r2, [r6, #0]
 800b4d4:	681e      	ldr	r6, [r3, #0]
 800b4d6:	6862      	ldr	r2, [r4, #4]
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f000 fc16 	bl	800bd0a <memchr>
 800b4de:	b108      	cbz	r0, 800b4e4 <_printf_i+0x1e4>
 800b4e0:	1b80      	subs	r0, r0, r6
 800b4e2:	6060      	str	r0, [r4, #4]
 800b4e4:	6863      	ldr	r3, [r4, #4]
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ee:	e7aa      	b.n	800b446 <_printf_i+0x146>
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	6923      	ldr	r3, [r4, #16]
 800b4f8:	47d0      	blx	sl
 800b4fa:	3001      	adds	r0, #1
 800b4fc:	d0ad      	beq.n	800b45a <_printf_i+0x15a>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	079b      	lsls	r3, r3, #30
 800b502:	d413      	bmi.n	800b52c <_printf_i+0x22c>
 800b504:	68e0      	ldr	r0, [r4, #12]
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	4298      	cmp	r0, r3
 800b50a:	bfb8      	it	lt
 800b50c:	4618      	movlt	r0, r3
 800b50e:	e7a6      	b.n	800b45e <_printf_i+0x15e>
 800b510:	2301      	movs	r3, #1
 800b512:	4632      	mov	r2, r6
 800b514:	4649      	mov	r1, r9
 800b516:	4640      	mov	r0, r8
 800b518:	47d0      	blx	sl
 800b51a:	3001      	adds	r0, #1
 800b51c:	d09d      	beq.n	800b45a <_printf_i+0x15a>
 800b51e:	3501      	adds	r5, #1
 800b520:	68e3      	ldr	r3, [r4, #12]
 800b522:	9903      	ldr	r1, [sp, #12]
 800b524:	1a5b      	subs	r3, r3, r1
 800b526:	42ab      	cmp	r3, r5
 800b528:	dcf2      	bgt.n	800b510 <_printf_i+0x210>
 800b52a:	e7eb      	b.n	800b504 <_printf_i+0x204>
 800b52c:	2500      	movs	r5, #0
 800b52e:	f104 0619 	add.w	r6, r4, #25
 800b532:	e7f5      	b.n	800b520 <_printf_i+0x220>
 800b534:	0800f482 	.word	0x0800f482
 800b538:	0800f493 	.word	0x0800f493

0800b53c <_scanf_float>:
 800b53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b540:	b087      	sub	sp, #28
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	688b      	ldr	r3, [r1, #8]
 800b546:	4691      	mov	r9, r2
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b54e:	bf82      	ittt	hi
 800b550:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b554:	eb03 0b05 	addhi.w	fp, r3, r5
 800b558:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b55c:	460a      	mov	r2, r1
 800b55e:	f04f 0500 	mov.w	r5, #0
 800b562:	bf88      	it	hi
 800b564:	608b      	strhi	r3, [r1, #8]
 800b566:	680b      	ldr	r3, [r1, #0]
 800b568:	4680      	mov	r8, r0
 800b56a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b56e:	f842 3b1c 	str.w	r3, [r2], #28
 800b572:	460c      	mov	r4, r1
 800b574:	bf98      	it	ls
 800b576:	f04f 0b00 	movls.w	fp, #0
 800b57a:	4616      	mov	r6, r2
 800b57c:	46aa      	mov	sl, r5
 800b57e:	462f      	mov	r7, r5
 800b580:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	9502      	str	r5, [sp, #8]
 800b588:	68a2      	ldr	r2, [r4, #8]
 800b58a:	b15a      	cbz	r2, 800b5a4 <_scanf_float+0x68>
 800b58c:	f8d9 3000 	ldr.w	r3, [r9]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b4e      	cmp	r3, #78	@ 0x4e
 800b594:	d862      	bhi.n	800b65c <_scanf_float+0x120>
 800b596:	2b40      	cmp	r3, #64	@ 0x40
 800b598:	d83a      	bhi.n	800b610 <_scanf_float+0xd4>
 800b59a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b59e:	b2c8      	uxtb	r0, r1
 800b5a0:	280e      	cmp	r0, #14
 800b5a2:	d938      	bls.n	800b616 <_scanf_float+0xda>
 800b5a4:	b11f      	cbz	r7, 800b5ae <_scanf_float+0x72>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5b2:	f1ba 0f01 	cmp.w	sl, #1
 800b5b6:	f200 8114 	bhi.w	800b7e2 <_scanf_float+0x2a6>
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	429e      	cmp	r6, r3
 800b5be:	f200 8105 	bhi.w	800b7cc <_scanf_float+0x290>
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	b007      	add	sp, #28
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b5ce:	2a0d      	cmp	r2, #13
 800b5d0:	d8e8      	bhi.n	800b5a4 <_scanf_float+0x68>
 800b5d2:	a101      	add	r1, pc, #4	@ (adr r1, 800b5d8 <_scanf_float+0x9c>)
 800b5d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5d8:	0800b721 	.word	0x0800b721
 800b5dc:	0800b5a5 	.word	0x0800b5a5
 800b5e0:	0800b5a5 	.word	0x0800b5a5
 800b5e4:	0800b5a5 	.word	0x0800b5a5
 800b5e8:	0800b77d 	.word	0x0800b77d
 800b5ec:	0800b757 	.word	0x0800b757
 800b5f0:	0800b5a5 	.word	0x0800b5a5
 800b5f4:	0800b5a5 	.word	0x0800b5a5
 800b5f8:	0800b72f 	.word	0x0800b72f
 800b5fc:	0800b5a5 	.word	0x0800b5a5
 800b600:	0800b5a5 	.word	0x0800b5a5
 800b604:	0800b5a5 	.word	0x0800b5a5
 800b608:	0800b5a5 	.word	0x0800b5a5
 800b60c:	0800b6eb 	.word	0x0800b6eb
 800b610:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b614:	e7db      	b.n	800b5ce <_scanf_float+0x92>
 800b616:	290e      	cmp	r1, #14
 800b618:	d8c4      	bhi.n	800b5a4 <_scanf_float+0x68>
 800b61a:	a001      	add	r0, pc, #4	@ (adr r0, 800b620 <_scanf_float+0xe4>)
 800b61c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b620:	0800b6db 	.word	0x0800b6db
 800b624:	0800b5a5 	.word	0x0800b5a5
 800b628:	0800b6db 	.word	0x0800b6db
 800b62c:	0800b76b 	.word	0x0800b76b
 800b630:	0800b5a5 	.word	0x0800b5a5
 800b634:	0800b67d 	.word	0x0800b67d
 800b638:	0800b6c1 	.word	0x0800b6c1
 800b63c:	0800b6c1 	.word	0x0800b6c1
 800b640:	0800b6c1 	.word	0x0800b6c1
 800b644:	0800b6c1 	.word	0x0800b6c1
 800b648:	0800b6c1 	.word	0x0800b6c1
 800b64c:	0800b6c1 	.word	0x0800b6c1
 800b650:	0800b6c1 	.word	0x0800b6c1
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b6c1 	.word	0x0800b6c1
 800b65c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b65e:	d809      	bhi.n	800b674 <_scanf_float+0x138>
 800b660:	2b60      	cmp	r3, #96	@ 0x60
 800b662:	d8b2      	bhi.n	800b5ca <_scanf_float+0x8e>
 800b664:	2b54      	cmp	r3, #84	@ 0x54
 800b666:	d07b      	beq.n	800b760 <_scanf_float+0x224>
 800b668:	2b59      	cmp	r3, #89	@ 0x59
 800b66a:	d19b      	bne.n	800b5a4 <_scanf_float+0x68>
 800b66c:	2d07      	cmp	r5, #7
 800b66e:	d199      	bne.n	800b5a4 <_scanf_float+0x68>
 800b670:	2508      	movs	r5, #8
 800b672:	e02f      	b.n	800b6d4 <_scanf_float+0x198>
 800b674:	2b74      	cmp	r3, #116	@ 0x74
 800b676:	d073      	beq.n	800b760 <_scanf_float+0x224>
 800b678:	2b79      	cmp	r3, #121	@ 0x79
 800b67a:	e7f6      	b.n	800b66a <_scanf_float+0x12e>
 800b67c:	6821      	ldr	r1, [r4, #0]
 800b67e:	05c8      	lsls	r0, r1, #23
 800b680:	d51e      	bpl.n	800b6c0 <_scanf_float+0x184>
 800b682:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b686:	6021      	str	r1, [r4, #0]
 800b688:	3701      	adds	r7, #1
 800b68a:	f1bb 0f00 	cmp.w	fp, #0
 800b68e:	d003      	beq.n	800b698 <_scanf_float+0x15c>
 800b690:	3201      	adds	r2, #1
 800b692:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b696:	60a2      	str	r2, [r4, #8]
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	60a3      	str	r3, [r4, #8]
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	6123      	str	r3, [r4, #16]
 800b6a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f8c9 3004 	str.w	r3, [r9, #4]
 800b6b0:	f340 8083 	ble.w	800b7ba <_scanf_float+0x27e>
 800b6b4:	f8d9 3000 	ldr.w	r3, [r9]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	f8c9 3000 	str.w	r3, [r9]
 800b6be:	e763      	b.n	800b588 <_scanf_float+0x4c>
 800b6c0:	eb1a 0105 	adds.w	r1, sl, r5
 800b6c4:	f47f af6e 	bne.w	800b5a4 <_scanf_float+0x68>
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	468a      	mov	sl, r1
 800b6cc:	6822      	ldr	r2, [r4, #0]
 800b6ce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b6d8:	e7de      	b.n	800b698 <_scanf_float+0x15c>
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	0610      	lsls	r0, r2, #24
 800b6de:	f57f af61 	bpl.w	800b5a4 <_scanf_float+0x68>
 800b6e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6e6:	6022      	str	r2, [r4, #0]
 800b6e8:	e7f4      	b.n	800b6d4 <_scanf_float+0x198>
 800b6ea:	f1ba 0f00 	cmp.w	sl, #0
 800b6ee:	d10c      	bne.n	800b70a <_scanf_float+0x1ce>
 800b6f0:	b977      	cbnz	r7, 800b710 <_scanf_float+0x1d4>
 800b6f2:	6822      	ldr	r2, [r4, #0]
 800b6f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6fc:	d108      	bne.n	800b710 <_scanf_float+0x1d4>
 800b6fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b702:	f04f 0a01 	mov.w	sl, #1
 800b706:	6022      	str	r2, [r4, #0]
 800b708:	e7e4      	b.n	800b6d4 <_scanf_float+0x198>
 800b70a:	f1ba 0f02 	cmp.w	sl, #2
 800b70e:	d051      	beq.n	800b7b4 <_scanf_float+0x278>
 800b710:	2d01      	cmp	r5, #1
 800b712:	d002      	beq.n	800b71a <_scanf_float+0x1de>
 800b714:	2d04      	cmp	r5, #4
 800b716:	f47f af45 	bne.w	800b5a4 <_scanf_float+0x68>
 800b71a:	3501      	adds	r5, #1
 800b71c:	b2ed      	uxtb	r5, r5
 800b71e:	e7d9      	b.n	800b6d4 <_scanf_float+0x198>
 800b720:	f1ba 0f01 	cmp.w	sl, #1
 800b724:	f47f af3e 	bne.w	800b5a4 <_scanf_float+0x68>
 800b728:	f04f 0a02 	mov.w	sl, #2
 800b72c:	e7d2      	b.n	800b6d4 <_scanf_float+0x198>
 800b72e:	b975      	cbnz	r5, 800b74e <_scanf_float+0x212>
 800b730:	2f00      	cmp	r7, #0
 800b732:	f47f af38 	bne.w	800b5a6 <_scanf_float+0x6a>
 800b736:	6822      	ldr	r2, [r4, #0]
 800b738:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b73c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b740:	f040 80ff 	bne.w	800b942 <_scanf_float+0x406>
 800b744:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b748:	2501      	movs	r5, #1
 800b74a:	6022      	str	r2, [r4, #0]
 800b74c:	e7c2      	b.n	800b6d4 <_scanf_float+0x198>
 800b74e:	2d03      	cmp	r5, #3
 800b750:	d0e3      	beq.n	800b71a <_scanf_float+0x1de>
 800b752:	2d05      	cmp	r5, #5
 800b754:	e7df      	b.n	800b716 <_scanf_float+0x1da>
 800b756:	2d02      	cmp	r5, #2
 800b758:	f47f af24 	bne.w	800b5a4 <_scanf_float+0x68>
 800b75c:	2503      	movs	r5, #3
 800b75e:	e7b9      	b.n	800b6d4 <_scanf_float+0x198>
 800b760:	2d06      	cmp	r5, #6
 800b762:	f47f af1f 	bne.w	800b5a4 <_scanf_float+0x68>
 800b766:	2507      	movs	r5, #7
 800b768:	e7b4      	b.n	800b6d4 <_scanf_float+0x198>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	0591      	lsls	r1, r2, #22
 800b76e:	f57f af19 	bpl.w	800b5a4 <_scanf_float+0x68>
 800b772:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b776:	6022      	str	r2, [r4, #0]
 800b778:	9702      	str	r7, [sp, #8]
 800b77a:	e7ab      	b.n	800b6d4 <_scanf_float+0x198>
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b782:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b786:	d005      	beq.n	800b794 <_scanf_float+0x258>
 800b788:	0550      	lsls	r0, r2, #21
 800b78a:	f57f af0b 	bpl.w	800b5a4 <_scanf_float+0x68>
 800b78e:	2f00      	cmp	r7, #0
 800b790:	f000 80d7 	beq.w	800b942 <_scanf_float+0x406>
 800b794:	0591      	lsls	r1, r2, #22
 800b796:	bf58      	it	pl
 800b798:	9902      	ldrpl	r1, [sp, #8]
 800b79a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b79e:	bf58      	it	pl
 800b7a0:	1a79      	subpl	r1, r7, r1
 800b7a2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b7a6:	f04f 0700 	mov.w	r7, #0
 800b7aa:	bf58      	it	pl
 800b7ac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7b0:	6022      	str	r2, [r4, #0]
 800b7b2:	e78f      	b.n	800b6d4 <_scanf_float+0x198>
 800b7b4:	f04f 0a03 	mov.w	sl, #3
 800b7b8:	e78c      	b.n	800b6d4 <_scanf_float+0x198>
 800b7ba:	4649      	mov	r1, r9
 800b7bc:	4640      	mov	r0, r8
 800b7be:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7c2:	4798      	blx	r3
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f43f aedf 	beq.w	800b588 <_scanf_float+0x4c>
 800b7ca:	e6eb      	b.n	800b5a4 <_scanf_float+0x68>
 800b7cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7d0:	464a      	mov	r2, r9
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7d8:	4798      	blx	r3
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	e6eb      	b.n	800b5ba <_scanf_float+0x7e>
 800b7e2:	1e6b      	subs	r3, r5, #1
 800b7e4:	2b06      	cmp	r3, #6
 800b7e6:	d824      	bhi.n	800b832 <_scanf_float+0x2f6>
 800b7e8:	2d02      	cmp	r5, #2
 800b7ea:	d836      	bhi.n	800b85a <_scanf_float+0x31e>
 800b7ec:	9b01      	ldr	r3, [sp, #4]
 800b7ee:	429e      	cmp	r6, r3
 800b7f0:	f67f aee7 	bls.w	800b5c2 <_scanf_float+0x86>
 800b7f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7f8:	464a      	mov	r2, r9
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b800:	4798      	blx	r3
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	3b01      	subs	r3, #1
 800b806:	6123      	str	r3, [r4, #16]
 800b808:	e7f0      	b.n	800b7ec <_scanf_float+0x2b0>
 800b80a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b80e:	464a      	mov	r2, r9
 800b810:	4640      	mov	r0, r8
 800b812:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b816:	4798      	blx	r3
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b822:	fa5f fa8a 	uxtb.w	sl, sl
 800b826:	f1ba 0f02 	cmp.w	sl, #2
 800b82a:	d1ee      	bne.n	800b80a <_scanf_float+0x2ce>
 800b82c:	3d03      	subs	r5, #3
 800b82e:	b2ed      	uxtb	r5, r5
 800b830:	1b76      	subs	r6, r6, r5
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	05da      	lsls	r2, r3, #23
 800b836:	d530      	bpl.n	800b89a <_scanf_float+0x35e>
 800b838:	055b      	lsls	r3, r3, #21
 800b83a:	d511      	bpl.n	800b860 <_scanf_float+0x324>
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	429e      	cmp	r6, r3
 800b840:	f67f aebf 	bls.w	800b5c2 <_scanf_float+0x86>
 800b844:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b848:	464a      	mov	r2, r9
 800b84a:	4640      	mov	r0, r8
 800b84c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b850:	4798      	blx	r3
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	3b01      	subs	r3, #1
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	e7f0      	b.n	800b83c <_scanf_float+0x300>
 800b85a:	46aa      	mov	sl, r5
 800b85c:	46b3      	mov	fp, r6
 800b85e:	e7de      	b.n	800b81e <_scanf_float+0x2e2>
 800b860:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	2965      	cmp	r1, #101	@ 0x65
 800b868:	f103 33ff 	add.w	r3, r3, #4294967295
 800b86c:	f106 35ff 	add.w	r5, r6, #4294967295
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	d00c      	beq.n	800b88e <_scanf_float+0x352>
 800b874:	2945      	cmp	r1, #69	@ 0x45
 800b876:	d00a      	beq.n	800b88e <_scanf_float+0x352>
 800b878:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b87c:	464a      	mov	r2, r9
 800b87e:	4640      	mov	r0, r8
 800b880:	4798      	blx	r3
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b888:	3b01      	subs	r3, #1
 800b88a:	1eb5      	subs	r5, r6, #2
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	464a      	mov	r2, r9
 800b890:	4640      	mov	r0, r8
 800b892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b896:	4798      	blx	r3
 800b898:	462e      	mov	r6, r5
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	f012 0210 	ands.w	r2, r2, #16
 800b8a0:	d001      	beq.n	800b8a6 <_scanf_float+0x36a>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e68e      	b.n	800b5c4 <_scanf_float+0x88>
 800b8a6:	7032      	strb	r2, [r6, #0]
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b8ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8b2:	d125      	bne.n	800b900 <_scanf_float+0x3c4>
 800b8b4:	9b02      	ldr	r3, [sp, #8]
 800b8b6:	429f      	cmp	r7, r3
 800b8b8:	d00a      	beq.n	800b8d0 <_scanf_float+0x394>
 800b8ba:	1bda      	subs	r2, r3, r7
 800b8bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b8c0:	429e      	cmp	r6, r3
 800b8c2:	bf28      	it	cs
 800b8c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	491f      	ldr	r1, [pc, #124]	@ (800b948 <_scanf_float+0x40c>)
 800b8cc:	f000 f938 	bl	800bb40 <siprintf>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	9901      	ldr	r1, [sp, #4]
 800b8d6:	f002 fc1f 	bl	800e118 <_strtod_r>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f015 0f02 	tst.w	r5, #2
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	f103 0204 	add.w	r2, r3, #4
 800b8ec:	d015      	beq.n	800b91a <_scanf_float+0x3de>
 800b8ee:	9903      	ldr	r1, [sp, #12]
 800b8f0:	600a      	str	r2, [r1, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	e9c3 6700 	strd	r6, r7, [r3]
 800b8f8:	68e3      	ldr	r3, [r4, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60e3      	str	r3, [r4, #12]
 800b8fe:	e7d0      	b.n	800b8a2 <_scanf_float+0x366>
 800b900:	9b04      	ldr	r3, [sp, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0e4      	beq.n	800b8d0 <_scanf_float+0x394>
 800b906:	9905      	ldr	r1, [sp, #20]
 800b908:	230a      	movs	r3, #10
 800b90a:	4640      	mov	r0, r8
 800b90c:	3101      	adds	r1, #1
 800b90e:	f002 fc83 	bl	800e218 <_strtol_r>
 800b912:	9b04      	ldr	r3, [sp, #16]
 800b914:	9e05      	ldr	r6, [sp, #20]
 800b916:	1ac2      	subs	r2, r0, r3
 800b918:	e7d0      	b.n	800b8bc <_scanf_float+0x380>
 800b91a:	076d      	lsls	r5, r5, #29
 800b91c:	d4e7      	bmi.n	800b8ee <_scanf_float+0x3b2>
 800b91e:	9d03      	ldr	r5, [sp, #12]
 800b920:	602a      	str	r2, [r5, #0]
 800b922:	681d      	ldr	r5, [r3, #0]
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	f7f5 f870 	bl	8000a0c <__aeabi_dcmpun>
 800b92c:	b120      	cbz	r0, 800b938 <_scanf_float+0x3fc>
 800b92e:	4807      	ldr	r0, [pc, #28]	@ (800b94c <_scanf_float+0x410>)
 800b930:	f000 f9fa 	bl	800bd28 <nanf>
 800b934:	6028      	str	r0, [r5, #0]
 800b936:	e7df      	b.n	800b8f8 <_scanf_float+0x3bc>
 800b938:	4630      	mov	r0, r6
 800b93a:	4639      	mov	r1, r7
 800b93c:	f7f5 f8c4 	bl	8000ac8 <__aeabi_d2f>
 800b940:	e7f8      	b.n	800b934 <_scanf_float+0x3f8>
 800b942:	2700      	movs	r7, #0
 800b944:	e633      	b.n	800b5ae <_scanf_float+0x72>
 800b946:	bf00      	nop
 800b948:	0800f4a4 	.word	0x0800f4a4
 800b94c:	0800f5e5 	.word	0x0800f5e5

0800b950 <std>:
 800b950:	2300      	movs	r3, #0
 800b952:	b510      	push	{r4, lr}
 800b954:	4604      	mov	r4, r0
 800b956:	e9c0 3300 	strd	r3, r3, [r0]
 800b95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b95e:	6083      	str	r3, [r0, #8]
 800b960:	8181      	strh	r1, [r0, #12]
 800b962:	6643      	str	r3, [r0, #100]	@ 0x64
 800b964:	81c2      	strh	r2, [r0, #14]
 800b966:	6183      	str	r3, [r0, #24]
 800b968:	4619      	mov	r1, r3
 800b96a:	2208      	movs	r2, #8
 800b96c:	305c      	adds	r0, #92	@ 0x5c
 800b96e:	f000 f94c 	bl	800bc0a <memset>
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <std+0x58>)
 800b974:	6224      	str	r4, [r4, #32]
 800b976:	6263      	str	r3, [r4, #36]	@ 0x24
 800b978:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <std+0x5c>)
 800b97a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b97c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b0 <std+0x60>)
 800b97e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b980:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b4 <std+0x64>)
 800b982:	6323      	str	r3, [r4, #48]	@ 0x30
 800b984:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b8 <std+0x68>)
 800b986:	429c      	cmp	r4, r3
 800b988:	d006      	beq.n	800b998 <std+0x48>
 800b98a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b98e:	4294      	cmp	r4, r2
 800b990:	d002      	beq.n	800b998 <std+0x48>
 800b992:	33d0      	adds	r3, #208	@ 0xd0
 800b994:	429c      	cmp	r4, r3
 800b996:	d105      	bne.n	800b9a4 <std+0x54>
 800b998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f000 b9b0 	b.w	800bd04 <__retarget_lock_init_recursive>
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800bb85 	.word	0x0800bb85
 800b9ac:	0800bba7 	.word	0x0800bba7
 800b9b0:	0800bbdf 	.word	0x0800bbdf
 800b9b4:	0800bc03 	.word	0x0800bc03
 800b9b8:	200015d4 	.word	0x200015d4

0800b9bc <stdio_exit_handler>:
 800b9bc:	4a02      	ldr	r2, [pc, #8]	@ (800b9c8 <stdio_exit_handler+0xc>)
 800b9be:	4903      	ldr	r1, [pc, #12]	@ (800b9cc <stdio_exit_handler+0x10>)
 800b9c0:	4803      	ldr	r0, [pc, #12]	@ (800b9d0 <stdio_exit_handler+0x14>)
 800b9c2:	f000 b869 	b.w	800ba98 <_fwalk_sglue>
 800b9c6:	bf00      	nop
 800b9c8:	20000180 	.word	0x20000180
 800b9cc:	0800e5cd 	.word	0x0800e5cd
 800b9d0:	20000190 	.word	0x20000190

0800b9d4 <cleanup_stdio>:
 800b9d4:	6841      	ldr	r1, [r0, #4]
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba08 <cleanup_stdio+0x34>)
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	4604      	mov	r4, r0
 800b9de:	d001      	beq.n	800b9e4 <cleanup_stdio+0x10>
 800b9e0:	f002 fdf4 	bl	800e5cc <_fflush_r>
 800b9e4:	68a1      	ldr	r1, [r4, #8]
 800b9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ba0c <cleanup_stdio+0x38>)
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	d002      	beq.n	800b9f2 <cleanup_stdio+0x1e>
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f002 fded 	bl	800e5cc <_fflush_r>
 800b9f2:	68e1      	ldr	r1, [r4, #12]
 800b9f4:	4b06      	ldr	r3, [pc, #24]	@ (800ba10 <cleanup_stdio+0x3c>)
 800b9f6:	4299      	cmp	r1, r3
 800b9f8:	d004      	beq.n	800ba04 <cleanup_stdio+0x30>
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba00:	f002 bde4 	b.w	800e5cc <_fflush_r>
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	bf00      	nop
 800ba08:	200015d4 	.word	0x200015d4
 800ba0c:	2000163c 	.word	0x2000163c
 800ba10:	200016a4 	.word	0x200016a4

0800ba14 <global_stdio_init.part.0>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	4b0b      	ldr	r3, [pc, #44]	@ (800ba44 <global_stdio_init.part.0+0x30>)
 800ba18:	4c0b      	ldr	r4, [pc, #44]	@ (800ba48 <global_stdio_init.part.0+0x34>)
 800ba1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba4c <global_stdio_init.part.0+0x38>)
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	2104      	movs	r1, #4
 800ba22:	2200      	movs	r2, #0
 800ba24:	f7ff ff94 	bl	800b950 <std>
 800ba28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	2109      	movs	r1, #9
 800ba30:	f7ff ff8e 	bl	800b950 <std>
 800ba34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba38:	2202      	movs	r2, #2
 800ba3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba3e:	2112      	movs	r1, #18
 800ba40:	f7ff bf86 	b.w	800b950 <std>
 800ba44:	2000170c 	.word	0x2000170c
 800ba48:	200015d4 	.word	0x200015d4
 800ba4c:	0800b9bd 	.word	0x0800b9bd

0800ba50 <__sfp_lock_acquire>:
 800ba50:	4801      	ldr	r0, [pc, #4]	@ (800ba58 <__sfp_lock_acquire+0x8>)
 800ba52:	f000 b958 	b.w	800bd06 <__retarget_lock_acquire_recursive>
 800ba56:	bf00      	nop
 800ba58:	20001715 	.word	0x20001715

0800ba5c <__sfp_lock_release>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	@ (800ba64 <__sfp_lock_release+0x8>)
 800ba5e:	f000 b953 	b.w	800bd08 <__retarget_lock_release_recursive>
 800ba62:	bf00      	nop
 800ba64:	20001715 	.word	0x20001715

0800ba68 <__sinit>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f7ff fff0 	bl	800ba50 <__sfp_lock_acquire>
 800ba70:	6a23      	ldr	r3, [r4, #32]
 800ba72:	b11b      	cbz	r3, 800ba7c <__sinit+0x14>
 800ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba78:	f7ff bff0 	b.w	800ba5c <__sfp_lock_release>
 800ba7c:	4b04      	ldr	r3, [pc, #16]	@ (800ba90 <__sinit+0x28>)
 800ba7e:	6223      	str	r3, [r4, #32]
 800ba80:	4b04      	ldr	r3, [pc, #16]	@ (800ba94 <__sinit+0x2c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f5      	bne.n	800ba74 <__sinit+0xc>
 800ba88:	f7ff ffc4 	bl	800ba14 <global_stdio_init.part.0>
 800ba8c:	e7f2      	b.n	800ba74 <__sinit+0xc>
 800ba8e:	bf00      	nop
 800ba90:	0800b9d5 	.word	0x0800b9d5
 800ba94:	2000170c 	.word	0x2000170c

0800ba98 <_fwalk_sglue>:
 800ba98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	4688      	mov	r8, r1
 800baa0:	4614      	mov	r4, r2
 800baa2:	2600      	movs	r6, #0
 800baa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baa8:	f1b9 0901 	subs.w	r9, r9, #1
 800baac:	d505      	bpl.n	800baba <_fwalk_sglue+0x22>
 800baae:	6824      	ldr	r4, [r4, #0]
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	d1f7      	bne.n	800baa4 <_fwalk_sglue+0xc>
 800bab4:	4630      	mov	r0, r6
 800bab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baba:	89ab      	ldrh	r3, [r5, #12]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d907      	bls.n	800bad0 <_fwalk_sglue+0x38>
 800bac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bac4:	3301      	adds	r3, #1
 800bac6:	d003      	beq.n	800bad0 <_fwalk_sglue+0x38>
 800bac8:	4629      	mov	r1, r5
 800baca:	4638      	mov	r0, r7
 800bacc:	47c0      	blx	r8
 800bace:	4306      	orrs	r6, r0
 800bad0:	3568      	adds	r5, #104	@ 0x68
 800bad2:	e7e9      	b.n	800baa8 <_fwalk_sglue+0x10>

0800bad4 <sniprintf>:
 800bad4:	b40c      	push	{r2, r3}
 800bad6:	b530      	push	{r4, r5, lr}
 800bad8:	4b18      	ldr	r3, [pc, #96]	@ (800bb3c <sniprintf+0x68>)
 800bada:	1e0c      	subs	r4, r1, #0
 800badc:	681d      	ldr	r5, [r3, #0]
 800bade:	b09d      	sub	sp, #116	@ 0x74
 800bae0:	da08      	bge.n	800baf4 <sniprintf+0x20>
 800bae2:	238b      	movs	r3, #139	@ 0x8b
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	b01d      	add	sp, #116	@ 0x74
 800baec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baf0:	b002      	add	sp, #8
 800baf2:	4770      	bx	lr
 800baf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800baf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bafc:	f04f 0300 	mov.w	r3, #0
 800bb00:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bb02:	bf0c      	ite	eq
 800bb04:	4623      	moveq	r3, r4
 800bb06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	9307      	str	r3, [sp, #28]
 800bb0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb12:	9002      	str	r0, [sp, #8]
 800bb14:	9006      	str	r0, [sp, #24]
 800bb16:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	ab21      	add	r3, sp, #132	@ 0x84
 800bb1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb20:	a902      	add	r1, sp, #8
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	f002 fbd6 	bl	800e2d4 <_svfiprintf_r>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	bfbc      	itt	lt
 800bb2c:	238b      	movlt	r3, #139	@ 0x8b
 800bb2e:	602b      	strlt	r3, [r5, #0]
 800bb30:	2c00      	cmp	r4, #0
 800bb32:	d0da      	beq.n	800baea <sniprintf+0x16>
 800bb34:	2200      	movs	r2, #0
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e7d6      	b.n	800baea <sniprintf+0x16>
 800bb3c:	2000018c 	.word	0x2000018c

0800bb40 <siprintf>:
 800bb40:	b40e      	push	{r1, r2, r3}
 800bb42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb46:	b510      	push	{r4, lr}
 800bb48:	2400      	movs	r4, #0
 800bb4a:	b09d      	sub	sp, #116	@ 0x74
 800bb4c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb4e:	9002      	str	r0, [sp, #8]
 800bb50:	9006      	str	r0, [sp, #24]
 800bb52:	9107      	str	r1, [sp, #28]
 800bb54:	9104      	str	r1, [sp, #16]
 800bb56:	4809      	ldr	r0, [pc, #36]	@ (800bb7c <siprintf+0x3c>)
 800bb58:	4909      	ldr	r1, [pc, #36]	@ (800bb80 <siprintf+0x40>)
 800bb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb5e:	9105      	str	r1, [sp, #20]
 800bb60:	6800      	ldr	r0, [r0, #0]
 800bb62:	a902      	add	r1, sp, #8
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb68:	f002 fbb4 	bl	800e2d4 <_svfiprintf_r>
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	701c      	strb	r4, [r3, #0]
 800bb70:	b01d      	add	sp, #116	@ 0x74
 800bb72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb76:	b003      	add	sp, #12
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	2000018c 	.word	0x2000018c
 800bb80:	ffff0208 	.word	0xffff0208

0800bb84 <__sread>:
 800bb84:	b510      	push	{r4, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8c:	f000 f86c 	bl	800bc68 <_read_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	bfab      	itete	ge
 800bb94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb96:	89a3      	ldrhlt	r3, [r4, #12]
 800bb98:	181b      	addge	r3, r3, r0
 800bb9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb9e:	bfac      	ite	ge
 800bba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bba2:	81a3      	strhlt	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__swrite>:
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	461f      	mov	r7, r3
 800bbac:	898b      	ldrh	r3, [r1, #12]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	05db      	lsls	r3, r3, #23
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	d505      	bpl.n	800bbc4 <__swrite+0x1e>
 800bbb8:	2302      	movs	r3, #2
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc0:	f000 f840 	bl	800bc44 <_lseek_r>
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	4632      	mov	r2, r6
 800bbc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	4628      	mov	r0, r5
 800bbd0:	463b      	mov	r3, r7
 800bbd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	f000 b857 	b.w	800bc8c <_write_r>

0800bbde <__sseek>:
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe6:	f000 f82d 	bl	800bc44 <_lseek_r>
 800bbea:	1c43      	adds	r3, r0, #1
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	bf15      	itete	ne
 800bbf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bbf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bbf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bbfa:	81a3      	strheq	r3, [r4, #12]
 800bbfc:	bf18      	it	ne
 800bbfe:	81a3      	strhne	r3, [r4, #12]
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <__sclose>:
 800bc02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc06:	f000 b80d 	b.w	800bc24 <_close_r>

0800bc0a <memset>:
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d100      	bne.n	800bc14 <memset+0xa>
 800bc12:	4770      	bx	lr
 800bc14:	f803 1b01 	strb.w	r1, [r3], #1
 800bc18:	e7f9      	b.n	800bc0e <memset+0x4>
	...

0800bc1c <_localeconv_r>:
 800bc1c:	4800      	ldr	r0, [pc, #0]	@ (800bc20 <_localeconv_r+0x4>)
 800bc1e:	4770      	bx	lr
 800bc20:	200002cc 	.word	0x200002cc

0800bc24 <_close_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	2300      	movs	r3, #0
 800bc28:	4d05      	ldr	r5, [pc, #20]	@ (800bc40 <_close_r+0x1c>)
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f5 fb5b 	bl	80012ea <_close>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_close_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_close_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20001710 	.word	0x20001710

0800bc44 <_lseek_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	4d05      	ldr	r5, [pc, #20]	@ (800bc64 <_lseek_r+0x20>)
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f7f5 fb6d 	bl	8001332 <_lseek>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_lseek_r+0x1e>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_lseek_r+0x1e>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20001710 	.word	0x20001710

0800bc68 <_read_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	2200      	movs	r2, #0
 800bc72:	4d05      	ldr	r5, [pc, #20]	@ (800bc88 <_read_r+0x20>)
 800bc74:	602a      	str	r2, [r5, #0]
 800bc76:	461a      	mov	r2, r3
 800bc78:	f7f5 fafe 	bl	8001278 <_read>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d102      	bne.n	800bc86 <_read_r+0x1e>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	b103      	cbz	r3, 800bc86 <_read_r+0x1e>
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	bd38      	pop	{r3, r4, r5, pc}
 800bc88:	20001710 	.word	0x20001710

0800bc8c <_write_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	2200      	movs	r2, #0
 800bc96:	4d05      	ldr	r5, [pc, #20]	@ (800bcac <_write_r+0x20>)
 800bc98:	602a      	str	r2, [r5, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f7f5 fb09 	bl	80012b2 <_write>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_write_r+0x1e>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_write_r+0x1e>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	20001710 	.word	0x20001710

0800bcb0 <__errno>:
 800bcb0:	4b01      	ldr	r3, [pc, #4]	@ (800bcb8 <__errno+0x8>)
 800bcb2:	6818      	ldr	r0, [r3, #0]
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	2000018c 	.word	0x2000018c

0800bcbc <__libc_init_array>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	4d0c      	ldr	r5, [pc, #48]	@ (800bcf4 <__libc_init_array+0x38>)
 800bcc2:	4c0d      	ldr	r4, [pc, #52]	@ (800bcf8 <__libc_init_array+0x3c>)
 800bcc4:	1b64      	subs	r4, r4, r5
 800bcc6:	10a4      	asrs	r4, r4, #2
 800bcc8:	42a6      	cmp	r6, r4
 800bcca:	d109      	bne.n	800bce0 <__libc_init_array+0x24>
 800bccc:	f003 fb6a 	bl	800f3a4 <_init>
 800bcd0:	2600      	movs	r6, #0
 800bcd2:	4d0a      	ldr	r5, [pc, #40]	@ (800bcfc <__libc_init_array+0x40>)
 800bcd4:	4c0a      	ldr	r4, [pc, #40]	@ (800bd00 <__libc_init_array+0x44>)
 800bcd6:	1b64      	subs	r4, r4, r5
 800bcd8:	10a4      	asrs	r4, r4, #2
 800bcda:	42a6      	cmp	r6, r4
 800bcdc:	d105      	bne.n	800bcea <__libc_init_array+0x2e>
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bce4:	4798      	blx	r3
 800bce6:	3601      	adds	r6, #1
 800bce8:	e7ee      	b.n	800bcc8 <__libc_init_array+0xc>
 800bcea:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcee:	4798      	blx	r3
 800bcf0:	3601      	adds	r6, #1
 800bcf2:	e7f2      	b.n	800bcda <__libc_init_array+0x1e>
 800bcf4:	0800f8a4 	.word	0x0800f8a4
 800bcf8:	0800f8a4 	.word	0x0800f8a4
 800bcfc:	0800f8a4 	.word	0x0800f8a4
 800bd00:	0800f8a8 	.word	0x0800f8a8

0800bd04 <__retarget_lock_init_recursive>:
 800bd04:	4770      	bx	lr

0800bd06 <__retarget_lock_acquire_recursive>:
 800bd06:	4770      	bx	lr

0800bd08 <__retarget_lock_release_recursive>:
 800bd08:	4770      	bx	lr

0800bd0a <memchr>:
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	b2c9      	uxtb	r1, r1
 800bd10:	4402      	add	r2, r0
 800bd12:	4293      	cmp	r3, r2
 800bd14:	4618      	mov	r0, r3
 800bd16:	d101      	bne.n	800bd1c <memchr+0x12>
 800bd18:	2000      	movs	r0, #0
 800bd1a:	e003      	b.n	800bd24 <memchr+0x1a>
 800bd1c:	7804      	ldrb	r4, [r0, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	428c      	cmp	r4, r1
 800bd22:	d1f6      	bne.n	800bd12 <memchr+0x8>
 800bd24:	bd10      	pop	{r4, pc}
	...

0800bd28 <nanf>:
 800bd28:	4800      	ldr	r0, [pc, #0]	@ (800bd2c <nanf+0x4>)
 800bd2a:	4770      	bx	lr
 800bd2c:	7fc00000 	.word	0x7fc00000

0800bd30 <quorem>:
 800bd30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	6903      	ldr	r3, [r0, #16]
 800bd36:	690c      	ldr	r4, [r1, #16]
 800bd38:	4607      	mov	r7, r0
 800bd3a:	42a3      	cmp	r3, r4
 800bd3c:	db7e      	blt.n	800be3c <quorem+0x10c>
 800bd3e:	3c01      	subs	r4, #1
 800bd40:	00a3      	lsls	r3, r4, #2
 800bd42:	f100 0514 	add.w	r5, r0, #20
 800bd46:	f101 0814 	add.w	r8, r1, #20
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd66:	d32e      	bcc.n	800bdc6 <quorem+0x96>
 800bd68:	f04f 0a00 	mov.w	sl, #0
 800bd6c:	46c4      	mov	ip, r8
 800bd6e:	46ae      	mov	lr, r5
 800bd70:	46d3      	mov	fp, sl
 800bd72:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd76:	b298      	uxth	r0, r3
 800bd78:	fb06 a000 	mla	r0, r6, r0, sl
 800bd7c:	0c1b      	lsrs	r3, r3, #16
 800bd7e:	0c02      	lsrs	r2, r0, #16
 800bd80:	fb06 2303 	mla	r3, r6, r3, r2
 800bd84:	f8de 2000 	ldr.w	r2, [lr]
 800bd88:	b280      	uxth	r0, r0
 800bd8a:	b292      	uxth	r2, r2
 800bd8c:	1a12      	subs	r2, r2, r0
 800bd8e:	445a      	add	r2, fp
 800bd90:	f8de 0000 	ldr.w	r0, [lr]
 800bd94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bda2:	b292      	uxth	r2, r2
 800bda4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bda8:	45e1      	cmp	r9, ip
 800bdaa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdae:	f84e 2b04 	str.w	r2, [lr], #4
 800bdb2:	d2de      	bcs.n	800bd72 <quorem+0x42>
 800bdb4:	9b00      	ldr	r3, [sp, #0]
 800bdb6:	58eb      	ldr	r3, [r5, r3]
 800bdb8:	b92b      	cbnz	r3, 800bdc6 <quorem+0x96>
 800bdba:	9b01      	ldr	r3, [sp, #4]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	d32f      	bcc.n	800be24 <quorem+0xf4>
 800bdc4:	613c      	str	r4, [r7, #16]
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f001 f9c8 	bl	800d15c <__mcmp>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	db25      	blt.n	800be1c <quorem+0xec>
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bdd8:	f8d1 c000 	ldr.w	ip, [r1]
 800bddc:	fa1f fe82 	uxth.w	lr, r2
 800bde0:	fa1f f38c 	uxth.w	r3, ip
 800bde4:	eba3 030e 	sub.w	r3, r3, lr
 800bde8:	4403      	add	r3, r0
 800bdea:	0c12      	lsrs	r2, r2, #16
 800bdec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bdf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdfa:	45c1      	cmp	r9, r8
 800bdfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be00:	f841 3b04 	str.w	r3, [r1], #4
 800be04:	d2e6      	bcs.n	800bdd4 <quorem+0xa4>
 800be06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be0e:	b922      	cbnz	r2, 800be1a <quorem+0xea>
 800be10:	3b04      	subs	r3, #4
 800be12:	429d      	cmp	r5, r3
 800be14:	461a      	mov	r2, r3
 800be16:	d30b      	bcc.n	800be30 <quorem+0x100>
 800be18:	613c      	str	r4, [r7, #16]
 800be1a:	3601      	adds	r6, #1
 800be1c:	4630      	mov	r0, r6
 800be1e:	b003      	add	sp, #12
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be24:	6812      	ldr	r2, [r2, #0]
 800be26:	3b04      	subs	r3, #4
 800be28:	2a00      	cmp	r2, #0
 800be2a:	d1cb      	bne.n	800bdc4 <quorem+0x94>
 800be2c:	3c01      	subs	r4, #1
 800be2e:	e7c6      	b.n	800bdbe <quorem+0x8e>
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	3b04      	subs	r3, #4
 800be34:	2a00      	cmp	r2, #0
 800be36:	d1ef      	bne.n	800be18 <quorem+0xe8>
 800be38:	3c01      	subs	r4, #1
 800be3a:	e7ea      	b.n	800be12 <quorem+0xe2>
 800be3c:	2000      	movs	r0, #0
 800be3e:	e7ee      	b.n	800be1e <quorem+0xee>

0800be40 <_dtoa_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4614      	mov	r4, r2
 800be46:	461d      	mov	r5, r3
 800be48:	69c7      	ldr	r7, [r0, #28]
 800be4a:	b097      	sub	sp, #92	@ 0x5c
 800be4c:	4681      	mov	r9, r0
 800be4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800be52:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800be54:	b97f      	cbnz	r7, 800be76 <_dtoa_r+0x36>
 800be56:	2010      	movs	r0, #16
 800be58:	f000 fe0e 	bl	800ca78 <malloc>
 800be5c:	4602      	mov	r2, r0
 800be5e:	f8c9 001c 	str.w	r0, [r9, #28]
 800be62:	b920      	cbnz	r0, 800be6e <_dtoa_r+0x2e>
 800be64:	21ef      	movs	r1, #239	@ 0xef
 800be66:	4bac      	ldr	r3, [pc, #688]	@ (800c118 <_dtoa_r+0x2d8>)
 800be68:	48ac      	ldr	r0, [pc, #688]	@ (800c11c <_dtoa_r+0x2dc>)
 800be6a:	f002 fc27 	bl	800e6bc <__assert_func>
 800be6e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be72:	6007      	str	r7, [r0, #0]
 800be74:	60c7      	str	r7, [r0, #12]
 800be76:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be7a:	6819      	ldr	r1, [r3, #0]
 800be7c:	b159      	cbz	r1, 800be96 <_dtoa_r+0x56>
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	2301      	movs	r3, #1
 800be82:	4093      	lsls	r3, r2
 800be84:	604a      	str	r2, [r1, #4]
 800be86:	608b      	str	r3, [r1, #8]
 800be88:	4648      	mov	r0, r9
 800be8a:	f000 feeb 	bl	800cc64 <_Bfree>
 800be8e:	2200      	movs	r2, #0
 800be90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	1e2b      	subs	r3, r5, #0
 800be98:	bfaf      	iteee	ge
 800be9a:	2300      	movge	r3, #0
 800be9c:	2201      	movlt	r2, #1
 800be9e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bea2:	9307      	strlt	r3, [sp, #28]
 800bea4:	bfa8      	it	ge
 800bea6:	6033      	strge	r3, [r6, #0]
 800bea8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800beac:	4b9c      	ldr	r3, [pc, #624]	@ (800c120 <_dtoa_r+0x2e0>)
 800beae:	bfb8      	it	lt
 800beb0:	6032      	strlt	r2, [r6, #0]
 800beb2:	ea33 0308 	bics.w	r3, r3, r8
 800beb6:	d112      	bne.n	800bede <_dtoa_r+0x9e>
 800beb8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bebc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bec4:	4323      	orrs	r3, r4
 800bec6:	f000 855e 	beq.w	800c986 <_dtoa_r+0xb46>
 800beca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800becc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c124 <_dtoa_r+0x2e4>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 8560 	beq.w	800c996 <_dtoa_r+0xb56>
 800bed6:	f10a 0303 	add.w	r3, sl, #3
 800beda:	f000 bd5a 	b.w	800c992 <_dtoa_r+0xb52>
 800bede:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bee2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beea:	2200      	movs	r2, #0
 800beec:	2300      	movs	r3, #0
 800beee:	f7f4 fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 800bef2:	4607      	mov	r7, r0
 800bef4:	b158      	cbz	r0, 800bf0e <_dtoa_r+0xce>
 800bef6:	2301      	movs	r3, #1
 800bef8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800befe:	b113      	cbz	r3, 800bf06 <_dtoa_r+0xc6>
 800bf00:	4b89      	ldr	r3, [pc, #548]	@ (800c128 <_dtoa_r+0x2e8>)
 800bf02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c12c <_dtoa_r+0x2ec>
 800bf0a:	f000 bd44 	b.w	800c996 <_dtoa_r+0xb56>
 800bf0e:	ab14      	add	r3, sp, #80	@ 0x50
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	ab15      	add	r3, sp, #84	@ 0x54
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4648      	mov	r0, r9
 800bf18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf1c:	f001 fa36 	bl	800d38c <__d2b>
 800bf20:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bf24:	9003      	str	r0, [sp, #12]
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	d078      	beq.n	800c01c <_dtoa_r+0x1dc>
 800bf2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf30:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf38:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf3c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf40:	9712      	str	r7, [sp, #72]	@ 0x48
 800bf42:	4619      	mov	r1, r3
 800bf44:	2200      	movs	r2, #0
 800bf46:	4b7a      	ldr	r3, [pc, #488]	@ (800c130 <_dtoa_r+0x2f0>)
 800bf48:	f7f4 f90e 	bl	8000168 <__aeabi_dsub>
 800bf4c:	a36c      	add	r3, pc, #432	@ (adr r3, 800c100 <_dtoa_r+0x2c0>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 fac1 	bl	80004d8 <__aeabi_dmul>
 800bf56:	a36c      	add	r3, pc, #432	@ (adr r3, 800c108 <_dtoa_r+0x2c8>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 f906 	bl	800016c <__adddf3>
 800bf60:	4604      	mov	r4, r0
 800bf62:	4630      	mov	r0, r6
 800bf64:	460d      	mov	r5, r1
 800bf66:	f7f4 fa4d 	bl	8000404 <__aeabi_i2d>
 800bf6a:	a369      	add	r3, pc, #420	@ (adr r3, 800c110 <_dtoa_r+0x2d0>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 fab2 	bl	80004d8 <__aeabi_dmul>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4620      	mov	r0, r4
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	f7f4 f8f6 	bl	800016c <__adddf3>
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	f7f4 fd58 	bl	8000a38 <__aeabi_d2iz>
 800bf88:	2200      	movs	r2, #0
 800bf8a:	4607      	mov	r7, r0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4629      	mov	r1, r5
 800bf92:	f7f4 fd13 	bl	80009bc <__aeabi_dcmplt>
 800bf96:	b140      	cbz	r0, 800bfaa <_dtoa_r+0x16a>
 800bf98:	4638      	mov	r0, r7
 800bf9a:	f7f4 fa33 	bl	8000404 <__aeabi_i2d>
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	f7f4 fd01 	bl	80009a8 <__aeabi_dcmpeq>
 800bfa6:	b900      	cbnz	r0, 800bfaa <_dtoa_r+0x16a>
 800bfa8:	3f01      	subs	r7, #1
 800bfaa:	2f16      	cmp	r7, #22
 800bfac:	d854      	bhi.n	800c058 <_dtoa_r+0x218>
 800bfae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfb2:	4b60      	ldr	r3, [pc, #384]	@ (800c134 <_dtoa_r+0x2f4>)
 800bfb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 fcfe 	bl	80009bc <__aeabi_dcmplt>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d04b      	beq.n	800c05c <_dtoa_r+0x21c>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	3f01      	subs	r7, #1
 800bfc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfcc:	1b9b      	subs	r3, r3, r6
 800bfce:	1e5a      	subs	r2, r3, #1
 800bfd0:	bf49      	itett	mi
 800bfd2:	f1c3 0301 	rsbmi	r3, r3, #1
 800bfd6:	2300      	movpl	r3, #0
 800bfd8:	9304      	strmi	r3, [sp, #16]
 800bfda:	2300      	movmi	r3, #0
 800bfdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfde:	bf54      	ite	pl
 800bfe0:	9304      	strpl	r3, [sp, #16]
 800bfe2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	db3b      	blt.n	800c060 <_dtoa_r+0x220>
 800bfe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfea:	970e      	str	r7, [sp, #56]	@ 0x38
 800bfec:	443b      	add	r3, r7
 800bfee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bff0:	2300      	movs	r3, #0
 800bff2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bff6:	2b09      	cmp	r3, #9
 800bff8:	d865      	bhi.n	800c0c6 <_dtoa_r+0x286>
 800bffa:	2b05      	cmp	r3, #5
 800bffc:	bfc4      	itt	gt
 800bffe:	3b04      	subgt	r3, #4
 800c000:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c002:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c004:	bfc8      	it	gt
 800c006:	2400      	movgt	r4, #0
 800c008:	f1a3 0302 	sub.w	r3, r3, #2
 800c00c:	bfd8      	it	le
 800c00e:	2401      	movle	r4, #1
 800c010:	2b03      	cmp	r3, #3
 800c012:	d864      	bhi.n	800c0de <_dtoa_r+0x29e>
 800c014:	e8df f003 	tbb	[pc, r3]
 800c018:	2c385553 	.word	0x2c385553
 800c01c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c020:	441e      	add	r6, r3
 800c022:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c026:	2b20      	cmp	r3, #32
 800c028:	bfc1      	itttt	gt
 800c02a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c02e:	fa08 f803 	lslgt.w	r8, r8, r3
 800c032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c03a:	bfd6      	itet	le
 800c03c:	f1c3 0320 	rsble	r3, r3, #32
 800c040:	ea48 0003 	orrgt.w	r0, r8, r3
 800c044:	fa04 f003 	lslle.w	r0, r4, r3
 800c048:	f7f4 f9cc 	bl	80003e4 <__aeabi_ui2d>
 800c04c:	2201      	movs	r2, #1
 800c04e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c052:	3e01      	subs	r6, #1
 800c054:	9212      	str	r2, [sp, #72]	@ 0x48
 800c056:	e774      	b.n	800bf42 <_dtoa_r+0x102>
 800c058:	2301      	movs	r3, #1
 800c05a:	e7b5      	b.n	800bfc8 <_dtoa_r+0x188>
 800c05c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c05e:	e7b4      	b.n	800bfca <_dtoa_r+0x18a>
 800c060:	9b04      	ldr	r3, [sp, #16]
 800c062:	1bdb      	subs	r3, r3, r7
 800c064:	9304      	str	r3, [sp, #16]
 800c066:	427b      	negs	r3, r7
 800c068:	930a      	str	r3, [sp, #40]	@ 0x28
 800c06a:	2300      	movs	r3, #0
 800c06c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c06e:	e7c1      	b.n	800bff4 <_dtoa_r+0x1b4>
 800c070:	2301      	movs	r3, #1
 800c072:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c076:	eb07 0b03 	add.w	fp, r7, r3
 800c07a:	f10b 0301 	add.w	r3, fp, #1
 800c07e:	2b01      	cmp	r3, #1
 800c080:	9308      	str	r3, [sp, #32]
 800c082:	bfb8      	it	lt
 800c084:	2301      	movlt	r3, #1
 800c086:	e006      	b.n	800c096 <_dtoa_r+0x256>
 800c088:	2301      	movs	r3, #1
 800c08a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c08c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd28      	ble.n	800c0e4 <_dtoa_r+0x2a4>
 800c092:	469b      	mov	fp, r3
 800c094:	9308      	str	r3, [sp, #32]
 800c096:	2100      	movs	r1, #0
 800c098:	2204      	movs	r2, #4
 800c09a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c09e:	f102 0514 	add.w	r5, r2, #20
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	d926      	bls.n	800c0f4 <_dtoa_r+0x2b4>
 800c0a6:	6041      	str	r1, [r0, #4]
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	f000 fd9b 	bl	800cbe4 <_Balloc>
 800c0ae:	4682      	mov	sl, r0
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d143      	bne.n	800c13c <_dtoa_r+0x2fc>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c138 <_dtoa_r+0x2f8>)
 800c0bc:	e6d4      	b.n	800be68 <_dtoa_r+0x28>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e7e3      	b.n	800c08a <_dtoa_r+0x24a>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e7d5      	b.n	800c072 <_dtoa_r+0x232>
 800c0c6:	2401      	movs	r4, #1
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c0cc:	9320      	str	r3, [sp, #128]	@ 0x80
 800c0ce:	f04f 3bff 	mov.w	fp, #4294967295
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2312      	movs	r3, #18
 800c0d6:	f8cd b020 	str.w	fp, [sp, #32]
 800c0da:	9221      	str	r2, [sp, #132]	@ 0x84
 800c0dc:	e7db      	b.n	800c096 <_dtoa_r+0x256>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0e2:	e7f4      	b.n	800c0ce <_dtoa_r+0x28e>
 800c0e4:	f04f 0b01 	mov.w	fp, #1
 800c0e8:	465b      	mov	r3, fp
 800c0ea:	f8cd b020 	str.w	fp, [sp, #32]
 800c0ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c0f2:	e7d0      	b.n	800c096 <_dtoa_r+0x256>
 800c0f4:	3101      	adds	r1, #1
 800c0f6:	0052      	lsls	r2, r2, #1
 800c0f8:	e7d1      	b.n	800c09e <_dtoa_r+0x25e>
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w
 800c100:	636f4361 	.word	0x636f4361
 800c104:	3fd287a7 	.word	0x3fd287a7
 800c108:	8b60c8b3 	.word	0x8b60c8b3
 800c10c:	3fc68a28 	.word	0x3fc68a28
 800c110:	509f79fb 	.word	0x509f79fb
 800c114:	3fd34413 	.word	0x3fd34413
 800c118:	0800f4b6 	.word	0x0800f4b6
 800c11c:	0800f4cd 	.word	0x0800f4cd
 800c120:	7ff00000 	.word	0x7ff00000
 800c124:	0800f4b2 	.word	0x0800f4b2
 800c128:	0800f481 	.word	0x0800f481
 800c12c:	0800f480 	.word	0x0800f480
 800c130:	3ff80000 	.word	0x3ff80000
 800c134:	0800f680 	.word	0x0800f680
 800c138:	0800f525 	.word	0x0800f525
 800c13c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c140:	6018      	str	r0, [r3, #0]
 800c142:	9b08      	ldr	r3, [sp, #32]
 800c144:	2b0e      	cmp	r3, #14
 800c146:	f200 80a1 	bhi.w	800c28c <_dtoa_r+0x44c>
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	f000 809e 	beq.w	800c28c <_dtoa_r+0x44c>
 800c150:	2f00      	cmp	r7, #0
 800c152:	dd33      	ble.n	800c1bc <_dtoa_r+0x37c>
 800c154:	4b9c      	ldr	r3, [pc, #624]	@ (800c3c8 <_dtoa_r+0x588>)
 800c156:	f007 020f 	and.w	r2, r7, #15
 800c15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c15e:	05f8      	lsls	r0, r7, #23
 800c160:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c164:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c168:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c16c:	d516      	bpl.n	800c19c <_dtoa_r+0x35c>
 800c16e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c172:	4b96      	ldr	r3, [pc, #600]	@ (800c3cc <_dtoa_r+0x58c>)
 800c174:	2603      	movs	r6, #3
 800c176:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c17a:	f7f4 fad7 	bl	800072c <__aeabi_ddiv>
 800c17e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c182:	f004 040f 	and.w	r4, r4, #15
 800c186:	4d91      	ldr	r5, [pc, #580]	@ (800c3cc <_dtoa_r+0x58c>)
 800c188:	b954      	cbnz	r4, 800c1a0 <_dtoa_r+0x360>
 800c18a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c18e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c192:	f7f4 facb 	bl	800072c <__aeabi_ddiv>
 800c196:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c19a:	e028      	b.n	800c1ee <_dtoa_r+0x3ae>
 800c19c:	2602      	movs	r6, #2
 800c19e:	e7f2      	b.n	800c186 <_dtoa_r+0x346>
 800c1a0:	07e1      	lsls	r1, r4, #31
 800c1a2:	d508      	bpl.n	800c1b6 <_dtoa_r+0x376>
 800c1a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1ac:	f7f4 f994 	bl	80004d8 <__aeabi_dmul>
 800c1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1b4:	3601      	adds	r6, #1
 800c1b6:	1064      	asrs	r4, r4, #1
 800c1b8:	3508      	adds	r5, #8
 800c1ba:	e7e5      	b.n	800c188 <_dtoa_r+0x348>
 800c1bc:	f000 80af 	beq.w	800c31e <_dtoa_r+0x4de>
 800c1c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1c4:	427c      	negs	r4, r7
 800c1c6:	4b80      	ldr	r3, [pc, #512]	@ (800c3c8 <_dtoa_r+0x588>)
 800c1c8:	f004 020f 	and.w	r2, r4, #15
 800c1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 f980 	bl	80004d8 <__aeabi_dmul>
 800c1d8:	2602      	movs	r6, #2
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1e0:	4d7a      	ldr	r5, [pc, #488]	@ (800c3cc <_dtoa_r+0x58c>)
 800c1e2:	1124      	asrs	r4, r4, #4
 800c1e4:	2c00      	cmp	r4, #0
 800c1e6:	f040 808f 	bne.w	800c308 <_dtoa_r+0x4c8>
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1d3      	bne.n	800c196 <_dtoa_r+0x356>
 800c1ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c1f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 8094 	beq.w	800c322 <_dtoa_r+0x4e2>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	4b73      	ldr	r3, [pc, #460]	@ (800c3d0 <_dtoa_r+0x590>)
 800c202:	f7f4 fbdb 	bl	80009bc <__aeabi_dcmplt>
 800c206:	2800      	cmp	r0, #0
 800c208:	f000 808b 	beq.w	800c322 <_dtoa_r+0x4e2>
 800c20c:	9b08      	ldr	r3, [sp, #32]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8087 	beq.w	800c322 <_dtoa_r+0x4e2>
 800c214:	f1bb 0f00 	cmp.w	fp, #0
 800c218:	dd34      	ble.n	800c284 <_dtoa_r+0x444>
 800c21a:	4620      	mov	r0, r4
 800c21c:	2200      	movs	r2, #0
 800c21e:	4629      	mov	r1, r5
 800c220:	4b6c      	ldr	r3, [pc, #432]	@ (800c3d4 <_dtoa_r+0x594>)
 800c222:	f7f4 f959 	bl	80004d8 <__aeabi_dmul>
 800c226:	465c      	mov	r4, fp
 800c228:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c22c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c230:	3601      	adds	r6, #1
 800c232:	4630      	mov	r0, r6
 800c234:	f7f4 f8e6 	bl	8000404 <__aeabi_i2d>
 800c238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c23c:	f7f4 f94c 	bl	80004d8 <__aeabi_dmul>
 800c240:	2200      	movs	r2, #0
 800c242:	4b65      	ldr	r3, [pc, #404]	@ (800c3d8 <_dtoa_r+0x598>)
 800c244:	f7f3 ff92 	bl	800016c <__adddf3>
 800c248:	4605      	mov	r5, r0
 800c24a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c24e:	2c00      	cmp	r4, #0
 800c250:	d16a      	bne.n	800c328 <_dtoa_r+0x4e8>
 800c252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c256:	2200      	movs	r2, #0
 800c258:	4b60      	ldr	r3, [pc, #384]	@ (800c3dc <_dtoa_r+0x59c>)
 800c25a:	f7f3 ff85 	bl	8000168 <__aeabi_dsub>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c266:	462a      	mov	r2, r5
 800c268:	4633      	mov	r3, r6
 800c26a:	f7f4 fbc5 	bl	80009f8 <__aeabi_dcmpgt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	f040 8298 	bne.w	800c7a4 <_dtoa_r+0x964>
 800c274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c278:	462a      	mov	r2, r5
 800c27a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c27e:	f7f4 fb9d 	bl	80009bc <__aeabi_dcmplt>
 800c282:	bb38      	cbnz	r0, 800c2d4 <_dtoa_r+0x494>
 800c284:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c288:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c28c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f2c0 8157 	blt.w	800c542 <_dtoa_r+0x702>
 800c294:	2f0e      	cmp	r7, #14
 800c296:	f300 8154 	bgt.w	800c542 <_dtoa_r+0x702>
 800c29a:	4b4b      	ldr	r3, [pc, #300]	@ (800c3c8 <_dtoa_r+0x588>)
 800c29c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c2a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c2a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f280 80e5 	bge.w	800c47a <_dtoa_r+0x63a>
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f300 80e1 	bgt.w	800c47a <_dtoa_r+0x63a>
 800c2b8:	d10c      	bne.n	800c2d4 <_dtoa_r+0x494>
 800c2ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	4b46      	ldr	r3, [pc, #280]	@ (800c3dc <_dtoa_r+0x59c>)
 800c2c2:	f7f4 f909 	bl	80004d8 <__aeabi_dmul>
 800c2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ca:	f7f4 fb8b 	bl	80009e4 <__aeabi_dcmpge>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f000 8266 	beq.w	800c7a0 <_dtoa_r+0x960>
 800c2d4:	2400      	movs	r4, #0
 800c2d6:	4625      	mov	r5, r4
 800c2d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2da:	4656      	mov	r6, sl
 800c2dc:	ea6f 0803 	mvn.w	r8, r3
 800c2e0:	2700      	movs	r7, #0
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4648      	mov	r0, r9
 800c2e6:	f000 fcbd 	bl	800cc64 <_Bfree>
 800c2ea:	2d00      	cmp	r5, #0
 800c2ec:	f000 80bd 	beq.w	800c46a <_dtoa_r+0x62a>
 800c2f0:	b12f      	cbz	r7, 800c2fe <_dtoa_r+0x4be>
 800c2f2:	42af      	cmp	r7, r5
 800c2f4:	d003      	beq.n	800c2fe <_dtoa_r+0x4be>
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	4648      	mov	r0, r9
 800c2fa:	f000 fcb3 	bl	800cc64 <_Bfree>
 800c2fe:	4629      	mov	r1, r5
 800c300:	4648      	mov	r0, r9
 800c302:	f000 fcaf 	bl	800cc64 <_Bfree>
 800c306:	e0b0      	b.n	800c46a <_dtoa_r+0x62a>
 800c308:	07e2      	lsls	r2, r4, #31
 800c30a:	d505      	bpl.n	800c318 <_dtoa_r+0x4d8>
 800c30c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c310:	f7f4 f8e2 	bl	80004d8 <__aeabi_dmul>
 800c314:	2301      	movs	r3, #1
 800c316:	3601      	adds	r6, #1
 800c318:	1064      	asrs	r4, r4, #1
 800c31a:	3508      	adds	r5, #8
 800c31c:	e762      	b.n	800c1e4 <_dtoa_r+0x3a4>
 800c31e:	2602      	movs	r6, #2
 800c320:	e765      	b.n	800c1ee <_dtoa_r+0x3ae>
 800c322:	46b8      	mov	r8, r7
 800c324:	9c08      	ldr	r4, [sp, #32]
 800c326:	e784      	b.n	800c232 <_dtoa_r+0x3f2>
 800c328:	4b27      	ldr	r3, [pc, #156]	@ (800c3c8 <_dtoa_r+0x588>)
 800c32a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c334:	4454      	add	r4, sl
 800c336:	2900      	cmp	r1, #0
 800c338:	d054      	beq.n	800c3e4 <_dtoa_r+0x5a4>
 800c33a:	2000      	movs	r0, #0
 800c33c:	4928      	ldr	r1, [pc, #160]	@ (800c3e0 <_dtoa_r+0x5a0>)
 800c33e:	f7f4 f9f5 	bl	800072c <__aeabi_ddiv>
 800c342:	4633      	mov	r3, r6
 800c344:	462a      	mov	r2, r5
 800c346:	f7f3 ff0f 	bl	8000168 <__aeabi_dsub>
 800c34a:	4656      	mov	r6, sl
 800c34c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c354:	f7f4 fb70 	bl	8000a38 <__aeabi_d2iz>
 800c358:	4605      	mov	r5, r0
 800c35a:	f7f4 f853 	bl	8000404 <__aeabi_i2d>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c366:	f7f3 feff 	bl	8000168 <__aeabi_dsub>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	3530      	adds	r5, #48	@ 0x30
 800c370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c378:	f806 5b01 	strb.w	r5, [r6], #1
 800c37c:	f7f4 fb1e 	bl	80009bc <__aeabi_dcmplt>
 800c380:	2800      	cmp	r0, #0
 800c382:	d172      	bne.n	800c46a <_dtoa_r+0x62a>
 800c384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c388:	2000      	movs	r0, #0
 800c38a:	4911      	ldr	r1, [pc, #68]	@ (800c3d0 <_dtoa_r+0x590>)
 800c38c:	f7f3 feec 	bl	8000168 <__aeabi_dsub>
 800c390:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c394:	f7f4 fb12 	bl	80009bc <__aeabi_dcmplt>
 800c398:	2800      	cmp	r0, #0
 800c39a:	f040 80b4 	bne.w	800c506 <_dtoa_r+0x6c6>
 800c39e:	42a6      	cmp	r6, r4
 800c3a0:	f43f af70 	beq.w	800c284 <_dtoa_r+0x444>
 800c3a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d4 <_dtoa_r+0x594>)
 800c3ac:	f7f4 f894 	bl	80004d8 <__aeabi_dmul>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ba:	4b06      	ldr	r3, [pc, #24]	@ (800c3d4 <_dtoa_r+0x594>)
 800c3bc:	f7f4 f88c 	bl	80004d8 <__aeabi_dmul>
 800c3c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3c4:	e7c4      	b.n	800c350 <_dtoa_r+0x510>
 800c3c6:	bf00      	nop
 800c3c8:	0800f680 	.word	0x0800f680
 800c3cc:	0800f658 	.word	0x0800f658
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	40240000 	.word	0x40240000
 800c3d8:	401c0000 	.word	0x401c0000
 800c3dc:	40140000 	.word	0x40140000
 800c3e0:	3fe00000 	.word	0x3fe00000
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f7f4 f876 	bl	80004d8 <__aeabi_dmul>
 800c3ec:	4656      	mov	r6, sl
 800c3ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c3f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3f8:	f7f4 fb1e 	bl	8000a38 <__aeabi_d2iz>
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	f7f4 f801 	bl	8000404 <__aeabi_i2d>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c40a:	f7f3 fead 	bl	8000168 <__aeabi_dsub>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	3530      	adds	r5, #48	@ 0x30
 800c414:	f806 5b01 	strb.w	r5, [r6], #1
 800c418:	42a6      	cmp	r6, r4
 800c41a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c41e:	f04f 0200 	mov.w	r2, #0
 800c422:	d124      	bne.n	800c46e <_dtoa_r+0x62e>
 800c424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c428:	4bae      	ldr	r3, [pc, #696]	@ (800c6e4 <_dtoa_r+0x8a4>)
 800c42a:	f7f3 fe9f 	bl	800016c <__adddf3>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c436:	f7f4 fadf 	bl	80009f8 <__aeabi_dcmpgt>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d163      	bne.n	800c506 <_dtoa_r+0x6c6>
 800c43e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c442:	2000      	movs	r0, #0
 800c444:	49a7      	ldr	r1, [pc, #668]	@ (800c6e4 <_dtoa_r+0x8a4>)
 800c446:	f7f3 fe8f 	bl	8000168 <__aeabi_dsub>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c452:	f7f4 fab3 	bl	80009bc <__aeabi_dcmplt>
 800c456:	2800      	cmp	r0, #0
 800c458:	f43f af14 	beq.w	800c284 <_dtoa_r+0x444>
 800c45c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c45e:	1e73      	subs	r3, r6, #1
 800c460:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c466:	2b30      	cmp	r3, #48	@ 0x30
 800c468:	d0f8      	beq.n	800c45c <_dtoa_r+0x61c>
 800c46a:	4647      	mov	r7, r8
 800c46c:	e03b      	b.n	800c4e6 <_dtoa_r+0x6a6>
 800c46e:	4b9e      	ldr	r3, [pc, #632]	@ (800c6e8 <_dtoa_r+0x8a8>)
 800c470:	f7f4 f832 	bl	80004d8 <__aeabi_dmul>
 800c474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c478:	e7bc      	b.n	800c3f4 <_dtoa_r+0x5b4>
 800c47a:	4656      	mov	r6, sl
 800c47c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c484:	4620      	mov	r0, r4
 800c486:	4629      	mov	r1, r5
 800c488:	f7f4 f950 	bl	800072c <__aeabi_ddiv>
 800c48c:	f7f4 fad4 	bl	8000a38 <__aeabi_d2iz>
 800c490:	4680      	mov	r8, r0
 800c492:	f7f3 ffb7 	bl	8000404 <__aeabi_i2d>
 800c496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c49a:	f7f4 f81d 	bl	80004d8 <__aeabi_dmul>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7f3 fe5f 	bl	8000168 <__aeabi_dsub>
 800c4aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4ae:	9d08      	ldr	r5, [sp, #32]
 800c4b0:	f806 4b01 	strb.w	r4, [r6], #1
 800c4b4:	eba6 040a 	sub.w	r4, r6, sl
 800c4b8:	42a5      	cmp	r5, r4
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	d133      	bne.n	800c528 <_dtoa_r+0x6e8>
 800c4c0:	f7f3 fe54 	bl	800016c <__adddf3>
 800c4c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	f7f4 fa94 	bl	80009f8 <__aeabi_dcmpgt>
 800c4d0:	b9c0      	cbnz	r0, 800c504 <_dtoa_r+0x6c4>
 800c4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f7f4 fa65 	bl	80009a8 <__aeabi_dcmpeq>
 800c4de:	b110      	cbz	r0, 800c4e6 <_dtoa_r+0x6a6>
 800c4e0:	f018 0f01 	tst.w	r8, #1
 800c4e4:	d10e      	bne.n	800c504 <_dtoa_r+0x6c4>
 800c4e6:	4648      	mov	r0, r9
 800c4e8:	9903      	ldr	r1, [sp, #12]
 800c4ea:	f000 fbbb 	bl	800cc64 <_Bfree>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	7033      	strb	r3, [r6, #0]
 800c4f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c4f4:	3701      	adds	r7, #1
 800c4f6:	601f      	str	r7, [r3, #0]
 800c4f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 824b 	beq.w	800c996 <_dtoa_r+0xb56>
 800c500:	601e      	str	r6, [r3, #0]
 800c502:	e248      	b.n	800c996 <_dtoa_r+0xb56>
 800c504:	46b8      	mov	r8, r7
 800c506:	4633      	mov	r3, r6
 800c508:	461e      	mov	r6, r3
 800c50a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c50e:	2a39      	cmp	r2, #57	@ 0x39
 800c510:	d106      	bne.n	800c520 <_dtoa_r+0x6e0>
 800c512:	459a      	cmp	sl, r3
 800c514:	d1f8      	bne.n	800c508 <_dtoa_r+0x6c8>
 800c516:	2230      	movs	r2, #48	@ 0x30
 800c518:	f108 0801 	add.w	r8, r8, #1
 800c51c:	f88a 2000 	strb.w	r2, [sl]
 800c520:	781a      	ldrb	r2, [r3, #0]
 800c522:	3201      	adds	r2, #1
 800c524:	701a      	strb	r2, [r3, #0]
 800c526:	e7a0      	b.n	800c46a <_dtoa_r+0x62a>
 800c528:	2200      	movs	r2, #0
 800c52a:	4b6f      	ldr	r3, [pc, #444]	@ (800c6e8 <_dtoa_r+0x8a8>)
 800c52c:	f7f3 ffd4 	bl	80004d8 <__aeabi_dmul>
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	4604      	mov	r4, r0
 800c536:	460d      	mov	r5, r1
 800c538:	f7f4 fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d09f      	beq.n	800c480 <_dtoa_r+0x640>
 800c540:	e7d1      	b.n	800c4e6 <_dtoa_r+0x6a6>
 800c542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c544:	2a00      	cmp	r2, #0
 800c546:	f000 80ea 	beq.w	800c71e <_dtoa_r+0x8de>
 800c54a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c54c:	2a01      	cmp	r2, #1
 800c54e:	f300 80cd 	bgt.w	800c6ec <_dtoa_r+0x8ac>
 800c552:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c554:	2a00      	cmp	r2, #0
 800c556:	f000 80c1 	beq.w	800c6dc <_dtoa_r+0x89c>
 800c55a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c55e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c560:	9e04      	ldr	r6, [sp, #16]
 800c562:	9a04      	ldr	r2, [sp, #16]
 800c564:	2101      	movs	r1, #1
 800c566:	441a      	add	r2, r3
 800c568:	9204      	str	r2, [sp, #16]
 800c56a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c56c:	4648      	mov	r0, r9
 800c56e:	441a      	add	r2, r3
 800c570:	9209      	str	r2, [sp, #36]	@ 0x24
 800c572:	f000 fc75 	bl	800ce60 <__i2b>
 800c576:	4605      	mov	r5, r0
 800c578:	b166      	cbz	r6, 800c594 <_dtoa_r+0x754>
 800c57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	dd09      	ble.n	800c594 <_dtoa_r+0x754>
 800c580:	42b3      	cmp	r3, r6
 800c582:	bfa8      	it	ge
 800c584:	4633      	movge	r3, r6
 800c586:	9a04      	ldr	r2, [sp, #16]
 800c588:	1af6      	subs	r6, r6, r3
 800c58a:	1ad2      	subs	r2, r2, r3
 800c58c:	9204      	str	r2, [sp, #16]
 800c58e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	9309      	str	r3, [sp, #36]	@ 0x24
 800c594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c596:	b30b      	cbz	r3, 800c5dc <_dtoa_r+0x79c>
 800c598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 80c6 	beq.w	800c72c <_dtoa_r+0x8ec>
 800c5a0:	2c00      	cmp	r4, #0
 800c5a2:	f000 80c0 	beq.w	800c726 <_dtoa_r+0x8e6>
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4622      	mov	r2, r4
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	f000 fd10 	bl	800cfd0 <__pow5mult>
 800c5b0:	9a03      	ldr	r2, [sp, #12]
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	4648      	mov	r0, r9
 800c5b8:	f000 fc68 	bl	800ce8c <__multiply>
 800c5bc:	9903      	ldr	r1, [sp, #12]
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4648      	mov	r0, r9
 800c5c2:	f000 fb4f 	bl	800cc64 <_Bfree>
 800c5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5c8:	1b1b      	subs	r3, r3, r4
 800c5ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5cc:	f000 80b1 	beq.w	800c732 <_dtoa_r+0x8f2>
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5d4:	4648      	mov	r0, r9
 800c5d6:	f000 fcfb 	bl	800cfd0 <__pow5mult>
 800c5da:	9003      	str	r0, [sp, #12]
 800c5dc:	2101      	movs	r1, #1
 800c5de:	4648      	mov	r0, r9
 800c5e0:	f000 fc3e 	bl	800ce60 <__i2b>
 800c5e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f000 81d8 	beq.w	800c99e <_dtoa_r+0xb5e>
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	4648      	mov	r0, r9
 800c5f4:	f000 fcec 	bl	800cfd0 <__pow5mult>
 800c5f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	f300 809f 	bgt.w	800c740 <_dtoa_r+0x900>
 800c602:	9b06      	ldr	r3, [sp, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 8097 	bne.w	800c738 <_dtoa_r+0x8f8>
 800c60a:	9b07      	ldr	r3, [sp, #28]
 800c60c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c610:	2b00      	cmp	r3, #0
 800c612:	f040 8093 	bne.w	800c73c <_dtoa_r+0x8fc>
 800c616:	9b07      	ldr	r3, [sp, #28]
 800c618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c61c:	0d1b      	lsrs	r3, r3, #20
 800c61e:	051b      	lsls	r3, r3, #20
 800c620:	b133      	cbz	r3, 800c630 <_dtoa_r+0x7f0>
 800c622:	9b04      	ldr	r3, [sp, #16]
 800c624:	3301      	adds	r3, #1
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	3301      	adds	r3, #1
 800c62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62e:	2301      	movs	r3, #1
 800c630:	930a      	str	r3, [sp, #40]	@ 0x28
 800c632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 81b8 	beq.w	800c9aa <_dtoa_r+0xb6a>
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c640:	6918      	ldr	r0, [r3, #16]
 800c642:	f000 fbc1 	bl	800cdc8 <__hi0bits>
 800c646:	f1c0 0020 	rsb	r0, r0, #32
 800c64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64c:	4418      	add	r0, r3
 800c64e:	f010 001f 	ands.w	r0, r0, #31
 800c652:	f000 8082 	beq.w	800c75a <_dtoa_r+0x91a>
 800c656:	f1c0 0320 	rsb	r3, r0, #32
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	dd73      	ble.n	800c746 <_dtoa_r+0x906>
 800c65e:	9b04      	ldr	r3, [sp, #16]
 800c660:	f1c0 001c 	rsb	r0, r0, #28
 800c664:	4403      	add	r3, r0
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66a:	4406      	add	r6, r0
 800c66c:	4403      	add	r3, r0
 800c66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c670:	9b04      	ldr	r3, [sp, #16]
 800c672:	2b00      	cmp	r3, #0
 800c674:	dd05      	ble.n	800c682 <_dtoa_r+0x842>
 800c676:	461a      	mov	r2, r3
 800c678:	4648      	mov	r0, r9
 800c67a:	9903      	ldr	r1, [sp, #12]
 800c67c:	f000 fd02 	bl	800d084 <__lshift>
 800c680:	9003      	str	r0, [sp, #12]
 800c682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c684:	2b00      	cmp	r3, #0
 800c686:	dd05      	ble.n	800c694 <_dtoa_r+0x854>
 800c688:	4621      	mov	r1, r4
 800c68a:	461a      	mov	r2, r3
 800c68c:	4648      	mov	r0, r9
 800c68e:	f000 fcf9 	bl	800d084 <__lshift>
 800c692:	4604      	mov	r4, r0
 800c694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d061      	beq.n	800c75e <_dtoa_r+0x91e>
 800c69a:	4621      	mov	r1, r4
 800c69c:	9803      	ldr	r0, [sp, #12]
 800c69e:	f000 fd5d 	bl	800d15c <__mcmp>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	da5b      	bge.n	800c75e <_dtoa_r+0x91e>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	220a      	movs	r2, #10
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	9903      	ldr	r1, [sp, #12]
 800c6ae:	f000 fafb 	bl	800cca8 <__multadd>
 800c6b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6b4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c6b8:	9003      	str	r0, [sp, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 8177 	beq.w	800c9ae <_dtoa_r+0xb6e>
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	4648      	mov	r0, r9
 800c6c8:	f000 faee 	bl	800cca8 <__multadd>
 800c6cc:	f1bb 0f00 	cmp.w	fp, #0
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	dc6f      	bgt.n	800c7b4 <_dtoa_r+0x974>
 800c6d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	dc49      	bgt.n	800c76e <_dtoa_r+0x92e>
 800c6da:	e06b      	b.n	800c7b4 <_dtoa_r+0x974>
 800c6dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c6de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c6e2:	e73c      	b.n	800c55e <_dtoa_r+0x71e>
 800c6e4:	3fe00000 	.word	0x3fe00000
 800c6e8:	40240000 	.word	0x40240000
 800c6ec:	9b08      	ldr	r3, [sp, #32]
 800c6ee:	1e5c      	subs	r4, r3, #1
 800c6f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f2:	42a3      	cmp	r3, r4
 800c6f4:	db09      	blt.n	800c70a <_dtoa_r+0x8ca>
 800c6f6:	1b1c      	subs	r4, r3, r4
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f6bf af30 	bge.w	800c560 <_dtoa_r+0x720>
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	9a08      	ldr	r2, [sp, #32]
 800c704:	1a9e      	subs	r6, r3, r2
 800c706:	2300      	movs	r3, #0
 800c708:	e72b      	b.n	800c562 <_dtoa_r+0x722>
 800c70a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c70c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70e:	1ae3      	subs	r3, r4, r3
 800c710:	441a      	add	r2, r3
 800c712:	940a      	str	r4, [sp, #40]	@ 0x28
 800c714:	9e04      	ldr	r6, [sp, #16]
 800c716:	2400      	movs	r4, #0
 800c718:	9b08      	ldr	r3, [sp, #32]
 800c71a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c71c:	e721      	b.n	800c562 <_dtoa_r+0x722>
 800c71e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c720:	9e04      	ldr	r6, [sp, #16]
 800c722:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c724:	e728      	b.n	800c578 <_dtoa_r+0x738>
 800c726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c72a:	e751      	b.n	800c5d0 <_dtoa_r+0x790>
 800c72c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c72e:	9903      	ldr	r1, [sp, #12]
 800c730:	e750      	b.n	800c5d4 <_dtoa_r+0x794>
 800c732:	f8cd 800c 	str.w	r8, [sp, #12]
 800c736:	e751      	b.n	800c5dc <_dtoa_r+0x79c>
 800c738:	2300      	movs	r3, #0
 800c73a:	e779      	b.n	800c630 <_dtoa_r+0x7f0>
 800c73c:	9b06      	ldr	r3, [sp, #24]
 800c73e:	e777      	b.n	800c630 <_dtoa_r+0x7f0>
 800c740:	2300      	movs	r3, #0
 800c742:	930a      	str	r3, [sp, #40]	@ 0x28
 800c744:	e779      	b.n	800c63a <_dtoa_r+0x7fa>
 800c746:	d093      	beq.n	800c670 <_dtoa_r+0x830>
 800c748:	9a04      	ldr	r2, [sp, #16]
 800c74a:	331c      	adds	r3, #28
 800c74c:	441a      	add	r2, r3
 800c74e:	9204      	str	r2, [sp, #16]
 800c750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c752:	441e      	add	r6, r3
 800c754:	441a      	add	r2, r3
 800c756:	9209      	str	r2, [sp, #36]	@ 0x24
 800c758:	e78a      	b.n	800c670 <_dtoa_r+0x830>
 800c75a:	4603      	mov	r3, r0
 800c75c:	e7f4      	b.n	800c748 <_dtoa_r+0x908>
 800c75e:	9b08      	ldr	r3, [sp, #32]
 800c760:	46b8      	mov	r8, r7
 800c762:	2b00      	cmp	r3, #0
 800c764:	dc20      	bgt.n	800c7a8 <_dtoa_r+0x968>
 800c766:	469b      	mov	fp, r3
 800c768:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	dd1e      	ble.n	800c7ac <_dtoa_r+0x96c>
 800c76e:	f1bb 0f00 	cmp.w	fp, #0
 800c772:	f47f adb1 	bne.w	800c2d8 <_dtoa_r+0x498>
 800c776:	4621      	mov	r1, r4
 800c778:	465b      	mov	r3, fp
 800c77a:	2205      	movs	r2, #5
 800c77c:	4648      	mov	r0, r9
 800c77e:	f000 fa93 	bl	800cca8 <__multadd>
 800c782:	4601      	mov	r1, r0
 800c784:	4604      	mov	r4, r0
 800c786:	9803      	ldr	r0, [sp, #12]
 800c788:	f000 fce8 	bl	800d15c <__mcmp>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f77f ada3 	ble.w	800c2d8 <_dtoa_r+0x498>
 800c792:	4656      	mov	r6, sl
 800c794:	2331      	movs	r3, #49	@ 0x31
 800c796:	f108 0801 	add.w	r8, r8, #1
 800c79a:	f806 3b01 	strb.w	r3, [r6], #1
 800c79e:	e59f      	b.n	800c2e0 <_dtoa_r+0x4a0>
 800c7a0:	46b8      	mov	r8, r7
 800c7a2:	9c08      	ldr	r4, [sp, #32]
 800c7a4:	4625      	mov	r5, r4
 800c7a6:	e7f4      	b.n	800c792 <_dtoa_r+0x952>
 800c7a8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800c7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8101 	beq.w	800c9b6 <_dtoa_r+0xb76>
 800c7b4:	2e00      	cmp	r6, #0
 800c7b6:	dd05      	ble.n	800c7c4 <_dtoa_r+0x984>
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fc61 	bl	800d084 <__lshift>
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d05c      	beq.n	800c884 <_dtoa_r+0xa44>
 800c7ca:	4648      	mov	r0, r9
 800c7cc:	6869      	ldr	r1, [r5, #4]
 800c7ce:	f000 fa09 	bl	800cbe4 <_Balloc>
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	b928      	cbnz	r0, 800c7e2 <_dtoa_r+0x9a2>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c7dc:	4b80      	ldr	r3, [pc, #512]	@ (800c9e0 <_dtoa_r+0xba0>)
 800c7de:	f7ff bb43 	b.w	800be68 <_dtoa_r+0x28>
 800c7e2:	692a      	ldr	r2, [r5, #16]
 800c7e4:	f105 010c 	add.w	r1, r5, #12
 800c7e8:	3202      	adds	r2, #2
 800c7ea:	0092      	lsls	r2, r2, #2
 800c7ec:	300c      	adds	r0, #12
 800c7ee:	f001 ff51 	bl	800e694 <memcpy>
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4631      	mov	r1, r6
 800c7f6:	4648      	mov	r0, r9
 800c7f8:	f000 fc44 	bl	800d084 <__lshift>
 800c7fc:	462f      	mov	r7, r5
 800c7fe:	4605      	mov	r5, r0
 800c800:	f10a 0301 	add.w	r3, sl, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	eb0a 030b 	add.w	r3, sl, fp
 800c80a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c80c:	9b06      	ldr	r3, [sp, #24]
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	9309      	str	r3, [sp, #36]	@ 0x24
 800c814:	9b04      	ldr	r3, [sp, #16]
 800c816:	4621      	mov	r1, r4
 800c818:	9803      	ldr	r0, [sp, #12]
 800c81a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c81e:	f7ff fa87 	bl	800bd30 <quorem>
 800c822:	4603      	mov	r3, r0
 800c824:	4639      	mov	r1, r7
 800c826:	3330      	adds	r3, #48	@ 0x30
 800c828:	9006      	str	r0, [sp, #24]
 800c82a:	9803      	ldr	r0, [sp, #12]
 800c82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82e:	f000 fc95 	bl	800d15c <__mcmp>
 800c832:	462a      	mov	r2, r5
 800c834:	9008      	str	r0, [sp, #32]
 800c836:	4621      	mov	r1, r4
 800c838:	4648      	mov	r0, r9
 800c83a:	f000 fcab 	bl	800d194 <__mdiff>
 800c83e:	68c2      	ldr	r2, [r0, #12]
 800c840:	4606      	mov	r6, r0
 800c842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c844:	bb02      	cbnz	r2, 800c888 <_dtoa_r+0xa48>
 800c846:	4601      	mov	r1, r0
 800c848:	9803      	ldr	r0, [sp, #12]
 800c84a:	f000 fc87 	bl	800d15c <__mcmp>
 800c84e:	4602      	mov	r2, r0
 800c850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c852:	4631      	mov	r1, r6
 800c854:	4648      	mov	r0, r9
 800c856:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800c85a:	f000 fa03 	bl	800cc64 <_Bfree>
 800c85e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c862:	9e04      	ldr	r6, [sp, #16]
 800c864:	ea42 0103 	orr.w	r1, r2, r3
 800c868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c86a:	4319      	orrs	r1, r3
 800c86c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c86e:	d10d      	bne.n	800c88c <_dtoa_r+0xa4c>
 800c870:	2b39      	cmp	r3, #57	@ 0x39
 800c872:	d027      	beq.n	800c8c4 <_dtoa_r+0xa84>
 800c874:	9a08      	ldr	r2, [sp, #32]
 800c876:	2a00      	cmp	r2, #0
 800c878:	dd01      	ble.n	800c87e <_dtoa_r+0xa3e>
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	3331      	adds	r3, #49	@ 0x31
 800c87e:	f88b 3000 	strb.w	r3, [fp]
 800c882:	e52e      	b.n	800c2e2 <_dtoa_r+0x4a2>
 800c884:	4628      	mov	r0, r5
 800c886:	e7b9      	b.n	800c7fc <_dtoa_r+0x9bc>
 800c888:	2201      	movs	r2, #1
 800c88a:	e7e2      	b.n	800c852 <_dtoa_r+0xa12>
 800c88c:	9908      	ldr	r1, [sp, #32]
 800c88e:	2900      	cmp	r1, #0
 800c890:	db04      	blt.n	800c89c <_dtoa_r+0xa5c>
 800c892:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800c894:	4301      	orrs	r1, r0
 800c896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c898:	4301      	orrs	r1, r0
 800c89a:	d120      	bne.n	800c8de <_dtoa_r+0xa9e>
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	ddee      	ble.n	800c87e <_dtoa_r+0xa3e>
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	9903      	ldr	r1, [sp, #12]
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	f000 fbec 	bl	800d084 <__lshift>
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	9003      	str	r0, [sp, #12]
 800c8b0:	f000 fc54 	bl	800d15c <__mcmp>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	9b04      	ldr	r3, [sp, #16]
 800c8b8:	dc02      	bgt.n	800c8c0 <_dtoa_r+0xa80>
 800c8ba:	d1e0      	bne.n	800c87e <_dtoa_r+0xa3e>
 800c8bc:	07da      	lsls	r2, r3, #31
 800c8be:	d5de      	bpl.n	800c87e <_dtoa_r+0xa3e>
 800c8c0:	2b39      	cmp	r3, #57	@ 0x39
 800c8c2:	d1da      	bne.n	800c87a <_dtoa_r+0xa3a>
 800c8c4:	2339      	movs	r3, #57	@ 0x39
 800c8c6:	f88b 3000 	strb.w	r3, [fp]
 800c8ca:	4633      	mov	r3, r6
 800c8cc:	461e      	mov	r6, r3
 800c8ce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	2a39      	cmp	r2, #57	@ 0x39
 800c8d6:	d04e      	beq.n	800c976 <_dtoa_r+0xb36>
 800c8d8:	3201      	adds	r2, #1
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	e501      	b.n	800c2e2 <_dtoa_r+0x4a2>
 800c8de:	2a00      	cmp	r2, #0
 800c8e0:	dd03      	ble.n	800c8ea <_dtoa_r+0xaaa>
 800c8e2:	2b39      	cmp	r3, #57	@ 0x39
 800c8e4:	d0ee      	beq.n	800c8c4 <_dtoa_r+0xa84>
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	e7c9      	b.n	800c87e <_dtoa_r+0xa3e>
 800c8ea:	9a04      	ldr	r2, [sp, #16]
 800c8ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c8f2:	428a      	cmp	r2, r1
 800c8f4:	d028      	beq.n	800c948 <_dtoa_r+0xb08>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	220a      	movs	r2, #10
 800c8fa:	9903      	ldr	r1, [sp, #12]
 800c8fc:	4648      	mov	r0, r9
 800c8fe:	f000 f9d3 	bl	800cca8 <__multadd>
 800c902:	42af      	cmp	r7, r5
 800c904:	9003      	str	r0, [sp, #12]
 800c906:	f04f 0300 	mov.w	r3, #0
 800c90a:	f04f 020a 	mov.w	r2, #10
 800c90e:	4639      	mov	r1, r7
 800c910:	4648      	mov	r0, r9
 800c912:	d107      	bne.n	800c924 <_dtoa_r+0xae4>
 800c914:	f000 f9c8 	bl	800cca8 <__multadd>
 800c918:	4607      	mov	r7, r0
 800c91a:	4605      	mov	r5, r0
 800c91c:	9b04      	ldr	r3, [sp, #16]
 800c91e:	3301      	adds	r3, #1
 800c920:	9304      	str	r3, [sp, #16]
 800c922:	e777      	b.n	800c814 <_dtoa_r+0x9d4>
 800c924:	f000 f9c0 	bl	800cca8 <__multadd>
 800c928:	4629      	mov	r1, r5
 800c92a:	4607      	mov	r7, r0
 800c92c:	2300      	movs	r3, #0
 800c92e:	220a      	movs	r2, #10
 800c930:	4648      	mov	r0, r9
 800c932:	f000 f9b9 	bl	800cca8 <__multadd>
 800c936:	4605      	mov	r5, r0
 800c938:	e7f0      	b.n	800c91c <_dtoa_r+0xadc>
 800c93a:	f1bb 0f00 	cmp.w	fp, #0
 800c93e:	bfcc      	ite	gt
 800c940:	465e      	movgt	r6, fp
 800c942:	2601      	movle	r6, #1
 800c944:	2700      	movs	r7, #0
 800c946:	4456      	add	r6, sl
 800c948:	2201      	movs	r2, #1
 800c94a:	9903      	ldr	r1, [sp, #12]
 800c94c:	4648      	mov	r0, r9
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	f000 fb98 	bl	800d084 <__lshift>
 800c954:	4621      	mov	r1, r4
 800c956:	9003      	str	r0, [sp, #12]
 800c958:	f000 fc00 	bl	800d15c <__mcmp>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	dcb4      	bgt.n	800c8ca <_dtoa_r+0xa8a>
 800c960:	d102      	bne.n	800c968 <_dtoa_r+0xb28>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	07db      	lsls	r3, r3, #31
 800c966:	d4b0      	bmi.n	800c8ca <_dtoa_r+0xa8a>
 800c968:	4633      	mov	r3, r6
 800c96a:	461e      	mov	r6, r3
 800c96c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c970:	2a30      	cmp	r2, #48	@ 0x30
 800c972:	d0fa      	beq.n	800c96a <_dtoa_r+0xb2a>
 800c974:	e4b5      	b.n	800c2e2 <_dtoa_r+0x4a2>
 800c976:	459a      	cmp	sl, r3
 800c978:	d1a8      	bne.n	800c8cc <_dtoa_r+0xa8c>
 800c97a:	2331      	movs	r3, #49	@ 0x31
 800c97c:	f108 0801 	add.w	r8, r8, #1
 800c980:	f88a 3000 	strb.w	r3, [sl]
 800c984:	e4ad      	b.n	800c2e2 <_dtoa_r+0x4a2>
 800c986:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c988:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c9e4 <_dtoa_r+0xba4>
 800c98c:	b11b      	cbz	r3, 800c996 <_dtoa_r+0xb56>
 800c98e:	f10a 0308 	add.w	r3, sl, #8
 800c992:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	4650      	mov	r0, sl
 800c998:	b017      	add	sp, #92	@ 0x5c
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	f77f ae2e 	ble.w	800c602 <_dtoa_r+0x7c2>
 800c9a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9aa:	2001      	movs	r0, #1
 800c9ac:	e64d      	b.n	800c64a <_dtoa_r+0x80a>
 800c9ae:	f1bb 0f00 	cmp.w	fp, #0
 800c9b2:	f77f aed9 	ble.w	800c768 <_dtoa_r+0x928>
 800c9b6:	4656      	mov	r6, sl
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	9803      	ldr	r0, [sp, #12]
 800c9bc:	f7ff f9b8 	bl	800bd30 <quorem>
 800c9c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c9c4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9c8:	eba6 020a 	sub.w	r2, r6, sl
 800c9cc:	4593      	cmp	fp, r2
 800c9ce:	ddb4      	ble.n	800c93a <_dtoa_r+0xafa>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	220a      	movs	r2, #10
 800c9d4:	4648      	mov	r0, r9
 800c9d6:	9903      	ldr	r1, [sp, #12]
 800c9d8:	f000 f966 	bl	800cca8 <__multadd>
 800c9dc:	9003      	str	r0, [sp, #12]
 800c9de:	e7eb      	b.n	800c9b8 <_dtoa_r+0xb78>
 800c9e0:	0800f525 	.word	0x0800f525
 800c9e4:	0800f4a9 	.word	0x0800f4a9

0800c9e8 <_free_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	d040      	beq.n	800ca72 <_free_r+0x8a>
 800c9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f4:	1f0c      	subs	r4, r1, #4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	bfb8      	it	lt
 800c9fa:	18e4      	addlt	r4, r4, r3
 800c9fc:	f000 f8e6 	bl	800cbcc <__malloc_lock>
 800ca00:	4a1c      	ldr	r2, [pc, #112]	@ (800ca74 <_free_r+0x8c>)
 800ca02:	6813      	ldr	r3, [r2, #0]
 800ca04:	b933      	cbnz	r3, 800ca14 <_free_r+0x2c>
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	6014      	str	r4, [r2, #0]
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca10:	f000 b8e2 	b.w	800cbd8 <__malloc_unlock>
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	d908      	bls.n	800ca2a <_free_r+0x42>
 800ca18:	6820      	ldr	r0, [r4, #0]
 800ca1a:	1821      	adds	r1, r4, r0
 800ca1c:	428b      	cmp	r3, r1
 800ca1e:	bf01      	itttt	eq
 800ca20:	6819      	ldreq	r1, [r3, #0]
 800ca22:	685b      	ldreq	r3, [r3, #4]
 800ca24:	1809      	addeq	r1, r1, r0
 800ca26:	6021      	streq	r1, [r4, #0]
 800ca28:	e7ed      	b.n	800ca06 <_free_r+0x1e>
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	b10b      	cbz	r3, 800ca34 <_free_r+0x4c>
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	d9fa      	bls.n	800ca2a <_free_r+0x42>
 800ca34:	6811      	ldr	r1, [r2, #0]
 800ca36:	1850      	adds	r0, r2, r1
 800ca38:	42a0      	cmp	r0, r4
 800ca3a:	d10b      	bne.n	800ca54 <_free_r+0x6c>
 800ca3c:	6820      	ldr	r0, [r4, #0]
 800ca3e:	4401      	add	r1, r0
 800ca40:	1850      	adds	r0, r2, r1
 800ca42:	4283      	cmp	r3, r0
 800ca44:	6011      	str	r1, [r2, #0]
 800ca46:	d1e0      	bne.n	800ca0a <_free_r+0x22>
 800ca48:	6818      	ldr	r0, [r3, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	4408      	add	r0, r1
 800ca4e:	6010      	str	r0, [r2, #0]
 800ca50:	6053      	str	r3, [r2, #4]
 800ca52:	e7da      	b.n	800ca0a <_free_r+0x22>
 800ca54:	d902      	bls.n	800ca5c <_free_r+0x74>
 800ca56:	230c      	movs	r3, #12
 800ca58:	602b      	str	r3, [r5, #0]
 800ca5a:	e7d6      	b.n	800ca0a <_free_r+0x22>
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	1821      	adds	r1, r4, r0
 800ca60:	428b      	cmp	r3, r1
 800ca62:	bf01      	itttt	eq
 800ca64:	6819      	ldreq	r1, [r3, #0]
 800ca66:	685b      	ldreq	r3, [r3, #4]
 800ca68:	1809      	addeq	r1, r1, r0
 800ca6a:	6021      	streq	r1, [r4, #0]
 800ca6c:	6063      	str	r3, [r4, #4]
 800ca6e:	6054      	str	r4, [r2, #4]
 800ca70:	e7cb      	b.n	800ca0a <_free_r+0x22>
 800ca72:	bd38      	pop	{r3, r4, r5, pc}
 800ca74:	2000171c 	.word	0x2000171c

0800ca78 <malloc>:
 800ca78:	4b02      	ldr	r3, [pc, #8]	@ (800ca84 <malloc+0xc>)
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	f000 b825 	b.w	800cacc <_malloc_r>
 800ca82:	bf00      	nop
 800ca84:	2000018c 	.word	0x2000018c

0800ca88 <sbrk_aligned>:
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	4e0f      	ldr	r6, [pc, #60]	@ (800cac8 <sbrk_aligned+0x40>)
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	6831      	ldr	r1, [r6, #0]
 800ca90:	4605      	mov	r5, r0
 800ca92:	b911      	cbnz	r1, 800ca9a <sbrk_aligned+0x12>
 800ca94:	f001 fdee 	bl	800e674 <_sbrk_r>
 800ca98:	6030      	str	r0, [r6, #0]
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f001 fde9 	bl	800e674 <_sbrk_r>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d103      	bne.n	800caae <sbrk_aligned+0x26>
 800caa6:	f04f 34ff 	mov.w	r4, #4294967295
 800caaa:	4620      	mov	r0, r4
 800caac:	bd70      	pop	{r4, r5, r6, pc}
 800caae:	1cc4      	adds	r4, r0, #3
 800cab0:	f024 0403 	bic.w	r4, r4, #3
 800cab4:	42a0      	cmp	r0, r4
 800cab6:	d0f8      	beq.n	800caaa <sbrk_aligned+0x22>
 800cab8:	1a21      	subs	r1, r4, r0
 800caba:	4628      	mov	r0, r5
 800cabc:	f001 fdda 	bl	800e674 <_sbrk_r>
 800cac0:	3001      	adds	r0, #1
 800cac2:	d1f2      	bne.n	800caaa <sbrk_aligned+0x22>
 800cac4:	e7ef      	b.n	800caa6 <sbrk_aligned+0x1e>
 800cac6:	bf00      	nop
 800cac8:	20001718 	.word	0x20001718

0800cacc <_malloc_r>:
 800cacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cad0:	1ccd      	adds	r5, r1, #3
 800cad2:	f025 0503 	bic.w	r5, r5, #3
 800cad6:	3508      	adds	r5, #8
 800cad8:	2d0c      	cmp	r5, #12
 800cada:	bf38      	it	cc
 800cadc:	250c      	movcc	r5, #12
 800cade:	2d00      	cmp	r5, #0
 800cae0:	4606      	mov	r6, r0
 800cae2:	db01      	blt.n	800cae8 <_malloc_r+0x1c>
 800cae4:	42a9      	cmp	r1, r5
 800cae6:	d904      	bls.n	800caf2 <_malloc_r+0x26>
 800cae8:	230c      	movs	r3, #12
 800caea:	6033      	str	r3, [r6, #0]
 800caec:	2000      	movs	r0, #0
 800caee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbc8 <_malloc_r+0xfc>
 800caf6:	f000 f869 	bl	800cbcc <__malloc_lock>
 800cafa:	f8d8 3000 	ldr.w	r3, [r8]
 800cafe:	461c      	mov	r4, r3
 800cb00:	bb44      	cbnz	r4, 800cb54 <_malloc_r+0x88>
 800cb02:	4629      	mov	r1, r5
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff ffbf 	bl	800ca88 <sbrk_aligned>
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	d158      	bne.n	800cbc2 <_malloc_r+0xf6>
 800cb10:	f8d8 4000 	ldr.w	r4, [r8]
 800cb14:	4627      	mov	r7, r4
 800cb16:	2f00      	cmp	r7, #0
 800cb18:	d143      	bne.n	800cba2 <_malloc_r+0xd6>
 800cb1a:	2c00      	cmp	r4, #0
 800cb1c:	d04b      	beq.n	800cbb6 <_malloc_r+0xea>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	4639      	mov	r1, r7
 800cb22:	4630      	mov	r0, r6
 800cb24:	eb04 0903 	add.w	r9, r4, r3
 800cb28:	f001 fda4 	bl	800e674 <_sbrk_r>
 800cb2c:	4581      	cmp	r9, r0
 800cb2e:	d142      	bne.n	800cbb6 <_malloc_r+0xea>
 800cb30:	6821      	ldr	r1, [r4, #0]
 800cb32:	4630      	mov	r0, r6
 800cb34:	1a6d      	subs	r5, r5, r1
 800cb36:	4629      	mov	r1, r5
 800cb38:	f7ff ffa6 	bl	800ca88 <sbrk_aligned>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d03a      	beq.n	800cbb6 <_malloc_r+0xea>
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	442b      	add	r3, r5
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	f8d8 3000 	ldr.w	r3, [r8]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	bb62      	cbnz	r2, 800cba8 <_malloc_r+0xdc>
 800cb4e:	f8c8 7000 	str.w	r7, [r8]
 800cb52:	e00f      	b.n	800cb74 <_malloc_r+0xa8>
 800cb54:	6822      	ldr	r2, [r4, #0]
 800cb56:	1b52      	subs	r2, r2, r5
 800cb58:	d420      	bmi.n	800cb9c <_malloc_r+0xd0>
 800cb5a:	2a0b      	cmp	r2, #11
 800cb5c:	d917      	bls.n	800cb8e <_malloc_r+0xc2>
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	42a3      	cmp	r3, r4
 800cb62:	6025      	str	r5, [r4, #0]
 800cb64:	bf18      	it	ne
 800cb66:	6059      	strne	r1, [r3, #4]
 800cb68:	6863      	ldr	r3, [r4, #4]
 800cb6a:	bf08      	it	eq
 800cb6c:	f8c8 1000 	streq.w	r1, [r8]
 800cb70:	5162      	str	r2, [r4, r5]
 800cb72:	604b      	str	r3, [r1, #4]
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f82f 	bl	800cbd8 <__malloc_unlock>
 800cb7a:	f104 000b 	add.w	r0, r4, #11
 800cb7e:	1d23      	adds	r3, r4, #4
 800cb80:	f020 0007 	bic.w	r0, r0, #7
 800cb84:	1ac2      	subs	r2, r0, r3
 800cb86:	bf1c      	itt	ne
 800cb88:	1a1b      	subne	r3, r3, r0
 800cb8a:	50a3      	strne	r3, [r4, r2]
 800cb8c:	e7af      	b.n	800caee <_malloc_r+0x22>
 800cb8e:	6862      	ldr	r2, [r4, #4]
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	bf0c      	ite	eq
 800cb94:	f8c8 2000 	streq.w	r2, [r8]
 800cb98:	605a      	strne	r2, [r3, #4]
 800cb9a:	e7eb      	b.n	800cb74 <_malloc_r+0xa8>
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	6864      	ldr	r4, [r4, #4]
 800cba0:	e7ae      	b.n	800cb00 <_malloc_r+0x34>
 800cba2:	463c      	mov	r4, r7
 800cba4:	687f      	ldr	r7, [r7, #4]
 800cba6:	e7b6      	b.n	800cb16 <_malloc_r+0x4a>
 800cba8:	461a      	mov	r2, r3
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	d1fb      	bne.n	800cba8 <_malloc_r+0xdc>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	6053      	str	r3, [r2, #4]
 800cbb4:	e7de      	b.n	800cb74 <_malloc_r+0xa8>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	4630      	mov	r0, r6
 800cbba:	6033      	str	r3, [r6, #0]
 800cbbc:	f000 f80c 	bl	800cbd8 <__malloc_unlock>
 800cbc0:	e794      	b.n	800caec <_malloc_r+0x20>
 800cbc2:	6005      	str	r5, [r0, #0]
 800cbc4:	e7d6      	b.n	800cb74 <_malloc_r+0xa8>
 800cbc6:	bf00      	nop
 800cbc8:	2000171c 	.word	0x2000171c

0800cbcc <__malloc_lock>:
 800cbcc:	4801      	ldr	r0, [pc, #4]	@ (800cbd4 <__malloc_lock+0x8>)
 800cbce:	f7ff b89a 	b.w	800bd06 <__retarget_lock_acquire_recursive>
 800cbd2:	bf00      	nop
 800cbd4:	20001714 	.word	0x20001714

0800cbd8 <__malloc_unlock>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	@ (800cbe0 <__malloc_unlock+0x8>)
 800cbda:	f7ff b895 	b.w	800bd08 <__retarget_lock_release_recursive>
 800cbde:	bf00      	nop
 800cbe0:	20001714 	.word	0x20001714

0800cbe4 <_Balloc>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	69c6      	ldr	r6, [r0, #28]
 800cbe8:	4604      	mov	r4, r0
 800cbea:	460d      	mov	r5, r1
 800cbec:	b976      	cbnz	r6, 800cc0c <_Balloc+0x28>
 800cbee:	2010      	movs	r0, #16
 800cbf0:	f7ff ff42 	bl	800ca78 <malloc>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	61e0      	str	r0, [r4, #28]
 800cbf8:	b920      	cbnz	r0, 800cc04 <_Balloc+0x20>
 800cbfa:	216b      	movs	r1, #107	@ 0x6b
 800cbfc:	4b17      	ldr	r3, [pc, #92]	@ (800cc5c <_Balloc+0x78>)
 800cbfe:	4818      	ldr	r0, [pc, #96]	@ (800cc60 <_Balloc+0x7c>)
 800cc00:	f001 fd5c 	bl	800e6bc <__assert_func>
 800cc04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc08:	6006      	str	r6, [r0, #0]
 800cc0a:	60c6      	str	r6, [r0, #12]
 800cc0c:	69e6      	ldr	r6, [r4, #28]
 800cc0e:	68f3      	ldr	r3, [r6, #12]
 800cc10:	b183      	cbz	r3, 800cc34 <_Balloc+0x50>
 800cc12:	69e3      	ldr	r3, [r4, #28]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc1a:	b9b8      	cbnz	r0, 800cc4c <_Balloc+0x68>
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc22:	1d72      	adds	r2, r6, #5
 800cc24:	4620      	mov	r0, r4
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	f001 fd66 	bl	800e6f8 <_calloc_r>
 800cc2c:	b160      	cbz	r0, 800cc48 <_Balloc+0x64>
 800cc2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc32:	e00e      	b.n	800cc52 <_Balloc+0x6e>
 800cc34:	2221      	movs	r2, #33	@ 0x21
 800cc36:	2104      	movs	r1, #4
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f001 fd5d 	bl	800e6f8 <_calloc_r>
 800cc3e:	69e3      	ldr	r3, [r4, #28]
 800cc40:	60f0      	str	r0, [r6, #12]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e4      	bne.n	800cc12 <_Balloc+0x2e>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	6802      	ldr	r2, [r0, #0]
 800cc4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc52:	2300      	movs	r3, #0
 800cc54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc58:	e7f7      	b.n	800cc4a <_Balloc+0x66>
 800cc5a:	bf00      	nop
 800cc5c:	0800f4b6 	.word	0x0800f4b6
 800cc60:	0800f536 	.word	0x0800f536

0800cc64 <_Bfree>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	69c6      	ldr	r6, [r0, #28]
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	b976      	cbnz	r6, 800cc8c <_Bfree+0x28>
 800cc6e:	2010      	movs	r0, #16
 800cc70:	f7ff ff02 	bl	800ca78 <malloc>
 800cc74:	4602      	mov	r2, r0
 800cc76:	61e8      	str	r0, [r5, #28]
 800cc78:	b920      	cbnz	r0, 800cc84 <_Bfree+0x20>
 800cc7a:	218f      	movs	r1, #143	@ 0x8f
 800cc7c:	4b08      	ldr	r3, [pc, #32]	@ (800cca0 <_Bfree+0x3c>)
 800cc7e:	4809      	ldr	r0, [pc, #36]	@ (800cca4 <_Bfree+0x40>)
 800cc80:	f001 fd1c 	bl	800e6bc <__assert_func>
 800cc84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc88:	6006      	str	r6, [r0, #0]
 800cc8a:	60c6      	str	r6, [r0, #12]
 800cc8c:	b13c      	cbz	r4, 800cc9e <_Bfree+0x3a>
 800cc8e:	69eb      	ldr	r3, [r5, #28]
 800cc90:	6862      	ldr	r2, [r4, #4]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc98:	6021      	str	r1, [r4, #0]
 800cc9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}
 800cca0:	0800f4b6 	.word	0x0800f4b6
 800cca4:	0800f536 	.word	0x0800f536

0800cca8 <__multadd>:
 800cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	4607      	mov	r7, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	461e      	mov	r6, r3
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	690d      	ldr	r5, [r1, #16]
 800ccb6:	f101 0c14 	add.w	ip, r1, #20
 800ccba:	f8dc 3000 	ldr.w	r3, [ip]
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	b299      	uxth	r1, r3
 800ccc2:	fb02 6101 	mla	r1, r2, r1, r6
 800ccc6:	0c1e      	lsrs	r6, r3, #16
 800ccc8:	0c0b      	lsrs	r3, r1, #16
 800ccca:	fb02 3306 	mla	r3, r2, r6, r3
 800ccce:	b289      	uxth	r1, r1
 800ccd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccd4:	4285      	cmp	r5, r0
 800ccd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccda:	f84c 1b04 	str.w	r1, [ip], #4
 800ccde:	dcec      	bgt.n	800ccba <__multadd+0x12>
 800cce0:	b30e      	cbz	r6, 800cd26 <__multadd+0x7e>
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	42ab      	cmp	r3, r5
 800cce6:	dc19      	bgt.n	800cd1c <__multadd+0x74>
 800cce8:	6861      	ldr	r1, [r4, #4]
 800ccea:	4638      	mov	r0, r7
 800ccec:	3101      	adds	r1, #1
 800ccee:	f7ff ff79 	bl	800cbe4 <_Balloc>
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	b928      	cbnz	r0, 800cd02 <__multadd+0x5a>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	21ba      	movs	r1, #186	@ 0xba
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	@ (800cd2c <__multadd+0x84>)
 800ccfc:	480c      	ldr	r0, [pc, #48]	@ (800cd30 <__multadd+0x88>)
 800ccfe:	f001 fcdd 	bl	800e6bc <__assert_func>
 800cd02:	6922      	ldr	r2, [r4, #16]
 800cd04:	f104 010c 	add.w	r1, r4, #12
 800cd08:	3202      	adds	r2, #2
 800cd0a:	0092      	lsls	r2, r2, #2
 800cd0c:	300c      	adds	r0, #12
 800cd0e:	f001 fcc1 	bl	800e694 <memcpy>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4638      	mov	r0, r7
 800cd16:	f7ff ffa5 	bl	800cc64 <_Bfree>
 800cd1a:	4644      	mov	r4, r8
 800cd1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd20:	3501      	adds	r5, #1
 800cd22:	615e      	str	r6, [r3, #20]
 800cd24:	6125      	str	r5, [r4, #16]
 800cd26:	4620      	mov	r0, r4
 800cd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2c:	0800f525 	.word	0x0800f525
 800cd30:	0800f536 	.word	0x0800f536

0800cd34 <__s2b>:
 800cd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd38:	4615      	mov	r5, r2
 800cd3a:	2209      	movs	r2, #9
 800cd3c:	461f      	mov	r7, r3
 800cd3e:	3308      	adds	r3, #8
 800cd40:	460c      	mov	r4, r1
 800cd42:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd46:	4606      	mov	r6, r0
 800cd48:	2201      	movs	r2, #1
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	db09      	blt.n	800cd64 <__s2b+0x30>
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff ff47 	bl	800cbe4 <_Balloc>
 800cd56:	b940      	cbnz	r0, 800cd6a <__s2b+0x36>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	21d3      	movs	r1, #211	@ 0xd3
 800cd5c:	4b18      	ldr	r3, [pc, #96]	@ (800cdc0 <__s2b+0x8c>)
 800cd5e:	4819      	ldr	r0, [pc, #100]	@ (800cdc4 <__s2b+0x90>)
 800cd60:	f001 fcac 	bl	800e6bc <__assert_func>
 800cd64:	0052      	lsls	r2, r2, #1
 800cd66:	3101      	adds	r1, #1
 800cd68:	e7f0      	b.n	800cd4c <__s2b+0x18>
 800cd6a:	9b08      	ldr	r3, [sp, #32]
 800cd6c:	2d09      	cmp	r5, #9
 800cd6e:	6143      	str	r3, [r0, #20]
 800cd70:	f04f 0301 	mov.w	r3, #1
 800cd74:	6103      	str	r3, [r0, #16]
 800cd76:	dd16      	ble.n	800cda6 <__s2b+0x72>
 800cd78:	f104 0909 	add.w	r9, r4, #9
 800cd7c:	46c8      	mov	r8, r9
 800cd7e:	442c      	add	r4, r5
 800cd80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd84:	4601      	mov	r1, r0
 800cd86:	220a      	movs	r2, #10
 800cd88:	4630      	mov	r0, r6
 800cd8a:	3b30      	subs	r3, #48	@ 0x30
 800cd8c:	f7ff ff8c 	bl	800cca8 <__multadd>
 800cd90:	45a0      	cmp	r8, r4
 800cd92:	d1f5      	bne.n	800cd80 <__s2b+0x4c>
 800cd94:	f1a5 0408 	sub.w	r4, r5, #8
 800cd98:	444c      	add	r4, r9
 800cd9a:	1b2d      	subs	r5, r5, r4
 800cd9c:	1963      	adds	r3, r4, r5
 800cd9e:	42bb      	cmp	r3, r7
 800cda0:	db04      	blt.n	800cdac <__s2b+0x78>
 800cda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda6:	2509      	movs	r5, #9
 800cda8:	340a      	adds	r4, #10
 800cdaa:	e7f6      	b.n	800cd9a <__s2b+0x66>
 800cdac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	220a      	movs	r2, #10
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	3b30      	subs	r3, #48	@ 0x30
 800cdb8:	f7ff ff76 	bl	800cca8 <__multadd>
 800cdbc:	e7ee      	b.n	800cd9c <__s2b+0x68>
 800cdbe:	bf00      	nop
 800cdc0:	0800f525 	.word	0x0800f525
 800cdc4:	0800f536 	.word	0x0800f536

0800cdc8 <__hi0bits>:
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cdce:	bf3a      	itte	cc
 800cdd0:	0403      	lslcc	r3, r0, #16
 800cdd2:	2010      	movcc	r0, #16
 800cdd4:	2000      	movcs	r0, #0
 800cdd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdda:	bf3c      	itt	cc
 800cddc:	021b      	lslcc	r3, r3, #8
 800cdde:	3008      	addcc	r0, #8
 800cde0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cde4:	bf3c      	itt	cc
 800cde6:	011b      	lslcc	r3, r3, #4
 800cde8:	3004      	addcc	r0, #4
 800cdea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdee:	bf3c      	itt	cc
 800cdf0:	009b      	lslcc	r3, r3, #2
 800cdf2:	3002      	addcc	r0, #2
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db05      	blt.n	800ce04 <__hi0bits+0x3c>
 800cdf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdfc:	f100 0001 	add.w	r0, r0, #1
 800ce00:	bf08      	it	eq
 800ce02:	2020      	moveq	r0, #32
 800ce04:	4770      	bx	lr

0800ce06 <__lo0bits>:
 800ce06:	6803      	ldr	r3, [r0, #0]
 800ce08:	4602      	mov	r2, r0
 800ce0a:	f013 0007 	ands.w	r0, r3, #7
 800ce0e:	d00b      	beq.n	800ce28 <__lo0bits+0x22>
 800ce10:	07d9      	lsls	r1, r3, #31
 800ce12:	d421      	bmi.n	800ce58 <__lo0bits+0x52>
 800ce14:	0798      	lsls	r0, r3, #30
 800ce16:	bf49      	itett	mi
 800ce18:	085b      	lsrmi	r3, r3, #1
 800ce1a:	089b      	lsrpl	r3, r3, #2
 800ce1c:	2001      	movmi	r0, #1
 800ce1e:	6013      	strmi	r3, [r2, #0]
 800ce20:	bf5c      	itt	pl
 800ce22:	2002      	movpl	r0, #2
 800ce24:	6013      	strpl	r3, [r2, #0]
 800ce26:	4770      	bx	lr
 800ce28:	b299      	uxth	r1, r3
 800ce2a:	b909      	cbnz	r1, 800ce30 <__lo0bits+0x2a>
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	0c1b      	lsrs	r3, r3, #16
 800ce30:	b2d9      	uxtb	r1, r3
 800ce32:	b909      	cbnz	r1, 800ce38 <__lo0bits+0x32>
 800ce34:	3008      	adds	r0, #8
 800ce36:	0a1b      	lsrs	r3, r3, #8
 800ce38:	0719      	lsls	r1, r3, #28
 800ce3a:	bf04      	itt	eq
 800ce3c:	091b      	lsreq	r3, r3, #4
 800ce3e:	3004      	addeq	r0, #4
 800ce40:	0799      	lsls	r1, r3, #30
 800ce42:	bf04      	itt	eq
 800ce44:	089b      	lsreq	r3, r3, #2
 800ce46:	3002      	addeq	r0, #2
 800ce48:	07d9      	lsls	r1, r3, #31
 800ce4a:	d403      	bmi.n	800ce54 <__lo0bits+0x4e>
 800ce4c:	085b      	lsrs	r3, r3, #1
 800ce4e:	f100 0001 	add.w	r0, r0, #1
 800ce52:	d003      	beq.n	800ce5c <__lo0bits+0x56>
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	4770      	bx	lr
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4770      	bx	lr
 800ce5c:	2020      	movs	r0, #32
 800ce5e:	4770      	bx	lr

0800ce60 <__i2b>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	460c      	mov	r4, r1
 800ce64:	2101      	movs	r1, #1
 800ce66:	f7ff febd 	bl	800cbe4 <_Balloc>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	b928      	cbnz	r0, 800ce7a <__i2b+0x1a>
 800ce6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ce72:	4b04      	ldr	r3, [pc, #16]	@ (800ce84 <__i2b+0x24>)
 800ce74:	4804      	ldr	r0, [pc, #16]	@ (800ce88 <__i2b+0x28>)
 800ce76:	f001 fc21 	bl	800e6bc <__assert_func>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	6144      	str	r4, [r0, #20]
 800ce7e:	6103      	str	r3, [r0, #16]
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	bf00      	nop
 800ce84:	0800f525 	.word	0x0800f525
 800ce88:	0800f536 	.word	0x0800f536

0800ce8c <__multiply>:
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	4617      	mov	r7, r2
 800ce92:	690a      	ldr	r2, [r1, #16]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	4689      	mov	r9, r1
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	bfa2      	ittt	ge
 800ce9c:	463b      	movge	r3, r7
 800ce9e:	460f      	movge	r7, r1
 800cea0:	4699      	movge	r9, r3
 800cea2:	693d      	ldr	r5, [r7, #16]
 800cea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	eb05 060a 	add.w	r6, r5, sl
 800ceb0:	42b3      	cmp	r3, r6
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	bfb8      	it	lt
 800ceb6:	3101      	addlt	r1, #1
 800ceb8:	f7ff fe94 	bl	800cbe4 <_Balloc>
 800cebc:	b930      	cbnz	r0, 800cecc <__multiply+0x40>
 800cebe:	4602      	mov	r2, r0
 800cec0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cec4:	4b40      	ldr	r3, [pc, #256]	@ (800cfc8 <__multiply+0x13c>)
 800cec6:	4841      	ldr	r0, [pc, #260]	@ (800cfcc <__multiply+0x140>)
 800cec8:	f001 fbf8 	bl	800e6bc <__assert_func>
 800cecc:	f100 0414 	add.w	r4, r0, #20
 800ced0:	4623      	mov	r3, r4
 800ced2:	2200      	movs	r2, #0
 800ced4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ced8:	4573      	cmp	r3, lr
 800ceda:	d320      	bcc.n	800cf1e <__multiply+0x92>
 800cedc:	f107 0814 	add.w	r8, r7, #20
 800cee0:	f109 0114 	add.w	r1, r9, #20
 800cee4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cee8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	1beb      	subs	r3, r5, r7
 800cef0:	3b15      	subs	r3, #21
 800cef2:	f023 0303 	bic.w	r3, r3, #3
 800cef6:	3304      	adds	r3, #4
 800cef8:	3715      	adds	r7, #21
 800cefa:	42bd      	cmp	r5, r7
 800cefc:	bf38      	it	cc
 800cefe:	2304      	movcc	r3, #4
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	9103      	str	r1, [sp, #12]
 800cf06:	428b      	cmp	r3, r1
 800cf08:	d80c      	bhi.n	800cf24 <__multiply+0x98>
 800cf0a:	2e00      	cmp	r6, #0
 800cf0c:	dd03      	ble.n	800cf16 <__multiply+0x8a>
 800cf0e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d055      	beq.n	800cfc2 <__multiply+0x136>
 800cf16:	6106      	str	r6, [r0, #16]
 800cf18:	b005      	add	sp, #20
 800cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1e:	f843 2b04 	str.w	r2, [r3], #4
 800cf22:	e7d9      	b.n	800ced8 <__multiply+0x4c>
 800cf24:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf28:	f1ba 0f00 	cmp.w	sl, #0
 800cf2c:	d01f      	beq.n	800cf6e <__multiply+0xe2>
 800cf2e:	46c4      	mov	ip, r8
 800cf30:	46a1      	mov	r9, r4
 800cf32:	2700      	movs	r7, #0
 800cf34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf38:	f8d9 3000 	ldr.w	r3, [r9]
 800cf3c:	fa1f fb82 	uxth.w	fp, r2
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf46:	443b      	add	r3, r7
 800cf48:	f8d9 7000 	ldr.w	r7, [r9]
 800cf4c:	0c12      	lsrs	r2, r2, #16
 800cf4e:	0c3f      	lsrs	r7, r7, #16
 800cf50:	fb0a 7202 	mla	r2, sl, r2, r7
 800cf54:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf5e:	4565      	cmp	r5, ip
 800cf60:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cf64:	f849 3b04 	str.w	r3, [r9], #4
 800cf68:	d8e4      	bhi.n	800cf34 <__multiply+0xa8>
 800cf6a:	9b01      	ldr	r3, [sp, #4]
 800cf6c:	50e7      	str	r7, [r4, r3]
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	3104      	adds	r1, #4
 800cf72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf76:	f1b9 0f00 	cmp.w	r9, #0
 800cf7a:	d020      	beq.n	800cfbe <__multiply+0x132>
 800cf7c:	4647      	mov	r7, r8
 800cf7e:	46a4      	mov	ip, r4
 800cf80:	f04f 0a00 	mov.w	sl, #0
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	f8b7 b000 	ldrh.w	fp, [r7]
 800cf8a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	fb09 220b 	mla	r2, r9, fp, r2
 800cf94:	4452      	add	r2, sl
 800cf96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf9a:	f84c 3b04 	str.w	r3, [ip], #4
 800cf9e:	f857 3b04 	ldr.w	r3, [r7], #4
 800cfa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfa6:	f8bc 3000 	ldrh.w	r3, [ip]
 800cfaa:	42bd      	cmp	r5, r7
 800cfac:	fb09 330a 	mla	r3, r9, sl, r3
 800cfb0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cfb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfb8:	d8e5      	bhi.n	800cf86 <__multiply+0xfa>
 800cfba:	9a01      	ldr	r2, [sp, #4]
 800cfbc:	50a3      	str	r3, [r4, r2]
 800cfbe:	3404      	adds	r4, #4
 800cfc0:	e79f      	b.n	800cf02 <__multiply+0x76>
 800cfc2:	3e01      	subs	r6, #1
 800cfc4:	e7a1      	b.n	800cf0a <__multiply+0x7e>
 800cfc6:	bf00      	nop
 800cfc8:	0800f525 	.word	0x0800f525
 800cfcc:	0800f536 	.word	0x0800f536

0800cfd0 <__pow5mult>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	4615      	mov	r5, r2
 800cfd6:	f012 0203 	ands.w	r2, r2, #3
 800cfda:	4607      	mov	r7, r0
 800cfdc:	460e      	mov	r6, r1
 800cfde:	d007      	beq.n	800cff0 <__pow5mult+0x20>
 800cfe0:	4c25      	ldr	r4, [pc, #148]	@ (800d078 <__pow5mult+0xa8>)
 800cfe2:	3a01      	subs	r2, #1
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfea:	f7ff fe5d 	bl	800cca8 <__multadd>
 800cfee:	4606      	mov	r6, r0
 800cff0:	10ad      	asrs	r5, r5, #2
 800cff2:	d03d      	beq.n	800d070 <__pow5mult+0xa0>
 800cff4:	69fc      	ldr	r4, [r7, #28]
 800cff6:	b97c      	cbnz	r4, 800d018 <__pow5mult+0x48>
 800cff8:	2010      	movs	r0, #16
 800cffa:	f7ff fd3d 	bl	800ca78 <malloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	61f8      	str	r0, [r7, #28]
 800d002:	b928      	cbnz	r0, 800d010 <__pow5mult+0x40>
 800d004:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d008:	4b1c      	ldr	r3, [pc, #112]	@ (800d07c <__pow5mult+0xac>)
 800d00a:	481d      	ldr	r0, [pc, #116]	@ (800d080 <__pow5mult+0xb0>)
 800d00c:	f001 fb56 	bl	800e6bc <__assert_func>
 800d010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d014:	6004      	str	r4, [r0, #0]
 800d016:	60c4      	str	r4, [r0, #12]
 800d018:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d01c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d020:	b94c      	cbnz	r4, 800d036 <__pow5mult+0x66>
 800d022:	f240 2171 	movw	r1, #625	@ 0x271
 800d026:	4638      	mov	r0, r7
 800d028:	f7ff ff1a 	bl	800ce60 <__i2b>
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	f8c8 0008 	str.w	r0, [r8, #8]
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	f04f 0900 	mov.w	r9, #0
 800d03a:	07eb      	lsls	r3, r5, #31
 800d03c:	d50a      	bpl.n	800d054 <__pow5mult+0x84>
 800d03e:	4631      	mov	r1, r6
 800d040:	4622      	mov	r2, r4
 800d042:	4638      	mov	r0, r7
 800d044:	f7ff ff22 	bl	800ce8c <__multiply>
 800d048:	4680      	mov	r8, r0
 800d04a:	4631      	mov	r1, r6
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff fe09 	bl	800cc64 <_Bfree>
 800d052:	4646      	mov	r6, r8
 800d054:	106d      	asrs	r5, r5, #1
 800d056:	d00b      	beq.n	800d070 <__pow5mult+0xa0>
 800d058:	6820      	ldr	r0, [r4, #0]
 800d05a:	b938      	cbnz	r0, 800d06c <__pow5mult+0x9c>
 800d05c:	4622      	mov	r2, r4
 800d05e:	4621      	mov	r1, r4
 800d060:	4638      	mov	r0, r7
 800d062:	f7ff ff13 	bl	800ce8c <__multiply>
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	f8c0 9000 	str.w	r9, [r0]
 800d06c:	4604      	mov	r4, r0
 800d06e:	e7e4      	b.n	800d03a <__pow5mult+0x6a>
 800d070:	4630      	mov	r0, r6
 800d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d076:	bf00      	nop
 800d078:	0800f648 	.word	0x0800f648
 800d07c:	0800f4b6 	.word	0x0800f4b6
 800d080:	0800f536 	.word	0x0800f536

0800d084 <__lshift>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	460c      	mov	r4, r1
 800d08a:	4607      	mov	r7, r0
 800d08c:	4691      	mov	r9, r2
 800d08e:	6923      	ldr	r3, [r4, #16]
 800d090:	6849      	ldr	r1, [r1, #4]
 800d092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d09c:	f108 0601 	add.w	r6, r8, #1
 800d0a0:	42b3      	cmp	r3, r6
 800d0a2:	db0b      	blt.n	800d0bc <__lshift+0x38>
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff fd9d 	bl	800cbe4 <_Balloc>
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	b948      	cbnz	r0, 800d0c2 <__lshift+0x3e>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0b4:	4b27      	ldr	r3, [pc, #156]	@ (800d154 <__lshift+0xd0>)
 800d0b6:	4828      	ldr	r0, [pc, #160]	@ (800d158 <__lshift+0xd4>)
 800d0b8:	f001 fb00 	bl	800e6bc <__assert_func>
 800d0bc:	3101      	adds	r1, #1
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	e7ee      	b.n	800d0a0 <__lshift+0x1c>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f100 0114 	add.w	r1, r0, #20
 800d0c8:	f100 0210 	add.w	r2, r0, #16
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	4553      	cmp	r3, sl
 800d0d0:	db33      	blt.n	800d13a <__lshift+0xb6>
 800d0d2:	6920      	ldr	r0, [r4, #16]
 800d0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0d8:	f104 0314 	add.w	r3, r4, #20
 800d0dc:	f019 091f 	ands.w	r9, r9, #31
 800d0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0e8:	d02b      	beq.n	800d142 <__lshift+0xbe>
 800d0ea:	468a      	mov	sl, r1
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f1c9 0e20 	rsb	lr, r9, #32
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d0f8:	4310      	orrs	r0, r2
 800d0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d102:	459c      	cmp	ip, r3
 800d104:	fa22 f20e 	lsr.w	r2, r2, lr
 800d108:	d8f3      	bhi.n	800d0f2 <__lshift+0x6e>
 800d10a:	ebac 0304 	sub.w	r3, ip, r4
 800d10e:	3b15      	subs	r3, #21
 800d110:	f023 0303 	bic.w	r3, r3, #3
 800d114:	3304      	adds	r3, #4
 800d116:	f104 0015 	add.w	r0, r4, #21
 800d11a:	4560      	cmp	r0, ip
 800d11c:	bf88      	it	hi
 800d11e:	2304      	movhi	r3, #4
 800d120:	50ca      	str	r2, [r1, r3]
 800d122:	b10a      	cbz	r2, 800d128 <__lshift+0xa4>
 800d124:	f108 0602 	add.w	r6, r8, #2
 800d128:	3e01      	subs	r6, #1
 800d12a:	4638      	mov	r0, r7
 800d12c:	4621      	mov	r1, r4
 800d12e:	612e      	str	r6, [r5, #16]
 800d130:	f7ff fd98 	bl	800cc64 <_Bfree>
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d13e:	3301      	adds	r3, #1
 800d140:	e7c5      	b.n	800d0ce <__lshift+0x4a>
 800d142:	3904      	subs	r1, #4
 800d144:	f853 2b04 	ldr.w	r2, [r3], #4
 800d148:	459c      	cmp	ip, r3
 800d14a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d14e:	d8f9      	bhi.n	800d144 <__lshift+0xc0>
 800d150:	e7ea      	b.n	800d128 <__lshift+0xa4>
 800d152:	bf00      	nop
 800d154:	0800f525 	.word	0x0800f525
 800d158:	0800f536 	.word	0x0800f536

0800d15c <__mcmp>:
 800d15c:	4603      	mov	r3, r0
 800d15e:	690a      	ldr	r2, [r1, #16]
 800d160:	6900      	ldr	r0, [r0, #16]
 800d162:	b530      	push	{r4, r5, lr}
 800d164:	1a80      	subs	r0, r0, r2
 800d166:	d10e      	bne.n	800d186 <__mcmp+0x2a>
 800d168:	3314      	adds	r3, #20
 800d16a:	3114      	adds	r1, #20
 800d16c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d17c:	4295      	cmp	r5, r2
 800d17e:	d003      	beq.n	800d188 <__mcmp+0x2c>
 800d180:	d205      	bcs.n	800d18e <__mcmp+0x32>
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	bd30      	pop	{r4, r5, pc}
 800d188:	42a3      	cmp	r3, r4
 800d18a:	d3f3      	bcc.n	800d174 <__mcmp+0x18>
 800d18c:	e7fb      	b.n	800d186 <__mcmp+0x2a>
 800d18e:	2001      	movs	r0, #1
 800d190:	e7f9      	b.n	800d186 <__mcmp+0x2a>
	...

0800d194 <__mdiff>:
 800d194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4689      	mov	r9, r1
 800d19a:	4606      	mov	r6, r0
 800d19c:	4611      	mov	r1, r2
 800d19e:	4648      	mov	r0, r9
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	f7ff ffdb 	bl	800d15c <__mcmp>
 800d1a6:	1e05      	subs	r5, r0, #0
 800d1a8:	d112      	bne.n	800d1d0 <__mdiff+0x3c>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff fd19 	bl	800cbe4 <_Balloc>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	b928      	cbnz	r0, 800d1c2 <__mdiff+0x2e>
 800d1b6:	f240 2137 	movw	r1, #567	@ 0x237
 800d1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b4 <__mdiff+0x120>)
 800d1bc:	483e      	ldr	r0, [pc, #248]	@ (800d2b8 <__mdiff+0x124>)
 800d1be:	f001 fa7d 	bl	800e6bc <__assert_func>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	b003      	add	sp, #12
 800d1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d0:	bfbc      	itt	lt
 800d1d2:	464b      	movlt	r3, r9
 800d1d4:	46a1      	movlt	r9, r4
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1dc:	bfba      	itte	lt
 800d1de:	461c      	movlt	r4, r3
 800d1e0:	2501      	movlt	r5, #1
 800d1e2:	2500      	movge	r5, #0
 800d1e4:	f7ff fcfe 	bl	800cbe4 <_Balloc>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	b918      	cbnz	r0, 800d1f4 <__mdiff+0x60>
 800d1ec:	f240 2145 	movw	r1, #581	@ 0x245
 800d1f0:	4b30      	ldr	r3, [pc, #192]	@ (800d2b4 <__mdiff+0x120>)
 800d1f2:	e7e3      	b.n	800d1bc <__mdiff+0x28>
 800d1f4:	f100 0b14 	add.w	fp, r0, #20
 800d1f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d1fc:	f109 0310 	add.w	r3, r9, #16
 800d200:	60c5      	str	r5, [r0, #12]
 800d202:	f04f 0c00 	mov.w	ip, #0
 800d206:	f109 0514 	add.w	r5, r9, #20
 800d20a:	46d9      	mov	r9, fp
 800d20c:	6926      	ldr	r6, [r4, #16]
 800d20e:	f104 0e14 	add.w	lr, r4, #20
 800d212:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d216:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d21a:	9301      	str	r3, [sp, #4]
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d222:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d226:	b281      	uxth	r1, r0
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	fa1f f38a 	uxth.w	r3, sl
 800d22e:	1a5b      	subs	r3, r3, r1
 800d230:	0c00      	lsrs	r0, r0, #16
 800d232:	4463      	add	r3, ip
 800d234:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d238:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d242:	4576      	cmp	r6, lr
 800d244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d248:	f849 3b04 	str.w	r3, [r9], #4
 800d24c:	d8e6      	bhi.n	800d21c <__mdiff+0x88>
 800d24e:	1b33      	subs	r3, r6, r4
 800d250:	3b15      	subs	r3, #21
 800d252:	f023 0303 	bic.w	r3, r3, #3
 800d256:	3415      	adds	r4, #21
 800d258:	3304      	adds	r3, #4
 800d25a:	42a6      	cmp	r6, r4
 800d25c:	bf38      	it	cc
 800d25e:	2304      	movcc	r3, #4
 800d260:	441d      	add	r5, r3
 800d262:	445b      	add	r3, fp
 800d264:	461e      	mov	r6, r3
 800d266:	462c      	mov	r4, r5
 800d268:	4544      	cmp	r4, r8
 800d26a:	d30e      	bcc.n	800d28a <__mdiff+0xf6>
 800d26c:	f108 0103 	add.w	r1, r8, #3
 800d270:	1b49      	subs	r1, r1, r5
 800d272:	f021 0103 	bic.w	r1, r1, #3
 800d276:	3d03      	subs	r5, #3
 800d278:	45a8      	cmp	r8, r5
 800d27a:	bf38      	it	cc
 800d27c:	2100      	movcc	r1, #0
 800d27e:	440b      	add	r3, r1
 800d280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d284:	b199      	cbz	r1, 800d2ae <__mdiff+0x11a>
 800d286:	6117      	str	r7, [r2, #16]
 800d288:	e79e      	b.n	800d1c8 <__mdiff+0x34>
 800d28a:	46e6      	mov	lr, ip
 800d28c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d290:	fa1f fc81 	uxth.w	ip, r1
 800d294:	44f4      	add	ip, lr
 800d296:	0c08      	lsrs	r0, r1, #16
 800d298:	4471      	add	r1, lr
 800d29a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d29e:	b289      	uxth	r1, r1
 800d2a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d2a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2a8:	f846 1b04 	str.w	r1, [r6], #4
 800d2ac:	e7dc      	b.n	800d268 <__mdiff+0xd4>
 800d2ae:	3f01      	subs	r7, #1
 800d2b0:	e7e6      	b.n	800d280 <__mdiff+0xec>
 800d2b2:	bf00      	nop
 800d2b4:	0800f525 	.word	0x0800f525
 800d2b8:	0800f536 	.word	0x0800f536

0800d2bc <__ulp>:
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <__ulp+0x3c>)
 800d2be:	400b      	ands	r3, r1
 800d2c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	dc08      	bgt.n	800d2da <__ulp+0x1e>
 800d2c8:	425b      	negs	r3, r3
 800d2ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d2ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2d2:	da04      	bge.n	800d2de <__ulp+0x22>
 800d2d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d2d8:	4113      	asrs	r3, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	e008      	b.n	800d2f0 <__ulp+0x34>
 800d2de:	f1a2 0314 	sub.w	r3, r2, #20
 800d2e2:	2b1e      	cmp	r3, #30
 800d2e4:	bfd6      	itet	le
 800d2e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d2ea:	2201      	movgt	r2, #1
 800d2ec:	40da      	lsrle	r2, r3
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	7ff00000 	.word	0x7ff00000

0800d2fc <__b2d>:
 800d2fc:	6902      	ldr	r2, [r0, #16]
 800d2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d300:	f100 0614 	add.w	r6, r0, #20
 800d304:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d308:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d30c:	4f1e      	ldr	r7, [pc, #120]	@ (800d388 <__b2d+0x8c>)
 800d30e:	4620      	mov	r0, r4
 800d310:	f7ff fd5a 	bl	800cdc8 <__hi0bits>
 800d314:	4603      	mov	r3, r0
 800d316:	f1c0 0020 	rsb	r0, r0, #32
 800d31a:	2b0a      	cmp	r3, #10
 800d31c:	f1a2 0504 	sub.w	r5, r2, #4
 800d320:	6008      	str	r0, [r1, #0]
 800d322:	dc12      	bgt.n	800d34a <__b2d+0x4e>
 800d324:	42ae      	cmp	r6, r5
 800d326:	bf2c      	ite	cs
 800d328:	2200      	movcs	r2, #0
 800d32a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d32e:	f1c3 0c0b 	rsb	ip, r3, #11
 800d332:	3315      	adds	r3, #21
 800d334:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d338:	fa04 f303 	lsl.w	r3, r4, r3
 800d33c:	fa22 f20c 	lsr.w	r2, r2, ip
 800d340:	ea4e 0107 	orr.w	r1, lr, r7
 800d344:	431a      	orrs	r2, r3
 800d346:	4610      	mov	r0, r2
 800d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d34a:	42ae      	cmp	r6, r5
 800d34c:	bf36      	itet	cc
 800d34e:	f1a2 0508 	subcc.w	r5, r2, #8
 800d352:	2200      	movcs	r2, #0
 800d354:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d358:	3b0b      	subs	r3, #11
 800d35a:	d012      	beq.n	800d382 <__b2d+0x86>
 800d35c:	f1c3 0720 	rsb	r7, r3, #32
 800d360:	fa22 f107 	lsr.w	r1, r2, r7
 800d364:	409c      	lsls	r4, r3
 800d366:	430c      	orrs	r4, r1
 800d368:	42b5      	cmp	r5, r6
 800d36a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d36e:	bf94      	ite	ls
 800d370:	2400      	movls	r4, #0
 800d372:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d376:	409a      	lsls	r2, r3
 800d378:	40fc      	lsrs	r4, r7
 800d37a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d37e:	4322      	orrs	r2, r4
 800d380:	e7e1      	b.n	800d346 <__b2d+0x4a>
 800d382:	ea44 0107 	orr.w	r1, r4, r7
 800d386:	e7de      	b.n	800d346 <__b2d+0x4a>
 800d388:	3ff00000 	.word	0x3ff00000

0800d38c <__d2b>:
 800d38c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d390:	2101      	movs	r1, #1
 800d392:	4690      	mov	r8, r2
 800d394:	4699      	mov	r9, r3
 800d396:	9e08      	ldr	r6, [sp, #32]
 800d398:	f7ff fc24 	bl	800cbe4 <_Balloc>
 800d39c:	4604      	mov	r4, r0
 800d39e:	b930      	cbnz	r0, 800d3ae <__d2b+0x22>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d3a6:	4b23      	ldr	r3, [pc, #140]	@ (800d434 <__d2b+0xa8>)
 800d3a8:	4823      	ldr	r0, [pc, #140]	@ (800d438 <__d2b+0xac>)
 800d3aa:	f001 f987 	bl	800e6bc <__assert_func>
 800d3ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d3b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3b6:	b10d      	cbz	r5, 800d3bc <__d2b+0x30>
 800d3b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	f1b8 0300 	subs.w	r3, r8, #0
 800d3c2:	d024      	beq.n	800d40e <__d2b+0x82>
 800d3c4:	4668      	mov	r0, sp
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	f7ff fd1d 	bl	800ce06 <__lo0bits>
 800d3cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3d0:	b1d8      	cbz	r0, 800d40a <__d2b+0x7e>
 800d3d2:	f1c0 0320 	rsb	r3, r0, #32
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	430b      	orrs	r3, r1
 800d3dc:	40c2      	lsrs	r2, r0
 800d3de:	6163      	str	r3, [r4, #20]
 800d3e0:	9201      	str	r2, [sp, #4]
 800d3e2:	9b01      	ldr	r3, [sp, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	bf0c      	ite	eq
 800d3e8:	2201      	moveq	r2, #1
 800d3ea:	2202      	movne	r2, #2
 800d3ec:	61a3      	str	r3, [r4, #24]
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	b1ad      	cbz	r5, 800d41e <__d2b+0x92>
 800d3f2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3f6:	4405      	add	r5, r0
 800d3f8:	6035      	str	r5, [r6, #0]
 800d3fa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d400:	6018      	str	r0, [r3, #0]
 800d402:	4620      	mov	r0, r4
 800d404:	b002      	add	sp, #8
 800d406:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d40a:	6161      	str	r1, [r4, #20]
 800d40c:	e7e9      	b.n	800d3e2 <__d2b+0x56>
 800d40e:	a801      	add	r0, sp, #4
 800d410:	f7ff fcf9 	bl	800ce06 <__lo0bits>
 800d414:	9b01      	ldr	r3, [sp, #4]
 800d416:	2201      	movs	r2, #1
 800d418:	6163      	str	r3, [r4, #20]
 800d41a:	3020      	adds	r0, #32
 800d41c:	e7e7      	b.n	800d3ee <__d2b+0x62>
 800d41e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d426:	6030      	str	r0, [r6, #0]
 800d428:	6918      	ldr	r0, [r3, #16]
 800d42a:	f7ff fccd 	bl	800cdc8 <__hi0bits>
 800d42e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d432:	e7e4      	b.n	800d3fe <__d2b+0x72>
 800d434:	0800f525 	.word	0x0800f525
 800d438:	0800f536 	.word	0x0800f536

0800d43c <__ratio>:
 800d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	b085      	sub	sp, #20
 800d442:	e9cd 1000 	strd	r1, r0, [sp]
 800d446:	a902      	add	r1, sp, #8
 800d448:	f7ff ff58 	bl	800d2fc <__b2d>
 800d44c:	468b      	mov	fp, r1
 800d44e:	4606      	mov	r6, r0
 800d450:	460f      	mov	r7, r1
 800d452:	9800      	ldr	r0, [sp, #0]
 800d454:	a903      	add	r1, sp, #12
 800d456:	f7ff ff51 	bl	800d2fc <__b2d>
 800d45a:	460d      	mov	r5, r1
 800d45c:	9b01      	ldr	r3, [sp, #4]
 800d45e:	4689      	mov	r9, r1
 800d460:	6919      	ldr	r1, [r3, #16]
 800d462:	9b00      	ldr	r3, [sp, #0]
 800d464:	4604      	mov	r4, r0
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	4630      	mov	r0, r6
 800d46a:	1ac9      	subs	r1, r1, r3
 800d46c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d470:	1a9b      	subs	r3, r3, r2
 800d472:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfcd      	iteet	gt
 800d47a:	463a      	movgt	r2, r7
 800d47c:	462a      	movle	r2, r5
 800d47e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d482:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d486:	bfd8      	it	le
 800d488:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d48c:	464b      	mov	r3, r9
 800d48e:	4622      	mov	r2, r4
 800d490:	4659      	mov	r1, fp
 800d492:	f7f3 f94b 	bl	800072c <__aeabi_ddiv>
 800d496:	b005      	add	sp, #20
 800d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d49c <__copybits>:
 800d49c:	3901      	subs	r1, #1
 800d49e:	b570      	push	{r4, r5, r6, lr}
 800d4a0:	1149      	asrs	r1, r1, #5
 800d4a2:	6914      	ldr	r4, [r2, #16]
 800d4a4:	3101      	adds	r1, #1
 800d4a6:	f102 0314 	add.w	r3, r2, #20
 800d4aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d4ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d4b2:	1f05      	subs	r5, r0, #4
 800d4b4:	42a3      	cmp	r3, r4
 800d4b6:	d30c      	bcc.n	800d4d2 <__copybits+0x36>
 800d4b8:	1aa3      	subs	r3, r4, r2
 800d4ba:	3b11      	subs	r3, #17
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	3211      	adds	r2, #17
 800d4c2:	42a2      	cmp	r2, r4
 800d4c4:	bf88      	it	hi
 800d4c6:	2300      	movhi	r3, #0
 800d4c8:	4418      	add	r0, r3
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4288      	cmp	r0, r1
 800d4ce:	d305      	bcc.n	800d4dc <__copybits+0x40>
 800d4d0:	bd70      	pop	{r4, r5, r6, pc}
 800d4d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d4d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4da:	e7eb      	b.n	800d4b4 <__copybits+0x18>
 800d4dc:	f840 3b04 	str.w	r3, [r0], #4
 800d4e0:	e7f4      	b.n	800d4cc <__copybits+0x30>

0800d4e2 <__any_on>:
 800d4e2:	f100 0214 	add.w	r2, r0, #20
 800d4e6:	6900      	ldr	r0, [r0, #16]
 800d4e8:	114b      	asrs	r3, r1, #5
 800d4ea:	4298      	cmp	r0, r3
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	db11      	blt.n	800d514 <__any_on+0x32>
 800d4f0:	dd0a      	ble.n	800d508 <__any_on+0x26>
 800d4f2:	f011 011f 	ands.w	r1, r1, #31
 800d4f6:	d007      	beq.n	800d508 <__any_on+0x26>
 800d4f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d4fc:	fa24 f001 	lsr.w	r0, r4, r1
 800d500:	fa00 f101 	lsl.w	r1, r0, r1
 800d504:	428c      	cmp	r4, r1
 800d506:	d10b      	bne.n	800d520 <__any_on+0x3e>
 800d508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d803      	bhi.n	800d518 <__any_on+0x36>
 800d510:	2000      	movs	r0, #0
 800d512:	bd10      	pop	{r4, pc}
 800d514:	4603      	mov	r3, r0
 800d516:	e7f7      	b.n	800d508 <__any_on+0x26>
 800d518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d51c:	2900      	cmp	r1, #0
 800d51e:	d0f5      	beq.n	800d50c <__any_on+0x2a>
 800d520:	2001      	movs	r0, #1
 800d522:	e7f6      	b.n	800d512 <__any_on+0x30>

0800d524 <sulp>:
 800d524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d528:	460f      	mov	r7, r1
 800d52a:	4690      	mov	r8, r2
 800d52c:	f7ff fec6 	bl	800d2bc <__ulp>
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	f1b8 0f00 	cmp.w	r8, #0
 800d538:	d011      	beq.n	800d55e <sulp+0x3a>
 800d53a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d53e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d542:	2b00      	cmp	r3, #0
 800d544:	dd0b      	ble.n	800d55e <sulp+0x3a>
 800d546:	2400      	movs	r4, #0
 800d548:	051b      	lsls	r3, r3, #20
 800d54a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d54e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d552:	4622      	mov	r2, r4
 800d554:	462b      	mov	r3, r5
 800d556:	f7f2 ffbf 	bl	80004d8 <__aeabi_dmul>
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d568 <_strtod_l>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	b09f      	sub	sp, #124	@ 0x7c
 800d56e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d570:	2200      	movs	r2, #0
 800d572:	460c      	mov	r4, r1
 800d574:	921a      	str	r2, [sp, #104]	@ 0x68
 800d576:	f04f 0a00 	mov.w	sl, #0
 800d57a:	f04f 0b00 	mov.w	fp, #0
 800d57e:	460a      	mov	r2, r1
 800d580:	9005      	str	r0, [sp, #20]
 800d582:	9219      	str	r2, [sp, #100]	@ 0x64
 800d584:	7811      	ldrb	r1, [r2, #0]
 800d586:	292b      	cmp	r1, #43	@ 0x2b
 800d588:	d048      	beq.n	800d61c <_strtod_l+0xb4>
 800d58a:	d836      	bhi.n	800d5fa <_strtod_l+0x92>
 800d58c:	290d      	cmp	r1, #13
 800d58e:	d830      	bhi.n	800d5f2 <_strtod_l+0x8a>
 800d590:	2908      	cmp	r1, #8
 800d592:	d830      	bhi.n	800d5f6 <_strtod_l+0x8e>
 800d594:	2900      	cmp	r1, #0
 800d596:	d039      	beq.n	800d60c <_strtod_l+0xa4>
 800d598:	2200      	movs	r2, #0
 800d59a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d59c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d59e:	782a      	ldrb	r2, [r5, #0]
 800d5a0:	2a30      	cmp	r2, #48	@ 0x30
 800d5a2:	f040 80b0 	bne.w	800d706 <_strtod_l+0x19e>
 800d5a6:	786a      	ldrb	r2, [r5, #1]
 800d5a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d5ac:	2a58      	cmp	r2, #88	@ 0x58
 800d5ae:	d16c      	bne.n	800d68a <_strtod_l+0x122>
 800d5b0:	9302      	str	r3, [sp, #8]
 800d5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5b4:	4a8f      	ldr	r2, [pc, #572]	@ (800d7f4 <_strtod_l+0x28c>)
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	ab1a      	add	r3, sp, #104	@ 0x68
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	9805      	ldr	r0, [sp, #20]
 800d5be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d5c0:	a919      	add	r1, sp, #100	@ 0x64
 800d5c2:	f001 f915 	bl	800e7f0 <__gethex>
 800d5c6:	f010 060f 	ands.w	r6, r0, #15
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	d005      	beq.n	800d5da <_strtod_l+0x72>
 800d5ce:	2e06      	cmp	r6, #6
 800d5d0:	d126      	bne.n	800d620 <_strtod_l+0xb8>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	3501      	adds	r5, #1
 800d5d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f040 8582 	bne.w	800e0e6 <_strtod_l+0xb7e>
 800d5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5e4:	b1bb      	cbz	r3, 800d616 <_strtod_l+0xae>
 800d5e6:	4650      	mov	r0, sl
 800d5e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800d5ec:	b01f      	add	sp, #124	@ 0x7c
 800d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f2:	2920      	cmp	r1, #32
 800d5f4:	d1d0      	bne.n	800d598 <_strtod_l+0x30>
 800d5f6:	3201      	adds	r2, #1
 800d5f8:	e7c3      	b.n	800d582 <_strtod_l+0x1a>
 800d5fa:	292d      	cmp	r1, #45	@ 0x2d
 800d5fc:	d1cc      	bne.n	800d598 <_strtod_l+0x30>
 800d5fe:	2101      	movs	r1, #1
 800d600:	910e      	str	r1, [sp, #56]	@ 0x38
 800d602:	1c51      	adds	r1, r2, #1
 800d604:	9119      	str	r1, [sp, #100]	@ 0x64
 800d606:	7852      	ldrb	r2, [r2, #1]
 800d608:	2a00      	cmp	r2, #0
 800d60a:	d1c7      	bne.n	800d59c <_strtod_l+0x34>
 800d60c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d60e:	9419      	str	r4, [sp, #100]	@ 0x64
 800d610:	2b00      	cmp	r3, #0
 800d612:	f040 8566 	bne.w	800e0e2 <_strtod_l+0xb7a>
 800d616:	4650      	mov	r0, sl
 800d618:	4659      	mov	r1, fp
 800d61a:	e7e7      	b.n	800d5ec <_strtod_l+0x84>
 800d61c:	2100      	movs	r1, #0
 800d61e:	e7ef      	b.n	800d600 <_strtod_l+0x98>
 800d620:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d622:	b13a      	cbz	r2, 800d634 <_strtod_l+0xcc>
 800d624:	2135      	movs	r1, #53	@ 0x35
 800d626:	a81c      	add	r0, sp, #112	@ 0x70
 800d628:	f7ff ff38 	bl	800d49c <__copybits>
 800d62c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d62e:	9805      	ldr	r0, [sp, #20]
 800d630:	f7ff fb18 	bl	800cc64 <_Bfree>
 800d634:	3e01      	subs	r6, #1
 800d636:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d638:	2e04      	cmp	r6, #4
 800d63a:	d806      	bhi.n	800d64a <_strtod_l+0xe2>
 800d63c:	e8df f006 	tbb	[pc, r6]
 800d640:	201d0314 	.word	0x201d0314
 800d644:	14          	.byte	0x14
 800d645:	00          	.byte	0x00
 800d646:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d64a:	05e1      	lsls	r1, r4, #23
 800d64c:	bf48      	it	mi
 800d64e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d652:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d656:	0d1b      	lsrs	r3, r3, #20
 800d658:	051b      	lsls	r3, r3, #20
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1bd      	bne.n	800d5da <_strtod_l+0x72>
 800d65e:	f7fe fb27 	bl	800bcb0 <__errno>
 800d662:	2322      	movs	r3, #34	@ 0x22
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	e7b8      	b.n	800d5da <_strtod_l+0x72>
 800d668:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d66c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d670:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d674:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d678:	e7e7      	b.n	800d64a <_strtod_l+0xe2>
 800d67a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d7f8 <_strtod_l+0x290>
 800d67e:	e7e4      	b.n	800d64a <_strtod_l+0xe2>
 800d680:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d684:	f04f 3aff 	mov.w	sl, #4294967295
 800d688:	e7df      	b.n	800d64a <_strtod_l+0xe2>
 800d68a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d690:	785b      	ldrb	r3, [r3, #1]
 800d692:	2b30      	cmp	r3, #48	@ 0x30
 800d694:	d0f9      	beq.n	800d68a <_strtod_l+0x122>
 800d696:	2b00      	cmp	r3, #0
 800d698:	d09f      	beq.n	800d5da <_strtod_l+0x72>
 800d69a:	2301      	movs	r3, #1
 800d69c:	2700      	movs	r7, #0
 800d69e:	220a      	movs	r2, #10
 800d6a0:	46b9      	mov	r9, r7
 800d6a2:	9308      	str	r3, [sp, #32]
 800d6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6a6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d6a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d6aa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d6ac:	7805      	ldrb	r5, [r0, #0]
 800d6ae:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d6b2:	b2d9      	uxtb	r1, r3
 800d6b4:	2909      	cmp	r1, #9
 800d6b6:	d928      	bls.n	800d70a <_strtod_l+0x1a2>
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	4950      	ldr	r1, [pc, #320]	@ (800d7fc <_strtod_l+0x294>)
 800d6bc:	f000 ffc8 	bl	800e650 <strncmp>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d032      	beq.n	800d72a <_strtod_l+0x1c2>
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	462a      	mov	r2, r5
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	464d      	mov	r5, r9
 800d6cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d6ce:	2a65      	cmp	r2, #101	@ 0x65
 800d6d0:	d001      	beq.n	800d6d6 <_strtod_l+0x16e>
 800d6d2:	2a45      	cmp	r2, #69	@ 0x45
 800d6d4:	d114      	bne.n	800d700 <_strtod_l+0x198>
 800d6d6:	b91d      	cbnz	r5, 800d6e0 <_strtod_l+0x178>
 800d6d8:	9a08      	ldr	r2, [sp, #32]
 800d6da:	4302      	orrs	r2, r0
 800d6dc:	d096      	beq.n	800d60c <_strtod_l+0xa4>
 800d6de:	2500      	movs	r5, #0
 800d6e0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d6e2:	1c62      	adds	r2, r4, #1
 800d6e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6e6:	7862      	ldrb	r2, [r4, #1]
 800d6e8:	2a2b      	cmp	r2, #43	@ 0x2b
 800d6ea:	d07a      	beq.n	800d7e2 <_strtod_l+0x27a>
 800d6ec:	2a2d      	cmp	r2, #45	@ 0x2d
 800d6ee:	d07e      	beq.n	800d7ee <_strtod_l+0x286>
 800d6f0:	f04f 0c00 	mov.w	ip, #0
 800d6f4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d6f8:	2909      	cmp	r1, #9
 800d6fa:	f240 8085 	bls.w	800d808 <_strtod_l+0x2a0>
 800d6fe:	9419      	str	r4, [sp, #100]	@ 0x64
 800d700:	f04f 0800 	mov.w	r8, #0
 800d704:	e0a5      	b.n	800d852 <_strtod_l+0x2ea>
 800d706:	2300      	movs	r3, #0
 800d708:	e7c8      	b.n	800d69c <_strtod_l+0x134>
 800d70a:	f1b9 0f08 	cmp.w	r9, #8
 800d70e:	bfd8      	it	le
 800d710:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d712:	f100 0001 	add.w	r0, r0, #1
 800d716:	bfd6      	itet	le
 800d718:	fb02 3301 	mlale	r3, r2, r1, r3
 800d71c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d720:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d722:	f109 0901 	add.w	r9, r9, #1
 800d726:	9019      	str	r0, [sp, #100]	@ 0x64
 800d728:	e7bf      	b.n	800d6aa <_strtod_l+0x142>
 800d72a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d730:	785a      	ldrb	r2, [r3, #1]
 800d732:	f1b9 0f00 	cmp.w	r9, #0
 800d736:	d03b      	beq.n	800d7b0 <_strtod_l+0x248>
 800d738:	464d      	mov	r5, r9
 800d73a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d73c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d740:	2b09      	cmp	r3, #9
 800d742:	d912      	bls.n	800d76a <_strtod_l+0x202>
 800d744:	2301      	movs	r3, #1
 800d746:	e7c2      	b.n	800d6ce <_strtod_l+0x166>
 800d748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d74a:	3001      	adds	r0, #1
 800d74c:	1c5a      	adds	r2, r3, #1
 800d74e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d750:	785a      	ldrb	r2, [r3, #1]
 800d752:	2a30      	cmp	r2, #48	@ 0x30
 800d754:	d0f8      	beq.n	800d748 <_strtod_l+0x1e0>
 800d756:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d75a:	2b08      	cmp	r3, #8
 800d75c:	f200 84c8 	bhi.w	800e0f0 <_strtod_l+0xb88>
 800d760:	900a      	str	r0, [sp, #40]	@ 0x28
 800d762:	2000      	movs	r0, #0
 800d764:	4605      	mov	r5, r0
 800d766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d768:	930c      	str	r3, [sp, #48]	@ 0x30
 800d76a:	3a30      	subs	r2, #48	@ 0x30
 800d76c:	f100 0301 	add.w	r3, r0, #1
 800d770:	d018      	beq.n	800d7a4 <_strtod_l+0x23c>
 800d772:	462e      	mov	r6, r5
 800d774:	f04f 0e0a 	mov.w	lr, #10
 800d778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d77a:	4419      	add	r1, r3
 800d77c:	910a      	str	r1, [sp, #40]	@ 0x28
 800d77e:	1c71      	adds	r1, r6, #1
 800d780:	eba1 0c05 	sub.w	ip, r1, r5
 800d784:	4563      	cmp	r3, ip
 800d786:	dc15      	bgt.n	800d7b4 <_strtod_l+0x24c>
 800d788:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d78c:	182b      	adds	r3, r5, r0
 800d78e:	2b08      	cmp	r3, #8
 800d790:	f105 0501 	add.w	r5, r5, #1
 800d794:	4405      	add	r5, r0
 800d796:	dc1a      	bgt.n	800d7ce <_strtod_l+0x266>
 800d798:	230a      	movs	r3, #10
 800d79a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d79c:	fb03 2301 	mla	r3, r3, r1, r2
 800d7a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	1c51      	adds	r1, r2, #1
 800d7aa:	9119      	str	r1, [sp, #100]	@ 0x64
 800d7ac:	7852      	ldrb	r2, [r2, #1]
 800d7ae:	e7c5      	b.n	800d73c <_strtod_l+0x1d4>
 800d7b0:	4648      	mov	r0, r9
 800d7b2:	e7ce      	b.n	800d752 <_strtod_l+0x1ea>
 800d7b4:	2e08      	cmp	r6, #8
 800d7b6:	dc05      	bgt.n	800d7c4 <_strtod_l+0x25c>
 800d7b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d7ba:	fb0e f606 	mul.w	r6, lr, r6
 800d7be:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	e7dc      	b.n	800d77e <_strtod_l+0x216>
 800d7c4:	2910      	cmp	r1, #16
 800d7c6:	bfd8      	it	le
 800d7c8:	fb0e f707 	mulle.w	r7, lr, r7
 800d7cc:	e7f8      	b.n	800d7c0 <_strtod_l+0x258>
 800d7ce:	2b0f      	cmp	r3, #15
 800d7d0:	bfdc      	itt	le
 800d7d2:	230a      	movle	r3, #10
 800d7d4:	fb03 2707 	mlale	r7, r3, r7, r2
 800d7d8:	e7e3      	b.n	800d7a2 <_strtod_l+0x23a>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e77a      	b.n	800d6d8 <_strtod_l+0x170>
 800d7e2:	f04f 0c00 	mov.w	ip, #0
 800d7e6:	1ca2      	adds	r2, r4, #2
 800d7e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7ea:	78a2      	ldrb	r2, [r4, #2]
 800d7ec:	e782      	b.n	800d6f4 <_strtod_l+0x18c>
 800d7ee:	f04f 0c01 	mov.w	ip, #1
 800d7f2:	e7f8      	b.n	800d7e6 <_strtod_l+0x27e>
 800d7f4:	0800f75c 	.word	0x0800f75c
 800d7f8:	7ff00000 	.word	0x7ff00000
 800d7fc:	0800f58f 	.word	0x0800f58f
 800d800:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d802:	1c51      	adds	r1, r2, #1
 800d804:	9119      	str	r1, [sp, #100]	@ 0x64
 800d806:	7852      	ldrb	r2, [r2, #1]
 800d808:	2a30      	cmp	r2, #48	@ 0x30
 800d80a:	d0f9      	beq.n	800d800 <_strtod_l+0x298>
 800d80c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d810:	2908      	cmp	r1, #8
 800d812:	f63f af75 	bhi.w	800d700 <_strtod_l+0x198>
 800d816:	f04f 080a 	mov.w	r8, #10
 800d81a:	3a30      	subs	r2, #48	@ 0x30
 800d81c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d81e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d820:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d822:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d824:	1c56      	adds	r6, r2, #1
 800d826:	9619      	str	r6, [sp, #100]	@ 0x64
 800d828:	7852      	ldrb	r2, [r2, #1]
 800d82a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d82e:	f1be 0f09 	cmp.w	lr, #9
 800d832:	d939      	bls.n	800d8a8 <_strtod_l+0x340>
 800d834:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d836:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d83a:	1a76      	subs	r6, r6, r1
 800d83c:	2e08      	cmp	r6, #8
 800d83e:	dc03      	bgt.n	800d848 <_strtod_l+0x2e0>
 800d840:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d842:	4588      	cmp	r8, r1
 800d844:	bfa8      	it	ge
 800d846:	4688      	movge	r8, r1
 800d848:	f1bc 0f00 	cmp.w	ip, #0
 800d84c:	d001      	beq.n	800d852 <_strtod_l+0x2ea>
 800d84e:	f1c8 0800 	rsb	r8, r8, #0
 800d852:	2d00      	cmp	r5, #0
 800d854:	d14e      	bne.n	800d8f4 <_strtod_l+0x38c>
 800d856:	9908      	ldr	r1, [sp, #32]
 800d858:	4308      	orrs	r0, r1
 800d85a:	f47f aebe 	bne.w	800d5da <_strtod_l+0x72>
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f47f aed4 	bne.w	800d60c <_strtod_l+0xa4>
 800d864:	2a69      	cmp	r2, #105	@ 0x69
 800d866:	d028      	beq.n	800d8ba <_strtod_l+0x352>
 800d868:	dc25      	bgt.n	800d8b6 <_strtod_l+0x34e>
 800d86a:	2a49      	cmp	r2, #73	@ 0x49
 800d86c:	d025      	beq.n	800d8ba <_strtod_l+0x352>
 800d86e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d870:	f47f aecc 	bne.w	800d60c <_strtod_l+0xa4>
 800d874:	4999      	ldr	r1, [pc, #612]	@ (800dadc <_strtod_l+0x574>)
 800d876:	a819      	add	r0, sp, #100	@ 0x64
 800d878:	f001 f9dc 	bl	800ec34 <__match>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	f43f aec5 	beq.w	800d60c <_strtod_l+0xa4>
 800d882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b28      	cmp	r3, #40	@ 0x28
 800d888:	d12e      	bne.n	800d8e8 <_strtod_l+0x380>
 800d88a:	4995      	ldr	r1, [pc, #596]	@ (800dae0 <_strtod_l+0x578>)
 800d88c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d88e:	a819      	add	r0, sp, #100	@ 0x64
 800d890:	f001 f9e4 	bl	800ec5c <__hexnan>
 800d894:	2805      	cmp	r0, #5
 800d896:	d127      	bne.n	800d8e8 <_strtod_l+0x380>
 800d898:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d89a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d89e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d8a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d8a6:	e698      	b.n	800d5da <_strtod_l+0x72>
 800d8a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d8aa:	fb08 2101 	mla	r1, r8, r1, r2
 800d8ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d8b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8b4:	e7b5      	b.n	800d822 <_strtod_l+0x2ba>
 800d8b6:	2a6e      	cmp	r2, #110	@ 0x6e
 800d8b8:	e7da      	b.n	800d870 <_strtod_l+0x308>
 800d8ba:	498a      	ldr	r1, [pc, #552]	@ (800dae4 <_strtod_l+0x57c>)
 800d8bc:	a819      	add	r0, sp, #100	@ 0x64
 800d8be:	f001 f9b9 	bl	800ec34 <__match>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	f43f aea2 	beq.w	800d60c <_strtod_l+0xa4>
 800d8c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8ca:	4987      	ldr	r1, [pc, #540]	@ (800dae8 <_strtod_l+0x580>)
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	a819      	add	r0, sp, #100	@ 0x64
 800d8d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8d2:	f001 f9af 	bl	800ec34 <__match>
 800d8d6:	b910      	cbnz	r0, 800d8de <_strtod_l+0x376>
 800d8d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8da:	3301      	adds	r3, #1
 800d8dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d8de:	f04f 0a00 	mov.w	sl, #0
 800d8e2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800daec <_strtod_l+0x584>
 800d8e6:	e678      	b.n	800d5da <_strtod_l+0x72>
 800d8e8:	4881      	ldr	r0, [pc, #516]	@ (800daf0 <_strtod_l+0x588>)
 800d8ea:	f000 fee1 	bl	800e6b0 <nan>
 800d8ee:	4682      	mov	sl, r0
 800d8f0:	468b      	mov	fp, r1
 800d8f2:	e672      	b.n	800d5da <_strtod_l+0x72>
 800d8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8f6:	f1b9 0f00 	cmp.w	r9, #0
 800d8fa:	bf08      	it	eq
 800d8fc:	46a9      	moveq	r9, r5
 800d8fe:	eba8 0303 	sub.w	r3, r8, r3
 800d902:	2d10      	cmp	r5, #16
 800d904:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d906:	462c      	mov	r4, r5
 800d908:	9309      	str	r3, [sp, #36]	@ 0x24
 800d90a:	bfa8      	it	ge
 800d90c:	2410      	movge	r4, #16
 800d90e:	f7f2 fd69 	bl	80003e4 <__aeabi_ui2d>
 800d912:	2d09      	cmp	r5, #9
 800d914:	4682      	mov	sl, r0
 800d916:	468b      	mov	fp, r1
 800d918:	dc11      	bgt.n	800d93e <_strtod_l+0x3d6>
 800d91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f43f ae5c 	beq.w	800d5da <_strtod_l+0x72>
 800d922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d924:	dd76      	ble.n	800da14 <_strtod_l+0x4ac>
 800d926:	2b16      	cmp	r3, #22
 800d928:	dc5d      	bgt.n	800d9e6 <_strtod_l+0x47e>
 800d92a:	4972      	ldr	r1, [pc, #456]	@ (800daf4 <_strtod_l+0x58c>)
 800d92c:	4652      	mov	r2, sl
 800d92e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d932:	465b      	mov	r3, fp
 800d934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d938:	f7f2 fdce 	bl	80004d8 <__aeabi_dmul>
 800d93c:	e7d7      	b.n	800d8ee <_strtod_l+0x386>
 800d93e:	4b6d      	ldr	r3, [pc, #436]	@ (800daf4 <_strtod_l+0x58c>)
 800d940:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d944:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d948:	f7f2 fdc6 	bl	80004d8 <__aeabi_dmul>
 800d94c:	4682      	mov	sl, r0
 800d94e:	4638      	mov	r0, r7
 800d950:	468b      	mov	fp, r1
 800d952:	f7f2 fd47 	bl	80003e4 <__aeabi_ui2d>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	4650      	mov	r0, sl
 800d95c:	4659      	mov	r1, fp
 800d95e:	f7f2 fc05 	bl	800016c <__adddf3>
 800d962:	2d0f      	cmp	r5, #15
 800d964:	4682      	mov	sl, r0
 800d966:	468b      	mov	fp, r1
 800d968:	ddd7      	ble.n	800d91a <_strtod_l+0x3b2>
 800d96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96c:	1b2c      	subs	r4, r5, r4
 800d96e:	441c      	add	r4, r3
 800d970:	2c00      	cmp	r4, #0
 800d972:	f340 8093 	ble.w	800da9c <_strtod_l+0x534>
 800d976:	f014 030f 	ands.w	r3, r4, #15
 800d97a:	d00a      	beq.n	800d992 <_strtod_l+0x42a>
 800d97c:	495d      	ldr	r1, [pc, #372]	@ (800daf4 <_strtod_l+0x58c>)
 800d97e:	4652      	mov	r2, sl
 800d980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d984:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d988:	465b      	mov	r3, fp
 800d98a:	f7f2 fda5 	bl	80004d8 <__aeabi_dmul>
 800d98e:	4682      	mov	sl, r0
 800d990:	468b      	mov	fp, r1
 800d992:	f034 040f 	bics.w	r4, r4, #15
 800d996:	d073      	beq.n	800da80 <_strtod_l+0x518>
 800d998:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d99c:	dd49      	ble.n	800da32 <_strtod_l+0x4ca>
 800d99e:	2400      	movs	r4, #0
 800d9a0:	46a0      	mov	r8, r4
 800d9a2:	46a1      	mov	r9, r4
 800d9a4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d9a6:	2322      	movs	r3, #34	@ 0x22
 800d9a8:	f04f 0a00 	mov.w	sl, #0
 800d9ac:	9a05      	ldr	r2, [sp, #20]
 800d9ae:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800daec <_strtod_l+0x584>
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	f43f ae0f 	beq.w	800d5da <_strtod_l+0x72>
 800d9bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9be:	9805      	ldr	r0, [sp, #20]
 800d9c0:	f7ff f950 	bl	800cc64 <_Bfree>
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	9805      	ldr	r0, [sp, #20]
 800d9c8:	f7ff f94c 	bl	800cc64 <_Bfree>
 800d9cc:	4641      	mov	r1, r8
 800d9ce:	9805      	ldr	r0, [sp, #20]
 800d9d0:	f7ff f948 	bl	800cc64 <_Bfree>
 800d9d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9d6:	9805      	ldr	r0, [sp, #20]
 800d9d8:	f7ff f944 	bl	800cc64 <_Bfree>
 800d9dc:	4621      	mov	r1, r4
 800d9de:	9805      	ldr	r0, [sp, #20]
 800d9e0:	f7ff f940 	bl	800cc64 <_Bfree>
 800d9e4:	e5f9      	b.n	800d5da <_strtod_l+0x72>
 800d9e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	dbbc      	blt.n	800d96a <_strtod_l+0x402>
 800d9f0:	4c40      	ldr	r4, [pc, #256]	@ (800daf4 <_strtod_l+0x58c>)
 800d9f2:	f1c5 050f 	rsb	r5, r5, #15
 800d9f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d9fa:	4652      	mov	r2, sl
 800d9fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da00:	465b      	mov	r3, fp
 800da02:	f7f2 fd69 	bl	80004d8 <__aeabi_dmul>
 800da06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da08:	1b5d      	subs	r5, r3, r5
 800da0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800da0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da12:	e791      	b.n	800d938 <_strtod_l+0x3d0>
 800da14:	3316      	adds	r3, #22
 800da16:	dba8      	blt.n	800d96a <_strtod_l+0x402>
 800da18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da1a:	4650      	mov	r0, sl
 800da1c:	eba3 0808 	sub.w	r8, r3, r8
 800da20:	4b34      	ldr	r3, [pc, #208]	@ (800daf4 <_strtod_l+0x58c>)
 800da22:	4659      	mov	r1, fp
 800da24:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800da28:	e9d8 2300 	ldrd	r2, r3, [r8]
 800da2c:	f7f2 fe7e 	bl	800072c <__aeabi_ddiv>
 800da30:	e75d      	b.n	800d8ee <_strtod_l+0x386>
 800da32:	2300      	movs	r3, #0
 800da34:	4650      	mov	r0, sl
 800da36:	4659      	mov	r1, fp
 800da38:	461e      	mov	r6, r3
 800da3a:	4f2f      	ldr	r7, [pc, #188]	@ (800daf8 <_strtod_l+0x590>)
 800da3c:	1124      	asrs	r4, r4, #4
 800da3e:	2c01      	cmp	r4, #1
 800da40:	dc21      	bgt.n	800da86 <_strtod_l+0x51e>
 800da42:	b10b      	cbz	r3, 800da48 <_strtod_l+0x4e0>
 800da44:	4682      	mov	sl, r0
 800da46:	468b      	mov	fp, r1
 800da48:	492b      	ldr	r1, [pc, #172]	@ (800daf8 <_strtod_l+0x590>)
 800da4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800da4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800da52:	4652      	mov	r2, sl
 800da54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da58:	465b      	mov	r3, fp
 800da5a:	f7f2 fd3d 	bl	80004d8 <__aeabi_dmul>
 800da5e:	4b23      	ldr	r3, [pc, #140]	@ (800daec <_strtod_l+0x584>)
 800da60:	460a      	mov	r2, r1
 800da62:	400b      	ands	r3, r1
 800da64:	4925      	ldr	r1, [pc, #148]	@ (800dafc <_strtod_l+0x594>)
 800da66:	4682      	mov	sl, r0
 800da68:	428b      	cmp	r3, r1
 800da6a:	d898      	bhi.n	800d99e <_strtod_l+0x436>
 800da6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800da70:	428b      	cmp	r3, r1
 800da72:	bf86      	itte	hi
 800da74:	f04f 3aff 	movhi.w	sl, #4294967295
 800da78:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800db00 <_strtod_l+0x598>
 800da7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800da80:	2300      	movs	r3, #0
 800da82:	9308      	str	r3, [sp, #32]
 800da84:	e076      	b.n	800db74 <_strtod_l+0x60c>
 800da86:	07e2      	lsls	r2, r4, #31
 800da88:	d504      	bpl.n	800da94 <_strtod_l+0x52c>
 800da8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da8e:	f7f2 fd23 	bl	80004d8 <__aeabi_dmul>
 800da92:	2301      	movs	r3, #1
 800da94:	3601      	adds	r6, #1
 800da96:	1064      	asrs	r4, r4, #1
 800da98:	3708      	adds	r7, #8
 800da9a:	e7d0      	b.n	800da3e <_strtod_l+0x4d6>
 800da9c:	d0f0      	beq.n	800da80 <_strtod_l+0x518>
 800da9e:	4264      	negs	r4, r4
 800daa0:	f014 020f 	ands.w	r2, r4, #15
 800daa4:	d00a      	beq.n	800dabc <_strtod_l+0x554>
 800daa6:	4b13      	ldr	r3, [pc, #76]	@ (800daf4 <_strtod_l+0x58c>)
 800daa8:	4650      	mov	r0, sl
 800daaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daae:	4659      	mov	r1, fp
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f7f2 fe3a 	bl	800072c <__aeabi_ddiv>
 800dab8:	4682      	mov	sl, r0
 800daba:	468b      	mov	fp, r1
 800dabc:	1124      	asrs	r4, r4, #4
 800dabe:	d0df      	beq.n	800da80 <_strtod_l+0x518>
 800dac0:	2c1f      	cmp	r4, #31
 800dac2:	dd1f      	ble.n	800db04 <_strtod_l+0x59c>
 800dac4:	2400      	movs	r4, #0
 800dac6:	46a0      	mov	r8, r4
 800dac8:	46a1      	mov	r9, r4
 800daca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dacc:	2322      	movs	r3, #34	@ 0x22
 800dace:	9a05      	ldr	r2, [sp, #20]
 800dad0:	f04f 0a00 	mov.w	sl, #0
 800dad4:	f04f 0b00 	mov.w	fp, #0
 800dad8:	6013      	str	r3, [r2, #0]
 800dada:	e76b      	b.n	800d9b4 <_strtod_l+0x44c>
 800dadc:	0800f47d 	.word	0x0800f47d
 800dae0:	0800f748 	.word	0x0800f748
 800dae4:	0800f475 	.word	0x0800f475
 800dae8:	0800f4ac 	.word	0x0800f4ac
 800daec:	7ff00000 	.word	0x7ff00000
 800daf0:	0800f5e5 	.word	0x0800f5e5
 800daf4:	0800f680 	.word	0x0800f680
 800daf8:	0800f658 	.word	0x0800f658
 800dafc:	7ca00000 	.word	0x7ca00000
 800db00:	7fefffff 	.word	0x7fefffff
 800db04:	f014 0310 	ands.w	r3, r4, #16
 800db08:	bf18      	it	ne
 800db0a:	236a      	movne	r3, #106	@ 0x6a
 800db0c:	4650      	mov	r0, sl
 800db0e:	9308      	str	r3, [sp, #32]
 800db10:	4659      	mov	r1, fp
 800db12:	2300      	movs	r3, #0
 800db14:	4e77      	ldr	r6, [pc, #476]	@ (800dcf4 <_strtod_l+0x78c>)
 800db16:	07e7      	lsls	r7, r4, #31
 800db18:	d504      	bpl.n	800db24 <_strtod_l+0x5bc>
 800db1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db1e:	f7f2 fcdb 	bl	80004d8 <__aeabi_dmul>
 800db22:	2301      	movs	r3, #1
 800db24:	1064      	asrs	r4, r4, #1
 800db26:	f106 0608 	add.w	r6, r6, #8
 800db2a:	d1f4      	bne.n	800db16 <_strtod_l+0x5ae>
 800db2c:	b10b      	cbz	r3, 800db32 <_strtod_l+0x5ca>
 800db2e:	4682      	mov	sl, r0
 800db30:	468b      	mov	fp, r1
 800db32:	9b08      	ldr	r3, [sp, #32]
 800db34:	b1b3      	cbz	r3, 800db64 <_strtod_l+0x5fc>
 800db36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800db3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800db3e:	2b00      	cmp	r3, #0
 800db40:	4659      	mov	r1, fp
 800db42:	dd0f      	ble.n	800db64 <_strtod_l+0x5fc>
 800db44:	2b1f      	cmp	r3, #31
 800db46:	dd58      	ble.n	800dbfa <_strtod_l+0x692>
 800db48:	2b34      	cmp	r3, #52	@ 0x34
 800db4a:	bfd8      	it	le
 800db4c:	f04f 33ff 	movle.w	r3, #4294967295
 800db50:	f04f 0a00 	mov.w	sl, #0
 800db54:	bfcf      	iteee	gt
 800db56:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800db5a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800db5e:	4093      	lslle	r3, r2
 800db60:	ea03 0b01 	andle.w	fp, r3, r1
 800db64:	2200      	movs	r2, #0
 800db66:	2300      	movs	r3, #0
 800db68:	4650      	mov	r0, sl
 800db6a:	4659      	mov	r1, fp
 800db6c:	f7f2 ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 800db70:	2800      	cmp	r0, #0
 800db72:	d1a7      	bne.n	800dac4 <_strtod_l+0x55c>
 800db74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db76:	464a      	mov	r2, r9
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800db7c:	462b      	mov	r3, r5
 800db7e:	9805      	ldr	r0, [sp, #20]
 800db80:	f7ff f8d8 	bl	800cd34 <__s2b>
 800db84:	900b      	str	r0, [sp, #44]	@ 0x2c
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f af09 	beq.w	800d99e <_strtod_l+0x436>
 800db8c:	2400      	movs	r4, #0
 800db8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db92:	2a00      	cmp	r2, #0
 800db94:	eba3 0308 	sub.w	r3, r3, r8
 800db98:	bfa8      	it	ge
 800db9a:	2300      	movge	r3, #0
 800db9c:	46a0      	mov	r8, r4
 800db9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800dba0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dba4:	9316      	str	r3, [sp, #88]	@ 0x58
 800dba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dba8:	9805      	ldr	r0, [sp, #20]
 800dbaa:	6859      	ldr	r1, [r3, #4]
 800dbac:	f7ff f81a 	bl	800cbe4 <_Balloc>
 800dbb0:	4681      	mov	r9, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	f43f aef7 	beq.w	800d9a6 <_strtod_l+0x43e>
 800dbb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbba:	300c      	adds	r0, #12
 800dbbc:	691a      	ldr	r2, [r3, #16]
 800dbbe:	f103 010c 	add.w	r1, r3, #12
 800dbc2:	3202      	adds	r2, #2
 800dbc4:	0092      	lsls	r2, r2, #2
 800dbc6:	f000 fd65 	bl	800e694 <memcpy>
 800dbca:	ab1c      	add	r3, sp, #112	@ 0x70
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	4652      	mov	r2, sl
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	9805      	ldr	r0, [sp, #20]
 800dbd8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dbdc:	f7ff fbd6 	bl	800d38c <__d2b>
 800dbe0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	f43f aedf 	beq.w	800d9a6 <_strtod_l+0x43e>
 800dbe8:	2101      	movs	r1, #1
 800dbea:	9805      	ldr	r0, [sp, #20]
 800dbec:	f7ff f938 	bl	800ce60 <__i2b>
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	b948      	cbnz	r0, 800dc08 <_strtod_l+0x6a0>
 800dbf4:	f04f 0800 	mov.w	r8, #0
 800dbf8:	e6d5      	b.n	800d9a6 <_strtod_l+0x43e>
 800dbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfe:	fa02 f303 	lsl.w	r3, r2, r3
 800dc02:	ea03 0a0a 	and.w	sl, r3, sl
 800dc06:	e7ad      	b.n	800db64 <_strtod_l+0x5fc>
 800dc08:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dc0a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dc0c:	2d00      	cmp	r5, #0
 800dc0e:	bfab      	itete	ge
 800dc10:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dc12:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dc14:	18ef      	addge	r7, r5, r3
 800dc16:	1b5e      	sublt	r6, r3, r5
 800dc18:	9b08      	ldr	r3, [sp, #32]
 800dc1a:	bfa8      	it	ge
 800dc1c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dc1e:	eba5 0503 	sub.w	r5, r5, r3
 800dc22:	4415      	add	r5, r2
 800dc24:	4b34      	ldr	r3, [pc, #208]	@ (800dcf8 <_strtod_l+0x790>)
 800dc26:	f105 35ff 	add.w	r5, r5, #4294967295
 800dc2a:	bfb8      	it	lt
 800dc2c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dc2e:	429d      	cmp	r5, r3
 800dc30:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dc34:	da50      	bge.n	800dcd8 <_strtod_l+0x770>
 800dc36:	1b5b      	subs	r3, r3, r5
 800dc38:	2b1f      	cmp	r3, #31
 800dc3a:	f04f 0101 	mov.w	r1, #1
 800dc3e:	eba2 0203 	sub.w	r2, r2, r3
 800dc42:	dc3d      	bgt.n	800dcc0 <_strtod_l+0x758>
 800dc44:	fa01 f303 	lsl.w	r3, r1, r3
 800dc48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc4e:	18bd      	adds	r5, r7, r2
 800dc50:	9b08      	ldr	r3, [sp, #32]
 800dc52:	42af      	cmp	r7, r5
 800dc54:	4416      	add	r6, r2
 800dc56:	441e      	add	r6, r3
 800dc58:	463b      	mov	r3, r7
 800dc5a:	bfa8      	it	ge
 800dc5c:	462b      	movge	r3, r5
 800dc5e:	42b3      	cmp	r3, r6
 800dc60:	bfa8      	it	ge
 800dc62:	4633      	movge	r3, r6
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	bfc2      	ittt	gt
 800dc68:	1aed      	subgt	r5, r5, r3
 800dc6a:	1af6      	subgt	r6, r6, r3
 800dc6c:	1aff      	subgt	r7, r7, r3
 800dc6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dd16      	ble.n	800dca2 <_strtod_l+0x73a>
 800dc74:	4641      	mov	r1, r8
 800dc76:	461a      	mov	r2, r3
 800dc78:	9805      	ldr	r0, [sp, #20]
 800dc7a:	f7ff f9a9 	bl	800cfd0 <__pow5mult>
 800dc7e:	4680      	mov	r8, r0
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d0b7      	beq.n	800dbf4 <_strtod_l+0x68c>
 800dc84:	4601      	mov	r1, r0
 800dc86:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc88:	9805      	ldr	r0, [sp, #20]
 800dc8a:	f7ff f8ff 	bl	800ce8c <__multiply>
 800dc8e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc90:	2800      	cmp	r0, #0
 800dc92:	f43f ae88 	beq.w	800d9a6 <_strtod_l+0x43e>
 800dc96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc98:	9805      	ldr	r0, [sp, #20]
 800dc9a:	f7fe ffe3 	bl	800cc64 <_Bfree>
 800dc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dca2:	2d00      	cmp	r5, #0
 800dca4:	dc1d      	bgt.n	800dce2 <_strtod_l+0x77a>
 800dca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	dd27      	ble.n	800dcfc <_strtod_l+0x794>
 800dcac:	4649      	mov	r1, r9
 800dcae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dcb0:	9805      	ldr	r0, [sp, #20]
 800dcb2:	f7ff f98d 	bl	800cfd0 <__pow5mult>
 800dcb6:	4681      	mov	r9, r0
 800dcb8:	bb00      	cbnz	r0, 800dcfc <_strtod_l+0x794>
 800dcba:	f04f 0900 	mov.w	r9, #0
 800dcbe:	e672      	b.n	800d9a6 <_strtod_l+0x43e>
 800dcc0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dcc4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dcc8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dccc:	35e2      	adds	r5, #226	@ 0xe2
 800dcce:	fa01 f305 	lsl.w	r3, r1, r5
 800dcd2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcd4:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dcd6:	e7ba      	b.n	800dc4e <_strtod_l+0x6e6>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9310      	str	r3, [sp, #64]	@ 0x40
 800dcdc:	2301      	movs	r3, #1
 800dcde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dce0:	e7b5      	b.n	800dc4e <_strtod_l+0x6e6>
 800dce2:	462a      	mov	r2, r5
 800dce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dce6:	9805      	ldr	r0, [sp, #20]
 800dce8:	f7ff f9cc 	bl	800d084 <__lshift>
 800dcec:	901a      	str	r0, [sp, #104]	@ 0x68
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d1d9      	bne.n	800dca6 <_strtod_l+0x73e>
 800dcf2:	e658      	b.n	800d9a6 <_strtod_l+0x43e>
 800dcf4:	0800f770 	.word	0x0800f770
 800dcf8:	fffffc02 	.word	0xfffffc02
 800dcfc:	2e00      	cmp	r6, #0
 800dcfe:	dd07      	ble.n	800dd10 <_strtod_l+0x7a8>
 800dd00:	4649      	mov	r1, r9
 800dd02:	4632      	mov	r2, r6
 800dd04:	9805      	ldr	r0, [sp, #20]
 800dd06:	f7ff f9bd 	bl	800d084 <__lshift>
 800dd0a:	4681      	mov	r9, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d0d4      	beq.n	800dcba <_strtod_l+0x752>
 800dd10:	2f00      	cmp	r7, #0
 800dd12:	dd08      	ble.n	800dd26 <_strtod_l+0x7be>
 800dd14:	4641      	mov	r1, r8
 800dd16:	463a      	mov	r2, r7
 800dd18:	9805      	ldr	r0, [sp, #20]
 800dd1a:	f7ff f9b3 	bl	800d084 <__lshift>
 800dd1e:	4680      	mov	r8, r0
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f43f ae40 	beq.w	800d9a6 <_strtod_l+0x43e>
 800dd26:	464a      	mov	r2, r9
 800dd28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd2a:	9805      	ldr	r0, [sp, #20]
 800dd2c:	f7ff fa32 	bl	800d194 <__mdiff>
 800dd30:	4604      	mov	r4, r0
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f43f ae37 	beq.w	800d9a6 <_strtod_l+0x43e>
 800dd38:	68c3      	ldr	r3, [r0, #12]
 800dd3a:	4641      	mov	r1, r8
 800dd3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60c3      	str	r3, [r0, #12]
 800dd42:	f7ff fa0b 	bl	800d15c <__mcmp>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	da3d      	bge.n	800ddc6 <_strtod_l+0x85e>
 800dd4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd4c:	ea53 030a 	orrs.w	r3, r3, sl
 800dd50:	d163      	bne.n	800de1a <_strtod_l+0x8b2>
 800dd52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d15f      	bne.n	800de1a <_strtod_l+0x8b2>
 800dd5a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd5e:	0d1b      	lsrs	r3, r3, #20
 800dd60:	051b      	lsls	r3, r3, #20
 800dd62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd66:	d958      	bls.n	800de1a <_strtod_l+0x8b2>
 800dd68:	6963      	ldr	r3, [r4, #20]
 800dd6a:	b913      	cbnz	r3, 800dd72 <_strtod_l+0x80a>
 800dd6c:	6923      	ldr	r3, [r4, #16]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	dd53      	ble.n	800de1a <_strtod_l+0x8b2>
 800dd72:	4621      	mov	r1, r4
 800dd74:	2201      	movs	r2, #1
 800dd76:	9805      	ldr	r0, [sp, #20]
 800dd78:	f7ff f984 	bl	800d084 <__lshift>
 800dd7c:	4641      	mov	r1, r8
 800dd7e:	4604      	mov	r4, r0
 800dd80:	f7ff f9ec 	bl	800d15c <__mcmp>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	dd48      	ble.n	800de1a <_strtod_l+0x8b2>
 800dd88:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd8c:	9a08      	ldr	r2, [sp, #32]
 800dd8e:	0d1b      	lsrs	r3, r3, #20
 800dd90:	051b      	lsls	r3, r3, #20
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	d062      	beq.n	800de5c <_strtod_l+0x8f4>
 800dd96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dd9a:	d85f      	bhi.n	800de5c <_strtod_l+0x8f4>
 800dd9c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dda0:	f67f ae94 	bls.w	800dacc <_strtod_l+0x564>
 800dda4:	4650      	mov	r0, sl
 800dda6:	4659      	mov	r1, fp
 800dda8:	4ba3      	ldr	r3, [pc, #652]	@ (800e038 <_strtod_l+0xad0>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f7f2 fb94 	bl	80004d8 <__aeabi_dmul>
 800ddb0:	4ba2      	ldr	r3, [pc, #648]	@ (800e03c <_strtod_l+0xad4>)
 800ddb2:	4682      	mov	sl, r0
 800ddb4:	400b      	ands	r3, r1
 800ddb6:	468b      	mov	fp, r1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f47f adff 	bne.w	800d9bc <_strtod_l+0x454>
 800ddbe:	2322      	movs	r3, #34	@ 0x22
 800ddc0:	9a05      	ldr	r2, [sp, #20]
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	e5fa      	b.n	800d9bc <_strtod_l+0x454>
 800ddc6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ddca:	d165      	bne.n	800de98 <_strtod_l+0x930>
 800ddcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ddce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddd2:	b35a      	cbz	r2, 800de2c <_strtod_l+0x8c4>
 800ddd4:	4a9a      	ldr	r2, [pc, #616]	@ (800e040 <_strtod_l+0xad8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d12b      	bne.n	800de32 <_strtod_l+0x8ca>
 800ddda:	9b08      	ldr	r3, [sp, #32]
 800dddc:	4651      	mov	r1, sl
 800ddde:	b303      	cbz	r3, 800de22 <_strtod_l+0x8ba>
 800dde0:	465a      	mov	r2, fp
 800dde2:	4b96      	ldr	r3, [pc, #600]	@ (800e03c <_strtod_l+0xad4>)
 800dde4:	4013      	ands	r3, r2
 800dde6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ddea:	f04f 32ff 	mov.w	r2, #4294967295
 800ddee:	d81b      	bhi.n	800de28 <_strtod_l+0x8c0>
 800ddf0:	0d1b      	lsrs	r3, r3, #20
 800ddf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ddf6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddfa:	4299      	cmp	r1, r3
 800ddfc:	d119      	bne.n	800de32 <_strtod_l+0x8ca>
 800ddfe:	4b91      	ldr	r3, [pc, #580]	@ (800e044 <_strtod_l+0xadc>)
 800de00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de02:	429a      	cmp	r2, r3
 800de04:	d102      	bne.n	800de0c <_strtod_l+0x8a4>
 800de06:	3101      	adds	r1, #1
 800de08:	f43f adcd 	beq.w	800d9a6 <_strtod_l+0x43e>
 800de0c:	f04f 0a00 	mov.w	sl, #0
 800de10:	4b8a      	ldr	r3, [pc, #552]	@ (800e03c <_strtod_l+0xad4>)
 800de12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de14:	401a      	ands	r2, r3
 800de16:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800de1a:	9b08      	ldr	r3, [sp, #32]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1c1      	bne.n	800dda4 <_strtod_l+0x83c>
 800de20:	e5cc      	b.n	800d9bc <_strtod_l+0x454>
 800de22:	f04f 33ff 	mov.w	r3, #4294967295
 800de26:	e7e8      	b.n	800ddfa <_strtod_l+0x892>
 800de28:	4613      	mov	r3, r2
 800de2a:	e7e6      	b.n	800ddfa <_strtod_l+0x892>
 800de2c:	ea53 030a 	orrs.w	r3, r3, sl
 800de30:	d0aa      	beq.n	800dd88 <_strtod_l+0x820>
 800de32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de34:	b1db      	cbz	r3, 800de6e <_strtod_l+0x906>
 800de36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de38:	4213      	tst	r3, r2
 800de3a:	d0ee      	beq.n	800de1a <_strtod_l+0x8b2>
 800de3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de3e:	4650      	mov	r0, sl
 800de40:	4659      	mov	r1, fp
 800de42:	9a08      	ldr	r2, [sp, #32]
 800de44:	b1bb      	cbz	r3, 800de76 <_strtod_l+0x90e>
 800de46:	f7ff fb6d 	bl	800d524 <sulp>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de52:	f7f2 f98b 	bl	800016c <__adddf3>
 800de56:	4682      	mov	sl, r0
 800de58:	468b      	mov	fp, r1
 800de5a:	e7de      	b.n	800de1a <_strtod_l+0x8b2>
 800de5c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800de60:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800de64:	f04f 3aff 	mov.w	sl, #4294967295
 800de68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800de6c:	e7d5      	b.n	800de1a <_strtod_l+0x8b2>
 800de6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de70:	ea13 0f0a 	tst.w	r3, sl
 800de74:	e7e1      	b.n	800de3a <_strtod_l+0x8d2>
 800de76:	f7ff fb55 	bl	800d524 <sulp>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de82:	f7f2 f971 	bl	8000168 <__aeabi_dsub>
 800de86:	2200      	movs	r2, #0
 800de88:	2300      	movs	r3, #0
 800de8a:	4682      	mov	sl, r0
 800de8c:	468b      	mov	fp, r1
 800de8e:	f7f2 fd8b 	bl	80009a8 <__aeabi_dcmpeq>
 800de92:	2800      	cmp	r0, #0
 800de94:	d0c1      	beq.n	800de1a <_strtod_l+0x8b2>
 800de96:	e619      	b.n	800dacc <_strtod_l+0x564>
 800de98:	4641      	mov	r1, r8
 800de9a:	4620      	mov	r0, r4
 800de9c:	f7ff face 	bl	800d43c <__ratio>
 800dea0:	2200      	movs	r2, #0
 800dea2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dea6:	4606      	mov	r6, r0
 800dea8:	460f      	mov	r7, r1
 800deaa:	f7f2 fd91 	bl	80009d0 <__aeabi_dcmple>
 800deae:	2800      	cmp	r0, #0
 800deb0:	d06d      	beq.n	800df8e <_strtod_l+0xa26>
 800deb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d178      	bne.n	800dfaa <_strtod_l+0xa42>
 800deb8:	f1ba 0f00 	cmp.w	sl, #0
 800debc:	d156      	bne.n	800df6c <_strtod_l+0xa04>
 800debe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d158      	bne.n	800df7a <_strtod_l+0xa12>
 800dec8:	2200      	movs	r2, #0
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	4b5e      	ldr	r3, [pc, #376]	@ (800e048 <_strtod_l+0xae0>)
 800ded0:	f7f2 fd74 	bl	80009bc <__aeabi_dcmplt>
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d157      	bne.n	800df88 <_strtod_l+0xa20>
 800ded8:	4630      	mov	r0, r6
 800deda:	4639      	mov	r1, r7
 800dedc:	2200      	movs	r2, #0
 800dede:	4b5b      	ldr	r3, [pc, #364]	@ (800e04c <_strtod_l+0xae4>)
 800dee0:	f7f2 fafa 	bl	80004d8 <__aeabi_dmul>
 800dee4:	4606      	mov	r6, r0
 800dee6:	460f      	mov	r7, r1
 800dee8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800deec:	9606      	str	r6, [sp, #24]
 800deee:	9307      	str	r3, [sp, #28]
 800def0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800def4:	4d51      	ldr	r5, [pc, #324]	@ (800e03c <_strtod_l+0xad4>)
 800def6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800defa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800defc:	401d      	ands	r5, r3
 800defe:	4b54      	ldr	r3, [pc, #336]	@ (800e050 <_strtod_l+0xae8>)
 800df00:	429d      	cmp	r5, r3
 800df02:	f040 80ab 	bne.w	800e05c <_strtod_l+0xaf4>
 800df06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df08:	4650      	mov	r0, sl
 800df0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800df0e:	4659      	mov	r1, fp
 800df10:	f7ff f9d4 	bl	800d2bc <__ulp>
 800df14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df18:	f7f2 fade 	bl	80004d8 <__aeabi_dmul>
 800df1c:	4652      	mov	r2, sl
 800df1e:	465b      	mov	r3, fp
 800df20:	f7f2 f924 	bl	800016c <__adddf3>
 800df24:	460b      	mov	r3, r1
 800df26:	4945      	ldr	r1, [pc, #276]	@ (800e03c <_strtod_l+0xad4>)
 800df28:	4a4a      	ldr	r2, [pc, #296]	@ (800e054 <_strtod_l+0xaec>)
 800df2a:	4019      	ands	r1, r3
 800df2c:	4291      	cmp	r1, r2
 800df2e:	4682      	mov	sl, r0
 800df30:	d942      	bls.n	800dfb8 <_strtod_l+0xa50>
 800df32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800df34:	4b43      	ldr	r3, [pc, #268]	@ (800e044 <_strtod_l+0xadc>)
 800df36:	429a      	cmp	r2, r3
 800df38:	d103      	bne.n	800df42 <_strtod_l+0x9da>
 800df3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df3c:	3301      	adds	r3, #1
 800df3e:	f43f ad32 	beq.w	800d9a6 <_strtod_l+0x43e>
 800df42:	f04f 3aff 	mov.w	sl, #4294967295
 800df46:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800e044 <_strtod_l+0xadc>
 800df4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df4c:	9805      	ldr	r0, [sp, #20]
 800df4e:	f7fe fe89 	bl	800cc64 <_Bfree>
 800df52:	4649      	mov	r1, r9
 800df54:	9805      	ldr	r0, [sp, #20]
 800df56:	f7fe fe85 	bl	800cc64 <_Bfree>
 800df5a:	4641      	mov	r1, r8
 800df5c:	9805      	ldr	r0, [sp, #20]
 800df5e:	f7fe fe81 	bl	800cc64 <_Bfree>
 800df62:	4621      	mov	r1, r4
 800df64:	9805      	ldr	r0, [sp, #20]
 800df66:	f7fe fe7d 	bl	800cc64 <_Bfree>
 800df6a:	e61c      	b.n	800dba6 <_strtod_l+0x63e>
 800df6c:	f1ba 0f01 	cmp.w	sl, #1
 800df70:	d103      	bne.n	800df7a <_strtod_l+0xa12>
 800df72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df74:	2b00      	cmp	r3, #0
 800df76:	f43f ada9 	beq.w	800dacc <_strtod_l+0x564>
 800df7a:	2200      	movs	r2, #0
 800df7c:	4b36      	ldr	r3, [pc, #216]	@ (800e058 <_strtod_l+0xaf0>)
 800df7e:	2600      	movs	r6, #0
 800df80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df84:	4f30      	ldr	r7, [pc, #192]	@ (800e048 <_strtod_l+0xae0>)
 800df86:	e7b3      	b.n	800def0 <_strtod_l+0x988>
 800df88:	2600      	movs	r6, #0
 800df8a:	4f30      	ldr	r7, [pc, #192]	@ (800e04c <_strtod_l+0xae4>)
 800df8c:	e7ac      	b.n	800dee8 <_strtod_l+0x980>
 800df8e:	4630      	mov	r0, r6
 800df90:	4639      	mov	r1, r7
 800df92:	4b2e      	ldr	r3, [pc, #184]	@ (800e04c <_strtod_l+0xae4>)
 800df94:	2200      	movs	r2, #0
 800df96:	f7f2 fa9f 	bl	80004d8 <__aeabi_dmul>
 800df9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df9c:	4606      	mov	r6, r0
 800df9e:	460f      	mov	r7, r1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d0a1      	beq.n	800dee8 <_strtod_l+0x980>
 800dfa4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dfa8:	e7a2      	b.n	800def0 <_strtod_l+0x988>
 800dfaa:	2200      	movs	r2, #0
 800dfac:	4b26      	ldr	r3, [pc, #152]	@ (800e048 <_strtod_l+0xae0>)
 800dfae:	4616      	mov	r6, r2
 800dfb0:	461f      	mov	r7, r3
 800dfb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dfb6:	e79b      	b.n	800def0 <_strtod_l+0x988>
 800dfb8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dfbc:	9b08      	ldr	r3, [sp, #32]
 800dfbe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1c1      	bne.n	800df4a <_strtod_l+0x9e2>
 800dfc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfca:	0d1b      	lsrs	r3, r3, #20
 800dfcc:	051b      	lsls	r3, r3, #20
 800dfce:	429d      	cmp	r5, r3
 800dfd0:	d1bb      	bne.n	800df4a <_strtod_l+0x9e2>
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 fdc7 	bl	8000b68 <__aeabi_d2lz>
 800dfda:	f7f2 fa4f 	bl	800047c <__aeabi_l2d>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	f7f2 f8bf 	bl	8000168 <__aeabi_dsub>
 800dfea:	460b      	mov	r3, r1
 800dfec:	4602      	mov	r2, r0
 800dfee:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dff2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dff8:	ea46 060a 	orr.w	r6, r6, sl
 800dffc:	431e      	orrs	r6, r3
 800dffe:	d06a      	beq.n	800e0d6 <_strtod_l+0xb6e>
 800e000:	a309      	add	r3, pc, #36	@ (adr r3, 800e028 <_strtod_l+0xac0>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 fcd9 	bl	80009bc <__aeabi_dcmplt>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	f47f acd6 	bne.w	800d9bc <_strtod_l+0x454>
 800e010:	a307      	add	r3, pc, #28	@ (adr r3, 800e030 <_strtod_l+0xac8>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e01a:	f7f2 fced 	bl	80009f8 <__aeabi_dcmpgt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d093      	beq.n	800df4a <_strtod_l+0x9e2>
 800e022:	e4cb      	b.n	800d9bc <_strtod_l+0x454>
 800e024:	f3af 8000 	nop.w
 800e028:	94a03595 	.word	0x94a03595
 800e02c:	3fdfffff 	.word	0x3fdfffff
 800e030:	35afe535 	.word	0x35afe535
 800e034:	3fe00000 	.word	0x3fe00000
 800e038:	39500000 	.word	0x39500000
 800e03c:	7ff00000 	.word	0x7ff00000
 800e040:	000fffff 	.word	0x000fffff
 800e044:	7fefffff 	.word	0x7fefffff
 800e048:	3ff00000 	.word	0x3ff00000
 800e04c:	3fe00000 	.word	0x3fe00000
 800e050:	7fe00000 	.word	0x7fe00000
 800e054:	7c9fffff 	.word	0x7c9fffff
 800e058:	bff00000 	.word	0xbff00000
 800e05c:	9b08      	ldr	r3, [sp, #32]
 800e05e:	b323      	cbz	r3, 800e0aa <_strtod_l+0xb42>
 800e060:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e064:	d821      	bhi.n	800e0aa <_strtod_l+0xb42>
 800e066:	a328      	add	r3, pc, #160	@ (adr r3, 800e108 <_strtod_l+0xba0>)
 800e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 fcae 	bl	80009d0 <__aeabi_dcmple>
 800e074:	b1a0      	cbz	r0, 800e0a0 <_strtod_l+0xb38>
 800e076:	4639      	mov	r1, r7
 800e078:	4630      	mov	r0, r6
 800e07a:	f7f2 fd05 	bl	8000a88 <__aeabi_d2uiz>
 800e07e:	2801      	cmp	r0, #1
 800e080:	bf38      	it	cc
 800e082:	2001      	movcc	r0, #1
 800e084:	f7f2 f9ae 	bl	80003e4 <__aeabi_ui2d>
 800e088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	b9fb      	cbnz	r3, 800e0d0 <_strtod_l+0xb68>
 800e090:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e094:	9014      	str	r0, [sp, #80]	@ 0x50
 800e096:	9315      	str	r3, [sp, #84]	@ 0x54
 800e098:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e09c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e0a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e0a6:	1b5b      	subs	r3, r3, r5
 800e0a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e0aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e0b2:	f7ff f903 	bl	800d2bc <__ulp>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	4650      	mov	r0, sl
 800e0bc:	4659      	mov	r1, fp
 800e0be:	f7f2 fa0b 	bl	80004d8 <__aeabi_dmul>
 800e0c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e0c6:	f7f2 f851 	bl	800016c <__adddf3>
 800e0ca:	4682      	mov	sl, r0
 800e0cc:	468b      	mov	fp, r1
 800e0ce:	e775      	b.n	800dfbc <_strtod_l+0xa54>
 800e0d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e0d4:	e7e0      	b.n	800e098 <_strtod_l+0xb30>
 800e0d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e110 <_strtod_l+0xba8>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	f7f2 fc6e 	bl	80009bc <__aeabi_dcmplt>
 800e0e0:	e79d      	b.n	800e01e <_strtod_l+0xab6>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e0e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	f7ff ba79 	b.w	800d5e2 <_strtod_l+0x7a>
 800e0f0:	2a65      	cmp	r2, #101	@ 0x65
 800e0f2:	f43f ab72 	beq.w	800d7da <_strtod_l+0x272>
 800e0f6:	2a45      	cmp	r2, #69	@ 0x45
 800e0f8:	f43f ab6f 	beq.w	800d7da <_strtod_l+0x272>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f7ff bbaa 	b.w	800d856 <_strtod_l+0x2ee>
 800e102:	bf00      	nop
 800e104:	f3af 8000 	nop.w
 800e108:	ffc00000 	.word	0xffc00000
 800e10c:	41dfffff 	.word	0x41dfffff
 800e110:	94a03595 	.word	0x94a03595
 800e114:	3fcfffff 	.word	0x3fcfffff

0800e118 <_strtod_r>:
 800e118:	4b01      	ldr	r3, [pc, #4]	@ (800e120 <_strtod_r+0x8>)
 800e11a:	f7ff ba25 	b.w	800d568 <_strtod_l>
 800e11e:	bf00      	nop
 800e120:	200001dc 	.word	0x200001dc

0800e124 <_strtol_l.isra.0>:
 800e124:	2b24      	cmp	r3, #36	@ 0x24
 800e126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e12a:	4686      	mov	lr, r0
 800e12c:	4690      	mov	r8, r2
 800e12e:	d801      	bhi.n	800e134 <_strtol_l.isra.0+0x10>
 800e130:	2b01      	cmp	r3, #1
 800e132:	d106      	bne.n	800e142 <_strtol_l.isra.0+0x1e>
 800e134:	f7fd fdbc 	bl	800bcb0 <__errno>
 800e138:	2316      	movs	r3, #22
 800e13a:	6003      	str	r3, [r0, #0]
 800e13c:	2000      	movs	r0, #0
 800e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e142:	460d      	mov	r5, r1
 800e144:	4833      	ldr	r0, [pc, #204]	@ (800e214 <_strtol_l.isra.0+0xf0>)
 800e146:	462a      	mov	r2, r5
 800e148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e14c:	5d06      	ldrb	r6, [r0, r4]
 800e14e:	f016 0608 	ands.w	r6, r6, #8
 800e152:	d1f8      	bne.n	800e146 <_strtol_l.isra.0+0x22>
 800e154:	2c2d      	cmp	r4, #45	@ 0x2d
 800e156:	d110      	bne.n	800e17a <_strtol_l.isra.0+0x56>
 800e158:	2601      	movs	r6, #1
 800e15a:	782c      	ldrb	r4, [r5, #0]
 800e15c:	1c95      	adds	r5, r2, #2
 800e15e:	f033 0210 	bics.w	r2, r3, #16
 800e162:	d115      	bne.n	800e190 <_strtol_l.isra.0+0x6c>
 800e164:	2c30      	cmp	r4, #48	@ 0x30
 800e166:	d10d      	bne.n	800e184 <_strtol_l.isra.0+0x60>
 800e168:	782a      	ldrb	r2, [r5, #0]
 800e16a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e16e:	2a58      	cmp	r2, #88	@ 0x58
 800e170:	d108      	bne.n	800e184 <_strtol_l.isra.0+0x60>
 800e172:	786c      	ldrb	r4, [r5, #1]
 800e174:	3502      	adds	r5, #2
 800e176:	2310      	movs	r3, #16
 800e178:	e00a      	b.n	800e190 <_strtol_l.isra.0+0x6c>
 800e17a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e17c:	bf04      	itt	eq
 800e17e:	782c      	ldrbeq	r4, [r5, #0]
 800e180:	1c95      	addeq	r5, r2, #2
 800e182:	e7ec      	b.n	800e15e <_strtol_l.isra.0+0x3a>
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1f6      	bne.n	800e176 <_strtol_l.isra.0+0x52>
 800e188:	2c30      	cmp	r4, #48	@ 0x30
 800e18a:	bf14      	ite	ne
 800e18c:	230a      	movne	r3, #10
 800e18e:	2308      	moveq	r3, #8
 800e190:	2200      	movs	r2, #0
 800e192:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e196:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e19a:	fbbc f9f3 	udiv	r9, ip, r3
 800e19e:	4610      	mov	r0, r2
 800e1a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e1a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e1a8:	2f09      	cmp	r7, #9
 800e1aa:	d80f      	bhi.n	800e1cc <_strtol_l.isra.0+0xa8>
 800e1ac:	463c      	mov	r4, r7
 800e1ae:	42a3      	cmp	r3, r4
 800e1b0:	dd1b      	ble.n	800e1ea <_strtol_l.isra.0+0xc6>
 800e1b2:	1c57      	adds	r7, r2, #1
 800e1b4:	d007      	beq.n	800e1c6 <_strtol_l.isra.0+0xa2>
 800e1b6:	4581      	cmp	r9, r0
 800e1b8:	d314      	bcc.n	800e1e4 <_strtol_l.isra.0+0xc0>
 800e1ba:	d101      	bne.n	800e1c0 <_strtol_l.isra.0+0x9c>
 800e1bc:	45a2      	cmp	sl, r4
 800e1be:	db11      	blt.n	800e1e4 <_strtol_l.isra.0+0xc0>
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	fb00 4003 	mla	r0, r0, r3, r4
 800e1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1ca:	e7eb      	b.n	800e1a4 <_strtol_l.isra.0+0x80>
 800e1cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e1d0:	2f19      	cmp	r7, #25
 800e1d2:	d801      	bhi.n	800e1d8 <_strtol_l.isra.0+0xb4>
 800e1d4:	3c37      	subs	r4, #55	@ 0x37
 800e1d6:	e7ea      	b.n	800e1ae <_strtol_l.isra.0+0x8a>
 800e1d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e1dc:	2f19      	cmp	r7, #25
 800e1de:	d804      	bhi.n	800e1ea <_strtol_l.isra.0+0xc6>
 800e1e0:	3c57      	subs	r4, #87	@ 0x57
 800e1e2:	e7e4      	b.n	800e1ae <_strtol_l.isra.0+0x8a>
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	e7ed      	b.n	800e1c6 <_strtol_l.isra.0+0xa2>
 800e1ea:	1c53      	adds	r3, r2, #1
 800e1ec:	d108      	bne.n	800e200 <_strtol_l.isra.0+0xdc>
 800e1ee:	2322      	movs	r3, #34	@ 0x22
 800e1f0:	4660      	mov	r0, ip
 800e1f2:	f8ce 3000 	str.w	r3, [lr]
 800e1f6:	f1b8 0f00 	cmp.w	r8, #0
 800e1fa:	d0a0      	beq.n	800e13e <_strtol_l.isra.0+0x1a>
 800e1fc:	1e69      	subs	r1, r5, #1
 800e1fe:	e006      	b.n	800e20e <_strtol_l.isra.0+0xea>
 800e200:	b106      	cbz	r6, 800e204 <_strtol_l.isra.0+0xe0>
 800e202:	4240      	negs	r0, r0
 800e204:	f1b8 0f00 	cmp.w	r8, #0
 800e208:	d099      	beq.n	800e13e <_strtol_l.isra.0+0x1a>
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	d1f6      	bne.n	800e1fc <_strtol_l.isra.0+0xd8>
 800e20e:	f8c8 1000 	str.w	r1, [r8]
 800e212:	e794      	b.n	800e13e <_strtol_l.isra.0+0x1a>
 800e214:	0800f799 	.word	0x0800f799

0800e218 <_strtol_r>:
 800e218:	f7ff bf84 	b.w	800e124 <_strtol_l.isra.0>

0800e21c <__ssputs_r>:
 800e21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e220:	461f      	mov	r7, r3
 800e222:	688e      	ldr	r6, [r1, #8]
 800e224:	4682      	mov	sl, r0
 800e226:	42be      	cmp	r6, r7
 800e228:	460c      	mov	r4, r1
 800e22a:	4690      	mov	r8, r2
 800e22c:	680b      	ldr	r3, [r1, #0]
 800e22e:	d82d      	bhi.n	800e28c <__ssputs_r+0x70>
 800e230:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e234:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e238:	d026      	beq.n	800e288 <__ssputs_r+0x6c>
 800e23a:	6965      	ldr	r5, [r4, #20]
 800e23c:	6909      	ldr	r1, [r1, #16]
 800e23e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e242:	eba3 0901 	sub.w	r9, r3, r1
 800e246:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e24a:	1c7b      	adds	r3, r7, #1
 800e24c:	444b      	add	r3, r9
 800e24e:	106d      	asrs	r5, r5, #1
 800e250:	429d      	cmp	r5, r3
 800e252:	bf38      	it	cc
 800e254:	461d      	movcc	r5, r3
 800e256:	0553      	lsls	r3, r2, #21
 800e258:	d527      	bpl.n	800e2aa <__ssputs_r+0x8e>
 800e25a:	4629      	mov	r1, r5
 800e25c:	f7fe fc36 	bl	800cacc <_malloc_r>
 800e260:	4606      	mov	r6, r0
 800e262:	b360      	cbz	r0, 800e2be <__ssputs_r+0xa2>
 800e264:	464a      	mov	r2, r9
 800e266:	6921      	ldr	r1, [r4, #16]
 800e268:	f000 fa14 	bl	800e694 <memcpy>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	6126      	str	r6, [r4, #16]
 800e27a:	444e      	add	r6, r9
 800e27c:	6026      	str	r6, [r4, #0]
 800e27e:	463e      	mov	r6, r7
 800e280:	6165      	str	r5, [r4, #20]
 800e282:	eba5 0509 	sub.w	r5, r5, r9
 800e286:	60a5      	str	r5, [r4, #8]
 800e288:	42be      	cmp	r6, r7
 800e28a:	d900      	bls.n	800e28e <__ssputs_r+0x72>
 800e28c:	463e      	mov	r6, r7
 800e28e:	4632      	mov	r2, r6
 800e290:	4641      	mov	r1, r8
 800e292:	6820      	ldr	r0, [r4, #0]
 800e294:	f000 f9c2 	bl	800e61c <memmove>
 800e298:	2000      	movs	r0, #0
 800e29a:	68a3      	ldr	r3, [r4, #8]
 800e29c:	1b9b      	subs	r3, r3, r6
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	4433      	add	r3, r6
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	f000 fd83 	bl	800edb6 <_realloc_r>
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d1e0      	bne.n	800e278 <__ssputs_r+0x5c>
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	6921      	ldr	r1, [r4, #16]
 800e2ba:	f7fe fb95 	bl	800c9e8 <_free_r>
 800e2be:	230c      	movs	r3, #12
 800e2c0:	f8ca 3000 	str.w	r3, [sl]
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ce:	81a3      	strh	r3, [r4, #12]
 800e2d0:	e7e9      	b.n	800e2a6 <__ssputs_r+0x8a>
	...

0800e2d4 <_svfiprintf_r>:
 800e2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	4698      	mov	r8, r3
 800e2da:	898b      	ldrh	r3, [r1, #12]
 800e2dc:	4607      	mov	r7, r0
 800e2de:	061b      	lsls	r3, r3, #24
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	4614      	mov	r4, r2
 800e2e4:	b09d      	sub	sp, #116	@ 0x74
 800e2e6:	d510      	bpl.n	800e30a <_svfiprintf_r+0x36>
 800e2e8:	690b      	ldr	r3, [r1, #16]
 800e2ea:	b973      	cbnz	r3, 800e30a <_svfiprintf_r+0x36>
 800e2ec:	2140      	movs	r1, #64	@ 0x40
 800e2ee:	f7fe fbed 	bl	800cacc <_malloc_r>
 800e2f2:	6028      	str	r0, [r5, #0]
 800e2f4:	6128      	str	r0, [r5, #16]
 800e2f6:	b930      	cbnz	r0, 800e306 <_svfiprintf_r+0x32>
 800e2f8:	230c      	movs	r3, #12
 800e2fa:	603b      	str	r3, [r7, #0]
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	b01d      	add	sp, #116	@ 0x74
 800e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e306:	2340      	movs	r3, #64	@ 0x40
 800e308:	616b      	str	r3, [r5, #20]
 800e30a:	2300      	movs	r3, #0
 800e30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e30e:	2320      	movs	r3, #32
 800e310:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e314:	2330      	movs	r3, #48	@ 0x30
 800e316:	f04f 0901 	mov.w	r9, #1
 800e31a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e31e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e4b8 <_svfiprintf_r+0x1e4>
 800e322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e326:	4623      	mov	r3, r4
 800e328:	469a      	mov	sl, r3
 800e32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e32e:	b10a      	cbz	r2, 800e334 <_svfiprintf_r+0x60>
 800e330:	2a25      	cmp	r2, #37	@ 0x25
 800e332:	d1f9      	bne.n	800e328 <_svfiprintf_r+0x54>
 800e334:	ebba 0b04 	subs.w	fp, sl, r4
 800e338:	d00b      	beq.n	800e352 <_svfiprintf_r+0x7e>
 800e33a:	465b      	mov	r3, fp
 800e33c:	4622      	mov	r2, r4
 800e33e:	4629      	mov	r1, r5
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff ff6b 	bl	800e21c <__ssputs_r>
 800e346:	3001      	adds	r0, #1
 800e348:	f000 80a7 	beq.w	800e49a <_svfiprintf_r+0x1c6>
 800e34c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e34e:	445a      	add	r2, fp
 800e350:	9209      	str	r2, [sp, #36]	@ 0x24
 800e352:	f89a 3000 	ldrb.w	r3, [sl]
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 809f 	beq.w	800e49a <_svfiprintf_r+0x1c6>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f04f 32ff 	mov.w	r2, #4294967295
 800e362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e366:	f10a 0a01 	add.w	sl, sl, #1
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	9307      	str	r3, [sp, #28]
 800e36e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e372:	931a      	str	r3, [sp, #104]	@ 0x68
 800e374:	4654      	mov	r4, sl
 800e376:	2205      	movs	r2, #5
 800e378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37c:	484e      	ldr	r0, [pc, #312]	@ (800e4b8 <_svfiprintf_r+0x1e4>)
 800e37e:	f7fd fcc4 	bl	800bd0a <memchr>
 800e382:	9a04      	ldr	r2, [sp, #16]
 800e384:	b9d8      	cbnz	r0, 800e3be <_svfiprintf_r+0xea>
 800e386:	06d0      	lsls	r0, r2, #27
 800e388:	bf44      	itt	mi
 800e38a:	2320      	movmi	r3, #32
 800e38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e390:	0711      	lsls	r1, r2, #28
 800e392:	bf44      	itt	mi
 800e394:	232b      	movmi	r3, #43	@ 0x2b
 800e396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e39a:	f89a 3000 	ldrb.w	r3, [sl]
 800e39e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3a0:	d015      	beq.n	800e3ce <_svfiprintf_r+0xfa>
 800e3a2:	4654      	mov	r4, sl
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	f04f 0c0a 	mov.w	ip, #10
 800e3aa:	9a07      	ldr	r2, [sp, #28]
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3b2:	3b30      	subs	r3, #48	@ 0x30
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	d94b      	bls.n	800e450 <_svfiprintf_r+0x17c>
 800e3b8:	b1b0      	cbz	r0, 800e3e8 <_svfiprintf_r+0x114>
 800e3ba:	9207      	str	r2, [sp, #28]
 800e3bc:	e014      	b.n	800e3e8 <_svfiprintf_r+0x114>
 800e3be:	eba0 0308 	sub.w	r3, r0, r8
 800e3c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	46a2      	mov	sl, r4
 800e3ca:	9304      	str	r3, [sp, #16]
 800e3cc:	e7d2      	b.n	800e374 <_svfiprintf_r+0xa0>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	1d19      	adds	r1, r3, #4
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	9103      	str	r1, [sp, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	bfbb      	ittet	lt
 800e3da:	425b      	neglt	r3, r3
 800e3dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e3e0:	9307      	strge	r3, [sp, #28]
 800e3e2:	9307      	strlt	r3, [sp, #28]
 800e3e4:	bfb8      	it	lt
 800e3e6:	9204      	strlt	r2, [sp, #16]
 800e3e8:	7823      	ldrb	r3, [r4, #0]
 800e3ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3ec:	d10a      	bne.n	800e404 <_svfiprintf_r+0x130>
 800e3ee:	7863      	ldrb	r3, [r4, #1]
 800e3f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3f2:	d132      	bne.n	800e45a <_svfiprintf_r+0x186>
 800e3f4:	9b03      	ldr	r3, [sp, #12]
 800e3f6:	3402      	adds	r4, #2
 800e3f8:	1d1a      	adds	r2, r3, #4
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	9203      	str	r2, [sp, #12]
 800e3fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e402:	9305      	str	r3, [sp, #20]
 800e404:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e4bc <_svfiprintf_r+0x1e8>
 800e408:	2203      	movs	r2, #3
 800e40a:	4650      	mov	r0, sl
 800e40c:	7821      	ldrb	r1, [r4, #0]
 800e40e:	f7fd fc7c 	bl	800bd0a <memchr>
 800e412:	b138      	cbz	r0, 800e424 <_svfiprintf_r+0x150>
 800e414:	2240      	movs	r2, #64	@ 0x40
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	eba0 000a 	sub.w	r0, r0, sl
 800e41c:	4082      	lsls	r2, r0
 800e41e:	4313      	orrs	r3, r2
 800e420:	3401      	adds	r4, #1
 800e422:	9304      	str	r3, [sp, #16]
 800e424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e428:	2206      	movs	r2, #6
 800e42a:	4825      	ldr	r0, [pc, #148]	@ (800e4c0 <_svfiprintf_r+0x1ec>)
 800e42c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e430:	f7fd fc6b 	bl	800bd0a <memchr>
 800e434:	2800      	cmp	r0, #0
 800e436:	d036      	beq.n	800e4a6 <_svfiprintf_r+0x1d2>
 800e438:	4b22      	ldr	r3, [pc, #136]	@ (800e4c4 <_svfiprintf_r+0x1f0>)
 800e43a:	bb1b      	cbnz	r3, 800e484 <_svfiprintf_r+0x1b0>
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	3307      	adds	r3, #7
 800e440:	f023 0307 	bic.w	r3, r3, #7
 800e444:	3308      	adds	r3, #8
 800e446:	9303      	str	r3, [sp, #12]
 800e448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e44a:	4433      	add	r3, r6
 800e44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44e:	e76a      	b.n	800e326 <_svfiprintf_r+0x52>
 800e450:	460c      	mov	r4, r1
 800e452:	2001      	movs	r0, #1
 800e454:	fb0c 3202 	mla	r2, ip, r2, r3
 800e458:	e7a8      	b.n	800e3ac <_svfiprintf_r+0xd8>
 800e45a:	2300      	movs	r3, #0
 800e45c:	f04f 0c0a 	mov.w	ip, #10
 800e460:	4619      	mov	r1, r3
 800e462:	3401      	adds	r4, #1
 800e464:	9305      	str	r3, [sp, #20]
 800e466:	4620      	mov	r0, r4
 800e468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e46c:	3a30      	subs	r2, #48	@ 0x30
 800e46e:	2a09      	cmp	r2, #9
 800e470:	d903      	bls.n	800e47a <_svfiprintf_r+0x1a6>
 800e472:	2b00      	cmp	r3, #0
 800e474:	d0c6      	beq.n	800e404 <_svfiprintf_r+0x130>
 800e476:	9105      	str	r1, [sp, #20]
 800e478:	e7c4      	b.n	800e404 <_svfiprintf_r+0x130>
 800e47a:	4604      	mov	r4, r0
 800e47c:	2301      	movs	r3, #1
 800e47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e482:	e7f0      	b.n	800e466 <_svfiprintf_r+0x192>
 800e484:	ab03      	add	r3, sp, #12
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	462a      	mov	r2, r5
 800e48a:	4638      	mov	r0, r7
 800e48c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <_svfiprintf_r+0x1f4>)
 800e48e:	a904      	add	r1, sp, #16
 800e490:	f7fc fc98 	bl	800adc4 <_printf_float>
 800e494:	1c42      	adds	r2, r0, #1
 800e496:	4606      	mov	r6, r0
 800e498:	d1d6      	bne.n	800e448 <_svfiprintf_r+0x174>
 800e49a:	89ab      	ldrh	r3, [r5, #12]
 800e49c:	065b      	lsls	r3, r3, #25
 800e49e:	f53f af2d 	bmi.w	800e2fc <_svfiprintf_r+0x28>
 800e4a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4a4:	e72c      	b.n	800e300 <_svfiprintf_r+0x2c>
 800e4a6:	ab03      	add	r3, sp, #12
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <_svfiprintf_r+0x1f4>)
 800e4b0:	a904      	add	r1, sp, #16
 800e4b2:	f7fc ff25 	bl	800b300 <_printf_i>
 800e4b6:	e7ed      	b.n	800e494 <_svfiprintf_r+0x1c0>
 800e4b8:	0800f591 	.word	0x0800f591
 800e4bc:	0800f597 	.word	0x0800f597
 800e4c0:	0800f59b 	.word	0x0800f59b
 800e4c4:	0800adc5 	.word	0x0800adc5
 800e4c8:	0800e21d 	.word	0x0800e21d

0800e4cc <__sflush_r>:
 800e4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d2:	0716      	lsls	r6, r2, #28
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	d454      	bmi.n	800e584 <__sflush_r+0xb8>
 800e4da:	684b      	ldr	r3, [r1, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	dc02      	bgt.n	800e4e6 <__sflush_r+0x1a>
 800e4e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	dd48      	ble.n	800e578 <__sflush_r+0xac>
 800e4e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4e8:	2e00      	cmp	r6, #0
 800e4ea:	d045      	beq.n	800e578 <__sflush_r+0xac>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4f2:	682f      	ldr	r7, [r5, #0]
 800e4f4:	6a21      	ldr	r1, [r4, #32]
 800e4f6:	602b      	str	r3, [r5, #0]
 800e4f8:	d030      	beq.n	800e55c <__sflush_r+0x90>
 800e4fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	0759      	lsls	r1, r3, #29
 800e500:	d505      	bpl.n	800e50e <__sflush_r+0x42>
 800e502:	6863      	ldr	r3, [r4, #4]
 800e504:	1ad2      	subs	r2, r2, r3
 800e506:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e508:	b10b      	cbz	r3, 800e50e <__sflush_r+0x42>
 800e50a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e50c:	1ad2      	subs	r2, r2, r3
 800e50e:	2300      	movs	r3, #0
 800e510:	4628      	mov	r0, r5
 800e512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e514:	6a21      	ldr	r1, [r4, #32]
 800e516:	47b0      	blx	r6
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	d106      	bne.n	800e52c <__sflush_r+0x60>
 800e51e:	6829      	ldr	r1, [r5, #0]
 800e520:	291d      	cmp	r1, #29
 800e522:	d82b      	bhi.n	800e57c <__sflush_r+0xb0>
 800e524:	4a28      	ldr	r2, [pc, #160]	@ (800e5c8 <__sflush_r+0xfc>)
 800e526:	40ca      	lsrs	r2, r1
 800e528:	07d6      	lsls	r6, r2, #31
 800e52a:	d527      	bpl.n	800e57c <__sflush_r+0xb0>
 800e52c:	2200      	movs	r2, #0
 800e52e:	6062      	str	r2, [r4, #4]
 800e530:	6922      	ldr	r2, [r4, #16]
 800e532:	04d9      	lsls	r1, r3, #19
 800e534:	6022      	str	r2, [r4, #0]
 800e536:	d504      	bpl.n	800e542 <__sflush_r+0x76>
 800e538:	1c42      	adds	r2, r0, #1
 800e53a:	d101      	bne.n	800e540 <__sflush_r+0x74>
 800e53c:	682b      	ldr	r3, [r5, #0]
 800e53e:	b903      	cbnz	r3, 800e542 <__sflush_r+0x76>
 800e540:	6560      	str	r0, [r4, #84]	@ 0x54
 800e542:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e544:	602f      	str	r7, [r5, #0]
 800e546:	b1b9      	cbz	r1, 800e578 <__sflush_r+0xac>
 800e548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e54c:	4299      	cmp	r1, r3
 800e54e:	d002      	beq.n	800e556 <__sflush_r+0x8a>
 800e550:	4628      	mov	r0, r5
 800e552:	f7fe fa49 	bl	800c9e8 <_free_r>
 800e556:	2300      	movs	r3, #0
 800e558:	6363      	str	r3, [r4, #52]	@ 0x34
 800e55a:	e00d      	b.n	800e578 <__sflush_r+0xac>
 800e55c:	2301      	movs	r3, #1
 800e55e:	4628      	mov	r0, r5
 800e560:	47b0      	blx	r6
 800e562:	4602      	mov	r2, r0
 800e564:	1c50      	adds	r0, r2, #1
 800e566:	d1c9      	bne.n	800e4fc <__sflush_r+0x30>
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0c6      	beq.n	800e4fc <__sflush_r+0x30>
 800e56e:	2b1d      	cmp	r3, #29
 800e570:	d001      	beq.n	800e576 <__sflush_r+0xaa>
 800e572:	2b16      	cmp	r3, #22
 800e574:	d11d      	bne.n	800e5b2 <__sflush_r+0xe6>
 800e576:	602f      	str	r7, [r5, #0]
 800e578:	2000      	movs	r0, #0
 800e57a:	e021      	b.n	800e5c0 <__sflush_r+0xf4>
 800e57c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e580:	b21b      	sxth	r3, r3
 800e582:	e01a      	b.n	800e5ba <__sflush_r+0xee>
 800e584:	690f      	ldr	r7, [r1, #16]
 800e586:	2f00      	cmp	r7, #0
 800e588:	d0f6      	beq.n	800e578 <__sflush_r+0xac>
 800e58a:	0793      	lsls	r3, r2, #30
 800e58c:	bf18      	it	ne
 800e58e:	2300      	movne	r3, #0
 800e590:	680e      	ldr	r6, [r1, #0]
 800e592:	bf08      	it	eq
 800e594:	694b      	ldreq	r3, [r1, #20]
 800e596:	1bf6      	subs	r6, r6, r7
 800e598:	600f      	str	r7, [r1, #0]
 800e59a:	608b      	str	r3, [r1, #8]
 800e59c:	2e00      	cmp	r6, #0
 800e59e:	ddeb      	ble.n	800e578 <__sflush_r+0xac>
 800e5a0:	4633      	mov	r3, r6
 800e5a2:	463a      	mov	r2, r7
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	6a21      	ldr	r1, [r4, #32]
 800e5a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e5ac:	47e0      	blx	ip
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	dc07      	bgt.n	800e5c2 <__sflush_r+0xf6>
 800e5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e5be:	81a3      	strh	r3, [r4, #12]
 800e5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c2:	4407      	add	r7, r0
 800e5c4:	1a36      	subs	r6, r6, r0
 800e5c6:	e7e9      	b.n	800e59c <__sflush_r+0xd0>
 800e5c8:	20400001 	.word	0x20400001

0800e5cc <_fflush_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	690b      	ldr	r3, [r1, #16]
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	b913      	cbnz	r3, 800e5dc <_fflush_r+0x10>
 800e5d6:	2500      	movs	r5, #0
 800e5d8:	4628      	mov	r0, r5
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	b118      	cbz	r0, 800e5e6 <_fflush_r+0x1a>
 800e5de:	6a03      	ldr	r3, [r0, #32]
 800e5e0:	b90b      	cbnz	r3, 800e5e6 <_fflush_r+0x1a>
 800e5e2:	f7fd fa41 	bl	800ba68 <__sinit>
 800e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0f3      	beq.n	800e5d6 <_fflush_r+0xa>
 800e5ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5f0:	07d0      	lsls	r0, r2, #31
 800e5f2:	d404      	bmi.n	800e5fe <_fflush_r+0x32>
 800e5f4:	0599      	lsls	r1, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_fflush_r+0x32>
 800e5f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5fa:	f7fd fb84 	bl	800bd06 <__retarget_lock_acquire_recursive>
 800e5fe:	4628      	mov	r0, r5
 800e600:	4621      	mov	r1, r4
 800e602:	f7ff ff63 	bl	800e4cc <__sflush_r>
 800e606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e608:	4605      	mov	r5, r0
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d4e4      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e60e:	89a3      	ldrh	r3, [r4, #12]
 800e610:	059b      	lsls	r3, r3, #22
 800e612:	d4e1      	bmi.n	800e5d8 <_fflush_r+0xc>
 800e614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e616:	f7fd fb77 	bl	800bd08 <__retarget_lock_release_recursive>
 800e61a:	e7dd      	b.n	800e5d8 <_fflush_r+0xc>

0800e61c <memmove>:
 800e61c:	4288      	cmp	r0, r1
 800e61e:	b510      	push	{r4, lr}
 800e620:	eb01 0402 	add.w	r4, r1, r2
 800e624:	d902      	bls.n	800e62c <memmove+0x10>
 800e626:	4284      	cmp	r4, r0
 800e628:	4623      	mov	r3, r4
 800e62a:	d807      	bhi.n	800e63c <memmove+0x20>
 800e62c:	1e43      	subs	r3, r0, #1
 800e62e:	42a1      	cmp	r1, r4
 800e630:	d008      	beq.n	800e644 <memmove+0x28>
 800e632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e63a:	e7f8      	b.n	800e62e <memmove+0x12>
 800e63c:	4601      	mov	r1, r0
 800e63e:	4402      	add	r2, r0
 800e640:	428a      	cmp	r2, r1
 800e642:	d100      	bne.n	800e646 <memmove+0x2a>
 800e644:	bd10      	pop	{r4, pc}
 800e646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e64e:	e7f7      	b.n	800e640 <memmove+0x24>

0800e650 <strncmp>:
 800e650:	b510      	push	{r4, lr}
 800e652:	b16a      	cbz	r2, 800e670 <strncmp+0x20>
 800e654:	3901      	subs	r1, #1
 800e656:	1884      	adds	r4, r0, r2
 800e658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e65c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e660:	429a      	cmp	r2, r3
 800e662:	d103      	bne.n	800e66c <strncmp+0x1c>
 800e664:	42a0      	cmp	r0, r4
 800e666:	d001      	beq.n	800e66c <strncmp+0x1c>
 800e668:	2a00      	cmp	r2, #0
 800e66a:	d1f5      	bne.n	800e658 <strncmp+0x8>
 800e66c:	1ad0      	subs	r0, r2, r3
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	4610      	mov	r0, r2
 800e672:	e7fc      	b.n	800e66e <strncmp+0x1e>

0800e674 <_sbrk_r>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	2300      	movs	r3, #0
 800e678:	4d05      	ldr	r5, [pc, #20]	@ (800e690 <_sbrk_r+0x1c>)
 800e67a:	4604      	mov	r4, r0
 800e67c:	4608      	mov	r0, r1
 800e67e:	602b      	str	r3, [r5, #0]
 800e680:	f7f2 fe64 	bl	800134c <_sbrk>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_sbrk_r+0x1a>
 800e688:	682b      	ldr	r3, [r5, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_sbrk_r+0x1a>
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	20001710 	.word	0x20001710

0800e694 <memcpy>:
 800e694:	440a      	add	r2, r1
 800e696:	4291      	cmp	r1, r2
 800e698:	f100 33ff 	add.w	r3, r0, #4294967295
 800e69c:	d100      	bne.n	800e6a0 <memcpy+0xc>
 800e69e:	4770      	bx	lr
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6a6:	4291      	cmp	r1, r2
 800e6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6ac:	d1f9      	bne.n	800e6a2 <memcpy+0xe>
 800e6ae:	bd10      	pop	{r4, pc}

0800e6b0 <nan>:
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	4901      	ldr	r1, [pc, #4]	@ (800e6b8 <nan+0x8>)
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	7ff80000 	.word	0x7ff80000

0800e6bc <__assert_func>:
 800e6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6be:	4614      	mov	r4, r2
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4b09      	ldr	r3, [pc, #36]	@ (800e6e8 <__assert_func+0x2c>)
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68d8      	ldr	r0, [r3, #12]
 800e6ca:	b14c      	cbz	r4, 800e6e0 <__assert_func+0x24>
 800e6cc:	4b07      	ldr	r3, [pc, #28]	@ (800e6ec <__assert_func+0x30>)
 800e6ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6d2:	9100      	str	r1, [sp, #0]
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	4906      	ldr	r1, [pc, #24]	@ (800e6f0 <__assert_func+0x34>)
 800e6d8:	f000 fba8 	bl	800ee2c <fiprintf>
 800e6dc:	f000 fbb8 	bl	800ee50 <abort>
 800e6e0:	4b04      	ldr	r3, [pc, #16]	@ (800e6f4 <__assert_func+0x38>)
 800e6e2:	461c      	mov	r4, r3
 800e6e4:	e7f3      	b.n	800e6ce <__assert_func+0x12>
 800e6e6:	bf00      	nop
 800e6e8:	2000018c 	.word	0x2000018c
 800e6ec:	0800f5aa 	.word	0x0800f5aa
 800e6f0:	0800f5b7 	.word	0x0800f5b7
 800e6f4:	0800f5e5 	.word	0x0800f5e5

0800e6f8 <_calloc_r>:
 800e6f8:	b570      	push	{r4, r5, r6, lr}
 800e6fa:	fba1 5402 	umull	r5, r4, r1, r2
 800e6fe:	b934      	cbnz	r4, 800e70e <_calloc_r+0x16>
 800e700:	4629      	mov	r1, r5
 800e702:	f7fe f9e3 	bl	800cacc <_malloc_r>
 800e706:	4606      	mov	r6, r0
 800e708:	b928      	cbnz	r0, 800e716 <_calloc_r+0x1e>
 800e70a:	4630      	mov	r0, r6
 800e70c:	bd70      	pop	{r4, r5, r6, pc}
 800e70e:	220c      	movs	r2, #12
 800e710:	2600      	movs	r6, #0
 800e712:	6002      	str	r2, [r0, #0]
 800e714:	e7f9      	b.n	800e70a <_calloc_r+0x12>
 800e716:	462a      	mov	r2, r5
 800e718:	4621      	mov	r1, r4
 800e71a:	f7fd fa76 	bl	800bc0a <memset>
 800e71e:	e7f4      	b.n	800e70a <_calloc_r+0x12>

0800e720 <rshift>:
 800e720:	6903      	ldr	r3, [r0, #16]
 800e722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e726:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e72a:	f100 0414 	add.w	r4, r0, #20
 800e72e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e732:	dd46      	ble.n	800e7c2 <rshift+0xa2>
 800e734:	f011 011f 	ands.w	r1, r1, #31
 800e738:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e73c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e740:	d10c      	bne.n	800e75c <rshift+0x3c>
 800e742:	4629      	mov	r1, r5
 800e744:	f100 0710 	add.w	r7, r0, #16
 800e748:	42b1      	cmp	r1, r6
 800e74a:	d335      	bcc.n	800e7b8 <rshift+0x98>
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	1eea      	subs	r2, r5, #3
 800e752:	4296      	cmp	r6, r2
 800e754:	bf38      	it	cc
 800e756:	2300      	movcc	r3, #0
 800e758:	4423      	add	r3, r4
 800e75a:	e015      	b.n	800e788 <rshift+0x68>
 800e75c:	46a1      	mov	r9, r4
 800e75e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e762:	f1c1 0820 	rsb	r8, r1, #32
 800e766:	40cf      	lsrs	r7, r1
 800e768:	f105 0e04 	add.w	lr, r5, #4
 800e76c:	4576      	cmp	r6, lr
 800e76e:	46f4      	mov	ip, lr
 800e770:	d816      	bhi.n	800e7a0 <rshift+0x80>
 800e772:	1a9a      	subs	r2, r3, r2
 800e774:	0092      	lsls	r2, r2, #2
 800e776:	3a04      	subs	r2, #4
 800e778:	3501      	adds	r5, #1
 800e77a:	42ae      	cmp	r6, r5
 800e77c:	bf38      	it	cc
 800e77e:	2200      	movcc	r2, #0
 800e780:	18a3      	adds	r3, r4, r2
 800e782:	50a7      	str	r7, [r4, r2]
 800e784:	b107      	cbz	r7, 800e788 <rshift+0x68>
 800e786:	3304      	adds	r3, #4
 800e788:	42a3      	cmp	r3, r4
 800e78a:	eba3 0204 	sub.w	r2, r3, r4
 800e78e:	bf08      	it	eq
 800e790:	2300      	moveq	r3, #0
 800e792:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e796:	6102      	str	r2, [r0, #16]
 800e798:	bf08      	it	eq
 800e79a:	6143      	streq	r3, [r0, #20]
 800e79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a0:	f8dc c000 	ldr.w	ip, [ip]
 800e7a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e7a8:	ea4c 0707 	orr.w	r7, ip, r7
 800e7ac:	f849 7b04 	str.w	r7, [r9], #4
 800e7b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e7b4:	40cf      	lsrs	r7, r1
 800e7b6:	e7d9      	b.n	800e76c <rshift+0x4c>
 800e7b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e7bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800e7c0:	e7c2      	b.n	800e748 <rshift+0x28>
 800e7c2:	4623      	mov	r3, r4
 800e7c4:	e7e0      	b.n	800e788 <rshift+0x68>

0800e7c6 <__hexdig_fun>:
 800e7c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e7ca:	2b09      	cmp	r3, #9
 800e7cc:	d802      	bhi.n	800e7d4 <__hexdig_fun+0xe>
 800e7ce:	3820      	subs	r0, #32
 800e7d0:	b2c0      	uxtb	r0, r0
 800e7d2:	4770      	bx	lr
 800e7d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e7d8:	2b05      	cmp	r3, #5
 800e7da:	d801      	bhi.n	800e7e0 <__hexdig_fun+0x1a>
 800e7dc:	3847      	subs	r0, #71	@ 0x47
 800e7de:	e7f7      	b.n	800e7d0 <__hexdig_fun+0xa>
 800e7e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e7e4:	2b05      	cmp	r3, #5
 800e7e6:	d801      	bhi.n	800e7ec <__hexdig_fun+0x26>
 800e7e8:	3827      	subs	r0, #39	@ 0x27
 800e7ea:	e7f1      	b.n	800e7d0 <__hexdig_fun+0xa>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	4770      	bx	lr

0800e7f0 <__gethex>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	468a      	mov	sl, r1
 800e7f6:	4690      	mov	r8, r2
 800e7f8:	b085      	sub	sp, #20
 800e7fa:	9302      	str	r3, [sp, #8]
 800e7fc:	680b      	ldr	r3, [r1, #0]
 800e7fe:	9001      	str	r0, [sp, #4]
 800e800:	1c9c      	adds	r4, r3, #2
 800e802:	46a1      	mov	r9, r4
 800e804:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e808:	2830      	cmp	r0, #48	@ 0x30
 800e80a:	d0fa      	beq.n	800e802 <__gethex+0x12>
 800e80c:	eba9 0303 	sub.w	r3, r9, r3
 800e810:	f1a3 0b02 	sub.w	fp, r3, #2
 800e814:	f7ff ffd7 	bl	800e7c6 <__hexdig_fun>
 800e818:	4605      	mov	r5, r0
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d168      	bne.n	800e8f0 <__gethex+0x100>
 800e81e:	2201      	movs	r2, #1
 800e820:	4648      	mov	r0, r9
 800e822:	499f      	ldr	r1, [pc, #636]	@ (800eaa0 <__gethex+0x2b0>)
 800e824:	f7ff ff14 	bl	800e650 <strncmp>
 800e828:	4607      	mov	r7, r0
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d167      	bne.n	800e8fe <__gethex+0x10e>
 800e82e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e832:	4626      	mov	r6, r4
 800e834:	f7ff ffc7 	bl	800e7c6 <__hexdig_fun>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d062      	beq.n	800e902 <__gethex+0x112>
 800e83c:	4623      	mov	r3, r4
 800e83e:	7818      	ldrb	r0, [r3, #0]
 800e840:	4699      	mov	r9, r3
 800e842:	2830      	cmp	r0, #48	@ 0x30
 800e844:	f103 0301 	add.w	r3, r3, #1
 800e848:	d0f9      	beq.n	800e83e <__gethex+0x4e>
 800e84a:	f7ff ffbc 	bl	800e7c6 <__hexdig_fun>
 800e84e:	fab0 f580 	clz	r5, r0
 800e852:	f04f 0b01 	mov.w	fp, #1
 800e856:	096d      	lsrs	r5, r5, #5
 800e858:	464a      	mov	r2, r9
 800e85a:	4616      	mov	r6, r2
 800e85c:	7830      	ldrb	r0, [r6, #0]
 800e85e:	3201      	adds	r2, #1
 800e860:	f7ff ffb1 	bl	800e7c6 <__hexdig_fun>
 800e864:	2800      	cmp	r0, #0
 800e866:	d1f8      	bne.n	800e85a <__gethex+0x6a>
 800e868:	2201      	movs	r2, #1
 800e86a:	4630      	mov	r0, r6
 800e86c:	498c      	ldr	r1, [pc, #560]	@ (800eaa0 <__gethex+0x2b0>)
 800e86e:	f7ff feef 	bl	800e650 <strncmp>
 800e872:	2800      	cmp	r0, #0
 800e874:	d13f      	bne.n	800e8f6 <__gethex+0x106>
 800e876:	b944      	cbnz	r4, 800e88a <__gethex+0x9a>
 800e878:	1c74      	adds	r4, r6, #1
 800e87a:	4622      	mov	r2, r4
 800e87c:	4616      	mov	r6, r2
 800e87e:	7830      	ldrb	r0, [r6, #0]
 800e880:	3201      	adds	r2, #1
 800e882:	f7ff ffa0 	bl	800e7c6 <__hexdig_fun>
 800e886:	2800      	cmp	r0, #0
 800e888:	d1f8      	bne.n	800e87c <__gethex+0x8c>
 800e88a:	1ba4      	subs	r4, r4, r6
 800e88c:	00a7      	lsls	r7, r4, #2
 800e88e:	7833      	ldrb	r3, [r6, #0]
 800e890:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e894:	2b50      	cmp	r3, #80	@ 0x50
 800e896:	d13e      	bne.n	800e916 <__gethex+0x126>
 800e898:	7873      	ldrb	r3, [r6, #1]
 800e89a:	2b2b      	cmp	r3, #43	@ 0x2b
 800e89c:	d033      	beq.n	800e906 <__gethex+0x116>
 800e89e:	2b2d      	cmp	r3, #45	@ 0x2d
 800e8a0:	d034      	beq.n	800e90c <__gethex+0x11c>
 800e8a2:	2400      	movs	r4, #0
 800e8a4:	1c71      	adds	r1, r6, #1
 800e8a6:	7808      	ldrb	r0, [r1, #0]
 800e8a8:	f7ff ff8d 	bl	800e7c6 <__hexdig_fun>
 800e8ac:	1e43      	subs	r3, r0, #1
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b18      	cmp	r3, #24
 800e8b2:	d830      	bhi.n	800e916 <__gethex+0x126>
 800e8b4:	f1a0 0210 	sub.w	r2, r0, #16
 800e8b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e8bc:	f7ff ff83 	bl	800e7c6 <__hexdig_fun>
 800e8c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800e8c4:	fa5f fc8c 	uxtb.w	ip, ip
 800e8c8:	f1bc 0f18 	cmp.w	ip, #24
 800e8cc:	f04f 030a 	mov.w	r3, #10
 800e8d0:	d91e      	bls.n	800e910 <__gethex+0x120>
 800e8d2:	b104      	cbz	r4, 800e8d6 <__gethex+0xe6>
 800e8d4:	4252      	negs	r2, r2
 800e8d6:	4417      	add	r7, r2
 800e8d8:	f8ca 1000 	str.w	r1, [sl]
 800e8dc:	b1ed      	cbz	r5, 800e91a <__gethex+0x12a>
 800e8de:	f1bb 0f00 	cmp.w	fp, #0
 800e8e2:	bf0c      	ite	eq
 800e8e4:	2506      	moveq	r5, #6
 800e8e6:	2500      	movne	r5, #0
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	b005      	add	sp, #20
 800e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f0:	2500      	movs	r5, #0
 800e8f2:	462c      	mov	r4, r5
 800e8f4:	e7b0      	b.n	800e858 <__gethex+0x68>
 800e8f6:	2c00      	cmp	r4, #0
 800e8f8:	d1c7      	bne.n	800e88a <__gethex+0x9a>
 800e8fa:	4627      	mov	r7, r4
 800e8fc:	e7c7      	b.n	800e88e <__gethex+0x9e>
 800e8fe:	464e      	mov	r6, r9
 800e900:	462f      	mov	r7, r5
 800e902:	2501      	movs	r5, #1
 800e904:	e7c3      	b.n	800e88e <__gethex+0x9e>
 800e906:	2400      	movs	r4, #0
 800e908:	1cb1      	adds	r1, r6, #2
 800e90a:	e7cc      	b.n	800e8a6 <__gethex+0xb6>
 800e90c:	2401      	movs	r4, #1
 800e90e:	e7fb      	b.n	800e908 <__gethex+0x118>
 800e910:	fb03 0002 	mla	r0, r3, r2, r0
 800e914:	e7ce      	b.n	800e8b4 <__gethex+0xc4>
 800e916:	4631      	mov	r1, r6
 800e918:	e7de      	b.n	800e8d8 <__gethex+0xe8>
 800e91a:	4629      	mov	r1, r5
 800e91c:	eba6 0309 	sub.w	r3, r6, r9
 800e920:	3b01      	subs	r3, #1
 800e922:	2b07      	cmp	r3, #7
 800e924:	dc0a      	bgt.n	800e93c <__gethex+0x14c>
 800e926:	9801      	ldr	r0, [sp, #4]
 800e928:	f7fe f95c 	bl	800cbe4 <_Balloc>
 800e92c:	4604      	mov	r4, r0
 800e92e:	b940      	cbnz	r0, 800e942 <__gethex+0x152>
 800e930:	4602      	mov	r2, r0
 800e932:	21e4      	movs	r1, #228	@ 0xe4
 800e934:	4b5b      	ldr	r3, [pc, #364]	@ (800eaa4 <__gethex+0x2b4>)
 800e936:	485c      	ldr	r0, [pc, #368]	@ (800eaa8 <__gethex+0x2b8>)
 800e938:	f7ff fec0 	bl	800e6bc <__assert_func>
 800e93c:	3101      	adds	r1, #1
 800e93e:	105b      	asrs	r3, r3, #1
 800e940:	e7ef      	b.n	800e922 <__gethex+0x132>
 800e942:	2300      	movs	r3, #0
 800e944:	f100 0a14 	add.w	sl, r0, #20
 800e948:	4655      	mov	r5, sl
 800e94a:	469b      	mov	fp, r3
 800e94c:	45b1      	cmp	r9, r6
 800e94e:	d337      	bcc.n	800e9c0 <__gethex+0x1d0>
 800e950:	f845 bb04 	str.w	fp, [r5], #4
 800e954:	eba5 050a 	sub.w	r5, r5, sl
 800e958:	10ad      	asrs	r5, r5, #2
 800e95a:	6125      	str	r5, [r4, #16]
 800e95c:	4658      	mov	r0, fp
 800e95e:	f7fe fa33 	bl	800cdc8 <__hi0bits>
 800e962:	016d      	lsls	r5, r5, #5
 800e964:	f8d8 6000 	ldr.w	r6, [r8]
 800e968:	1a2d      	subs	r5, r5, r0
 800e96a:	42b5      	cmp	r5, r6
 800e96c:	dd54      	ble.n	800ea18 <__gethex+0x228>
 800e96e:	1bad      	subs	r5, r5, r6
 800e970:	4629      	mov	r1, r5
 800e972:	4620      	mov	r0, r4
 800e974:	f7fe fdb5 	bl	800d4e2 <__any_on>
 800e978:	4681      	mov	r9, r0
 800e97a:	b178      	cbz	r0, 800e99c <__gethex+0x1ac>
 800e97c:	f04f 0901 	mov.w	r9, #1
 800e980:	1e6b      	subs	r3, r5, #1
 800e982:	1159      	asrs	r1, r3, #5
 800e984:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e988:	f003 021f 	and.w	r2, r3, #31
 800e98c:	fa09 f202 	lsl.w	r2, r9, r2
 800e990:	420a      	tst	r2, r1
 800e992:	d003      	beq.n	800e99c <__gethex+0x1ac>
 800e994:	454b      	cmp	r3, r9
 800e996:	dc36      	bgt.n	800ea06 <__gethex+0x216>
 800e998:	f04f 0902 	mov.w	r9, #2
 800e99c:	4629      	mov	r1, r5
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f7ff febe 	bl	800e720 <rshift>
 800e9a4:	442f      	add	r7, r5
 800e9a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e9aa:	42bb      	cmp	r3, r7
 800e9ac:	da42      	bge.n	800ea34 <__gethex+0x244>
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	9801      	ldr	r0, [sp, #4]
 800e9b2:	f7fe f957 	bl	800cc64 <_Bfree>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9ba:	25a3      	movs	r5, #163	@ 0xa3
 800e9bc:	6013      	str	r3, [r2, #0]
 800e9be:	e793      	b.n	800e8e8 <__gethex+0xf8>
 800e9c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e9c4:	2a2e      	cmp	r2, #46	@ 0x2e
 800e9c6:	d012      	beq.n	800e9ee <__gethex+0x1fe>
 800e9c8:	2b20      	cmp	r3, #32
 800e9ca:	d104      	bne.n	800e9d6 <__gethex+0x1e6>
 800e9cc:	f845 bb04 	str.w	fp, [r5], #4
 800e9d0:	f04f 0b00 	mov.w	fp, #0
 800e9d4:	465b      	mov	r3, fp
 800e9d6:	7830      	ldrb	r0, [r6, #0]
 800e9d8:	9303      	str	r3, [sp, #12]
 800e9da:	f7ff fef4 	bl	800e7c6 <__hexdig_fun>
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	f000 000f 	and.w	r0, r0, #15
 800e9e4:	4098      	lsls	r0, r3
 800e9e6:	ea4b 0b00 	orr.w	fp, fp, r0
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	e7ae      	b.n	800e94c <__gethex+0x15c>
 800e9ee:	45b1      	cmp	r9, r6
 800e9f0:	d8ea      	bhi.n	800e9c8 <__gethex+0x1d8>
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	492a      	ldr	r1, [pc, #168]	@ (800eaa0 <__gethex+0x2b0>)
 800e9f8:	9303      	str	r3, [sp, #12]
 800e9fa:	f7ff fe29 	bl	800e650 <strncmp>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d1e1      	bne.n	800e9c8 <__gethex+0x1d8>
 800ea04:	e7a2      	b.n	800e94c <__gethex+0x15c>
 800ea06:	4620      	mov	r0, r4
 800ea08:	1ea9      	subs	r1, r5, #2
 800ea0a:	f7fe fd6a 	bl	800d4e2 <__any_on>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	d0c2      	beq.n	800e998 <__gethex+0x1a8>
 800ea12:	f04f 0903 	mov.w	r9, #3
 800ea16:	e7c1      	b.n	800e99c <__gethex+0x1ac>
 800ea18:	da09      	bge.n	800ea2e <__gethex+0x23e>
 800ea1a:	1b75      	subs	r5, r6, r5
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	462a      	mov	r2, r5
 800ea20:	9801      	ldr	r0, [sp, #4]
 800ea22:	f7fe fb2f 	bl	800d084 <__lshift>
 800ea26:	4604      	mov	r4, r0
 800ea28:	1b7f      	subs	r7, r7, r5
 800ea2a:	f100 0a14 	add.w	sl, r0, #20
 800ea2e:	f04f 0900 	mov.w	r9, #0
 800ea32:	e7b8      	b.n	800e9a6 <__gethex+0x1b6>
 800ea34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ea38:	42bd      	cmp	r5, r7
 800ea3a:	dd6f      	ble.n	800eb1c <__gethex+0x32c>
 800ea3c:	1bed      	subs	r5, r5, r7
 800ea3e:	42ae      	cmp	r6, r5
 800ea40:	dc34      	bgt.n	800eaac <__gethex+0x2bc>
 800ea42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d022      	beq.n	800ea90 <__gethex+0x2a0>
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d024      	beq.n	800ea98 <__gethex+0x2a8>
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d115      	bne.n	800ea7e <__gethex+0x28e>
 800ea52:	42ae      	cmp	r6, r5
 800ea54:	d113      	bne.n	800ea7e <__gethex+0x28e>
 800ea56:	2e01      	cmp	r6, #1
 800ea58:	d10b      	bne.n	800ea72 <__gethex+0x282>
 800ea5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea5e:	9a02      	ldr	r2, [sp, #8]
 800ea60:	2562      	movs	r5, #98	@ 0x62
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	2301      	movs	r3, #1
 800ea66:	6123      	str	r3, [r4, #16]
 800ea68:	f8ca 3000 	str.w	r3, [sl]
 800ea6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea6e:	601c      	str	r4, [r3, #0]
 800ea70:	e73a      	b.n	800e8e8 <__gethex+0xf8>
 800ea72:	4620      	mov	r0, r4
 800ea74:	1e71      	subs	r1, r6, #1
 800ea76:	f7fe fd34 	bl	800d4e2 <__any_on>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d1ed      	bne.n	800ea5a <__gethex+0x26a>
 800ea7e:	4621      	mov	r1, r4
 800ea80:	9801      	ldr	r0, [sp, #4]
 800ea82:	f7fe f8ef 	bl	800cc64 <_Bfree>
 800ea86:	2300      	movs	r3, #0
 800ea88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea8a:	2550      	movs	r5, #80	@ 0x50
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	e72b      	b.n	800e8e8 <__gethex+0xf8>
 800ea90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1f3      	bne.n	800ea7e <__gethex+0x28e>
 800ea96:	e7e0      	b.n	800ea5a <__gethex+0x26a>
 800ea98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d1dd      	bne.n	800ea5a <__gethex+0x26a>
 800ea9e:	e7ee      	b.n	800ea7e <__gethex+0x28e>
 800eaa0:	0800f58f 	.word	0x0800f58f
 800eaa4:	0800f525 	.word	0x0800f525
 800eaa8:	0800f5e6 	.word	0x0800f5e6
 800eaac:	1e6f      	subs	r7, r5, #1
 800eaae:	f1b9 0f00 	cmp.w	r9, #0
 800eab2:	d130      	bne.n	800eb16 <__gethex+0x326>
 800eab4:	b127      	cbz	r7, 800eac0 <__gethex+0x2d0>
 800eab6:	4639      	mov	r1, r7
 800eab8:	4620      	mov	r0, r4
 800eaba:	f7fe fd12 	bl	800d4e2 <__any_on>
 800eabe:	4681      	mov	r9, r0
 800eac0:	2301      	movs	r3, #1
 800eac2:	4629      	mov	r1, r5
 800eac4:	1b76      	subs	r6, r6, r5
 800eac6:	2502      	movs	r5, #2
 800eac8:	117a      	asrs	r2, r7, #5
 800eaca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eace:	f007 071f 	and.w	r7, r7, #31
 800ead2:	40bb      	lsls	r3, r7
 800ead4:	4213      	tst	r3, r2
 800ead6:	4620      	mov	r0, r4
 800ead8:	bf18      	it	ne
 800eada:	f049 0902 	orrne.w	r9, r9, #2
 800eade:	f7ff fe1f 	bl	800e720 <rshift>
 800eae2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eae6:	f1b9 0f00 	cmp.w	r9, #0
 800eaea:	d047      	beq.n	800eb7c <__gethex+0x38c>
 800eaec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d015      	beq.n	800eb20 <__gethex+0x330>
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d017      	beq.n	800eb28 <__gethex+0x338>
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d109      	bne.n	800eb10 <__gethex+0x320>
 800eafc:	f019 0f02 	tst.w	r9, #2
 800eb00:	d006      	beq.n	800eb10 <__gethex+0x320>
 800eb02:	f8da 3000 	ldr.w	r3, [sl]
 800eb06:	ea49 0903 	orr.w	r9, r9, r3
 800eb0a:	f019 0f01 	tst.w	r9, #1
 800eb0e:	d10e      	bne.n	800eb2e <__gethex+0x33e>
 800eb10:	f045 0510 	orr.w	r5, r5, #16
 800eb14:	e032      	b.n	800eb7c <__gethex+0x38c>
 800eb16:	f04f 0901 	mov.w	r9, #1
 800eb1a:	e7d1      	b.n	800eac0 <__gethex+0x2d0>
 800eb1c:	2501      	movs	r5, #1
 800eb1e:	e7e2      	b.n	800eae6 <__gethex+0x2f6>
 800eb20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb22:	f1c3 0301 	rsb	r3, r3, #1
 800eb26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0f0      	beq.n	800eb10 <__gethex+0x320>
 800eb2e:	f04f 0c00 	mov.w	ip, #0
 800eb32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb36:	f104 0314 	add.w	r3, r4, #20
 800eb3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb42:	4618      	mov	r0, r3
 800eb44:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb48:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb4c:	d01b      	beq.n	800eb86 <__gethex+0x396>
 800eb4e:	3201      	adds	r2, #1
 800eb50:	6002      	str	r2, [r0, #0]
 800eb52:	2d02      	cmp	r5, #2
 800eb54:	f104 0314 	add.w	r3, r4, #20
 800eb58:	d13c      	bne.n	800ebd4 <__gethex+0x3e4>
 800eb5a:	f8d8 2000 	ldr.w	r2, [r8]
 800eb5e:	3a01      	subs	r2, #1
 800eb60:	42b2      	cmp	r2, r6
 800eb62:	d109      	bne.n	800eb78 <__gethex+0x388>
 800eb64:	2201      	movs	r2, #1
 800eb66:	1171      	asrs	r1, r6, #5
 800eb68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb6c:	f006 061f 	and.w	r6, r6, #31
 800eb70:	fa02 f606 	lsl.w	r6, r2, r6
 800eb74:	421e      	tst	r6, r3
 800eb76:	d13a      	bne.n	800ebee <__gethex+0x3fe>
 800eb78:	f045 0520 	orr.w	r5, r5, #32
 800eb7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb7e:	601c      	str	r4, [r3, #0]
 800eb80:	9b02      	ldr	r3, [sp, #8]
 800eb82:	601f      	str	r7, [r3, #0]
 800eb84:	e6b0      	b.n	800e8e8 <__gethex+0xf8>
 800eb86:	4299      	cmp	r1, r3
 800eb88:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb8c:	d8d9      	bhi.n	800eb42 <__gethex+0x352>
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	459b      	cmp	fp, r3
 800eb92:	db17      	blt.n	800ebc4 <__gethex+0x3d4>
 800eb94:	6861      	ldr	r1, [r4, #4]
 800eb96:	9801      	ldr	r0, [sp, #4]
 800eb98:	3101      	adds	r1, #1
 800eb9a:	f7fe f823 	bl	800cbe4 <_Balloc>
 800eb9e:	4681      	mov	r9, r0
 800eba0:	b918      	cbnz	r0, 800ebaa <__gethex+0x3ba>
 800eba2:	4602      	mov	r2, r0
 800eba4:	2184      	movs	r1, #132	@ 0x84
 800eba6:	4b19      	ldr	r3, [pc, #100]	@ (800ec0c <__gethex+0x41c>)
 800eba8:	e6c5      	b.n	800e936 <__gethex+0x146>
 800ebaa:	6922      	ldr	r2, [r4, #16]
 800ebac:	f104 010c 	add.w	r1, r4, #12
 800ebb0:	3202      	adds	r2, #2
 800ebb2:	0092      	lsls	r2, r2, #2
 800ebb4:	300c      	adds	r0, #12
 800ebb6:	f7ff fd6d 	bl	800e694 <memcpy>
 800ebba:	4621      	mov	r1, r4
 800ebbc:	9801      	ldr	r0, [sp, #4]
 800ebbe:	f7fe f851 	bl	800cc64 <_Bfree>
 800ebc2:	464c      	mov	r4, r9
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	1c5a      	adds	r2, r3, #1
 800ebc8:	6122      	str	r2, [r4, #16]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebd0:	615a      	str	r2, [r3, #20]
 800ebd2:	e7be      	b.n	800eb52 <__gethex+0x362>
 800ebd4:	6922      	ldr	r2, [r4, #16]
 800ebd6:	455a      	cmp	r2, fp
 800ebd8:	dd0b      	ble.n	800ebf2 <__gethex+0x402>
 800ebda:	2101      	movs	r1, #1
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f7ff fd9f 	bl	800e720 <rshift>
 800ebe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebe6:	3701      	adds	r7, #1
 800ebe8:	42bb      	cmp	r3, r7
 800ebea:	f6ff aee0 	blt.w	800e9ae <__gethex+0x1be>
 800ebee:	2501      	movs	r5, #1
 800ebf0:	e7c2      	b.n	800eb78 <__gethex+0x388>
 800ebf2:	f016 061f 	ands.w	r6, r6, #31
 800ebf6:	d0fa      	beq.n	800ebee <__gethex+0x3fe>
 800ebf8:	4453      	add	r3, sl
 800ebfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ebfe:	f7fe f8e3 	bl	800cdc8 <__hi0bits>
 800ec02:	f1c6 0620 	rsb	r6, r6, #32
 800ec06:	42b0      	cmp	r0, r6
 800ec08:	dbe7      	blt.n	800ebda <__gethex+0x3ea>
 800ec0a:	e7f0      	b.n	800ebee <__gethex+0x3fe>
 800ec0c:	0800f525 	.word	0x0800f525

0800ec10 <L_shift>:
 800ec10:	f1c2 0208 	rsb	r2, r2, #8
 800ec14:	0092      	lsls	r2, r2, #2
 800ec16:	b570      	push	{r4, r5, r6, lr}
 800ec18:	f1c2 0620 	rsb	r6, r2, #32
 800ec1c:	6843      	ldr	r3, [r0, #4]
 800ec1e:	6804      	ldr	r4, [r0, #0]
 800ec20:	fa03 f506 	lsl.w	r5, r3, r6
 800ec24:	432c      	orrs	r4, r5
 800ec26:	40d3      	lsrs	r3, r2
 800ec28:	6004      	str	r4, [r0, #0]
 800ec2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec2e:	4288      	cmp	r0, r1
 800ec30:	d3f4      	bcc.n	800ec1c <L_shift+0xc>
 800ec32:	bd70      	pop	{r4, r5, r6, pc}

0800ec34 <__match>:
 800ec34:	b530      	push	{r4, r5, lr}
 800ec36:	6803      	ldr	r3, [r0, #0]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec3e:	b914      	cbnz	r4, 800ec46 <__match+0x12>
 800ec40:	6003      	str	r3, [r0, #0]
 800ec42:	2001      	movs	r0, #1
 800ec44:	bd30      	pop	{r4, r5, pc}
 800ec46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec4a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ec4e:	2d19      	cmp	r5, #25
 800ec50:	bf98      	it	ls
 800ec52:	3220      	addls	r2, #32
 800ec54:	42a2      	cmp	r2, r4
 800ec56:	d0f0      	beq.n	800ec3a <__match+0x6>
 800ec58:	2000      	movs	r0, #0
 800ec5a:	e7f3      	b.n	800ec44 <__match+0x10>

0800ec5c <__hexnan>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	2500      	movs	r5, #0
 800ec62:	680b      	ldr	r3, [r1, #0]
 800ec64:	4682      	mov	sl, r0
 800ec66:	115e      	asrs	r6, r3, #5
 800ec68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec6c:	f013 031f 	ands.w	r3, r3, #31
 800ec70:	bf18      	it	ne
 800ec72:	3604      	addne	r6, #4
 800ec74:	1f37      	subs	r7, r6, #4
 800ec76:	4690      	mov	r8, r2
 800ec78:	46b9      	mov	r9, r7
 800ec7a:	463c      	mov	r4, r7
 800ec7c:	46ab      	mov	fp, r5
 800ec7e:	b087      	sub	sp, #28
 800ec80:	6801      	ldr	r1, [r0, #0]
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec88:	9502      	str	r5, [sp, #8]
 800ec8a:	784a      	ldrb	r2, [r1, #1]
 800ec8c:	1c4b      	adds	r3, r1, #1
 800ec8e:	9303      	str	r3, [sp, #12]
 800ec90:	b342      	cbz	r2, 800ece4 <__hexnan+0x88>
 800ec92:	4610      	mov	r0, r2
 800ec94:	9105      	str	r1, [sp, #20]
 800ec96:	9204      	str	r2, [sp, #16]
 800ec98:	f7ff fd95 	bl	800e7c6 <__hexdig_fun>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d151      	bne.n	800ed44 <__hexnan+0xe8>
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	9905      	ldr	r1, [sp, #20]
 800eca4:	2a20      	cmp	r2, #32
 800eca6:	d818      	bhi.n	800ecda <__hexnan+0x7e>
 800eca8:	9b02      	ldr	r3, [sp, #8]
 800ecaa:	459b      	cmp	fp, r3
 800ecac:	dd13      	ble.n	800ecd6 <__hexnan+0x7a>
 800ecae:	454c      	cmp	r4, r9
 800ecb0:	d206      	bcs.n	800ecc0 <__hexnan+0x64>
 800ecb2:	2d07      	cmp	r5, #7
 800ecb4:	dc04      	bgt.n	800ecc0 <__hexnan+0x64>
 800ecb6:	462a      	mov	r2, r5
 800ecb8:	4649      	mov	r1, r9
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f7ff ffa8 	bl	800ec10 <L_shift>
 800ecc0:	4544      	cmp	r4, r8
 800ecc2:	d952      	bls.n	800ed6a <__hexnan+0x10e>
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f1a4 0904 	sub.w	r9, r4, #4
 800ecca:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecce:	461d      	mov	r5, r3
 800ecd0:	464c      	mov	r4, r9
 800ecd2:	f8cd b008 	str.w	fp, [sp, #8]
 800ecd6:	9903      	ldr	r1, [sp, #12]
 800ecd8:	e7d7      	b.n	800ec8a <__hexnan+0x2e>
 800ecda:	2a29      	cmp	r2, #41	@ 0x29
 800ecdc:	d157      	bne.n	800ed8e <__hexnan+0x132>
 800ecde:	3102      	adds	r1, #2
 800ece0:	f8ca 1000 	str.w	r1, [sl]
 800ece4:	f1bb 0f00 	cmp.w	fp, #0
 800ece8:	d051      	beq.n	800ed8e <__hexnan+0x132>
 800ecea:	454c      	cmp	r4, r9
 800ecec:	d206      	bcs.n	800ecfc <__hexnan+0xa0>
 800ecee:	2d07      	cmp	r5, #7
 800ecf0:	dc04      	bgt.n	800ecfc <__hexnan+0xa0>
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f7ff ff8a 	bl	800ec10 <L_shift>
 800ecfc:	4544      	cmp	r4, r8
 800ecfe:	d936      	bls.n	800ed6e <__hexnan+0x112>
 800ed00:	4623      	mov	r3, r4
 800ed02:	f1a8 0204 	sub.w	r2, r8, #4
 800ed06:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed0a:	429f      	cmp	r7, r3
 800ed0c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ed10:	d2f9      	bcs.n	800ed06 <__hexnan+0xaa>
 800ed12:	1b3b      	subs	r3, r7, r4
 800ed14:	f023 0303 	bic.w	r3, r3, #3
 800ed18:	3304      	adds	r3, #4
 800ed1a:	3401      	adds	r4, #1
 800ed1c:	3e03      	subs	r6, #3
 800ed1e:	42b4      	cmp	r4, r6
 800ed20:	bf88      	it	hi
 800ed22:	2304      	movhi	r3, #4
 800ed24:	2200      	movs	r2, #0
 800ed26:	4443      	add	r3, r8
 800ed28:	f843 2b04 	str.w	r2, [r3], #4
 800ed2c:	429f      	cmp	r7, r3
 800ed2e:	d2fb      	bcs.n	800ed28 <__hexnan+0xcc>
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	b91b      	cbnz	r3, 800ed3c <__hexnan+0xe0>
 800ed34:	4547      	cmp	r7, r8
 800ed36:	d128      	bne.n	800ed8a <__hexnan+0x12e>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	2005      	movs	r0, #5
 800ed3e:	b007      	add	sp, #28
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	3501      	adds	r5, #1
 800ed46:	2d08      	cmp	r5, #8
 800ed48:	f10b 0b01 	add.w	fp, fp, #1
 800ed4c:	dd06      	ble.n	800ed5c <__hexnan+0x100>
 800ed4e:	4544      	cmp	r4, r8
 800ed50:	d9c1      	bls.n	800ecd6 <__hexnan+0x7a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	2501      	movs	r5, #1
 800ed56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed5a:	3c04      	subs	r4, #4
 800ed5c:	6822      	ldr	r2, [r4, #0]
 800ed5e:	f000 000f 	and.w	r0, r0, #15
 800ed62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ed66:	6020      	str	r0, [r4, #0]
 800ed68:	e7b5      	b.n	800ecd6 <__hexnan+0x7a>
 800ed6a:	2508      	movs	r5, #8
 800ed6c:	e7b3      	b.n	800ecd6 <__hexnan+0x7a>
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0dd      	beq.n	800ed30 <__hexnan+0xd4>
 800ed74:	f04f 32ff 	mov.w	r2, #4294967295
 800ed78:	f1c3 0320 	rsb	r3, r3, #32
 800ed7c:	40da      	lsrs	r2, r3
 800ed7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ed82:	4013      	ands	r3, r2
 800ed84:	f846 3c04 	str.w	r3, [r6, #-4]
 800ed88:	e7d2      	b.n	800ed30 <__hexnan+0xd4>
 800ed8a:	3f04      	subs	r7, #4
 800ed8c:	e7d0      	b.n	800ed30 <__hexnan+0xd4>
 800ed8e:	2004      	movs	r0, #4
 800ed90:	e7d5      	b.n	800ed3e <__hexnan+0xe2>

0800ed92 <__ascii_mbtowc>:
 800ed92:	b082      	sub	sp, #8
 800ed94:	b901      	cbnz	r1, 800ed98 <__ascii_mbtowc+0x6>
 800ed96:	a901      	add	r1, sp, #4
 800ed98:	b142      	cbz	r2, 800edac <__ascii_mbtowc+0x1a>
 800ed9a:	b14b      	cbz	r3, 800edb0 <__ascii_mbtowc+0x1e>
 800ed9c:	7813      	ldrb	r3, [r2, #0]
 800ed9e:	600b      	str	r3, [r1, #0]
 800eda0:	7812      	ldrb	r2, [r2, #0]
 800eda2:	1e10      	subs	r0, r2, #0
 800eda4:	bf18      	it	ne
 800eda6:	2001      	movne	r0, #1
 800eda8:	b002      	add	sp, #8
 800edaa:	4770      	bx	lr
 800edac:	4610      	mov	r0, r2
 800edae:	e7fb      	b.n	800eda8 <__ascii_mbtowc+0x16>
 800edb0:	f06f 0001 	mvn.w	r0, #1
 800edb4:	e7f8      	b.n	800eda8 <__ascii_mbtowc+0x16>

0800edb6 <_realloc_r>:
 800edb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edba:	4607      	mov	r7, r0
 800edbc:	4614      	mov	r4, r2
 800edbe:	460d      	mov	r5, r1
 800edc0:	b921      	cbnz	r1, 800edcc <_realloc_r+0x16>
 800edc2:	4611      	mov	r1, r2
 800edc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edc8:	f7fd be80 	b.w	800cacc <_malloc_r>
 800edcc:	b92a      	cbnz	r2, 800edda <_realloc_r+0x24>
 800edce:	f7fd fe0b 	bl	800c9e8 <_free_r>
 800edd2:	4625      	mov	r5, r4
 800edd4:	4628      	mov	r0, r5
 800edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edda:	f000 f840 	bl	800ee5e <_malloc_usable_size_r>
 800edde:	4284      	cmp	r4, r0
 800ede0:	4606      	mov	r6, r0
 800ede2:	d802      	bhi.n	800edea <_realloc_r+0x34>
 800ede4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ede8:	d8f4      	bhi.n	800edd4 <_realloc_r+0x1e>
 800edea:	4621      	mov	r1, r4
 800edec:	4638      	mov	r0, r7
 800edee:	f7fd fe6d 	bl	800cacc <_malloc_r>
 800edf2:	4680      	mov	r8, r0
 800edf4:	b908      	cbnz	r0, 800edfa <_realloc_r+0x44>
 800edf6:	4645      	mov	r5, r8
 800edf8:	e7ec      	b.n	800edd4 <_realloc_r+0x1e>
 800edfa:	42b4      	cmp	r4, r6
 800edfc:	4622      	mov	r2, r4
 800edfe:	4629      	mov	r1, r5
 800ee00:	bf28      	it	cs
 800ee02:	4632      	movcs	r2, r6
 800ee04:	f7ff fc46 	bl	800e694 <memcpy>
 800ee08:	4629      	mov	r1, r5
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	f7fd fdec 	bl	800c9e8 <_free_r>
 800ee10:	e7f1      	b.n	800edf6 <_realloc_r+0x40>

0800ee12 <__ascii_wctomb>:
 800ee12:	4603      	mov	r3, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	b141      	cbz	r1, 800ee2a <__ascii_wctomb+0x18>
 800ee18:	2aff      	cmp	r2, #255	@ 0xff
 800ee1a:	d904      	bls.n	800ee26 <__ascii_wctomb+0x14>
 800ee1c:	228a      	movs	r2, #138	@ 0x8a
 800ee1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	4770      	bx	lr
 800ee26:	2001      	movs	r0, #1
 800ee28:	700a      	strb	r2, [r1, #0]
 800ee2a:	4770      	bx	lr

0800ee2c <fiprintf>:
 800ee2c:	b40e      	push	{r1, r2, r3}
 800ee2e:	b503      	push	{r0, r1, lr}
 800ee30:	4601      	mov	r1, r0
 800ee32:	ab03      	add	r3, sp, #12
 800ee34:	4805      	ldr	r0, [pc, #20]	@ (800ee4c <fiprintf+0x20>)
 800ee36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee3a:	6800      	ldr	r0, [r0, #0]
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	f000 f83d 	bl	800eebc <_vfiprintf_r>
 800ee42:	b002      	add	sp, #8
 800ee44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee48:	b003      	add	sp, #12
 800ee4a:	4770      	bx	lr
 800ee4c:	2000018c 	.word	0x2000018c

0800ee50 <abort>:
 800ee50:	2006      	movs	r0, #6
 800ee52:	b508      	push	{r3, lr}
 800ee54:	f000 fa06 	bl	800f264 <raise>
 800ee58:	2001      	movs	r0, #1
 800ee5a:	f7f2 fa02 	bl	8001262 <_exit>

0800ee5e <_malloc_usable_size_r>:
 800ee5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee62:	1f18      	subs	r0, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfbc      	itt	lt
 800ee68:	580b      	ldrlt	r3, [r1, r0]
 800ee6a:	18c0      	addlt	r0, r0, r3
 800ee6c:	4770      	bx	lr

0800ee6e <__sfputc_r>:
 800ee6e:	6893      	ldr	r3, [r2, #8]
 800ee70:	b410      	push	{r4}
 800ee72:	3b01      	subs	r3, #1
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	6093      	str	r3, [r2, #8]
 800ee78:	da07      	bge.n	800ee8a <__sfputc_r+0x1c>
 800ee7a:	6994      	ldr	r4, [r2, #24]
 800ee7c:	42a3      	cmp	r3, r4
 800ee7e:	db01      	blt.n	800ee84 <__sfputc_r+0x16>
 800ee80:	290a      	cmp	r1, #10
 800ee82:	d102      	bne.n	800ee8a <__sfputc_r+0x1c>
 800ee84:	bc10      	pop	{r4}
 800ee86:	f000 b931 	b.w	800f0ec <__swbuf_r>
 800ee8a:	6813      	ldr	r3, [r2, #0]
 800ee8c:	1c58      	adds	r0, r3, #1
 800ee8e:	6010      	str	r0, [r2, #0]
 800ee90:	7019      	strb	r1, [r3, #0]
 800ee92:	4608      	mov	r0, r1
 800ee94:	bc10      	pop	{r4}
 800ee96:	4770      	bx	lr

0800ee98 <__sfputs_r>:
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	460f      	mov	r7, r1
 800ee9e:	4614      	mov	r4, r2
 800eea0:	18d5      	adds	r5, r2, r3
 800eea2:	42ac      	cmp	r4, r5
 800eea4:	d101      	bne.n	800eeaa <__sfputs_r+0x12>
 800eea6:	2000      	movs	r0, #0
 800eea8:	e007      	b.n	800eeba <__sfputs_r+0x22>
 800eeaa:	463a      	mov	r2, r7
 800eeac:	4630      	mov	r0, r6
 800eeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb2:	f7ff ffdc 	bl	800ee6e <__sfputc_r>
 800eeb6:	1c43      	adds	r3, r0, #1
 800eeb8:	d1f3      	bne.n	800eea2 <__sfputs_r+0xa>
 800eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eebc <_vfiprintf_r>:
 800eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec0:	460d      	mov	r5, r1
 800eec2:	4614      	mov	r4, r2
 800eec4:	4698      	mov	r8, r3
 800eec6:	4606      	mov	r6, r0
 800eec8:	b09d      	sub	sp, #116	@ 0x74
 800eeca:	b118      	cbz	r0, 800eed4 <_vfiprintf_r+0x18>
 800eecc:	6a03      	ldr	r3, [r0, #32]
 800eece:	b90b      	cbnz	r3, 800eed4 <_vfiprintf_r+0x18>
 800eed0:	f7fc fdca 	bl	800ba68 <__sinit>
 800eed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eed6:	07d9      	lsls	r1, r3, #31
 800eed8:	d405      	bmi.n	800eee6 <_vfiprintf_r+0x2a>
 800eeda:	89ab      	ldrh	r3, [r5, #12]
 800eedc:	059a      	lsls	r2, r3, #22
 800eede:	d402      	bmi.n	800eee6 <_vfiprintf_r+0x2a>
 800eee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eee2:	f7fc ff10 	bl	800bd06 <__retarget_lock_acquire_recursive>
 800eee6:	89ab      	ldrh	r3, [r5, #12]
 800eee8:	071b      	lsls	r3, r3, #28
 800eeea:	d501      	bpl.n	800eef0 <_vfiprintf_r+0x34>
 800eeec:	692b      	ldr	r3, [r5, #16]
 800eeee:	b99b      	cbnz	r3, 800ef18 <_vfiprintf_r+0x5c>
 800eef0:	4629      	mov	r1, r5
 800eef2:	4630      	mov	r0, r6
 800eef4:	f000 f938 	bl	800f168 <__swsetup_r>
 800eef8:	b170      	cbz	r0, 800ef18 <_vfiprintf_r+0x5c>
 800eefa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eefc:	07dc      	lsls	r4, r3, #31
 800eefe:	d504      	bpl.n	800ef0a <_vfiprintf_r+0x4e>
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	b01d      	add	sp, #116	@ 0x74
 800ef06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0a:	89ab      	ldrh	r3, [r5, #12]
 800ef0c:	0598      	lsls	r0, r3, #22
 800ef0e:	d4f7      	bmi.n	800ef00 <_vfiprintf_r+0x44>
 800ef10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef12:	f7fc fef9 	bl	800bd08 <__retarget_lock_release_recursive>
 800ef16:	e7f3      	b.n	800ef00 <_vfiprintf_r+0x44>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef1c:	2320      	movs	r3, #32
 800ef1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef22:	2330      	movs	r3, #48	@ 0x30
 800ef24:	f04f 0901 	mov.w	r9, #1
 800ef28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f0d8 <_vfiprintf_r+0x21c>
 800ef30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef34:	4623      	mov	r3, r4
 800ef36:	469a      	mov	sl, r3
 800ef38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef3c:	b10a      	cbz	r2, 800ef42 <_vfiprintf_r+0x86>
 800ef3e:	2a25      	cmp	r2, #37	@ 0x25
 800ef40:	d1f9      	bne.n	800ef36 <_vfiprintf_r+0x7a>
 800ef42:	ebba 0b04 	subs.w	fp, sl, r4
 800ef46:	d00b      	beq.n	800ef60 <_vfiprintf_r+0xa4>
 800ef48:	465b      	mov	r3, fp
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f7ff ffa2 	bl	800ee98 <__sfputs_r>
 800ef54:	3001      	adds	r0, #1
 800ef56:	f000 80a7 	beq.w	800f0a8 <_vfiprintf_r+0x1ec>
 800ef5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef5c:	445a      	add	r2, fp
 800ef5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef60:	f89a 3000 	ldrb.w	r3, [sl]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 809f 	beq.w	800f0a8 <_vfiprintf_r+0x1ec>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef74:	f10a 0a01 	add.w	sl, sl, #1
 800ef78:	9304      	str	r3, [sp, #16]
 800ef7a:	9307      	str	r3, [sp, #28]
 800ef7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef80:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef82:	4654      	mov	r4, sl
 800ef84:	2205      	movs	r2, #5
 800ef86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef8a:	4853      	ldr	r0, [pc, #332]	@ (800f0d8 <_vfiprintf_r+0x21c>)
 800ef8c:	f7fc febd 	bl	800bd0a <memchr>
 800ef90:	9a04      	ldr	r2, [sp, #16]
 800ef92:	b9d8      	cbnz	r0, 800efcc <_vfiprintf_r+0x110>
 800ef94:	06d1      	lsls	r1, r2, #27
 800ef96:	bf44      	itt	mi
 800ef98:	2320      	movmi	r3, #32
 800ef9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef9e:	0713      	lsls	r3, r2, #28
 800efa0:	bf44      	itt	mi
 800efa2:	232b      	movmi	r3, #43	@ 0x2b
 800efa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efa8:	f89a 3000 	ldrb.w	r3, [sl]
 800efac:	2b2a      	cmp	r3, #42	@ 0x2a
 800efae:	d015      	beq.n	800efdc <_vfiprintf_r+0x120>
 800efb0:	4654      	mov	r4, sl
 800efb2:	2000      	movs	r0, #0
 800efb4:	f04f 0c0a 	mov.w	ip, #10
 800efb8:	9a07      	ldr	r2, [sp, #28]
 800efba:	4621      	mov	r1, r4
 800efbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efc0:	3b30      	subs	r3, #48	@ 0x30
 800efc2:	2b09      	cmp	r3, #9
 800efc4:	d94b      	bls.n	800f05e <_vfiprintf_r+0x1a2>
 800efc6:	b1b0      	cbz	r0, 800eff6 <_vfiprintf_r+0x13a>
 800efc8:	9207      	str	r2, [sp, #28]
 800efca:	e014      	b.n	800eff6 <_vfiprintf_r+0x13a>
 800efcc:	eba0 0308 	sub.w	r3, r0, r8
 800efd0:	fa09 f303 	lsl.w	r3, r9, r3
 800efd4:	4313      	orrs	r3, r2
 800efd6:	46a2      	mov	sl, r4
 800efd8:	9304      	str	r3, [sp, #16]
 800efda:	e7d2      	b.n	800ef82 <_vfiprintf_r+0xc6>
 800efdc:	9b03      	ldr	r3, [sp, #12]
 800efde:	1d19      	adds	r1, r3, #4
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	9103      	str	r1, [sp, #12]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	bfbb      	ittet	lt
 800efe8:	425b      	neglt	r3, r3
 800efea:	f042 0202 	orrlt.w	r2, r2, #2
 800efee:	9307      	strge	r3, [sp, #28]
 800eff0:	9307      	strlt	r3, [sp, #28]
 800eff2:	bfb8      	it	lt
 800eff4:	9204      	strlt	r2, [sp, #16]
 800eff6:	7823      	ldrb	r3, [r4, #0]
 800eff8:	2b2e      	cmp	r3, #46	@ 0x2e
 800effa:	d10a      	bne.n	800f012 <_vfiprintf_r+0x156>
 800effc:	7863      	ldrb	r3, [r4, #1]
 800effe:	2b2a      	cmp	r3, #42	@ 0x2a
 800f000:	d132      	bne.n	800f068 <_vfiprintf_r+0x1ac>
 800f002:	9b03      	ldr	r3, [sp, #12]
 800f004:	3402      	adds	r4, #2
 800f006:	1d1a      	adds	r2, r3, #4
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	9203      	str	r2, [sp, #12]
 800f00c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f0dc <_vfiprintf_r+0x220>
 800f016:	2203      	movs	r2, #3
 800f018:	4650      	mov	r0, sl
 800f01a:	7821      	ldrb	r1, [r4, #0]
 800f01c:	f7fc fe75 	bl	800bd0a <memchr>
 800f020:	b138      	cbz	r0, 800f032 <_vfiprintf_r+0x176>
 800f022:	2240      	movs	r2, #64	@ 0x40
 800f024:	9b04      	ldr	r3, [sp, #16]
 800f026:	eba0 000a 	sub.w	r0, r0, sl
 800f02a:	4082      	lsls	r2, r0
 800f02c:	4313      	orrs	r3, r2
 800f02e:	3401      	adds	r4, #1
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f036:	2206      	movs	r2, #6
 800f038:	4829      	ldr	r0, [pc, #164]	@ (800f0e0 <_vfiprintf_r+0x224>)
 800f03a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f03e:	f7fc fe64 	bl	800bd0a <memchr>
 800f042:	2800      	cmp	r0, #0
 800f044:	d03f      	beq.n	800f0c6 <_vfiprintf_r+0x20a>
 800f046:	4b27      	ldr	r3, [pc, #156]	@ (800f0e4 <_vfiprintf_r+0x228>)
 800f048:	bb1b      	cbnz	r3, 800f092 <_vfiprintf_r+0x1d6>
 800f04a:	9b03      	ldr	r3, [sp, #12]
 800f04c:	3307      	adds	r3, #7
 800f04e:	f023 0307 	bic.w	r3, r3, #7
 800f052:	3308      	adds	r3, #8
 800f054:	9303      	str	r3, [sp, #12]
 800f056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f058:	443b      	add	r3, r7
 800f05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f05c:	e76a      	b.n	800ef34 <_vfiprintf_r+0x78>
 800f05e:	460c      	mov	r4, r1
 800f060:	2001      	movs	r0, #1
 800f062:	fb0c 3202 	mla	r2, ip, r2, r3
 800f066:	e7a8      	b.n	800efba <_vfiprintf_r+0xfe>
 800f068:	2300      	movs	r3, #0
 800f06a:	f04f 0c0a 	mov.w	ip, #10
 800f06e:	4619      	mov	r1, r3
 800f070:	3401      	adds	r4, #1
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	4620      	mov	r0, r4
 800f076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f07a:	3a30      	subs	r2, #48	@ 0x30
 800f07c:	2a09      	cmp	r2, #9
 800f07e:	d903      	bls.n	800f088 <_vfiprintf_r+0x1cc>
 800f080:	2b00      	cmp	r3, #0
 800f082:	d0c6      	beq.n	800f012 <_vfiprintf_r+0x156>
 800f084:	9105      	str	r1, [sp, #20]
 800f086:	e7c4      	b.n	800f012 <_vfiprintf_r+0x156>
 800f088:	4604      	mov	r4, r0
 800f08a:	2301      	movs	r3, #1
 800f08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f090:	e7f0      	b.n	800f074 <_vfiprintf_r+0x1b8>
 800f092:	ab03      	add	r3, sp, #12
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	462a      	mov	r2, r5
 800f098:	4630      	mov	r0, r6
 800f09a:	4b13      	ldr	r3, [pc, #76]	@ (800f0e8 <_vfiprintf_r+0x22c>)
 800f09c:	a904      	add	r1, sp, #16
 800f09e:	f7fb fe91 	bl	800adc4 <_printf_float>
 800f0a2:	4607      	mov	r7, r0
 800f0a4:	1c78      	adds	r0, r7, #1
 800f0a6:	d1d6      	bne.n	800f056 <_vfiprintf_r+0x19a>
 800f0a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0aa:	07d9      	lsls	r1, r3, #31
 800f0ac:	d405      	bmi.n	800f0ba <_vfiprintf_r+0x1fe>
 800f0ae:	89ab      	ldrh	r3, [r5, #12]
 800f0b0:	059a      	lsls	r2, r3, #22
 800f0b2:	d402      	bmi.n	800f0ba <_vfiprintf_r+0x1fe>
 800f0b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0b6:	f7fc fe27 	bl	800bd08 <__retarget_lock_release_recursive>
 800f0ba:	89ab      	ldrh	r3, [r5, #12]
 800f0bc:	065b      	lsls	r3, r3, #25
 800f0be:	f53f af1f 	bmi.w	800ef00 <_vfiprintf_r+0x44>
 800f0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0c4:	e71e      	b.n	800ef04 <_vfiprintf_r+0x48>
 800f0c6:	ab03      	add	r3, sp, #12
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	462a      	mov	r2, r5
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	4b06      	ldr	r3, [pc, #24]	@ (800f0e8 <_vfiprintf_r+0x22c>)
 800f0d0:	a904      	add	r1, sp, #16
 800f0d2:	f7fc f915 	bl	800b300 <_printf_i>
 800f0d6:	e7e4      	b.n	800f0a2 <_vfiprintf_r+0x1e6>
 800f0d8:	0800f591 	.word	0x0800f591
 800f0dc:	0800f597 	.word	0x0800f597
 800f0e0:	0800f59b 	.word	0x0800f59b
 800f0e4:	0800adc5 	.word	0x0800adc5
 800f0e8:	0800ee99 	.word	0x0800ee99

0800f0ec <__swbuf_r>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	460e      	mov	r6, r1
 800f0f0:	4614      	mov	r4, r2
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	b118      	cbz	r0, 800f0fe <__swbuf_r+0x12>
 800f0f6:	6a03      	ldr	r3, [r0, #32]
 800f0f8:	b90b      	cbnz	r3, 800f0fe <__swbuf_r+0x12>
 800f0fa:	f7fc fcb5 	bl	800ba68 <__sinit>
 800f0fe:	69a3      	ldr	r3, [r4, #24]
 800f100:	60a3      	str	r3, [r4, #8]
 800f102:	89a3      	ldrh	r3, [r4, #12]
 800f104:	071a      	lsls	r2, r3, #28
 800f106:	d501      	bpl.n	800f10c <__swbuf_r+0x20>
 800f108:	6923      	ldr	r3, [r4, #16]
 800f10a:	b943      	cbnz	r3, 800f11e <__swbuf_r+0x32>
 800f10c:	4621      	mov	r1, r4
 800f10e:	4628      	mov	r0, r5
 800f110:	f000 f82a 	bl	800f168 <__swsetup_r>
 800f114:	b118      	cbz	r0, 800f11e <__swbuf_r+0x32>
 800f116:	f04f 37ff 	mov.w	r7, #4294967295
 800f11a:	4638      	mov	r0, r7
 800f11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	6922      	ldr	r2, [r4, #16]
 800f122:	b2f6      	uxtb	r6, r6
 800f124:	1a98      	subs	r0, r3, r2
 800f126:	6963      	ldr	r3, [r4, #20]
 800f128:	4637      	mov	r7, r6
 800f12a:	4283      	cmp	r3, r0
 800f12c:	dc05      	bgt.n	800f13a <__swbuf_r+0x4e>
 800f12e:	4621      	mov	r1, r4
 800f130:	4628      	mov	r0, r5
 800f132:	f7ff fa4b 	bl	800e5cc <_fflush_r>
 800f136:	2800      	cmp	r0, #0
 800f138:	d1ed      	bne.n	800f116 <__swbuf_r+0x2a>
 800f13a:	68a3      	ldr	r3, [r4, #8]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	60a3      	str	r3, [r4, #8]
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	1c5a      	adds	r2, r3, #1
 800f144:	6022      	str	r2, [r4, #0]
 800f146:	701e      	strb	r6, [r3, #0]
 800f148:	6962      	ldr	r2, [r4, #20]
 800f14a:	1c43      	adds	r3, r0, #1
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d004      	beq.n	800f15a <__swbuf_r+0x6e>
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	07db      	lsls	r3, r3, #31
 800f154:	d5e1      	bpl.n	800f11a <__swbuf_r+0x2e>
 800f156:	2e0a      	cmp	r6, #10
 800f158:	d1df      	bne.n	800f11a <__swbuf_r+0x2e>
 800f15a:	4621      	mov	r1, r4
 800f15c:	4628      	mov	r0, r5
 800f15e:	f7ff fa35 	bl	800e5cc <_fflush_r>
 800f162:	2800      	cmp	r0, #0
 800f164:	d0d9      	beq.n	800f11a <__swbuf_r+0x2e>
 800f166:	e7d6      	b.n	800f116 <__swbuf_r+0x2a>

0800f168 <__swsetup_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4b29      	ldr	r3, [pc, #164]	@ (800f210 <__swsetup_r+0xa8>)
 800f16c:	4605      	mov	r5, r0
 800f16e:	6818      	ldr	r0, [r3, #0]
 800f170:	460c      	mov	r4, r1
 800f172:	b118      	cbz	r0, 800f17c <__swsetup_r+0x14>
 800f174:	6a03      	ldr	r3, [r0, #32]
 800f176:	b90b      	cbnz	r3, 800f17c <__swsetup_r+0x14>
 800f178:	f7fc fc76 	bl	800ba68 <__sinit>
 800f17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f180:	0719      	lsls	r1, r3, #28
 800f182:	d422      	bmi.n	800f1ca <__swsetup_r+0x62>
 800f184:	06da      	lsls	r2, r3, #27
 800f186:	d407      	bmi.n	800f198 <__swsetup_r+0x30>
 800f188:	2209      	movs	r2, #9
 800f18a:	602a      	str	r2, [r5, #0]
 800f18c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f190:	f04f 30ff 	mov.w	r0, #4294967295
 800f194:	81a3      	strh	r3, [r4, #12]
 800f196:	e033      	b.n	800f200 <__swsetup_r+0x98>
 800f198:	0758      	lsls	r0, r3, #29
 800f19a:	d512      	bpl.n	800f1c2 <__swsetup_r+0x5a>
 800f19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f19e:	b141      	cbz	r1, 800f1b2 <__swsetup_r+0x4a>
 800f1a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1a4:	4299      	cmp	r1, r3
 800f1a6:	d002      	beq.n	800f1ae <__swsetup_r+0x46>
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f7fd fc1d 	bl	800c9e8 <_free_r>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	6063      	str	r3, [r4, #4]
 800f1be:	6923      	ldr	r3, [r4, #16]
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	f043 0308 	orr.w	r3, r3, #8
 800f1c8:	81a3      	strh	r3, [r4, #12]
 800f1ca:	6923      	ldr	r3, [r4, #16]
 800f1cc:	b94b      	cbnz	r3, 800f1e2 <__swsetup_r+0x7a>
 800f1ce:	89a3      	ldrh	r3, [r4, #12]
 800f1d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1d8:	d003      	beq.n	800f1e2 <__swsetup_r+0x7a>
 800f1da:	4621      	mov	r1, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f000 f882 	bl	800f2e6 <__smakebuf_r>
 800f1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e6:	f013 0201 	ands.w	r2, r3, #1
 800f1ea:	d00a      	beq.n	800f202 <__swsetup_r+0x9a>
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	60a2      	str	r2, [r4, #8]
 800f1f0:	6962      	ldr	r2, [r4, #20]
 800f1f2:	4252      	negs	r2, r2
 800f1f4:	61a2      	str	r2, [r4, #24]
 800f1f6:	6922      	ldr	r2, [r4, #16]
 800f1f8:	b942      	cbnz	r2, 800f20c <__swsetup_r+0xa4>
 800f1fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1fe:	d1c5      	bne.n	800f18c <__swsetup_r+0x24>
 800f200:	bd38      	pop	{r3, r4, r5, pc}
 800f202:	0799      	lsls	r1, r3, #30
 800f204:	bf58      	it	pl
 800f206:	6962      	ldrpl	r2, [r4, #20]
 800f208:	60a2      	str	r2, [r4, #8]
 800f20a:	e7f4      	b.n	800f1f6 <__swsetup_r+0x8e>
 800f20c:	2000      	movs	r0, #0
 800f20e:	e7f7      	b.n	800f200 <__swsetup_r+0x98>
 800f210:	2000018c 	.word	0x2000018c

0800f214 <_raise_r>:
 800f214:	291f      	cmp	r1, #31
 800f216:	b538      	push	{r3, r4, r5, lr}
 800f218:	4605      	mov	r5, r0
 800f21a:	460c      	mov	r4, r1
 800f21c:	d904      	bls.n	800f228 <_raise_r+0x14>
 800f21e:	2316      	movs	r3, #22
 800f220:	6003      	str	r3, [r0, #0]
 800f222:	f04f 30ff 	mov.w	r0, #4294967295
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f22a:	b112      	cbz	r2, 800f232 <_raise_r+0x1e>
 800f22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f230:	b94b      	cbnz	r3, 800f246 <_raise_r+0x32>
 800f232:	4628      	mov	r0, r5
 800f234:	f000 f830 	bl	800f298 <_getpid_r>
 800f238:	4622      	mov	r2, r4
 800f23a:	4601      	mov	r1, r0
 800f23c:	4628      	mov	r0, r5
 800f23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f242:	f000 b817 	b.w	800f274 <_kill_r>
 800f246:	2b01      	cmp	r3, #1
 800f248:	d00a      	beq.n	800f260 <_raise_r+0x4c>
 800f24a:	1c59      	adds	r1, r3, #1
 800f24c:	d103      	bne.n	800f256 <_raise_r+0x42>
 800f24e:	2316      	movs	r3, #22
 800f250:	6003      	str	r3, [r0, #0]
 800f252:	2001      	movs	r0, #1
 800f254:	e7e7      	b.n	800f226 <_raise_r+0x12>
 800f256:	2100      	movs	r1, #0
 800f258:	4620      	mov	r0, r4
 800f25a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f25e:	4798      	blx	r3
 800f260:	2000      	movs	r0, #0
 800f262:	e7e0      	b.n	800f226 <_raise_r+0x12>

0800f264 <raise>:
 800f264:	4b02      	ldr	r3, [pc, #8]	@ (800f270 <raise+0xc>)
 800f266:	4601      	mov	r1, r0
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	f7ff bfd3 	b.w	800f214 <_raise_r>
 800f26e:	bf00      	nop
 800f270:	2000018c 	.word	0x2000018c

0800f274 <_kill_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	2300      	movs	r3, #0
 800f278:	4d06      	ldr	r5, [pc, #24]	@ (800f294 <_kill_r+0x20>)
 800f27a:	4604      	mov	r4, r0
 800f27c:	4608      	mov	r0, r1
 800f27e:	4611      	mov	r1, r2
 800f280:	602b      	str	r3, [r5, #0]
 800f282:	f7f1 ffde 	bl	8001242 <_kill>
 800f286:	1c43      	adds	r3, r0, #1
 800f288:	d102      	bne.n	800f290 <_kill_r+0x1c>
 800f28a:	682b      	ldr	r3, [r5, #0]
 800f28c:	b103      	cbz	r3, 800f290 <_kill_r+0x1c>
 800f28e:	6023      	str	r3, [r4, #0]
 800f290:	bd38      	pop	{r3, r4, r5, pc}
 800f292:	bf00      	nop
 800f294:	20001710 	.word	0x20001710

0800f298 <_getpid_r>:
 800f298:	f7f1 bfcc 	b.w	8001234 <_getpid>

0800f29c <__swhatbuf_r>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	460c      	mov	r4, r1
 800f2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a4:	4615      	mov	r5, r2
 800f2a6:	2900      	cmp	r1, #0
 800f2a8:	461e      	mov	r6, r3
 800f2aa:	b096      	sub	sp, #88	@ 0x58
 800f2ac:	da0c      	bge.n	800f2c8 <__swhatbuf_r+0x2c>
 800f2ae:	89a3      	ldrh	r3, [r4, #12]
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f2b6:	bf14      	ite	ne
 800f2b8:	2340      	movne	r3, #64	@ 0x40
 800f2ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f2be:	2000      	movs	r0, #0
 800f2c0:	6031      	str	r1, [r6, #0]
 800f2c2:	602b      	str	r3, [r5, #0]
 800f2c4:	b016      	add	sp, #88	@ 0x58
 800f2c6:	bd70      	pop	{r4, r5, r6, pc}
 800f2c8:	466a      	mov	r2, sp
 800f2ca:	f000 f849 	bl	800f360 <_fstat_r>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	dbed      	blt.n	800f2ae <__swhatbuf_r+0x12>
 800f2d2:	9901      	ldr	r1, [sp, #4]
 800f2d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f2d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f2dc:	4259      	negs	r1, r3
 800f2de:	4159      	adcs	r1, r3
 800f2e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f2e4:	e7eb      	b.n	800f2be <__swhatbuf_r+0x22>

0800f2e6 <__smakebuf_r>:
 800f2e6:	898b      	ldrh	r3, [r1, #12]
 800f2e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2ea:	079d      	lsls	r5, r3, #30
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	d507      	bpl.n	800f302 <__smakebuf_r+0x1c>
 800f2f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f2f6:	6023      	str	r3, [r4, #0]
 800f2f8:	6123      	str	r3, [r4, #16]
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	6163      	str	r3, [r4, #20]
 800f2fe:	b003      	add	sp, #12
 800f300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f302:	466a      	mov	r2, sp
 800f304:	ab01      	add	r3, sp, #4
 800f306:	f7ff ffc9 	bl	800f29c <__swhatbuf_r>
 800f30a:	9f00      	ldr	r7, [sp, #0]
 800f30c:	4605      	mov	r5, r0
 800f30e:	4639      	mov	r1, r7
 800f310:	4630      	mov	r0, r6
 800f312:	f7fd fbdb 	bl	800cacc <_malloc_r>
 800f316:	b948      	cbnz	r0, 800f32c <__smakebuf_r+0x46>
 800f318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f31c:	059a      	lsls	r2, r3, #22
 800f31e:	d4ee      	bmi.n	800f2fe <__smakebuf_r+0x18>
 800f320:	f023 0303 	bic.w	r3, r3, #3
 800f324:	f043 0302 	orr.w	r3, r3, #2
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	e7e2      	b.n	800f2f2 <__smakebuf_r+0xc>
 800f32c:	89a3      	ldrh	r3, [r4, #12]
 800f32e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f336:	81a3      	strh	r3, [r4, #12]
 800f338:	9b01      	ldr	r3, [sp, #4]
 800f33a:	6020      	str	r0, [r4, #0]
 800f33c:	b15b      	cbz	r3, 800f356 <__smakebuf_r+0x70>
 800f33e:	4630      	mov	r0, r6
 800f340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f344:	f000 f81e 	bl	800f384 <_isatty_r>
 800f348:	b128      	cbz	r0, 800f356 <__smakebuf_r+0x70>
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	f023 0303 	bic.w	r3, r3, #3
 800f350:	f043 0301 	orr.w	r3, r3, #1
 800f354:	81a3      	strh	r3, [r4, #12]
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	431d      	orrs	r5, r3
 800f35a:	81a5      	strh	r5, [r4, #12]
 800f35c:	e7cf      	b.n	800f2fe <__smakebuf_r+0x18>
	...

0800f360 <_fstat_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	2300      	movs	r3, #0
 800f364:	4d06      	ldr	r5, [pc, #24]	@ (800f380 <_fstat_r+0x20>)
 800f366:	4604      	mov	r4, r0
 800f368:	4608      	mov	r0, r1
 800f36a:	4611      	mov	r1, r2
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	f7f1 ffc7 	bl	8001300 <_fstat>
 800f372:	1c43      	adds	r3, r0, #1
 800f374:	d102      	bne.n	800f37c <_fstat_r+0x1c>
 800f376:	682b      	ldr	r3, [r5, #0]
 800f378:	b103      	cbz	r3, 800f37c <_fstat_r+0x1c>
 800f37a:	6023      	str	r3, [r4, #0]
 800f37c:	bd38      	pop	{r3, r4, r5, pc}
 800f37e:	bf00      	nop
 800f380:	20001710 	.word	0x20001710

0800f384 <_isatty_r>:
 800f384:	b538      	push	{r3, r4, r5, lr}
 800f386:	2300      	movs	r3, #0
 800f388:	4d05      	ldr	r5, [pc, #20]	@ (800f3a0 <_isatty_r+0x1c>)
 800f38a:	4604      	mov	r4, r0
 800f38c:	4608      	mov	r0, r1
 800f38e:	602b      	str	r3, [r5, #0]
 800f390:	f7f1 ffc5 	bl	800131e <_isatty>
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	d102      	bne.n	800f39e <_isatty_r+0x1a>
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	b103      	cbz	r3, 800f39e <_isatty_r+0x1a>
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	bd38      	pop	{r3, r4, r5, pc}
 800f3a0:	20001710 	.word	0x20001710

0800f3a4 <_init>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	bf00      	nop
 800f3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3aa:	bc08      	pop	{r3}
 800f3ac:	469e      	mov	lr, r3
 800f3ae:	4770      	bx	lr

0800f3b0 <_fini>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	bf00      	nop
 800f3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3b6:	bc08      	pop	{r3}
 800f3b8:	469e      	mov	lr, r3
 800f3ba:	4770      	bx	lr
